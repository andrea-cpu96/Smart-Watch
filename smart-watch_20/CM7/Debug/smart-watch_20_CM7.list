
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800bc5c  0800bc5c  0000cc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed8  0800bed8  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee0  0800bee0  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee0  0800bee0  0000cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800bee8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f0  24000010  0800bef8  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004500  0800bef8  0000d500  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212cb  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004121  00000000  00000000  0002e309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00032430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f4  00000000  00000000  00033cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000439fc  00000000  00000000  00034fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026043  00000000  00000000  000789b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a59e0  00000000  00000000  0009e9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002443db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066cc  00000000  00000000  00244420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0024aaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bc44 	.word	0x0800bc44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800bc44 	.word	0x0800bc44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <GC9A01_set_reset+0x30>)
 800070a:	f001 fe15 	bl	8002338 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800070e:	e004      	b.n	800071a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <GC9A01_set_reset+0x30>)
 8000716:	f001 fe0f 	bl	8002338 <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58022400 	.word	0x58022400

08000728 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	@ 0x40
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800073e:	f001 fdfb 	bl	8002338 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000742:	e004      	b.n	800074e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2140      	movs	r1, #64	@ 0x40
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800074a:	f001 fdf5 	bl	8002338 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58022400 	.word	0x58022400

0800075c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2102      	movs	r1, #2
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <GC9A01_set_chip_select+0x30>)
 8000772:	f001 fde1 	bl	8002338 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000776:	e004      	b.n	8000782 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <GC9A01_set_chip_select+0x30>)
 800077e:	f001 fddb 	bl	8002338 <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58022800 	.word	0x58022800

08000790 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffc4 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ffdb 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fa72 	bl	8000c94 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffd3 	bl	800075c <GC9A01_set_chip_select>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ffad 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ffc4 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 fa5a 	bl	8000c94 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ffbb 	bl	800075c <GC9A01_set_chip_select>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffde 	bl	80007be <GC9A01_write_data>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ffa4 	bl	800075c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000814:	2005      	movs	r0, #5
 8000816:	f001 f865 	bl	80018e4 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ff6a 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f001 f85f 	bl	80018e4 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff ff64 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(120);
 800082c:	2078      	movs	r0, #120	@ 0x78
 800082e:	f001 f859 	bl	80018e4 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000832:	20ef      	movs	r0, #239	@ 0xef
 8000834:	f7ff ffac 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000838:	20eb      	movs	r0, #235	@ 0xeb
 800083a:	f7ff ffa9 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800083e:	2014      	movs	r0, #20
 8000840:	f7ff ffd5 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000844:	20fe      	movs	r0, #254	@ 0xfe
 8000846:	f7ff ffa3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800084a:	20ef      	movs	r0, #239	@ 0xef
 800084c:	f7ff ffa0 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000850:	20eb      	movs	r0, #235	@ 0xeb
 8000852:	f7ff ff9d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000856:	2014      	movs	r0, #20
 8000858:	f7ff ffc9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800085c:	2084      	movs	r0, #132	@ 0x84
 800085e:	f7ff ff97 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000862:	2040      	movs	r0, #64	@ 0x40
 8000864:	f7ff ffc3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000868:	2085      	movs	r0, #133	@ 0x85
 800086a:	f7ff ff91 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800086e:	20ff      	movs	r0, #255	@ 0xff
 8000870:	f7ff ffbd 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000874:	2086      	movs	r0, #134	@ 0x86
 8000876:	f7ff ff8b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800087a:	20ff      	movs	r0, #255	@ 0xff
 800087c:	f7ff ffb7 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000880:	2087      	movs	r0, #135	@ 0x87
 8000882:	f7ff ff85 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000886:	20ff      	movs	r0, #255	@ 0xff
 8000888:	f7ff ffb1 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800088c:	2088      	movs	r0, #136	@ 0x88
 800088e:	f7ff ff7f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000892:	200a      	movs	r0, #10
 8000894:	f7ff ffab 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000898:	2089      	movs	r0, #137	@ 0x89
 800089a:	f7ff ff79 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800089e:	2021      	movs	r0, #33	@ 0x21
 80008a0:	f7ff ffa5 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80008a4:	208a      	movs	r0, #138	@ 0x8a
 80008a6:	f7ff ff73 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff9f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 80008b0:	208b      	movs	r0, #139	@ 0x8b
 80008b2:	f7ff ff6d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 80008b6:	2080      	movs	r0, #128	@ 0x80
 80008b8:	f7ff ff99 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 80008bc:	208c      	movs	r0, #140	@ 0x8c
 80008be:	f7ff ff67 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff ff93 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 80008c8:	208d      	movs	r0, #141	@ 0x8d
 80008ca:	f7ff ff61 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff ff8d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 80008d4:	208e      	movs	r0, #142	@ 0x8e
 80008d6:	f7ff ff5b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008da:	20ff      	movs	r0, #255	@ 0xff
 80008dc:	f7ff ff87 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 80008e0:	208f      	movs	r0, #143	@ 0x8f
 80008e2:	f7ff ff55 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008e6:	20ff      	movs	r0, #255	@ 0xff
 80008e8:	f7ff ff81 	bl	80007ee <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 80008ec:	20b6      	movs	r0, #182	@ 0xb6
 80008ee:	f7ff ff4f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff7b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff ff78 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 80008fe:	2036      	movs	r0, #54	@ 0x36
 8000900:	f7ff ff46 	bl	8000790 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000904:	2048      	movs	r0, #72	@ 0x48
 8000906:	f7ff ff72 	bl	80007ee <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800090a:	203a      	movs	r0, #58	@ 0x3a
 800090c:	f7ff ff40 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000910:	2005      	movs	r0, #5
 8000912:	f7ff ff6c 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000916:	2090      	movs	r0, #144	@ 0x90
 8000918:	f7ff ff3a 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800091c:	2008      	movs	r0, #8
 800091e:	f7ff ff66 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000922:	2008      	movs	r0, #8
 8000924:	f7ff ff63 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff ff60 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff ff5d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000934:	20bd      	movs	r0, #189	@ 0xbd
 8000936:	f7ff ff2b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800093a:	2006      	movs	r0, #6
 800093c:	f7ff ff57 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000940:	20bc      	movs	r0, #188	@ 0xbc
 8000942:	f7ff ff25 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ff51 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800094c:	20ff      	movs	r0, #255	@ 0xff
 800094e:	f7ff ff1f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000952:	2060      	movs	r0, #96	@ 0x60
 8000954:	f7ff ff4b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff ff48 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800095e:	2004      	movs	r0, #4
 8000960:	f7ff ff45 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000964:	20c3      	movs	r0, #195	@ 0xc3
 8000966:	f7ff ff13 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800096a:	2013      	movs	r0, #19
 800096c:	f7ff ff3f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000970:	20c4      	movs	r0, #196	@ 0xc4
 8000972:	f7ff ff0d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000976:	2013      	movs	r0, #19
 8000978:	f7ff ff39 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800097c:	20c9      	movs	r0, #201	@ 0xc9
 800097e:	f7ff ff07 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000982:	2022      	movs	r0, #34	@ 0x22
 8000984:	f7ff ff33 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000988:	20be      	movs	r0, #190	@ 0xbe
 800098a:	f7ff ff01 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800098e:	2011      	movs	r0, #17
 8000990:	f7ff ff2d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000994:	20e1      	movs	r0, #225	@ 0xe1
 8000996:	f7ff fefb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800099a:	2010      	movs	r0, #16
 800099c:	f7ff ff27 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80009a0:	200e      	movs	r0, #14
 80009a2:	f7ff ff24 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80009a6:	20df      	movs	r0, #223	@ 0xdf
 80009a8:	f7ff fef2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80009ac:	2021      	movs	r0, #33	@ 0x21
 80009ae:	f7ff ff1e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 80009b2:	200c      	movs	r0, #12
 80009b4:	f7ff ff1b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f7ff ff18 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 80009be:	20f0      	movs	r0, #240	@ 0xf0
 80009c0:	f7ff fee6 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 80009c4:	2045      	movs	r0, #69	@ 0x45
 80009c6:	f7ff ff12 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 80009ca:	2009      	movs	r0, #9
 80009cc:	f7ff ff0f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80009d0:	2008      	movs	r0, #8
 80009d2:	f7ff ff0c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80009d6:	2008      	movs	r0, #8
 80009d8:	f7ff ff09 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 80009dc:	2026      	movs	r0, #38	@ 0x26
 80009de:	f7ff ff06 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 80009e2:	202a      	movs	r0, #42	@ 0x2a
 80009e4:	f7ff ff03 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 80009e8:	20f1      	movs	r0, #241	@ 0xf1
 80009ea:	f7ff fed1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80009ee:	2043      	movs	r0, #67	@ 0x43
 80009f0:	f7ff fefd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80009f4:	2070      	movs	r0, #112	@ 0x70
 80009f6:	f7ff fefa 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 80009fa:	2072      	movs	r0, #114	@ 0x72
 80009fc:	f7ff fef7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a00:	2036      	movs	r0, #54	@ 0x36
 8000a02:	f7ff fef4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a06:	2037      	movs	r0, #55	@ 0x37
 8000a08:	f7ff fef1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000a0c:	206f      	movs	r0, #111	@ 0x6f
 8000a0e:	f7ff feee 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000a12:	20f2      	movs	r0, #242	@ 0xf2
 8000a14:	f7ff febc 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a18:	2045      	movs	r0, #69	@ 0x45
 8000a1a:	f7ff fee8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a1e:	2009      	movs	r0, #9
 8000a20:	f7ff fee5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a24:	2008      	movs	r0, #8
 8000a26:	f7ff fee2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a2a:	2008      	movs	r0, #8
 8000a2c:	f7ff fedf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a30:	2026      	movs	r0, #38	@ 0x26
 8000a32:	f7ff fedc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a36:	202a      	movs	r0, #42	@ 0x2a
 8000a38:	f7ff fed9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000a3c:	20f3      	movs	r0, #243	@ 0xf3
 8000a3e:	f7ff fea7 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a42:	2043      	movs	r0, #67	@ 0x43
 8000a44:	f7ff fed3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a48:	2070      	movs	r0, #112	@ 0x70
 8000a4a:	f7ff fed0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a4e:	2072      	movs	r0, #114	@ 0x72
 8000a50:	f7ff fecd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a54:	2036      	movs	r0, #54	@ 0x36
 8000a56:	f7ff feca 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a5a:	2037      	movs	r0, #55	@ 0x37
 8000a5c:	f7ff fec7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000a60:	206f      	movs	r0, #111	@ 0x6f
 8000a62:	f7ff fec4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000a66:	20ed      	movs	r0, #237	@ 0xed
 8000a68:	f7ff fe92 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000a6c:	201b      	movs	r0, #27
 8000a6e:	f7ff febe 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000a72:	200b      	movs	r0, #11
 8000a74:	f7ff febb 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000a78:	20ae      	movs	r0, #174	@ 0xae
 8000a7a:	f7ff fe89 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000a7e:	2077      	movs	r0, #119	@ 0x77
 8000a80:	f7ff feb5 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000a84:	20cd      	movs	r0, #205	@ 0xcd
 8000a86:	f7ff fe83 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000a8a:	2063      	movs	r0, #99	@ 0x63
 8000a8c:	f7ff feaf 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000a90:	2070      	movs	r0, #112	@ 0x70
 8000a92:	f7ff fe7d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000a96:	2007      	movs	r0, #7
 8000a98:	f7ff fea9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000a9c:	2007      	movs	r0, #7
 8000a9e:	f7ff fea6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f7ff fea3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000aa8:	200e      	movs	r0, #14
 8000aaa:	f7ff fea0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff fe9d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000ab4:	2009      	movs	r0, #9
 8000ab6:	f7ff fe9a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f7ff fe97 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f7ff fe94 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f7ff fe91 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000acc:	20e8      	movs	r0, #232	@ 0xe8
 8000ace:	f7ff fe5f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000ad2:	2034      	movs	r0, #52	@ 0x34
 8000ad4:	f7ff fe8b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000ad8:	2062      	movs	r0, #98	@ 0x62
 8000ada:	f7ff fe59 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000ade:	2018      	movs	r0, #24
 8000ae0:	f7ff fe85 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000ae4:	200d      	movs	r0, #13
 8000ae6:	f7ff fe82 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000aea:	2071      	movs	r0, #113	@ 0x71
 8000aec:	f7ff fe7f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000af0:	20ed      	movs	r0, #237	@ 0xed
 8000af2:	f7ff fe7c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000af6:	2070      	movs	r0, #112	@ 0x70
 8000af8:	f7ff fe79 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000afc:	2070      	movs	r0, #112	@ 0x70
 8000afe:	f7ff fe76 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b02:	2018      	movs	r0, #24
 8000b04:	f7ff fe73 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000b08:	200f      	movs	r0, #15
 8000b0a:	f7ff fe70 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b0e:	2071      	movs	r0, #113	@ 0x71
 8000b10:	f7ff fe6d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000b14:	20ef      	movs	r0, #239	@ 0xef
 8000b16:	f7ff fe6a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b1a:	2070      	movs	r0, #112	@ 0x70
 8000b1c:	f7ff fe67 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b20:	2070      	movs	r0, #112	@ 0x70
 8000b22:	f7ff fe64 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000b26:	2063      	movs	r0, #99	@ 0x63
 8000b28:	f7ff fe32 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b2c:	2018      	movs	r0, #24
 8000b2e:	f7ff fe5e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000b32:	2011      	movs	r0, #17
 8000b34:	f7ff fe5b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b38:	2071      	movs	r0, #113	@ 0x71
 8000b3a:	f7ff fe58 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000b3e:	20f1      	movs	r0, #241	@ 0xf1
 8000b40:	f7ff fe55 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b44:	2070      	movs	r0, #112	@ 0x70
 8000b46:	f7ff fe52 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b4a:	2070      	movs	r0, #112	@ 0x70
 8000b4c:	f7ff fe4f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b50:	2018      	movs	r0, #24
 8000b52:	f7ff fe4c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000b56:	2013      	movs	r0, #19
 8000b58:	f7ff fe49 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b5c:	2071      	movs	r0, #113	@ 0x71
 8000b5e:	f7ff fe46 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000b62:	20f3      	movs	r0, #243	@ 0xf3
 8000b64:	f7ff fe43 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b68:	2070      	movs	r0, #112	@ 0x70
 8000b6a:	f7ff fe40 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b6e:	2070      	movs	r0, #112	@ 0x70
 8000b70:	f7ff fe3d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000b74:	2064      	movs	r0, #100	@ 0x64
 8000b76:	f7ff fe0b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000b7a:	2028      	movs	r0, #40	@ 0x28
 8000b7c:	f7ff fe37 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000b80:	2029      	movs	r0, #41	@ 0x29
 8000b82:	f7ff fe34 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000b86:	20f1      	movs	r0, #241	@ 0xf1
 8000b88:	f7ff fe31 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fe2e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000b92:	20f1      	movs	r0, #241	@ 0xf1
 8000b94:	f7ff fe2b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fe28 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f7ff fe25 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000ba4:	2066      	movs	r0, #102	@ 0x66
 8000ba6:	f7ff fdf3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000baa:	203c      	movs	r0, #60	@ 0x3c
 8000bac:	f7ff fe1f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fe1c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000bb6:	20cd      	movs	r0, #205	@ 0xcd
 8000bb8:	f7ff fe19 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000bbc:	2067      	movs	r0, #103	@ 0x67
 8000bbe:	f7ff fe16 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000bc2:	2045      	movs	r0, #69	@ 0x45
 8000bc4:	f7ff fe13 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000bc8:	2045      	movs	r0, #69	@ 0x45
 8000bca:	f7ff fe10 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000bce:	2010      	movs	r0, #16
 8000bd0:	f7ff fe0d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fe0a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fe07 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fe04 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000be6:	2067      	movs	r0, #103	@ 0x67
 8000be8:	f7ff fdd2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fdfe 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000bf2:	203c      	movs	r0, #60	@ 0x3c
 8000bf4:	f7ff fdfb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fdf8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fdf5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fdf2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fdef 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000c10:	2054      	movs	r0, #84	@ 0x54
 8000c12:	f7ff fdec 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c16:	2010      	movs	r0, #16
 8000c18:	f7ff fde9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000c1c:	2032      	movs	r0, #50	@ 0x32
 8000c1e:	f7ff fde6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000c22:	2098      	movs	r0, #152	@ 0x98
 8000c24:	f7ff fde3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000c28:	2074      	movs	r0, #116	@ 0x74
 8000c2a:	f7ff fdb1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c2e:	2010      	movs	r0, #16
 8000c30:	f7ff fddd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000c34:	2085      	movs	r0, #133	@ 0x85
 8000c36:	f7ff fdda 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000c3a:	2080      	movs	r0, #128	@ 0x80
 8000c3c:	f7ff fdd7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff fdd4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fdd1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000c4c:	204e      	movs	r0, #78	@ 0x4e
 8000c4e:	f7ff fdce 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fdcb 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000c58:	2098      	movs	r0, #152	@ 0x98
 8000c5a:	f7ff fd99 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000c5e:	203e      	movs	r0, #62	@ 0x3e
 8000c60:	f7ff fdc5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f7ff fdc2 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000c6a:	2035      	movs	r0, #53	@ 0x35
 8000c6c:	f7ff fd90 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000c70:	2021      	movs	r0, #33	@ 0x21
 8000c72:	f7ff fd8d 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000c76:	2011      	movs	r0, #17
 8000c78:	f7ff fd8a 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(120);
 8000c7c:	2078      	movs	r0, #120	@ 0x78
 8000c7e:	f000 fe31 	bl	80018e4 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000c82:	2029      	movs	r0, #41	@ 0x29
 8000c84:	f7ff fd84 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(20);
 8000c88:	2014      	movs	r0, #20
 8000c8a:	f000 fe2b 	bl	80018e4 <HAL_Delay>
    
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8000ca0:	887a      	ldrh	r2, [r7, #2]
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <GC9A01_spi_tx+0x30>)
 8000caa:	f007 fd0f 	bl	80086cc <HAL_SPI_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <GC9A01_spi_tx+0x34>)
 8000cb4:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <GC9A01_spi_tx+0x34>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
		return;

}
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2400039c 	.word	0x2400039c
 8000cc8:	2400002c 	.word	0x2400002c

08000ccc <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8000cd0:	f000 f80e 	bl	8000cf0 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 8000cd4:	f00a fdf0 	bl	800b8b8 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8000cd8:	f7ff fd97 	bl	800080a <GC9A01_init>

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <lcd_process>:


void lcd_process(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	// lcd_demo();
	//jpeg_demo();

	//mjpeg_demo();

}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <sd_init>:


// SD

static void sd_init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4905      	ldr	r1, [pc, #20]	@ (8000d0c <sd_init+0x1c>)
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <sd_init+0x20>)
 8000cfa:	f00a fcef 	bl	800b6dc <f_mount>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <sd_init+0x18>
    	sd_error_handler();
 8000d04:	f000 f806 	bl	8000d14 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0800bc68 	.word	0x0800bc68
 8000d10:	24000030 	.word	0x24000030

08000d14 <sd_error_handler>:


static void sd_error_handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

	while(1);
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <sd_error_handler+0x4>

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d26:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d28:	bf00      	nop
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <main+0xb8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <main+0x24>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dcf4      	bgt.n	8000d2a <main+0xe>
  if ( timeout < 0 )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da01      	bge.n	8000d4a <main+0x2e>
  {
  Error_Handler();
 8000d46:	f000 fad3 	bl	80012f0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 fd39 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f843 	bl	8000dd8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d52:	f000 f8c5 	bl	8000ee0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <main+0xb8>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <main+0xb8>)
 8000d5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <main+0xb8>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 faf9 	bl	800236c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f001 fb0f 	bl	80023a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d86:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d88:	bf00      	nop
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <main+0xb8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d104      	bne.n	8000da0 <main+0x84>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dcf4      	bgt.n	8000d8a <main+0x6e>
if ( timeout < 0 )
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da01      	bge.n	8000daa <main+0x8e>
{
Error_Handler();
 8000da6:	f000 faa3 	bl	80012f0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f000 f9db 	bl	8001164 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000dae:	f000 f8c7 	bl	8000f40 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8000db2:	f000 f913 	bl	8000fdc <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 8000db6:	f000 f935 	bl	8001024 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000dba:	f000 f987 	bl	80010cc <MX_USART1_UART_Init>
  MX_JPEG_Init();
 8000dbe:	f000 f8f9 	bl	8000fb4 <MX_JPEG_Init>
  MX_FATFS_Init();
 8000dc2:	f009 fe01 	bl	800a9c8 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8000dc6:	f00a f847 	bl	800ae58 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000dca:	f7ff ff7f 	bl	8000ccc <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8000dce:	f7ff ff87 	bl	8000ce0 <lcd_process>
 8000dd2:	e7fc      	b.n	8000dce <main+0xb2>
 8000dd4:	58024400 	.word	0x58024400

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b09c      	sub	sp, #112	@ 0x70
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	224c      	movs	r2, #76	@ 0x4c
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00a ff00 	bl	800bbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00a fefa 	bl	800bbec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000df8:	2004      	movs	r0, #4
 8000dfa:	f002 f8f7 	bl	8002fec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <SystemClock_Config+0x100>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e06:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <SystemClock_Config+0x100>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <SystemClock_Config+0x100>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <SystemClock_Config+0x104>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000edc <SystemClock_Config+0x104>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <SystemClock_Config+0x104>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e30:	bf00      	nop
 8000e32:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <SystemClock_Config+0x104>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e3e:	d1f8      	bne.n	8000e32 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e40:	230a      	movs	r3, #10
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e48:	2340      	movs	r3, #64	@ 0x40
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 f90e 	bl	80030a0 <HAL_RCC_OscConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e8a:	f000 fa31 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	233f      	movs	r3, #63	@ 0x3f
 8000e90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e92:	2303      	movs	r3, #3
 8000e94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e9e:	2340      	movs	r3, #64	@ 0x40
 8000ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ea2:	2340      	movs	r3, #64	@ 0x40
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eaa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eac:	2340      	movs	r3, #64	@ 0x40
 8000eae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fd4d 	bl	8003954 <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000ec0:	f000 fa16 	bl	80012f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ec4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f002 fef8 	bl	8003cc0 <HAL_RCC_MCOConfig>
}
 8000ed0:	bf00      	nop
 8000ed2:	3770      	adds	r7, #112	@ 0x70
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58000400 	.word	0x58000400
 8000edc:	58024800 	.word	0x58024800

08000ee0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0b2      	sub	sp, #200	@ 0xc8
 8000ee4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	22c8      	movs	r2, #200	@ 0xc8
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00a fe7d 	bl	800bbec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ef2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000f02:	2309      	movs	r3, #9
 8000f04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f12:	23c0      	movs	r3, #192	@ 0xc0
 8000f14:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f16:	2320      	movs	r3, #32
 8000f18:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000f1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 f909 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f34:	f000 f9dc 	bl	80012f0 <Error_Handler>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	37c8      	adds	r7, #200	@ 0xc8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f46:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb0 <MX_DMA2D_Init+0x70>)
 8000f48:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f86:	4809      	ldr	r0, [pc, #36]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f88:	f000 fdec 	bl	8001b64 <HAL_DMA2D_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f92:	f000 f9ad 	bl	80012f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f96:	2101      	movs	r1, #1
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_DMA2D_Init+0x6c>)
 8000f9a:	f000 ff57 	bl	8001e4c <HAL_DMA2D_ConfigLayer>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000fa4:	f000 f9a4 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24000260 	.word	0x24000260
 8000fb0:	52001000 	.word	0x52001000

08000fb4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_JPEG_Init+0x20>)
 8000fba:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <MX_JPEG_Init+0x24>)
 8000fbc:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_JPEG_Init+0x20>)
 8000fc0:	f001 fa02 	bl	80023c8 <HAL_JPEG_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000fca:	f000 f991 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240002c8 	.word	0x240002c8
 8000fd8:	52003000 	.word	0x52003000

08000fdc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <MX_SDMMC1_SD_Init+0x44>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8000ff4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ff8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_SDMMC1_SD_Init+0x40>)
 8001008:	f005 fdd8 	bl	8006bbc <HAL_SD_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001012:	f000 f96d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24000320 	.word	0x24000320
 8001020:	52007000 	.word	0x52007000

08001024 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <MX_SPI5_Init+0xa4>)
 800102c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001030:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001034:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800103c:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800103e:	2207      	movs	r2, #7
 8001040:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001050:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001054:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800107c:	2200      	movs	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800108c:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_SPI5_Init+0xa0>)
 80010b2:	f007 f9e7 	bl	8008484 <HAL_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 80010bc:	f000 f918 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400039c 	.word	0x2400039c
 80010c8:	40015000 	.word	0x40015000

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010d2:	4a23      	ldr	r2, [pc, #140]	@ (8001160 <MX_USART1_UART_Init+0x94>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_USART1_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_USART1_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001114:	4811      	ldr	r0, [pc, #68]	@ (800115c <MX_USART1_UART_Init+0x90>)
 8001116:	f007 fdb0 	bl	8008c7a <HAL_UART_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 f8e6 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	2100      	movs	r1, #0
 8001126:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_USART1_UART_Init+0x90>)
 8001128:	f008 fdb9 	bl	8009c9e <HAL_UARTEx_SetTxFifoThreshold>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001132:	f000 f8dd 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4808      	ldr	r0, [pc, #32]	@ (800115c <MX_USART1_UART_Init+0x90>)
 800113a:	f008 fdee 	bl	8009d1a <HAL_UARTEx_SetRxFifoThreshold>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 f8d4 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <MX_USART1_UART_Init+0x90>)
 800114a:	f008 fd6f 	bl	8009c2c <HAL_UARTEx_DisableFifoMode>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 f8cc 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	24000424 	.word	0x24000424
 8001160:	40011000 	.word	0x40011000

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	@ 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b58      	ldr	r3, [pc, #352]	@ (80012dc <MX_GPIO_Init+0x178>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a56      	ldr	r2, [pc, #344]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118a:	4b54      	ldr	r3, [pc, #336]	@ (80012dc <MX_GPIO_Init+0x178>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b50      	ldr	r3, [pc, #320]	@ (80012dc <MX_GPIO_Init+0x178>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	4a4f      	ldr	r2, [pc, #316]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a8:	4b4c      	ldr	r3, [pc, #304]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b49      	ldr	r3, [pc, #292]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	4a47      	ldr	r2, [pc, #284]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c6:	4b45      	ldr	r3, [pc, #276]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d4:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	4a40      	ldr	r2, [pc, #256]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e4:	4b3d      	ldr	r3, [pc, #244]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	4b3a      	ldr	r3, [pc, #232]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	4a38      	ldr	r2, [pc, #224]	@ (80012dc <MX_GPIO_Init+0x178>)
 80011fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001202:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001210:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001216:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001218:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001220:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <MX_GPIO_Init+0x178>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2102      	movs	r1, #2
 8001250:	4823      	ldr	r0, [pc, #140]	@ (80012e0 <MX_GPIO_Init+0x17c>)
 8001252:	f001 f871 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2161      	movs	r1, #97	@ 0x61
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <MX_GPIO_Init+0x180>)
 800125c:	f001 f86c 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	481c      	ldr	r0, [pc, #112]	@ (80012e8 <MX_GPIO_Init+0x184>)
 8001276:	f000 fe97 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800127a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4815      	ldr	r0, [pc, #84]	@ (80012ec <MX_GPIO_Init+0x188>)
 8001298:	f000 fe86 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800129c:	2302      	movs	r3, #2
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <MX_GPIO_Init+0x17c>)
 80012b4:	f000 fe78 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 80012b8:	2361      	movs	r3, #97	@ 0x61
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_GPIO_Init+0x180>)
 80012d0:	f000 fe6a 	bl	8001fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	@ 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58022800 	.word	0x58022800
 80012e4:	58022400 	.word	0x58022400
 80012e8:	58022000 	.word	0x58022000
 80012ec:	58020000 	.word	0x58020000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_MspInit+0x30>)
 8001304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001308:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_MspInit+0x30>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_MspInit+0x30>)
 8001314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	58024400 	.word	0x58024400

08001330 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_DMA2D_MspInit+0x48>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d116      	bne.n	8001370 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_DMA2D_MspInit+0x4c>)
 8001344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <HAL_DMA2D_MspInit+0x4c>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_DMA2D_MspInit+0x4c>)
 8001354:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	205a      	movs	r0, #90	@ 0x5a
 8001366:	f000 fbc8 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800136a:	205a      	movs	r0, #90	@ 0x5a
 800136c:	f000 fbdf 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	52001000 	.word	0x52001000
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <HAL_JPEG_MspInit+0x3c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10e      	bne.n	80013b0 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_JPEG_MspInit+0x40>)
 8001394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001398:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <HAL_JPEG_MspInit+0x40>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <HAL_JPEG_MspInit+0x40>)
 80013a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	52003000 	.word	0x52003000
 80013c0:	58024400 	.word	0x58024400

080013c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0be      	sub	sp, #248	@ 0xf8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	22c8      	movs	r2, #200	@ 0xc8
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00a fc01 	bl	800bbec <memset>
  if(hsd->Instance==SDMMC1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a3c      	ldr	r2, [pc, #240]	@ (80014e0 <HAL_SD_MspInit+0x11c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d171      	bne.n	80014d8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80013f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001400:	2300      	movs	r3, #0
 8001402:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fe99 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001414:	f7ff ff6c 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001418:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 800141a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800141e:	4a31      	ldr	r2, [pc, #196]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001428:	4b2e      	ldr	r3, [pc, #184]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 800142a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800142e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143c:	4a29      	ldr	r2, [pc, #164]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001446:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	4a22      	ldr	r2, [pc, #136]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <HAL_SD_MspInit+0x120>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001472:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800148c:	230c      	movs	r3, #12
 800148e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <HAL_SD_MspInit+0x124>)
 800149a:	f000 fd85 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800149e:	2304      	movs	r3, #4
 80014a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014b6:	230c      	movs	r3, #12
 80014b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014c0:	4619      	mov	r1, r3
 80014c2:	480a      	ldr	r0, [pc, #40]	@ (80014ec <HAL_SD_MspInit+0x128>)
 80014c4:	f000 fd70 	bl	8001fa8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2031      	movs	r0, #49	@ 0x31
 80014ce:	f000 fb14 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80014d2:	2031      	movs	r0, #49	@ 0x31
 80014d4:	f000 fb2b 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80014d8:	bf00      	nop
 80014da:	37f8      	adds	r7, #248	@ 0xf8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	52007000 	.word	0x52007000
 80014e4:	58024400 	.word	0x58024400
 80014e8:	58020800 	.word	0x58020800
 80014ec:	58020c00 	.word	0x58020c00

080014f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0be      	sub	sp, #248	@ 0xf8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	22c8      	movs	r2, #200	@ 0xc8
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f00a fb6b 	bl	800bbec <memset>
  if(hspi->Instance==SPI5)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <HAL_SPI_MspInit+0x110>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d16a      	bne.n	80015f6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fe02 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001542:	f7ff fed5 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 8001548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800154c:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 800154e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 8001558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800155c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001564:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 800156c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_SPI_MspInit+0x114>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015b8:	2305      	movs	r3, #5
 80015ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <HAL_SPI_MspInit+0x118>)
 80015c6:	f000 fcef 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80015ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015e4:	2305      	movs	r3, #5
 80015e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4806      	ldr	r0, [pc, #24]	@ (800160c <HAL_SPI_MspInit+0x11c>)
 80015f2:	f000 fcd9 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	37f8      	adds	r7, #248	@ 0xf8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40015000 	.word	0x40015000
 8001604:	58024400 	.word	0x58024400
 8001608:	58022800 	.word	0x58022800
 800160c:	58022400 	.word	0x58022400

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0bc      	sub	sp, #240	@ 0xf0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	22c8      	movs	r2, #200	@ 0xc8
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00a fadb 	bl	800bbec <memset>
  if(huart->Instance==USART1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a27      	ldr	r2, [pc, #156]	@ (80016d8 <HAL_UART_MspInit+0xc8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d146      	bne.n	80016ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001640:	f04f 0201 	mov.w	r2, #1
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fd72 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001662:	f7ff fe45 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_UART_MspInit+0xcc>)
 8001668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800166c:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <HAL_UART_MspInit+0xcc>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_UART_MspInit+0xcc>)
 8001678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_UART_MspInit+0xcc>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <HAL_UART_MspInit+0xcc>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_UART_MspInit+0xcc>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80016a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <HAL_UART_MspInit+0xd0>)
 80016ca:	f000 fc6d 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016ce:	bf00      	nop
 80016d0:	37f0      	adds	r7, #240	@ 0xf0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40011000 	.word	0x40011000
 80016dc:	58024400 	.word	0x58024400
 80016e0:	58020000 	.word	0x58020000

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <NMI_Handler+0x4>

080016ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <MemManage_Handler+0x4>

080016fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <UsageFault_Handler+0x4>

0800170c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173a:	f000 f8b3 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <SDMMC1_IRQHandler+0x10>)
 800174a:	f005 fca7 	bl	800709c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000320 	.word	0x24000320

08001758 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <DMA2D_IRQHandler+0x10>)
 800175e:	f000 fa65 	bl	8001c2c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24000260 	.word	0x24000260

0800176c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001770:	f7fe ff2a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001776:	490d      	ldr	r1, [pc, #52]	@ (80017ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800178c:	4c0a      	ldr	r4, [pc, #40]	@ (80017b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f00a fa2f 	bl	800bbfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179e:	f7ff fabd 	bl	8000d1c <main>
  bx  lr
 80017a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017ac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80017b0:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 80017b4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80017b8:	24004500 	.word	0x24004500

080017bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC3_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c6:	2003      	movs	r0, #3
 80017c8:	f000 f98c 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017cc:	f002 fae2 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_Init+0x68>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	4913      	ldr	r1, [pc, #76]	@ (800182c <HAL_Init+0x6c>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_Init+0x68>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <HAL_Init+0x6c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_Init+0x70>)
 8001802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001804:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_Init+0x74>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f814 	bl	8001838 <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e002      	b.n	8001820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181a:	f7ff fd6f 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	58024400 	.word	0x58024400
 800182c:	0800bc6c 	.word	0x0800bc6c
 8001830:	24000004 	.word	0x24000004
 8001834:	24000000 	.word	0x24000000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_InitTick+0x60>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e021      	b.n	8001890 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_InitTick+0x64>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_InitTick+0x60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f971 	bl	8001b4a <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f93b 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_InitTick+0x68>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2400000c 	.word	0x2400000c
 800189c:	24000000 	.word	0x24000000
 80018a0:	24000008 	.word	0x24000008

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2400000c 	.word	0x2400000c
 80018c8:	240004b8 	.word	0x240004b8

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	240004b8 	.word	0x240004b8

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2400000c 	.word	0x2400000c

0800192c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GetREVID+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0c1b      	lsrs	r3, r3, #16
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	5c001000 	.word	0x5c001000

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	4313      	orrs	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	05fa0000 	.word	0x05fa0000

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	@ (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	@ (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	@ (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	@ 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	@ 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff40 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff33 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa4 	bl	8001aa0 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e04f      	b.n	8001c16 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fbd0 	bl	8001330 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_DMA2D_Init+0xbc>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6851      	ldr	r1, [r2, #4]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	69d2      	ldr	r2, [r2, #28]
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <HAL_DMA2D_Init+0xc0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6891      	ldr	r1, [r2, #8]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6992      	ldr	r2, [r2, #24]
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd6:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_DMA2D_Init+0xc4>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68d1      	ldr	r1, [r2, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	051a      	lsls	r2, r3, #20
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	055b      	lsls	r3, r3, #21
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	fff8ffbf 	.word	0xfff8ffbf
 8001c24:	fffffef8 	.word	0xfffffef8
 8001c28:	ffff0000 	.word	0xffff0000

08001c2c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d026      	beq.n	8001c9c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d021      	beq.n	8001c9c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c66:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d026      	beq.n	8001cf4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d021      	beq.n	8001cf4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d026      	beq.n	8001d4c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d021      	beq.n	8001d4c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d013      	beq.n	8001d7e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2204      	movs	r2, #4
 8001d76:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f853 	bl	8001e24 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d024      	beq.n	8001dd2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01f      	beq.n	8001dd2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001da0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2202      	movs	r2, #2
 8001da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01f      	beq.n	8001e1c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01a      	beq.n	8001e1c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001df4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f80e 	bl	8001e38 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_DMA2D_ConfigLayer+0x24>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e092      	b.n	8001f96 <HAL_DMA2D_ConfigLayer+0x14a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3328      	adds	r3, #40	@ 0x28
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001ea4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa4 <HAL_DMA2D_ConfigLayer+0x158>)
 8001eb2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b0a      	cmp	r3, #10
 8001eba:	d003      	beq.n	8001ec4 <HAL_DMA2D_ConfigLayer+0x78>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e005      	b.n	8001ee0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d120      	bne.n	8001f28 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	ea02 0103 	and.w	r1, r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b0a      	cmp	r3, #10
 8001f0e:	d003      	beq.n	8001f18 <HAL_DMA2D_ConfigLayer+0xcc>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d135      	bne.n	8001f84 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f24:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f26:	e02d      	b.n	8001f84 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b0b      	cmp	r3, #11
 8001f2e:	d109      	bne.n	8001f44 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	049b      	lsls	r3, r3, #18
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8001f42:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	ea02 0103 	and.w	r1, r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b0a      	cmp	r3, #10
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA2D_ConfigLayer+0x12a>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d106      	bne.n	8001f84 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f82:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	ff33000f 	.word	0xff33000f

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fb6:	4b89      	ldr	r3, [pc, #548]	@ (80021dc <HAL_GPIO_Init+0x234>)
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fba:	e194      	b.n	80022e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8186 	beq.w	80022e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x44>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80e0 	beq.w	80022e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002126:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a29      	ldr	r2, [pc, #164]	@ (80021e4 <HAL_GPIO_Init+0x23c>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <HAL_GPIO_Init+0x240>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d052      	beq.n	8002210 <HAL_GPIO_Init+0x268>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_GPIO_Init+0x244>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_GPIO_Init+0x22e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_GPIO_Init+0x248>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x22a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_GPIO_Init+0x24c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x226>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_GPIO_Init+0x250>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x222>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_GPIO_Init+0x254>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x21e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_GPIO_Init+0x258>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_GPIO_Init+0x25c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_GPIO_Init+0x260>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_GPIO_Init+0x264>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x20e>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e02d      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e02b      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e029      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e027      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e025      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e023      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e021      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e01f      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e01d      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01b      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021da:	bf00      	nop
 80021dc:	58000080 	.word	0x58000080
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58000400 	.word	0x58000400
 80021e8:	58020000 	.word	0x58020000
 80021ec:	58020400 	.word	0x58020400
 80021f0:	58020800 	.word	0x58020800
 80021f4:	58020c00 	.word	0x58020c00
 80021f8:	58021000 	.word	0x58021000
 80021fc:	58021400 	.word	0x58021400
 8002200:	58021800 	.word	0x58021800
 8002204:	58021c00 	.word	0x58021c00
 8002208:	58022000 	.word	0x58022000
 800220c:	58022400 	.word	0x58022400
 8002210:	2300      	movs	r3, #0
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4093      	lsls	r3, r2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002222:	4938      	ldr	r1, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x35c>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f ae63 	bne.w	8001fbc <HAL_GPIO_Init+0x14>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3724      	adds	r7, #36	@ 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	58000400 	.word	0x58000400

08002308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002374:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <HAL_HSEM_FastTake+0x2c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3320      	adds	r3, #32
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_HSEM_FastTake+0x30>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	58026400 	.word	0x58026400
 800239c:	80000300 	.word	0x80000300

080023a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80023aa:	4906      	ldr	r1, [pc, #24]	@ (80023c4 <HAL_HSEM_Release+0x24>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	58026400 	.word	0x58026400

080023c8 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e070      	b.n	80024bc <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe ffc6 	bl	8001380 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800244a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800245a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a19      	ldr	r2, [pc, #100]	@ (80024c4 <HAL_JPEG_Init+0xfc>)
 8002460:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_JPEG_Init+0x100>)
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fb37 	bl	8002ae8 <JPEG_Set_HuffEnc_Mem>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e018      	b.n	80024bc <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002498:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	0800be1c 	.word	0x0800be1c
 80024c8:	0800be5c 	.word	0x0800be5c

080024cc <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b08b      	sub	sp, #44	@ 0x2c
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e020      	b.n	8002526 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	4413      	add	r3, r2
 80024f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024f8:	d90f      	bls.n	800251a <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e055      	b.n	80025aa <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	440b      	add	r3, r1
 8002508:	3201      	adds	r2, #1
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
      p++;
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	3301      	adds	r3, #1
 8002512:	623b      	str	r3, [r7, #32]
      i--;
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	3b01      	subs	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ee      	bne.n	80024fe <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3301      	adds	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d9db      	bls.n	80024e4 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	4413      	add	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	617b      	str	r3, [r7, #20]
  p = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800254a:	e027      	b.n	800259c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]
      p++;
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	3301      	adds	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
      code++;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	3301      	adds	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4293      	cmp	r3, r2
 8002572:	d0eb      	beq.n	800254c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b1f      	cmp	r3, #31
 8002578:	d901      	bls.n	800257e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e015      	b.n	80025aa <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	429a      	cmp	r2, r3
 800258a:	d301      	bcc.n	8002590 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00c      	b.n	80025aa <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
    si++;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1dd      	bne.n	8002564 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	372c      	adds	r7, #44	@ 0x2c
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80025bc:	af00      	add	r7, sp, #0
 80025be:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80025c2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80025c6:	6018      	str	r0, [r3, #0]
 80025c8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80025cc:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80025d0:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80025d2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80025d6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	f107 020c 	add.w	r2, r7, #12
 80025e4:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80025e8:	f7ff ff70 	bl	80024cc <JPEG_Bits_To_SizeCodes>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80025f2:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80025fa:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80025fe:	e075      	b.n	80026ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8002606:	e067      	b.n	80026d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002608:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800260c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002616:	4413      	add	r3, r2
 8002618:	3310      	adds	r3, #16
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002620:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002628:	23a0      	movs	r3, #160	@ 0xa0
 800262a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800262e:	e021      	b.n	8002674 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002630:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002634:	2bf0      	cmp	r3, #240	@ 0xf0
 8002636:	d103      	bne.n	8002640 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8002638:	23a1      	movs	r3, #161	@ 0xa1
 800263a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800263e:	e019      	b.n	8002674 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002640:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800264e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800265a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	461a      	mov	r2, r3
 8002668:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800266c:	4413      	add	r3, r2
 800266e:	3b01      	subs	r3, #1
 8002670:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002674:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002678:	2ba1      	cmp	r3, #161	@ 0xa1
 800267a:	d901      	bls.n	8002680 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800267c:	2301      	movs	r3, #1
 800267e:	e035      	b.n	80026ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002680:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002684:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002688:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800268c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002690:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002694:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800269e:	3328      	adds	r3, #40	@ 0x28
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80026a6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80026aa:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80026ae:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b2d9      	uxtb	r1, r3
 80026ba:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80026be:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80026c8:	4413      	add	r3, r2
 80026ca:	460a      	mov	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]
      k++;
 80026ce:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80026d2:	3301      	adds	r3, #1
 80026d4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80026d8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80026dc:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d38e      	bcc.n	8002608 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002702:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002706:	6018      	str	r0, [r3, #0]
 8002708:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800270c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002710:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002712:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002716:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002720:	f107 0208 	add.w	r2, r7, #8
 8002724:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8002728:	f7ff fed0 	bl	80024cc <JPEG_Bits_To_SizeCodes>
 800272c:	4603      	mov	r3, r0
 800272e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002732:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800273a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800273e:	e048      	b.n	80027d2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8002746:	e03d      	b.n	80027c4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002748:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800274c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002756:	4413      	add	r3, r2
 8002758:	3310      	adds	r3, #16
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002760:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002764:	2b0b      	cmp	r3, #11
 8002766:	d901      	bls.n	800276c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800276c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002770:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002774:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800277c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002780:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800278a:	3302      	adds	r3, #2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002792:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002796:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800279a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b2d9      	uxtb	r1, r3
 80027a6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80027aa:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80027b4:	4413      	add	r3, r2
 80027b6:	460a      	mov	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
      k++;
 80027ba:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80027be:	3301      	adds	r3, #1
 80027c0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80027c4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80027c8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d3bb      	bcc.n	8002748 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b09a      	sub	sp, #104	@ 0x68
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d106      	bne.n	8002804 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80027fe:	3318      	adds	r3, #24
 8002800:	663b      	str	r3, [r7, #96]	@ 0x60
 8002802:	e00f      	b.n	8002824 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800281a:	3318      	adds	r3, #24
 800281c:	663b      	str	r3, [r7, #96]	@ 0x60
 800281e:	e001      	b.n	8002824 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e059      	b.n	80028d8 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d055      	beq.n	80028d6 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7ff ff60 	bl	80026f6 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002836:	4603      	mov	r3, r0
 8002838:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800283c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002848:	e046      	b.n	80028d8 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800284a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800284c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800284e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002850:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002854:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002858:	3304      	adds	r3, #4
 800285a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800285c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800285e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002862:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002864:	230c      	movs	r3, #12
 8002866:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8002868:	e032      	b.n	80028d0 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800286a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800286c:	3b01      	subs	r3, #1
 800286e:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002872:	3b04      	subs	r3, #4
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002876:	f107 0214 	add.w	r2, r7, #20
 800287a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800287c:	4413      	add	r3, r2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002888:	3302      	adds	r3, #2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	3368      	adds	r3, #104	@ 0x68
 800288e:	443b      	add	r3, r7
 8002890:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800289a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800289c:	3b01      	subs	r3, #1
 800289e:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80028a0:	f107 0214 	add.w	r2, r7, #20
 80028a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80028b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028b2:	3302      	adds	r3, #2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	3368      	adds	r3, #104	@ 0x68
 80028b8:	443b      	add	r3, r7
 80028ba:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80028c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ca:	431a      	orrs	r2, r3
 80028cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ce:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80028d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d8c9      	bhi.n	800286a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3768      	adds	r7, #104	@ 0x68
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80028ec:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80028f0:	6018      	str	r0, [r3, #0]
 80028f2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80028f6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80028fa:	6019      	str	r1, [r3, #0]
 80028fc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002900:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002904:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002906:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800290a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002916:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800291a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d10c      	bne.n	800293e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002924:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002928:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002934:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002938:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800293c:	e01d      	b.n	800297a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800293e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002942:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800294e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002952:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d10c      	bne.n	8002976 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800295c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002960:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800296c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002970:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002974:	e001      	b.n	800297a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0a8      	b.n	8002acc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800297a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800297e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a0 	beq.w	8002aca <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800298a:	f107 0214 	add.w	r2, r7, #20
 800298e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002992:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002996:	4611      	mov	r1, r2
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f7ff fe0c 	bl	80025b6 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 80029a4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80029ac:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80029b0:	e08c      	b.n	8002acc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80029b2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80029b6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80029c0:	e00e      	b.n	80029e0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80029c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80029c6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80029ca:	601a      	str	r2, [r3, #0]
      addressDef++;
 80029cc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80029d0:	3304      	adds	r3, #4
 80029d2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80029d6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80029da:	3301      	adds	r3, #1
 80029dc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80029e0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d9ec      	bls.n	80029c2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80029e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80029ec:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80029ee:	601a      	str	r2, [r3, #0]
    addressDef++;
 80029f0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80029f4:	3304      	adds	r3, #4
 80029f6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80029fa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80029fe:	4a37      	ldr	r2, [pc, #220]	@ (8002adc <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002a00:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002a02:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002a06:	3304      	adds	r3, #4
 8002a08:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002a0c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002a10:	4a33      	ldr	r2, [pc, #204]	@ (8002ae0 <JPEG_Set_HuffAC_Mem+0x200>)
 8002a12:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002a14:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002a18:	3304      	adds	r3, #4
 8002a1a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8002a1e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002a22:	4a30      	ldr	r2, [pc, #192]	@ (8002ae4 <JPEG_Set_HuffAC_Mem+0x204>)
 8002a24:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002a26:	23a2      	movs	r3, #162	@ 0xa2
 8002a28:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8002a2c:	e049      	b.n	8002ac2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8002a2e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8002a38:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002a3c:	3b04      	subs	r3, #4
 8002a3e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002a42:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002a46:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002a4a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002a58:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002a5c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002a60:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002a64:	3328      	adds	r3, #40	@ 0x28
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002a74:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002a7e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002a82:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002a86:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002a94:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002a98:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002a9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002aa0:	3328      	adds	r3, #40	@ 0x28
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002ab0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002ab4:	041a      	lsls	r2, r3, #16
 8002ab6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002aba:	431a      	orrs	r2, r3
 8002abc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002ac0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002ac2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d8b1      	bhi.n	8002a2e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	0fd10fd0 	.word	0x0fd10fd0
 8002adc:	0fd30fd2 	.word	0x0fd30fd2
 8002ae0:	0fd50fd4 	.word	0x0fd50fd4
 8002ae4:	0fd70fd6 	.word	0x0fd70fd6

08002ae8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f84d 	bl	8002b90 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002afe:	461a      	mov	r2, r3
 8002b00:	491f      	ldr	r1, [pc, #124]	@ (8002b80 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff feec 	bl	80028e0 <JPEG_Set_HuffAC_Mem>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	e030      	b.n	8002b78 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4918      	ldr	r1, [pc, #96]	@ (8002b84 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fedc 	bl	80028e0 <JPEG_Set_HuffAC_Mem>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	e020      	b.n	8002b78 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4911      	ldr	r1, [pc, #68]	@ (8002b88 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff fe4a 	bl	80027dc <JPEG_Set_HuffDC_Mem>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	e010      	b.n	8002b78 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8002b5e:	461a      	mov	r2, r3
 8002b60:	490a      	ldr	r1, [pc, #40]	@ (8002b8c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fe3a 	bl	80027dc <JPEG_Set_HuffDC_Mem>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	e000      	b.n	8002b78 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	0800bcb4 	.word	0x0800bcb4
 8002b84:	0800bd68 	.word	0x0800bd68
 8002b88:	0800bc7c 	.word	0x0800bc7c
 8002b8c:	0800bc98 	.word	0x0800bc98

08002b90 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b08b      	sub	sp, #44	@ 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002b98:	4b80      	ldr	r3, [pc, #512]	@ (8002d9c <JPEG_Set_Huff_DHTMem+0x20c>)
 8002b9a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002b9c:	4b80      	ldr	r3, [pc, #512]	@ (8002da0 <JPEG_Set_Huff_DHTMem+0x210>)
 8002b9e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002ba0:	4b80      	ldr	r3, [pc, #512]	@ (8002da4 <JPEG_Set_Huff_DHTMem+0x214>)
 8002ba2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002ba4:	4b80      	ldr	r3, [pc, #512]	@ (8002da8 <JPEG_Set_Huff_DHTMem+0x218>)
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	623b      	str	r3, [r7, #32]
  index = 16;
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002bb8:	e01d      	b.n	8002bf6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	5cd3      	ldrb	r3, [r2, r3]
 8002bc2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	3b02      	subs	r3, #2
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002bce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	3b03      	subs	r3, #3
 8002bd4:	6979      	ldr	r1, [r7, #20]
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002bda:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bde:	3a04      	subs	r2, #4
 8002be0:	6979      	ldr	r1, [r7, #20]
 8002be2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002be4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	601a      	str	r2, [r3, #0]
    address--;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	3b04      	subs	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d8de      	bhi.n	8002bba <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002c04:	3318      	adds	r3, #24
 8002c06:	623b      	str	r3, [r7, #32]
  index = 12;
 8002c08:	230c      	movs	r3, #12
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c0c:	e021      	b.n	8002c52 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	3b01      	subs	r3, #1
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4413      	add	r3, r2
 8002c16:	7c1b      	ldrb	r3, [r3, #16]
 8002c18:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	3b02      	subs	r3, #2
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	440b      	add	r3, r1
 8002c22:	7c1b      	ldrb	r3, [r3, #16]
 8002c24:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002c26:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	3b03      	subs	r3, #3
 8002c2c:	6979      	ldr	r1, [r7, #20]
 8002c2e:	440b      	add	r3, r1
 8002c30:	7c1b      	ldrb	r3, [r3, #16]
 8002c32:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002c34:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	3a04      	subs	r2, #4
 8002c3a:	6979      	ldr	r1, [r7, #20]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002c40:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	601a      	str	r2, [r3, #0]
    address--;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	3b04      	subs	r3, #4
 8002c4a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d8da      	bhi.n	8002c0e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002c60:	3328      	adds	r3, #40	@ 0x28
 8002c62:	623b      	str	r3, [r7, #32]
  index = 16;
 8002c64:	2310      	movs	r3, #16
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c68:	e01d      	b.n	8002ca6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	3b02      	subs	r3, #2
 8002c78:	69f9      	ldr	r1, [r7, #28]
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002c7e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	3b03      	subs	r3, #3
 8002c84:	69f9      	ldr	r1, [r7, #28]
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002c8a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8e:	3a04      	subs	r2, #4
 8002c90:	69f9      	ldr	r1, [r7, #28]
 8002c92:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002c94:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	601a      	str	r2, [r3, #0]
    address--;
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	3b04      	subs	r3, #4
 8002c9e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d8de      	bhi.n	8002c6a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002cb4:	33cc      	adds	r3, #204	@ 0xcc
 8002cb6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <JPEG_Set_Huff_DHTMem+0x21c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	3b04      	subs	r3, #4
 8002ce2:	623b      	str	r3, [r7, #32]
  index = 160;
 8002ce4:	23a0      	movs	r3, #160	@ 0xa0
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ce8:	e021      	b.n	8002d2e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	3b01      	subs	r3, #1
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7c1b      	ldrb	r3, [r3, #16]
 8002cf4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	3b02      	subs	r3, #2
 8002cfa:	69f9      	ldr	r1, [r7, #28]
 8002cfc:	440b      	add	r3, r1
 8002cfe:	7c1b      	ldrb	r3, [r3, #16]
 8002d00:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002d02:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	3b03      	subs	r3, #3
 8002d08:	69f9      	ldr	r1, [r7, #28]
 8002d0a:	440b      	add	r3, r1
 8002d0c:	7c1b      	ldrb	r3, [r3, #16]
 8002d0e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002d10:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	3a04      	subs	r2, #4
 8002d16:	69f9      	ldr	r1, [r7, #28]
 8002d18:	440a      	add	r2, r1
 8002d1a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002d1c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	601a      	str	r2, [r3, #0]
    address--;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	3b04      	subs	r3, #4
 8002d26:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d8da      	bhi.n	8002cea <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002d3c:	33cc      	adds	r3, #204	@ 0xcc
 8002d3e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	061a      	lsls	r2, r3, #24
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002d6a:	33dc      	adds	r3, #220	@ 0xdc
 8002d6c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <JPEG_Set_Huff_DHTMem+0x21c>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	7bdb      	ldrb	r3, [r3, #15]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	7b92      	ldrb	r2, [r2, #14]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	3b04      	subs	r3, #4
 8002d94:	623b      	str	r3, [r7, #32]
  index = 12;
 8002d96:	230c      	movs	r3, #12
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002d9a:	e027      	b.n	8002dec <JPEG_Set_Huff_DHTMem+0x25c>
 8002d9c:	0800bcb4 	.word	0x0800bcb4
 8002da0:	0800bd68 	.word	0x0800bd68
 8002da4:	0800bc7c 	.word	0x0800bc7c
 8002da8:	0800bc98 	.word	0x0800bc98
 8002dac:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002dba:	6939      	ldr	r1, [r7, #16]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	440b      	add	r3, r1
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002dc4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	6939      	ldr	r1, [r7, #16]
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002dd0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd4:	3a02      	subs	r2, #2
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002dda:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	601a      	str	r2, [r3, #0]
    address--;
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	3b04      	subs	r3, #4
 8002de4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	3b04      	subs	r3, #4
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d8de      	bhi.n	8002db0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002dfa:	33dc      	adds	r3, #220	@ 0xdc
 8002dfc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	7c5b      	ldrb	r3, [r3, #17]
 8002e0a:	061a      	lsls	r2, r3, #24
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	7c1b      	ldrb	r3, [r3, #16]
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002e28:	33e8      	adds	r3, #232	@ 0xe8
 8002e2a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe8 <JPEG_Set_Huff_DHTMem+0x458>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	7edb      	ldrb	r3, [r3, #27]
 8002e3a:	021a      	lsls	r2, r3, #8
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	7e92      	ldrb	r2, [r2, #26]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	3b04      	subs	r3, #4
 8002e52:	623b      	str	r3, [r7, #32]
  index = 8;
 8002e54:	2308      	movs	r3, #8
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002e58:	e021      	b.n	8002e9e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	7c1b      	ldrb	r3, [r3, #16]
 8002e64:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002e66:	6939      	ldr	r1, [r7, #16]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002e72:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	3b01      	subs	r3, #1
 8002e78:	6939      	ldr	r1, [r7, #16]
 8002e7a:	440b      	add	r3, r1
 8002e7c:	7c1b      	ldrb	r3, [r3, #16]
 8002e7e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002e80:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e84:	3a02      	subs	r2, #2
 8002e86:	6939      	ldr	r1, [r7, #16]
 8002e88:	440a      	add	r2, r1
 8002e8a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002e8c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	601a      	str	r2, [r3, #0]
    address--;
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	3b04      	subs	r3, #4
 8002e96:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d8da      	bhi.n	8002e5a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002eac:	33e8      	adds	r3, #232	@ 0xe8
 8002eae:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	785b      	ldrb	r3, [r3, #1]
 8002ebc:	061a      	lsls	r2, r3, #24
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002eda:	33f8      	adds	r3, #248	@ 0xf8
 8002edc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <JPEG_Set_Huff_DHTMem+0x458>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	7bdb      	ldrb	r3, [r3, #15]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	7b92      	ldrb	r2, [r2, #14]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	3b04      	subs	r3, #4
 8002f04:	623b      	str	r3, [r7, #32]
  index = 12;
 8002f06:	230c      	movs	r3, #12
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002f0a:	e01d      	b.n	8002f48 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	3301      	adds	r3, #1
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002f16:	69b9      	ldr	r1, [r7, #24]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	440b      	add	r3, r1
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002f20:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	3b01      	subs	r3, #1
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002f2c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	3a02      	subs	r2, #2
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002f36:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	601a      	str	r2, [r3, #0]
    address--;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	3b04      	subs	r3, #4
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d8de      	bhi.n	8002f0c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002f56:	33f8      	adds	r3, #248	@ 0xf8
 8002f58:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	7c5b      	ldrb	r3, [r3, #17]
 8002f66:	061a      	lsls	r2, r3, #24
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	7c1b      	ldrb	r3, [r3, #16]
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002f84:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002f88:	623b      	str	r3, [r7, #32]
  index = 160;
 8002f8a:	23a0      	movs	r3, #160	@ 0xa0
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002f8e:	e021      	b.n	8002fd4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	3301      	adds	r3, #1
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	7c1b      	ldrb	r3, [r3, #16]
 8002f9a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002fa8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	3b01      	subs	r3, #1
 8002fae:	69b9      	ldr	r1, [r7, #24]
 8002fb0:	440b      	add	r3, r1
 8002fb2:	7c1b      	ldrb	r3, [r3, #16]
 8002fb4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002fb6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fba:	3a02      	subs	r2, #2
 8002fbc:	69b9      	ldr	r1, [r7, #24]
 8002fbe:	440a      	add	r2, r1
 8002fc0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002fc2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	601a      	str	r2, [r3, #0]
    address--;
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	3b04      	subs	r3, #4
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d8da      	bhi.n	8002f90 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	372c      	adds	r7, #44	@ 0x2c
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	ffff0000 	.word	0xffff0000

08002fec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ff4:	4b29      	ldr	r3, [pc, #164]	@ (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d00a      	beq.n	8003016 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003000:	4b26      	ldr	r3, [pc, #152]	@ (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e040      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e03e      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003016:	4b21      	ldr	r3, [pc, #132]	@ (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800301e:	491f      	ldr	r1, [pc, #124]	@ (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003026:	f7fe fc51 	bl	80018cc <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800302c:	e009      	b.n	8003042 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800302e:	f7fe fc4d 	bl	80018cc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800303c:	d901      	bls.n	8003042 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e028      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003042:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800304a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800304e:	d1ee      	bne.n	800302e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b1e      	cmp	r3, #30
 8003054:	d008      	beq.n	8003068 <HAL_PWREx_ConfigSupply+0x7c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b2e      	cmp	r3, #46	@ 0x2e
 800305a:	d005      	beq.n	8003068 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b1d      	cmp	r3, #29
 8003060:	d002      	beq.n	8003068 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b2d      	cmp	r3, #45	@ 0x2d
 8003066:	d114      	bne.n	8003092 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003068:	f7fe fc30 	bl	80018cc <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800306e:	e009      	b.n	8003084 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003070:	f7fe fc2c 	bl	80018cc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800307e:	d901      	bls.n	8003084 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003090:	d1ee      	bne.n	8003070 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024800 	.word	0x58024800

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	@ 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f000 bc48 	b.w	8003944 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8088 	beq.w	80031d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c2:	4b99      	ldr	r3, [pc, #612]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030cc:	4b96      	ldr	r3, [pc, #600]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d007      	beq.n	80030e8 <HAL_RCC_OscConfig+0x48>
 80030d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030da:	2b18      	cmp	r3, #24
 80030dc:	d111      	bne.n	8003102 <HAL_RCC_OscConfig+0x62>
 80030de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d10c      	bne.n	8003102 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d06d      	beq.n	80031d0 <HAL_RCC_OscConfig+0x130>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d169      	bne.n	80031d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f000 bc21 	b.w	8003944 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x7a>
 800310c:	4b86      	ldr	r3, [pc, #536]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a85      	ldr	r2, [pc, #532]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	e02e      	b.n	8003178 <HAL_RCC_OscConfig+0xd8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x9c>
 8003122:	4b81      	ldr	r3, [pc, #516]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a80      	ldr	r2, [pc, #512]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b7e      	ldr	r3, [pc, #504]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7d      	ldr	r2, [pc, #500]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003134:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e01d      	b.n	8003178 <HAL_RCC_OscConfig+0xd8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0xc0>
 8003146:	4b78      	ldr	r3, [pc, #480]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a77      	ldr	r2, [pc, #476]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b75      	ldr	r3, [pc, #468]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a74      	ldr	r2, [pc, #464]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0xd8>
 8003160:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a70      	ldr	r2, [pc, #448]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b6e      	ldr	r3, [pc, #440]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a6d      	ldr	r2, [pc, #436]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fba4 	bl	80018cc <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe fba0 	bl	80018cc <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	@ 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e3d4      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800319a:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fb90 	bl	80018cc <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fb8c 	bl	80018cc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	@ 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e3c0      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031c2:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x110>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80ca 	beq.w	8003374 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e0:	4b51      	ldr	r3, [pc, #324]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_RCC_OscConfig+0x166>
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	2b18      	cmp	r3, #24
 80031fa:	d156      	bne.n	80032aa <HAL_RCC_OscConfig+0x20a>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d151      	bne.n	80032aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003206:	4b48      	ldr	r3, [pc, #288]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x17e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e392      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800321e:	4b42      	ldr	r3, [pc, #264]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0219 	bic.w	r2, r3, #25
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	493f      	ldr	r1, [pc, #252]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fb4c 	bl	80018cc <HAL_GetTick>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7fe fb48 	bl	80018cc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e37c      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324a:	4b37      	ldr	r3, [pc, #220]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	f7fe fb69 	bl	800192c <HAL_GetREVID>
 800325a:	4603      	mov	r3, r0
 800325c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003260:	4293      	cmp	r3, r2
 8003262:	d817      	bhi.n	8003294 <HAL_RCC_OscConfig+0x1f4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d108      	bne.n	800327e <HAL_RCC_OscConfig+0x1de>
 800326c:	4b2e      	ldr	r3, [pc, #184]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003274:	4a2c      	ldr	r2, [pc, #176]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800327a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	e07a      	b.n	8003374 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	031b      	lsls	r3, r3, #12
 800328c:	4926      	ldr	r1, [pc, #152]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003292:	e06f      	b.n	8003374 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	4921      	ldr	r1, [pc, #132]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a8:	e064      	b.n	8003374 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d047      	beq.n	8003342 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0219 	bic.w	r2, r3, #25
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	491a      	ldr	r1, [pc, #104]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fb02 	bl	80018cc <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe fafe 	bl	80018cc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e332      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	f7fe fb1f 	bl	800192c <HAL_GetREVID>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d819      	bhi.n	800332c <HAL_RCC_OscConfig+0x28c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b40      	cmp	r3, #64	@ 0x40
 80032fe:	d108      	bne.n	8003312 <HAL_RCC_OscConfig+0x272>
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003308:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 800330a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330e:	6053      	str	r3, [r2, #4]
 8003310:	e030      	b.n	8003374 <HAL_RCC_OscConfig+0x2d4>
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	031b      	lsls	r3, r3, #12
 8003320:	4901      	ldr	r1, [pc, #4]	@ (8003328 <HAL_RCC_OscConfig+0x288>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
 8003326:	e025      	b.n	8003374 <HAL_RCC_OscConfig+0x2d4>
 8003328:	58024400 	.word	0x58024400
 800332c:	4b9a      	ldr	r3, [pc, #616]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	4997      	ldr	r1, [pc, #604]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
 8003340:	e018      	b.n	8003374 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b95      	ldr	r3, [pc, #596]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a94      	ldr	r2, [pc, #592]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe fabd 	bl	80018cc <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003356:	f7fe fab9 	bl	80018cc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e2ed      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003368:	4b8b      	ldr	r3, [pc, #556]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a9 	beq.w	80034d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003382:	4b85      	ldr	r3, [pc, #532]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800338a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800338c:	4b82      	ldr	r3, [pc, #520]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d007      	beq.n	80033a8 <HAL_RCC_OscConfig+0x308>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b18      	cmp	r3, #24
 800339c:	d13a      	bne.n	8003414 <HAL_RCC_OscConfig+0x374>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d135      	bne.n	8003414 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x320>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b80      	cmp	r3, #128	@ 0x80
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e2c1      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033c0:	f7fe fab4 	bl	800192c <HAL_GetREVID>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d817      	bhi.n	80033fe <HAL_RCC_OscConfig+0x35e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d108      	bne.n	80033e8 <HAL_RCC_OscConfig+0x348>
 80033d6:	4b70      	ldr	r3, [pc, #448]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033de:	4a6e      	ldr	r2, [pc, #440]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033e6:	e075      	b.n	80034d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	069b      	lsls	r3, r3, #26
 80033f6:	4968      	ldr	r1, [pc, #416]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033fc:	e06a      	b.n	80034d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033fe:	4b66      	ldr	r3, [pc, #408]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	4962      	ldr	r1, [pc, #392]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003412:	e05f      	b.n	80034d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d042      	beq.n	80034a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800341c:	4b5e      	ldr	r3, [pc, #376]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5d      	ldr	r2, [pc, #372]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fa50 	bl	80018cc <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003430:	f7fe fa4c 	bl	80018cc <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e280      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003442:	4b55      	ldr	r3, [pc, #340]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800344e:	f7fe fa6d 	bl	800192c <HAL_GetREVID>
 8003452:	4603      	mov	r3, r0
 8003454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003458:	4293      	cmp	r3, r2
 800345a:	d817      	bhi.n	800348c <HAL_RCC_OscConfig+0x3ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	2b20      	cmp	r3, #32
 8003462:	d108      	bne.n	8003476 <HAL_RCC_OscConfig+0x3d6>
 8003464:	4b4c      	ldr	r3, [pc, #304]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800346c:	4a4a      	ldr	r2, [pc, #296]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003472:	6053      	str	r3, [r2, #4]
 8003474:	e02e      	b.n	80034d4 <HAL_RCC_OscConfig+0x434>
 8003476:	4b48      	ldr	r3, [pc, #288]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	069b      	lsls	r3, r3, #26
 8003484:	4944      	ldr	r1, [pc, #272]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
 800348a:	e023      	b.n	80034d4 <HAL_RCC_OscConfig+0x434>
 800348c:	4b42      	ldr	r3, [pc, #264]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	493f      	ldr	r1, [pc, #252]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
 80034a0:	e018      	b.n	80034d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe fa0d 	bl	80018cc <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034b6:	f7fe fa09 	bl	80018cc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e23d      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034c8:	4b33      	ldr	r3, [pc, #204]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d036      	beq.n	800354e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d019      	beq.n	800351c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe f9ea 	bl	80018cc <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe f9e6 	bl	80018cc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e21a      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800350e:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x45c>
 800351a:	e018      	b.n	800354e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b1e      	ldr	r3, [pc, #120]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800351e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003520:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe f9d0 	bl	80018cc <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe f9cc 	bl	80018cc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e200      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d039      	beq.n	80035ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01c      	beq.n	800359c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a0c      	ldr	r2, [pc, #48]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 8003568:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800356c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800356e:	f7fe f9ad 	bl	80018cc <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003576:	f7fe f9a9 	bl	80018cc <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1dd      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_OscConfig+0x4f8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x4d6>
 8003594:	e01b      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 8003596:	bf00      	nop
 8003598:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800359c:	4b9b      	ldr	r3, [pc, #620]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a9a      	ldr	r2, [pc, #616]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80035a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035a8:	f7fe f990 	bl	80018cc <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b0:	f7fe f98c 	bl	80018cc <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1c0      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035c2:	4b92      	ldr	r3, [pc, #584]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8081 	beq.w	80036de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003810 <HAL_RCC_OscConfig+0x770>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a8b      	ldr	r2, [pc, #556]	@ (8003810 <HAL_RCC_OscConfig+0x770>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e8:	f7fe f970 	bl	80018cc <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe f96c 	bl	80018cc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	@ 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1a0      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003602:	4b83      	ldr	r3, [pc, #524]	@ (8003810 <HAL_RCC_OscConfig+0x770>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x584>
 8003616:	4b7d      	ldr	r3, [pc, #500]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361a:	4a7c      	ldr	r2, [pc, #496]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	@ 0x70
 8003622:	e02d      	b.n	8003680 <HAL_RCC_OscConfig+0x5e0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_OscConfig+0x5a6>
 800362c:	4b77      	ldr	r3, [pc, #476]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003630:	4a76      	ldr	r2, [pc, #472]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	@ 0x70
 8003638:	4b74      	ldr	r3, [pc, #464]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363c:	4a73      	ldr	r2, [pc, #460]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800363e:	f023 0304 	bic.w	r3, r3, #4
 8003642:	6713      	str	r3, [r2, #112]	@ 0x70
 8003644:	e01c      	b.n	8003680 <HAL_RCC_OscConfig+0x5e0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b05      	cmp	r3, #5
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x5c8>
 800364e:	4b6f      	ldr	r3, [pc, #444]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	4a6e      	ldr	r2, [pc, #440]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	6713      	str	r3, [r2, #112]	@ 0x70
 800365a:	4b6c      	ldr	r3, [pc, #432]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a6b      	ldr	r2, [pc, #428]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0x5e0>
 8003668:	4b68      	ldr	r3, [pc, #416]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a67      	ldr	r2, [pc, #412]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
 8003674:	4b65      	ldr	r3, [pc, #404]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	4a64      	ldr	r2, [pc, #400]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800367a:	f023 0304 	bic.w	r3, r3, #4
 800367e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f920 	bl	80018cc <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe f91c 	bl	80018cc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e14e      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a6:	4b59      	ldr	r3, [pc, #356]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ee      	beq.n	8003690 <HAL_RCC_OscConfig+0x5f0>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fe f90a 	bl	80018cc <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fe f906 	bl	80018cc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e138      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036d2:	4b4e      	ldr	r3, [pc, #312]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ee      	bne.n	80036bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 812d 	beq.w	8003942 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036e8:	4b48      	ldr	r3, [pc, #288]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f0:	2b18      	cmp	r3, #24
 80036f2:	f000 80bd 	beq.w	8003870 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	f040 809e 	bne.w	800383c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b42      	ldr	r3, [pc, #264]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a41      	ldr	r2, [pc, #260]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe f8de 	bl	80018cc <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f8da 	bl	80018cc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e10e      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003726:	4b39      	ldr	r3, [pc, #228]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003732:	4b36      	ldr	r3, [pc, #216]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003734:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003736:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <HAL_RCC_OscConfig+0x774>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	430a      	orrs	r2, r1
 8003746:	4931      	ldr	r1, [pc, #196]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	628b      	str	r3, [r1, #40]	@ 0x28
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	3b01      	subs	r3, #1
 8003752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	3b01      	subs	r3, #1
 800375c:	025b      	lsls	r3, r3, #9
 800375e:	b29b      	uxth	r3, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	3b01      	subs	r3, #1
 8003776:	061b      	lsls	r3, r3, #24
 8003778:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800377c:	4923      	ldr	r1, [pc, #140]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800377e:	4313      	orrs	r3, r2
 8003780:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003782:	4b22      	ldr	r3, [pc, #136]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	4a21      	ldr	r2, [pc, #132]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800378e:	4b1f      	ldr	r3, [pc, #124]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 8003790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003792:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <HAL_RCC_OscConfig+0x778>)
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800379a:	00d2      	lsls	r2, r2, #3
 800379c:	491b      	ldr	r1, [pc, #108]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037a2:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	f023 020c 	bic.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4917      	ldr	r1, [pc, #92]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037b4:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	f023 0202 	bic.w	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	4912      	ldr	r1, [pc, #72]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037c6:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4a10      	ldr	r2, [pc, #64]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80037ea:	4b08      	ldr	r3, [pc, #32]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	4a07      	ldr	r2, [pc, #28]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a04      	ldr	r2, [pc, #16]	@ (800380c <HAL_RCC_OscConfig+0x76c>)
 80037fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fe f863 	bl	80018cc <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003808:	e011      	b.n	800382e <HAL_RCC_OscConfig+0x78e>
 800380a:	bf00      	nop
 800380c:	58024400 	.word	0x58024400
 8003810:	58024800 	.word	0x58024800
 8003814:	fffffc0c 	.word	0xfffffc0c
 8003818:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe f856 	bl	80018cc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e08a      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x77c>
 800383a:	e082      	b.n	8003942 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383c:	4b43      	ldr	r3, [pc, #268]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a42      	ldr	r2, [pc, #264]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe f840 	bl	80018cc <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003850:	f7fe f83c 	bl	80018cc <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e070      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003862:	4b3a      	ldr	r3, [pc, #232]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x7b0>
 800386e:	e068      	b.n	8003942 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003870:	4b36      	ldr	r3, [pc, #216]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003876:	4b35      	ldr	r3, [pc, #212]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d031      	beq.n	80038e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0203 	and.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d12a      	bne.n	80038e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d122      	bne.n	80038e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d11a      	bne.n	80038e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0a5b      	lsrs	r3, r3, #9
 80038b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d111      	bne.n	80038e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d108      	bne.n	80038e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0e1b      	lsrs	r3, r3, #24
 80038da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e02b      	b.n	8003944 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80038ec:	4b17      	ldr	r3, [pc, #92]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d01f      	beq.n	8003942 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	4a11      	ldr	r2, [pc, #68]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390e:	f7fd ffdd 	bl	80018cc <HAL_GetTick>
 8003912:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003914:	bf00      	nop
 8003916:	f7fd ffd9 	bl	80018cc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	4293      	cmp	r3, r2
 8003920:	d0f9      	beq.n	8003916 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003922:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003926:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <HAL_RCC_OscConfig+0x8b0>)
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	4906      	ldr	r1, [pc, #24]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003932:	4313      	orrs	r3, r2
 8003934:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	4a04      	ldr	r2, [pc, #16]	@ (800394c <HAL_RCC_OscConfig+0x8ac>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3730      	adds	r7, #48	@ 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	58024400 	.word	0x58024400
 8003950:	ffff0007 	.word	0xffff0007

08003954 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e19c      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b8a      	ldr	r3, [pc, #552]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d910      	bls.n	8003998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b87      	ldr	r3, [pc, #540]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 020f 	bic.w	r2, r3, #15
 800397e:	4985      	ldr	r1, [pc, #532]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b83      	ldr	r3, [pc, #524]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e184      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d908      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039b4:	4b78      	ldr	r3, [pc, #480]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4975      	ldr	r1, [pc, #468]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	4b70      	ldr	r3, [pc, #448]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039de:	429a      	cmp	r2, r3
 80039e0:	d908      	bls.n	80039f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	496a      	ldr	r1, [pc, #424]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	4b64      	ldr	r3, [pc, #400]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d908      	bls.n	8003a22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a10:	4b61      	ldr	r3, [pc, #388]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	495e      	ldr	r1, [pc, #376]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d908      	bls.n	8003a50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a3e:	4b56      	ldr	r3, [pc, #344]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4953      	ldr	r1, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b4d      	ldr	r3, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d908      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f023 020f 	bic.w	r2, r3, #15
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4947      	ldr	r1, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d055      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a8a:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4940      	ldr	r1, [pc, #256]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d121      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0f6      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d115      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0ea      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ad4:	4b30      	ldr	r3, [pc, #192]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0de      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d6      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af4:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f023 0207 	bic.w	r2, r3, #7
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4925      	ldr	r1, [pc, #148]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b06:	f7fd fee1 	bl	80018cc <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0e:	f7fd fedd 	bl	80018cc <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0be      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b24:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d1eb      	bne.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d208      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b52:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f023 020f 	bic.w	r2, r3, #15
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x244>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d214      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 020f 	bic.w	r2, r3, #15
 8003b7a:	4906      	ldr	r1, [pc, #24]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <HAL_RCC_ClockConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e086      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x34e>
 8003b94:	52002000 	.word	0x52002000
 8003b98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	4b3f      	ldr	r3, [pc, #252]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d208      	bcs.n	8003bca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	4939      	ldr	r1, [pc, #228]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d208      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003be6:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	492e      	ldr	r1, [pc, #184]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	4b28      	ldr	r3, [pc, #160]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d208      	bcs.n	8003c26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c14:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4922      	ldr	r1, [pc, #136]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d208      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c42:	4b1a      	ldr	r3, [pc, #104]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4917      	ldr	r1, [pc, #92]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c54:	f000 f89e 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	4912      	ldr	r1, [pc, #72]	@ (8003cb0 <HAL_RCC_ClockConfig+0x35c>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <HAL_RCC_ClockConfig+0x358>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <HAL_RCC_ClockConfig+0x35c>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <HAL_RCC_ClockConfig+0x360>)
 8003c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb8 <HAL_RCC_ClockConfig+0x364>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c92:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <HAL_RCC_ClockConfig+0x368>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fdce 	bl	8001838 <HAL_InitTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	0800bc6c 	.word	0x0800bc6c
 8003cb4:	24000004 	.word	0x24000004
 8003cb8:	24000000 	.word	0x24000000
 8003cbc:	24000008 	.word	0x24000008

08003cc0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	@ 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d12a      	bne.n	8003d28 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ce2:	4b29      	ldr	r3, [pc, #164]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d02:	2300      	movs	r3, #0
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003d06:	f107 031c 	add.w	r3, r7, #28
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	481f      	ldr	r0, [pc, #124]	@ (8003d8c <HAL_RCC_MCOConfig+0xcc>)
 8003d0e:	f7fe f94b 	bl	8001fa8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003d12:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	4919      	ldr	r1, [pc, #100]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003d26:	e02a      	b.n	8003d7e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003d28:	4b17      	ldr	r3, [pc, #92]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2e:	4a16      	ldr	r2, [pc, #88]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d50:	2303      	movs	r3, #3
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	4619      	mov	r1, r3
 8003d62:	480b      	ldr	r0, [pc, #44]	@ (8003d90 <HAL_RCC_MCOConfig+0xd0>)
 8003d64:	f7fe f920 	bl	8001fa8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	01d9      	lsls	r1, r3, #7
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	4903      	ldr	r1, [pc, #12]	@ (8003d88 <HAL_RCC_MCOConfig+0xc8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	610b      	str	r3, [r1, #16]
}
 8003d7e:	bf00      	nop
 8003d80:	3730      	adds	r7, #48	@ 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	58020000 	.word	0x58020000
 8003d90:	58020800 	.word	0x58020800

08003d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003da2:	2b18      	cmp	r3, #24
 8003da4:	f200 8155 	bhi.w	8004052 <HAL_RCC_GetSysClockFreq+0x2be>
 8003da8:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003e15 	.word	0x08003e15
 8003db4:	08004053 	.word	0x08004053
 8003db8:	08004053 	.word	0x08004053
 8003dbc:	08004053 	.word	0x08004053
 8003dc0:	08004053 	.word	0x08004053
 8003dc4:	08004053 	.word	0x08004053
 8003dc8:	08004053 	.word	0x08004053
 8003dcc:	08004053 	.word	0x08004053
 8003dd0:	08003e3b 	.word	0x08003e3b
 8003dd4:	08004053 	.word	0x08004053
 8003dd8:	08004053 	.word	0x08004053
 8003ddc:	08004053 	.word	0x08004053
 8003de0:	08004053 	.word	0x08004053
 8003de4:	08004053 	.word	0x08004053
 8003de8:	08004053 	.word	0x08004053
 8003dec:	08004053 	.word	0x08004053
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08004053 	.word	0x08004053
 8003df8:	08004053 	.word	0x08004053
 8003dfc:	08004053 	.word	0x08004053
 8003e00:	08004053 	.word	0x08004053
 8003e04:	08004053 	.word	0x08004053
 8003e08:	08004053 	.word	0x08004053
 8003e0c:	08004053 	.word	0x08004053
 8003e10:	08003e47 	.word	0x08003e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e14:	4b94      	ldr	r3, [pc, #592]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e20:	4b91      	ldr	r3, [pc, #580]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	4a90      	ldr	r2, [pc, #576]	@ (800406c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e32:	e111      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e34:	4b8d      	ldr	r3, [pc, #564]	@ (800406c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e36:	61bb      	str	r3, [r7, #24]
      break;
 8003e38:	e10e      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e3c:	61bb      	str	r3, [r7, #24]
      break;
 8003e3e:	e10b      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e40:	4b8c      	ldr	r3, [pc, #560]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e42:	61bb      	str	r3, [r7, #24]
      break;
 8003e44:	e108      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e46:	4b88      	ldr	r3, [pc, #544]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e50:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e5c:	4b82      	ldr	r3, [pc, #520]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e66:	4b80      	ldr	r3, [pc, #512]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80e1 	beq.w	800404c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f000 8083 	beq.w	8003f98 <HAL_RCC_GetSysClockFreq+0x204>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	f200 80a1 	bhi.w	8003fdc <HAL_RCC_GetSysClockFreq+0x248>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d056      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ea6:	e099      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02d      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800406c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ede:	4b62      	ldr	r3, [pc, #392]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f0e:	e087      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800407c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b51      	ldr	r3, [pc, #324]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f52:	e065      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b40      	ldr	r3, [pc, #256]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f96:	e043      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b2f      	ldr	r3, [pc, #188]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fda:	e021      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004002:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800401e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800402a:	3301      	adds	r3, #1
 800402c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004038:	edd7 6a07 	vldr	s13, [r7, #28]
 800403c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004044:	ee17 3a90 	vmov	r3, s15
 8004048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
      break;
 8004050:	e002      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004054:	61bb      	str	r3, [r7, #24]
      break;
 8004056:	bf00      	nop
  }

  return sysclockfreq;
 8004058:	69bb      	ldr	r3, [r7, #24]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3724      	adds	r7, #36	@ 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
 800406c:	03d09000 	.word	0x03d09000
 8004070:	003d0900 	.word	0x003d0900
 8004074:	017d7840 	.word	0x017d7840
 8004078:	46000000 	.word	0x46000000
 800407c:	4c742400 	.word	0x4c742400
 8004080:	4a742400 	.word	0x4a742400
 8004084:	4bbebc20 	.word	0x4bbebc20

08004088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800408e:	f7ff fe81 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8004092:	4602      	mov	r2, r0
 8004094:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	490f      	ldr	r1, [pc, #60]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x54>)
 80040a0:	5ccb      	ldrb	r3, [r1, r3]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x54>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040c6:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040cc:	4b04      	ldr	r3, [pc, #16]	@ (80040e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	58024400 	.word	0x58024400
 80040dc:	0800bc6c 	.word	0x0800bc6c
 80040e0:	24000004 	.word	0x24000004
 80040e4:	24000000 	.word	0x24000000

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80040ec:	f7ff ffcc 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4904      	ldr	r1, [pc, #16]	@ (8004110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	58024400 	.word	0x58024400
 8004110:	0800bc6c 	.word	0x0800bc6c

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004118:	f7ff ffb6 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4904      	ldr	r1, [pc, #16]	@ (800413c <HAL_RCC_GetPCLK2Freq+0x28>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	58024400 	.word	0x58024400
 800413c:	0800bc6c 	.word	0x0800bc6c

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b0cc      	sub	sp, #304	@ 0x130
 8004146:	af00      	add	r7, sp, #0
 8004148:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800414c:	2300      	movs	r3, #0
 800414e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004152:	2300      	movs	r3, #0
 8004154:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004164:	2500      	movs	r5, #0
 8004166:	ea54 0305 	orrs.w	r3, r4, r5
 800416a:	d049      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800416c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004172:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004176:	d02f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004178:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800417c:	d828      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004182:	d01a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004188:	d822      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004192:	d007      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004194:	e01c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004196:	4bb8      	ldr	r3, [pc, #736]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	4ab7      	ldr	r2, [pc, #732]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800419c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041a2:	e01a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041a8:	3308      	adds	r3, #8
 80041aa:	2102      	movs	r1, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f002 fba1 	bl	80068f4 <RCCEx_PLL2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041b8:	e00f      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041be:	3328      	adds	r3, #40	@ 0x28
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f002 fc48 	bl	8006a58 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041e2:	4ba5      	ldr	r3, [pc, #660]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f0:	4aa1      	ldr	r2, [pc, #644]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f6:	e003      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800420c:	f04f 0900 	mov.w	r9, #0
 8004210:	ea58 0309 	orrs.w	r3, r8, r9
 8004214:	d047      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	2b04      	cmp	r3, #4
 800421e:	d82a      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004220:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800423d 	.word	0x0800423d
 800422c:	0800424b 	.word	0x0800424b
 8004230:	08004261 	.word	0x08004261
 8004234:	0800427f 	.word	0x0800427f
 8004238:	0800427f 	.word	0x0800427f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b8e      	ldr	r3, [pc, #568]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a8d      	ldr	r2, [pc, #564]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004248:	e01a      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800424e:	3308      	adds	r3, #8
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f002 fb4e 	bl	80068f4 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800425e:	e00f      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004264:	3328      	adds	r3, #40	@ 0x28
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f002 fbf5 	bl	8006a58 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800427e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004280:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004288:	4b7b      	ldr	r3, [pc, #492]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800428a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428c:	f023 0107 	bic.w	r1, r3, #7
 8004290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	4a78      	ldr	r2, [pc, #480]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6513      	str	r3, [r2, #80]	@ 0x50
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80042b2:	f04f 0b00 	mov.w	fp, #0
 80042b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80042ba:	d04c      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80042bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c6:	d030      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042cc:	d829      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80042d0:	d02d      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80042d4:	d825      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042d6:	2b80      	cmp	r3, #128	@ 0x80
 80042d8:	d018      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d821      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	d007      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80042e6:	e01c      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	4a62      	ldr	r2, [pc, #392]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042f4:	e01c      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042fa:	3308      	adds	r3, #8
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f002 faf8 	bl	80068f4 <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800430a:	e011      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800430c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004310:	3328      	adds	r3, #40	@ 0x28
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f002 fb9f 	bl	8006a58 <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004320:	e006      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800432e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004330:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004338:	4b4f      	ldr	r3, [pc, #316]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800433a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	4a4c      	ldr	r2, [pc, #304]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004348:	430b      	orrs	r3, r1
 800434a:	6513      	str	r3, [r2, #80]	@ 0x50
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004362:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800436c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	d053      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800437a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800437e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004382:	d035      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004384:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004388:	d82e      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800438a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800438e:	d031      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004390:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004394:	d828      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800439a:	d01a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800439c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a0:	d822      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043aa:	d007      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80043ac:	e01c      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ae:	4b32      	ldr	r3, [pc, #200]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	4a31      	ldr	r2, [pc, #196]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043ba:	e01c      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c0:	3308      	adds	r3, #8
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f002 fa95 	bl	80068f4 <RCCEx_PLL2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043d0:	e011      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f002 fb3c 	bl	8006a58 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e6:	e006      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800440e:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6593      	str	r3, [r2, #88]	@ 0x58
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800441a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800441e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800442a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004434:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d056      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800443e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800444a:	d038      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800444c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004450:	d831      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004452:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004456:	d034      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004458:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800445c:	d82b      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004462:	d01d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004468:	d825      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800446e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004474:	e01f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4ba2      	ldr	r3, [pc, #648]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4aa1      	ldr	r2, [pc, #644]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004488:	e01c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800448e:	3308      	adds	r3, #8
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f002 fa2e 	bl	80068f4 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a4:	3328      	adds	r3, #40	@ 0x28
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 fad5 	bl	8006a58 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044dc:	4a8a      	ldr	r2, [pc, #552]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044de:	430b      	orrs	r3, r1
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e2:	e003      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80044f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004502:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d03a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800450c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004512:	2b30      	cmp	r3, #48	@ 0x30
 8004514:	d01f      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004516:	2b30      	cmp	r3, #48	@ 0x30
 8004518:	d819      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800451a:	2b20      	cmp	r3, #32
 800451c:	d00c      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d815      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d019      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004526:	2b10      	cmp	r3, #16
 8004528:	d111      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4b77      	ldr	r3, [pc, #476]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	4a76      	ldr	r2, [pc, #472]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004536:	e011      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800453c:	3308      	adds	r3, #8
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f002 f9d7 	bl	80068f4 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800454c:	e006      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800455a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004564:	4b68      	ldr	r3, [pc, #416]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004568:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800456c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	4a65      	ldr	r2, [pc, #404]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004574:	430b      	orrs	r3, r1
 8004576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800457e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800458e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004598:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d051      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ac:	d035      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b2:	d82e      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045b8:	d031      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80045ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045be:	d828      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c4:	d01a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ca:	d822      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d4:	d007      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045d6:	e01c      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045e4:	e01c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045ea:	3308      	adds	r3, #8
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 f980 	bl	80068f4 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045fa:	e011      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004600:	3328      	adds	r3, #40	@ 0x28
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f002 fa27 	bl	8006a58 <RCCEx_PLL3_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800461e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004620:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004628:	4b37      	ldr	r3, [pc, #220]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004636:	4a34      	ldr	r2, [pc, #208]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6513      	str	r3, [r2, #80]	@ 0x50
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004642:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004652:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800465c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d056      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800466a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800466c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004670:	d033      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004672:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004676:	d82c      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004678:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800467c:	d02f      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800467e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004682:	d826      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004688:	d02b      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800468a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800468e:	d820      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004694:	d012      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800469a:	d81a      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d022      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a4:	d115      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046aa:	3308      	adds	r3, #8
 80046ac:	2101      	movs	r1, #1
 80046ae:	4618      	mov	r0, r3
 80046b0:	f002 f920 	bl	80068f4 <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046ba:	e015      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 f9c7 	bl	8006a58 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046d0:	e00a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046da:	bf00      	nop
 80046dc:	e004      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10d      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80046f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046fe:	4a02      	ldr	r2, [pc, #8]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004700:	430b      	orrs	r3, r1
 8004702:	6513      	str	r3, [r2, #80]	@ 0x50
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004710:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004720:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800472a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d055      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800473c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004740:	d033      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004746:	d82c      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d02f      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d826      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004758:	d02b      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800475a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800475e:	d820      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004764:	d012      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800476a:	d81a      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d022      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004774:	d115      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800477a:	3308      	adds	r3, #8
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f002 f8b8 	bl	80068f4 <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800478a:	e015      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800478c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004790:	3328      	adds	r3, #40	@ 0x28
 8004792:	2101      	movs	r1, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f002 f95f 	bl	8006a58 <RCCEx_PLL3_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047a0:	e00a      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80047a8:	e006      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047c0:	4bb6      	ldr	r3, [pc, #728]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047d0:	4ab2      	ldr	r2, [pc, #712]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d6:	e003      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80047e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80047ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d02a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004800:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800480a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480e:	d10a      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004814:	3308      	adds	r3, #8
 8004816:	2101      	movs	r1, #1
 8004818:	4618      	mov	r0, r3
 800481a:	f002 f86b 	bl	80068f4 <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004824:	e004      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800482e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004830:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004838:	4b98      	ldr	r3, [pc, #608]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800483a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004846:	4a95      	ldr	r2, [pc, #596]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004848:	430b      	orrs	r3, r1
 800484a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004852:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004856:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800486c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d037      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800487a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004880:	d00e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004886:	d816      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d018      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800488c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004890:	d111      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004892:	4b82      	ldr	r3, [pc, #520]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	4a81      	ldr	r2, [pc, #516]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800489e:	e00f      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048a4:	3308      	adds	r3, #8
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f002 f823 	bl	80068f4 <RCCEx_PLL2_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80048be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048c8:	4b74      	ldr	r3, [pc, #464]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80048d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d6:	4a71      	ldr	r2, [pc, #452]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6513      	str	r3, [r2, #80]	@ 0x50
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80048f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048fc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d03a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800490a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490c:	2b03      	cmp	r3, #3
 800490e:	d81d      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004910:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004955 	.word	0x08004955
 800491c:	08004929 	.word	0x08004929
 8004920:	08004937 	.word	0x08004937
 8004924:	08004955 	.word	0x08004955
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004928:	4b5c      	ldr	r3, [pc, #368]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a5b      	ldr	r2, [pc, #364]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800492e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004934:	e00f      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800493a:	3308      	adds	r3, #8
 800493c:	2102      	movs	r1, #2
 800493e:	4618      	mov	r0, r3
 8004940:	f001 ffd8 	bl	80068f4 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800494a:	e004      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004952:	e000      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004956:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800495e:	4b4f      	ldr	r3, [pc, #316]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	f023 0103 	bic.w	r1, r3, #3
 8004966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800496a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800496e:	430b      	orrs	r3, r1
 8004970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004972:	e003      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004978:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800497c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004992:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	f000 80a0 	beq.w	8004ade <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499e:	4b40      	ldr	r3, [pc, #256]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3f      	ldr	r2, [pc, #252]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049aa:	f7fc ff8f 	bl	80018cc <HAL_GetTick>
 80049ae:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049b2:	e00b      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b4:	f7fc ff8a 	bl	80018cc <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	@ 0x64
 80049c2:	d903      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049ca:	e005      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049cc:	4b34      	ldr	r3, [pc, #208]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ed      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80049d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d17a      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049e0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049ec:	4053      	eors	r3, r2
 80049ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f6:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a02:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	4a25      	ldr	r2, [pc, #148]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0e:	4b23      	ldr	r3, [pc, #140]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a1a:	4a20      	ldr	r2, [pc, #128]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004a20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a2e:	d118      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fc ff4c 	bl	80018cc <HAL_GetTick>
 8004a34:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a38:	e00d      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fc ff47 	bl	80018cc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a44:	1ad2      	subs	r2, r2, r3
 8004a46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d903      	bls.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004a54:	e005      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a56:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0eb      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d130      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a7a:	d115      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a8c:	091a      	lsrs	r2, r3, #4
 8004a8e:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	4a02      	ldr	r2, [pc, #8]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6113      	str	r3, [r2, #16]
 8004a98:	e00c      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	58024800 	.word	0x58024800
 8004aa4:	00ffffcf 	.word	0x00ffffcf
 8004aa8:	4bd4      	ldr	r3, [pc, #848]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	4ad3      	ldr	r2, [pc, #844]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004aae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ab2:	6113      	str	r3, [r2, #16]
 8004ab4:	4bd1      	ldr	r3, [pc, #836]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ab6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004abc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	4acd      	ldr	r2, [pc, #820]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aca:	e008      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004acc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ad0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ada:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f002 0301 	and.w	r3, r2, #1
 8004aea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004af4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f000 808b 	beq.w	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b08:	2b28      	cmp	r3, #40	@ 0x28
 8004b0a:	d86b      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004bed 	.word	0x08004bed
 8004b18:	08004be5 	.word	0x08004be5
 8004b1c:	08004be5 	.word	0x08004be5
 8004b20:	08004be5 	.word	0x08004be5
 8004b24:	08004be5 	.word	0x08004be5
 8004b28:	08004be5 	.word	0x08004be5
 8004b2c:	08004be5 	.word	0x08004be5
 8004b30:	08004be5 	.word	0x08004be5
 8004b34:	08004bb9 	.word	0x08004bb9
 8004b38:	08004be5 	.word	0x08004be5
 8004b3c:	08004be5 	.word	0x08004be5
 8004b40:	08004be5 	.word	0x08004be5
 8004b44:	08004be5 	.word	0x08004be5
 8004b48:	08004be5 	.word	0x08004be5
 8004b4c:	08004be5 	.word	0x08004be5
 8004b50:	08004be5 	.word	0x08004be5
 8004b54:	08004bcf 	.word	0x08004bcf
 8004b58:	08004be5 	.word	0x08004be5
 8004b5c:	08004be5 	.word	0x08004be5
 8004b60:	08004be5 	.word	0x08004be5
 8004b64:	08004be5 	.word	0x08004be5
 8004b68:	08004be5 	.word	0x08004be5
 8004b6c:	08004be5 	.word	0x08004be5
 8004b70:	08004be5 	.word	0x08004be5
 8004b74:	08004bed 	.word	0x08004bed
 8004b78:	08004be5 	.word	0x08004be5
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004be5 	.word	0x08004be5
 8004b88:	08004be5 	.word	0x08004be5
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004bed 	.word	0x08004bed
 8004b98:	08004be5 	.word	0x08004be5
 8004b9c:	08004be5 	.word	0x08004be5
 8004ba0:	08004be5 	.word	0x08004be5
 8004ba4:	08004be5 	.word	0x08004be5
 8004ba8:	08004be5 	.word	0x08004be5
 8004bac:	08004be5 	.word	0x08004be5
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004bed 	.word	0x08004bed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 fe97 	bl	80068f4 <RCCEx_PLL2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bcc:	e00f      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bd2:	3328      	adds	r3, #40	@ 0x28
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 ff3e 	bl	8006a58 <RCCEx_PLL3_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004bf6:	4b81      	ldr	r3, [pc, #516]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c06:	4a7d      	ldr	r2, [pc, #500]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c0c:	e003      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f002 0302 	and.w	r3, r2, #2
 8004c22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c2c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d042      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d825      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004c40:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c95 	.word	0x08004c95
 8004c4c:	08004c61 	.word	0x08004c61
 8004c50:	08004c77 	.word	0x08004c77
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	08004c95 	.word	0x08004c95
 8004c5c:	08004c95 	.word	0x08004c95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c64:	3308      	adds	r3, #8
 8004c66:	2101      	movs	r1, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fe43 	bl	80068f4 <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c74:	e00f      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c7a:	3328      	adds	r3, #40	@ 0x28
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 feea 	bl	8006a58 <RCCEx_PLL3_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c9e:	4b57      	ldr	r3, [pc, #348]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	f023 0107 	bic.w	r1, r3, #7
 8004ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cac:	4a53      	ldr	r2, [pc, #332]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cb8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f002 0304 	and.w	r3, r2, #4
 8004cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d044      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d825      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d3d 	.word	0x08004d3d
 8004cf4:	08004d09 	.word	0x08004d09
 8004cf8:	08004d1f 	.word	0x08004d1f
 8004cfc:	08004d3d 	.word	0x08004d3d
 8004d00:	08004d3d 	.word	0x08004d3d
 8004d04:	08004d3d 	.word	0x08004d3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fdef 	bl	80068f4 <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d1c:	e00f      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d22:	3328      	adds	r3, #40	@ 0x28
 8004d24:	2101      	movs	r1, #1
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fe96 	bl	8006a58 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d32:	e004      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d46:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4a:	f023 0107 	bic.w	r1, r3, #7
 8004d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d56:	4a29      	ldr	r2, [pc, #164]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d5c:	e003      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f002 0320 	and.w	r3, r2, #32
 8004d72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d80:	460b      	mov	r3, r1
 8004d82:	4313      	orrs	r3, r2
 8004d84:	d057      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d92:	d035      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d98:	d82c      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d031      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da4:	d826      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004da6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004daa:	d02d      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004dac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004db0:	d820      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db6:	d012      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dbc:	d81a      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d024      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc6:	d115      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dcc:	3308      	adds	r3, #8
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fd8f 	bl	80068f4 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ddc:	e017      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004de2:	3328      	adds	r3, #40	@ 0x28
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fe36 	bl	8006a58 <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004df2:	e00c      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004dfc:	58024400 	.word	0x58024400
        break;
 8004e00:	bf00      	nop
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e16:	4bc2      	ldr	r3, [pc, #776]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e26:	4abe      	ldr	r2, [pc, #760]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4313      	orrs	r3, r2
 8004e54:	d055      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e62:	d033      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004e64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e68:	d82c      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d02f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e74:	d826      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e7a:	d02b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e80:	d820      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e86:	d012      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8c:	d81a      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d022      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fd27 	bl	80068f4 <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004eac:	e015      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eb2:	3328      	adds	r3, #40	@ 0x28
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fdce 	bl	8006a58 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e00a      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ecc:	bf00      	nop
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ef2:	4a8b      	ldr	r2, [pc, #556]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef8:	e003      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004efe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f12:	2300      	movs	r3, #0
 8004f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f18:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d055      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f2a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004f2e:	d033      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004f30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004f34:	d82c      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3a:	d02f      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f40:	d826      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f42:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004f46:	d02b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004f48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004f4c:	d820      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f52:	d012      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f58:	d81a      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d022      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f62:	d115      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f68:	3308      	adds	r3, #8
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f001 fcc1 	bl	80068f4 <RCCEx_PLL2_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f78:	e015      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f7e:	3328      	adds	r3, #40	@ 0x28
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 fd68 	bl	8006a58 <RCCEx_PLL3_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f96:	e006      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004f98:	bf00      	nop
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fae:	4b5c      	ldr	r3, [pc, #368]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fbe:	4a58      	ldr	r2, [pc, #352]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fc4:	e003      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f002 0308 	and.w	r3, r2, #8
 8004fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fe4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4313      	orrs	r3, r2
 8004fec:	d01e      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005000:	3328      	adds	r3, #40	@ 0x28
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fd27 	bl	8006a58 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005016:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800501e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	4a3e      	ldr	r2, [pc, #248]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005028:	430b      	orrs	r3, r1
 800502a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800502c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f002 0310 	and.w	r3, r2, #16
 8005038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800503c:	2300      	movs	r3, #0
 800503e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005042:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d01e      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800504c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005050:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005058:	d10c      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800505a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800505e:	3328      	adds	r3, #40	@ 0x28
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fcf8 	bl	8006a58 <RCCEx_PLL3_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005074:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800507c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005080:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005084:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005086:	430b      	orrs	r3, r1
 8005088:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800508a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800509a:	2300      	movs	r3, #0
 800509c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80050a4:	460b      	mov	r3, r1
 80050a6:	4313      	orrs	r3, r2
 80050a8:	d040      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80050aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050b6:	d022      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80050b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050bc:	d81b      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80050c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c6:	d00b      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80050c8:	e015      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ce:	3308      	adds	r3, #8
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 fc0e 	bl	80068f4 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050de:	e00f      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050e4:	3328      	adds	r3, #40	@ 0x28
 80050e6:	2102      	movs	r1, #2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 fcb5 	bl	8006a58 <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005118:	4a01      	ldr	r2, [pc, #4]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800511a:	430b      	orrs	r3, r1
 800511c:	6593      	str	r3, [r2, #88]	@ 0x58
 800511e:	e005      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005128:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800512c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800513a:	2300      	movs	r3, #0
 800513c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800513e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d03b      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005154:	d01f      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005156:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800515a:	d818      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800515c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005160:	d003      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005162:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005166:	d007      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005168:	e011      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516a:	4b64      	ldr	r3, [pc, #400]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	4a63      	ldr	r2, [pc, #396]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005176:	e00f      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800517c:	3328      	adds	r3, #40	@ 0x28
 800517e:	2101      	movs	r1, #1
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fc69 	bl	8006a58 <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800518c:	e004      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005194:	e000      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005198:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051a0:	4b56      	ldr	r3, [pc, #344]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80051a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051b0:	4a52      	ldr	r2, [pc, #328]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051b2:	430b      	orrs	r3, r1
 80051b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80051cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ce:	2300      	movs	r3, #0
 80051d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80051d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80051dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80051e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ea:	d007      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80051ec:	e011      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ee:	4b43      	ldr	r3, [pc, #268]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	4a42      	ldr	r2, [pc, #264]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051fa:	e00e      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005200:	3308      	adds	r3, #8
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f001 fb75 	bl	80068f4 <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005222:	4b36      	ldr	r3, [pc, #216]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800522a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800522e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005230:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005232:	430b      	orrs	r3, r1
 8005234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800523c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800524c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800524e:	2300      	movs	r3, #0
 8005250:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005252:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d00c      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800525c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005260:	3328      	adds	r3, #40	@ 0x28
 8005262:	2102      	movs	r1, #2
 8005264:	4618      	mov	r0, r3
 8005266:	f001 fbf7 	bl	8006a58 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005282:	663b      	str	r3, [r7, #96]	@ 0x60
 8005284:	2300      	movs	r3, #0
 8005286:	667b      	str	r3, [r7, #100]	@ 0x64
 8005288:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800528c:	460b      	mov	r3, r1
 800528e:	4313      	orrs	r3, r2
 8005290:	d03a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529e:	d018      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a4:	d811      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80052a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052aa:	d014      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b0:	d80b      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d011      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ba:	d106      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052bc:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	4a0e      	ldr	r2, [pc, #56]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052d0:	e004      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80052da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f4:	4a01      	ldr	r2, [pc, #4]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80052fa:	e005      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80052fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005304:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005314:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005316:	2300      	movs	r3, #0
 8005318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800531a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800531e:	460b      	mov	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005324:	4baa      	ldr	r3, [pc, #680]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005328:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800532c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005332:	4aa7      	ldr	r2, [pc, #668]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005344:	653b      	str	r3, [r7, #80]	@ 0x50
 8005346:	2300      	movs	r3, #0
 8005348:	657b      	str	r3, [r7, #84]	@ 0x54
 800534a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800534e:	460b      	mov	r3, r1
 8005350:	4313      	orrs	r3, r2
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005354:	4b9e      	ldr	r3, [pc, #632]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800535c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005360:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005364:	4a9a      	ldr	r2, [pc, #616]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005366:	430b      	orrs	r3, r1
 8005368:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800536a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005378:	2300      	movs	r3, #0
 800537a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005386:	4b92      	ldr	r3, [pc, #584]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800538e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005394:	4a8e      	ldr	r2, [pc, #568]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005396:	430b      	orrs	r3, r1
 8005398:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800539a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80053a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80053a8:	2300      	movs	r3, #0
 80053aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80053b0:	460b      	mov	r3, r1
 80053b2:	4313      	orrs	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b6:	4b86      	ldr	r3, [pc, #536]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	4a85      	ldr	r2, [pc, #532]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053c0:	6113      	str	r3, [r2, #16]
 80053c2:	4b83      	ldr	r3, [pc, #524]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053c4:	6919      	ldr	r1, [r3, #16]
 80053c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80053ce:	4a80      	ldr	r2, [pc, #512]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80053e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053f0:	4b77      	ldr	r3, [pc, #476]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80053f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fe:	4a74      	ldr	r2, [pc, #464]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005400:	430b      	orrs	r3, r1
 8005402:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005410:	633b      	str	r3, [r7, #48]	@ 0x30
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
 8005416:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005420:	4b6b      	ldr	r3, [pc, #428]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005424:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	4a67      	ldr	r2, [pc, #412]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005432:	430b      	orrs	r3, r1
 8005434:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	2100      	movs	r1, #0
 8005440:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005448:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800544c:	460b      	mov	r3, r1
 800544e:	4313      	orrs	r3, r2
 8005450:	d011      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005456:	3308      	adds	r3, #8
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fa4a 	bl	80068f4 <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005472:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005476:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	2100      	movs	r1, #0
 8005480:	6239      	str	r1, [r7, #32]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
 8005488:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d011      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005496:	3308      	adds	r3, #8
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fa2a 	bl	80068f4 <RCCEx_PLL2_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80054a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	2100      	movs	r1, #0
 80054c0:	61b9      	str	r1, [r7, #24]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d011      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d6:	3308      	adds	r3, #8
 80054d8:	2102      	movs	r1, #2
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 fa0a 	bl	80068f4 <RCCEx_PLL2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80054e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	2100      	movs	r1, #0
 8005500:	6139      	str	r1, [r7, #16]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d011      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005516:	3328      	adds	r3, #40	@ 0x28
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fa9c 	bl	8006a58 <RCCEx_PLL3_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8005526:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	2100      	movs	r1, #0
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800554c:	460b      	mov	r3, r1
 800554e:	4313      	orrs	r3, r2
 8005550:	d011      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005556:	3328      	adds	r3, #40	@ 0x28
 8005558:	2101      	movs	r1, #1
 800555a:	4618      	mov	r0, r3
 800555c:	f001 fa7c 	bl	8006a58 <RCCEx_PLL3_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005566:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005572:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	2100      	movs	r1, #0
 8005580:	6039      	str	r1, [r7, #0]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	e9d7 1200 	ldrd	r1, r2, [r7]
 800558c:	460b      	mov	r3, r1
 800558e:	4313      	orrs	r3, r2
 8005590:	d011      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005596:	3328      	adds	r3, #40	@ 0x28
 8005598:	2102      	movs	r1, #2
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fa5c 	bl	8006a58 <RCCEx_PLL3_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80055a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80055b6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055ca:	46bd      	mov	sp, r7
 80055cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d0:	58024400 	.word	0x58024400

080055d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b090      	sub	sp, #64	@ 0x40
 80055d8:	af00      	add	r7, sp, #0
 80055da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80055e6:	430b      	orrs	r3, r1
 80055e8:	f040 8094 	bne.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80055ec:	4b9e      	ldr	r3, [pc, #632]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	f200 8087 	bhi.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005619 	.word	0x08005619
 8005608:	08005641 	.word	0x08005641
 800560c:	08005669 	.word	0x08005669
 8005610:	08005705 	.word	0x08005705
 8005614:	08005691 	.word	0x08005691
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005618:	4b93      	ldr	r3, [pc, #588]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005624:	d108      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f001 f810 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005634:	f000 bd45 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800563c:	f000 bd41 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005640:	4b89      	ldr	r3, [pc, #548]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800564c:	d108      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0318 	add.w	r3, r7, #24
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fd54 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800565c:	f000 bd31 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005664:	f000 bd2d 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005668:	4b7f      	ldr	r3, [pc, #508]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005674:	d108      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005676:	f107 030c 	add.w	r3, r7, #12
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fe94 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005684:	f000 bd1d 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568c:	f000 bd19 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005690:	4b75      	ldr	r3, [pc, #468]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005694:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800569a:	4b73      	ldr	r3, [pc, #460]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ac:	4b6e      	ldr	r3, [pc, #440]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	08db      	lsrs	r3, r3, #3
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	4a6d      	ldr	r2, [pc, #436]	@ (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056be:	e01f      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056c0:	4b69      	ldr	r3, [pc, #420]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056cc:	d106      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d4:	d102      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056d6:	4b66      	ldr	r3, [pc, #408]	@ (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056da:	e011      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056dc:	4b62      	ldr	r3, [pc, #392]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80056ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f0:	d102      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056f2:	4b60      	ldr	r3, [pc, #384]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f6:	e003      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80056fc:	f000 bce1 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005700:	f000 bcdf 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005704:	4b5c      	ldr	r3, [pc, #368]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005708:	f000 bcdb 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005710:	f000 bcd7 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005718:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800571c:	430b      	orrs	r3, r1
 800571e:	f040 80ad 	bne.w	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005722:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005726:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800572a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800572c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005732:	d056      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573a:	f200 8090 	bhi.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	2bc0      	cmp	r3, #192	@ 0xc0
 8005742:	f000 8088 	beq.w	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	2bc0      	cmp	r3, #192	@ 0xc0
 800574a:	f200 8088 	bhi.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	2b80      	cmp	r3, #128	@ 0x80
 8005752:	d032      	beq.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	2b80      	cmp	r3, #128	@ 0x80
 8005758:	f200 8081 	bhi.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	2b40      	cmp	r3, #64	@ 0x40
 8005766:	d014      	beq.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005768:	e079      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800576a:	4b3f      	ldr	r3, [pc, #252]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005776:	d108      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800577c:	4618      	mov	r0, r3
 800577e:	f000 ff67 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005786:	f000 bc9c 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800578e:	f000 bc98 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005792:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800579a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800579e:	d108      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057a0:	f107 0318 	add.w	r3, r7, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fcab 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ae:	f000 bc88 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057b6:	f000 bc84 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c6:	d108      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fdeb 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057d6:	f000 bc74 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057de:	f000 bc70 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057e2:	4b21      	ldr	r3, [pc, #132]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d10c      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	4a18      	ldr	r2, [pc, #96]	@ (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005810:	e01f      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005812:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800581e:	d106      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005826:	d102      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005828:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800582c:	e011      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800582e:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800583a:	d106      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005842:	d102      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005848:	e003      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800584e:	f000 bc38 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005852:	f000 bc36 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005856:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800585a:	f000 bc32 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005862:	f000 bc2e 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
 800586c:	03d09000 	.word	0x03d09000
 8005870:	003d0900 	.word	0x003d0900
 8005874:	017d7840 	.word	0x017d7840
 8005878:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800587c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005880:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005884:	430b      	orrs	r3, r1
 8005886:	f040 809c 	bne.w	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800588a:	4b9e      	ldr	r3, [pc, #632]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005892:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800589a:	d054      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058a2:	f200 808b 	bhi.w	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058ac:	f000 8083 	beq.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058b6:	f200 8081 	bhi.w	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c0:	d02f      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c8:	d878      	bhi.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058d6:	d012      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80058d8:	e070      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058da:	4b8a      	ldr	r3, [pc, #552]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e6:	d107      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 feaf 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f6:	e3e4      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058fc:	e3e1      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058fe:	4b81      	ldr	r3, [pc, #516]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590a:	d107      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800590c:	f107 0318 	add.w	r3, r7, #24
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fbf5 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800591a:	e3d2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005920:	e3cf      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005922:	4b78      	ldr	r3, [pc, #480]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800592a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592e:	d107      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005930:	f107 030c 	add.w	r3, r7, #12
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fd37 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800593e:	e3c0      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005944:	e3bd      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005946:	4b6f      	ldr	r3, [pc, #444]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005950:	4b6c      	ldr	r3, [pc, #432]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d10c      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005962:	4b68      	ldr	r3, [pc, #416]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	08db      	lsrs	r3, r3, #3
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	4a66      	ldr	r2, [pc, #408]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800596e:	fa22 f303 	lsr.w	r3, r2, r3
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005974:	e01e      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005976:	4b63      	ldr	r3, [pc, #396]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005982:	d106      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800598a:	d102      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800598c:	4b5f      	ldr	r3, [pc, #380]	@ (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005990:	e010      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005992:	4b5c      	ldr	r3, [pc, #368]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800599e:	d106      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80059a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a6:	d102      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059a8:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80059aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ac:	e002      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059b2:	e386      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059b4:	e385      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059b6:	4b57      	ldr	r3, [pc, #348]	@ (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80059b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ba:	e382      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c0:	e37f      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80059c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f040 80a7 	bne.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80059d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e0:	d055      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e8:	f200 8096 	bhi.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059f2:	f000 8084 	beq.w	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059fc:	f200 808c 	bhi.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a06:	d030      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a0e:	f200 8083 	bhi.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a1e:	d012      	beq.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005a20:	e07a      	b.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a22:	4b38      	ldr	r3, [pc, #224]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fe0b 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a3e:	e340      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a44:	e33d      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a46:	4b2f      	ldr	r3, [pc, #188]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a52:	d107      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a54:	f107 0318 	add.w	r3, r7, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fb51 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a62:	e32e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a68:	e32b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a6a:	4b26      	ldr	r3, [pc, #152]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a76:	d107      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fc93 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a86:	e31c      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a8c:	e319      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a98:	4b1a      	ldr	r3, [pc, #104]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d10c      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aaa:	4b16      	ldr	r3, [pc, #88]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	4a14      	ldr	r2, [pc, #80]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005abc:	e01e      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005abe:	4b11      	ldr	r3, [pc, #68]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aca:	d106      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad2:	d102      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ad8:	e010      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ada:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae6:	d106      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aee:	d102      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005af0:	4b07      	ldr	r3, [pc, #28]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005afa:	e2e2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005afc:	e2e1      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005afe:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b02:	e2de      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b04:	58024400 	.word	0x58024400
 8005b08:	03d09000 	.word	0x03d09000
 8005b0c:	003d0900 	.word	0x003d0900
 8005b10:	017d7840 	.word	0x017d7840
 8005b14:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b1c:	e2d1      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b22:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005b26:	430b      	orrs	r3, r1
 8005b28:	f040 809c 	bne.w	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005b2c:	4b93      	ldr	r3, [pc, #588]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b30:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005b34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b3c:	d054      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b44:	f200 808b 	bhi.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b4e:	f000 8083 	beq.w	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b58:	f200 8081 	bhi.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	d02f      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b6a:	d878      	bhi.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b78:	d012      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005b7a:	e070      	b.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b88:	d107      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fd5e 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b98:	e293      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9e:	e290      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ba0:	4b76      	ldr	r3, [pc, #472]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bac:	d107      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bae:	f107 0318 	add.w	r3, r7, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 faa4 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bbc:	e281      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc2:	e27e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bd2:	f107 030c 	add.w	r3, r7, #12
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fbe6 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be0:	e26f      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be6:	e26c      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005be8:	4b64      	ldr	r3, [pc, #400]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bf0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bf2:	4b62      	ldr	r3, [pc, #392]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d10c      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c04:	4b5d      	ldr	r3, [pc, #372]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	08db      	lsrs	r3, r3, #3
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c16:	e01e      	b.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c18:	4b58      	ldr	r3, [pc, #352]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c24:	d106      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c2c:	d102      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c2e:	4b55      	ldr	r3, [pc, #340]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c32:	e010      	b.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c34:	4b51      	ldr	r3, [pc, #324]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c40:	d106      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c48:	d102      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c4e:	e002      	b.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c54:	e235      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c56:	e234      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c58:	4b4c      	ldr	r3, [pc, #304]	@ (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5c:	e231      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c62:	e22e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c68:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	f040 808f 	bne.w	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005c72:	4b42      	ldr	r3, [pc, #264]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c76:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c82:	d06b      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c8a:	d874      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c92:	d056      	beq.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c9a:	d86c      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ca2:	d03b      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005caa:	d864      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cb2:	d021      	beq.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cba:	d85c      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc8:	d004      	beq.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005cca:	e054      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7fe fa0c 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8005cd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd2:	e1f6      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cd4:	4b29      	ldr	r3, [pc, #164]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce0:	d107      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce2:	f107 0318 	add.w	r3, r7, #24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fa0a 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf0:	e1e7      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf6:	e1e4      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cf8:	4b20      	ldr	r3, [pc, #128]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d04:	d107      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fb4c 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d14:	e1d5      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1a:	e1d2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d1c:	4b17      	ldr	r3, [pc, #92]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d109      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d28:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	08db      	lsrs	r3, r3, #3
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	4a13      	ldr	r2, [pc, #76]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d3a:	e1c2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d40:	e1bf      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d42:	4b0e      	ldr	r3, [pc, #56]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d4e:	d102      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005d50:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d54:	e1b5      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d5a:	e1b2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d5c:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d68:	d102      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005d6a:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d6e:	e1a8      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d74:	e1a5      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7a:	e1a2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	03d09000 	.word	0x03d09000
 8005d84:	003d0900 	.word	0x003d0900
 8005d88:	017d7840 	.word	0x017d7840
 8005d8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d94:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	d173      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005da4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dac:	d02f      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005db4:	d863      	bhi.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc2:	d012      	beq.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005dc4:	e05b      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dc6:	4b92      	ldr	r3, [pc, #584]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dd4:	f107 0318 	add.w	r3, r7, #24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f991 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005de2:	e16e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de8:	e16b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dea:	4b89      	ldr	r3, [pc, #548]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df6:	d107      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fad3 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e06:	e15c      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e0c:	e159      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e0e:	4b80      	ldr	r3, [pc, #512]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e18:	4b7d      	ldr	r3, [pc, #500]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d10c      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e2a:	4b79      	ldr	r3, [pc, #484]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	4a77      	ldr	r2, [pc, #476]	@ (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3c:	e01e      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e3e:	4b74      	ldr	r3, [pc, #464]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4a:	d106      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e52:	d102      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e54:	4b70      	ldr	r3, [pc, #448]	@ (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e58:	e010      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e66:	d106      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e6e:	d102      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e70:	4b6a      	ldr	r3, [pc, #424]	@ (800601c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e74:	e002      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e7a:	e122      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e7c:	e121      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e82:	e11e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e88:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	d133      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005e90:	4b5f      	ldr	r3, [pc, #380]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea6:	d012      	beq.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005ea8:	e023      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eaa:	4b59      	ldr	r3, [pc, #356]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eb6:	d107      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fbc7 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ec6:	e0fc      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ecc:	e0f9      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ece:	4b50      	ldr	r3, [pc, #320]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eda:	d107      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005edc:	f107 0318 	add.w	r3, r7, #24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 f90d 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eea:	e0ea      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ef0:	e0e7      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ef6:	e0e4      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005efc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005f00:	430b      	orrs	r3, r1
 8005f02:	f040 808d 	bne.w	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005f06:	4b42      	ldr	r3, [pc, #264]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005f0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f16:	d06b      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f1e:	d874      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f26:	d056      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2e:	d86c      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f36:	d03b      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f3e:	d864      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f46:	d021      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f4e:	d85c      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f5c:	d004      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005f5e:	e054      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f60:	f000 f8b8 	bl	80060d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f66:	e0ac      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f68:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f74:	d107      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f76:	f107 0318 	add.w	r3, r7, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f8c0 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f84:	e09d      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f8a:	e09a      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f8c:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f98:	d107      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f9a:	f107 030c 	add.w	r3, r7, #12
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fa02 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa8:	e08b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fae:	e088      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fb0:	4b17      	ldr	r3, [pc, #92]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d109      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fbc:	4b14      	ldr	r3, [pc, #80]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	4a13      	ldr	r2, [pc, #76]	@ (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fce:	e078      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd4:	e075      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe2:	d102      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fe8:	e06b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fee:	e068      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005ffe:	4b07      	ldr	r3, [pc, #28]	@ (800601c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006002:	e05e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006008:	e05b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800600e:	e058      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006010:	58024400 	.word	0x58024400
 8006014:	03d09000 	.word	0x03d09000
 8006018:	003d0900 	.word	0x003d0900
 800601c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006024:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006028:	430b      	orrs	r3, r1
 800602a:	d148      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800602c:	4b27      	ldr	r3, [pc, #156]	@ (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800602e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006030:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006034:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800603c:	d02a      	beq.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006044:	d838      	bhi.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006052:	d00d      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006054:	e030      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006056:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006062:	d102      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006064:	4b1a      	ldr	r3, [pc, #104]	@ (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006068:	e02b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800606e:	e028      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006070:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800607c:	d107      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800607e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fae4 	bl	8006650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800608c:	e019      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006092:	e016      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006094:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800609c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a0:	d107      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a2:	f107 0318 	add.w	r3, r7, #24
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f82a 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b0:	e007      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060bc:	e001      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80060c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3740      	adds	r7, #64	@ 0x40
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	58024400 	.word	0x58024400
 80060d0:	017d7840 	.word	0x017d7840

080060d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060d8:	f7fd ffd6 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4904      	ldr	r1, [pc, #16]	@ (80060fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	58024400 	.word	0x58024400
 80060fc:	0800bc6c 	.word	0x0800bc6c

08006100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	@ 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006108:	4ba1      	ldr	r3, [pc, #644]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006112:	4b9f      	ldr	r3, [pc, #636]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	0b1b      	lsrs	r3, r3, #12
 8006118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800611c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800611e:	4b9c      	ldr	r3, [pc, #624]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	091b      	lsrs	r3, r3, #4
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800612a:	4b99      	ldr	r3, [pc, #612]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612e:	08db      	lsrs	r3, r3, #3
 8006130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8111 	beq.w	8006370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b02      	cmp	r3, #2
 8006152:	f000 8083 	beq.w	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b02      	cmp	r3, #2
 800615a:	f200 80a1 	bhi.w	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d056      	beq.n	8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800616a:	e099      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616c:	4b88      	ldr	r3, [pc, #544]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02d      	beq.n	80061d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006178:	4b85      	ldr	r3, [pc, #532]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	4a84      	ldr	r2, [pc, #528]	@ (8006394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
 8006188:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061d2:	e087      	b.n	80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800639c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006216:	e065      	b.n	80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b59      	ldr	r3, [pc, #356]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a03 	vldr	s12, [r7, #12]
 800623e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625a:	e043      	b.n	80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626e:	4b48      	ldr	r3, [pc, #288]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006282:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629e:	e021      	b.n	80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b2:	4b37      	ldr	r3, [pc, #220]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80062e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	0a5b      	lsrs	r3, r3, #9
 80062ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800630a:	ee17 2a90 	vmov	r2, s15
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006312:	4b1f      	ldr	r3, [pc, #124]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800632c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006338:	ee17 2a90 	vmov	r2, s15
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006340:	4b13      	ldr	r3, [pc, #76]	@ (8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006344:	0e1b      	lsrs	r3, r3, #24
 8006346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800635a:	edd7 6a07 	vldr	s13, [r7, #28]
 800635e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006366:	ee17 2a90 	vmov	r2, s15
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800636e:	e008      	b.n	8006382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
}
 8006382:	bf00      	nop
 8006384:	3724      	adds	r7, #36	@ 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
 8006394:	03d09000 	.word	0x03d09000
 8006398:	46000000 	.word	0x46000000
 800639c:	4c742400 	.word	0x4c742400
 80063a0:	4a742400 	.word	0x4a742400
 80063a4:	4bbebc20 	.word	0x4bbebc20

080063a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	@ 0x24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80063ba:	4b9f      	ldr	r3, [pc, #636]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	0d1b      	lsrs	r3, r3, #20
 80063c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80063d2:	4b99      	ldr	r3, [pc, #612]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d6:	08db      	lsrs	r3, r3, #3
 80063d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	fb02 f303 	mul.w	r3, r2, r3
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8111 	beq.w	8006618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	f000 8083 	beq.w	8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b02      	cmp	r3, #2
 8006402:	f200 80a1 	bhi.w	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d056      	beq.n	80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006412:	e099      	b.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006414:	4b88      	ldr	r3, [pc, #544]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02d      	beq.n	800647c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006420:	4b85      	ldr	r3, [pc, #532]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	08db      	lsrs	r3, r3, #3
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	4a84      	ldr	r2, [pc, #528]	@ (800663c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
 8006430:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644a:	4b7b      	ldr	r3, [pc, #492]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645a:	ed97 6a03 	vldr	s12, [r7, #12]
 800645e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006476:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800647a:	e087      	b.n	800658c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800648a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648e:	4b6a      	ldr	r3, [pc, #424]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006496:	ee07 3a90 	vmov	s15, r3
 800649a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649e:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064be:	e065      	b.n	800658c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d2:	4b59      	ldr	r3, [pc, #356]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006502:	e043      	b.n	800658c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800664c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006516:	4b48      	ldr	r3, [pc, #288]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006526:	ed97 6a03 	vldr	s12, [r7, #12]
 800652a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800652e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006546:	e021      	b.n	800658c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006552:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655a:	4b37      	ldr	r3, [pc, #220]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656a:	ed97 6a03 	vldr	s12, [r7, #12]
 800656e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800657e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800658a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800658c:	4b2a      	ldr	r3, [pc, #168]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	0a5b      	lsrs	r3, r3, #9
 8006592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b2:	ee17 2a90 	vmov	r2, s15
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80065ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065e0:	ee17 2a90 	vmov	r2, s15
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80065e8:	4b13      	ldr	r3, [pc, #76]	@ (8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006602:	edd7 6a07 	vldr	s13, [r7, #28]
 8006606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660e:	ee17 2a90 	vmov	r2, s15
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006616:	e008      	b.n	800662a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	609a      	str	r2, [r3, #8]
}
 800662a:	bf00      	nop
 800662c:	3724      	adds	r7, #36	@ 0x24
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	58024400 	.word	0x58024400
 800663c:	03d09000 	.word	0x03d09000
 8006640:	46000000 	.word	0x46000000
 8006644:	4c742400 	.word	0x4c742400
 8006648:	4a742400 	.word	0x4a742400
 800664c:	4bbebc20 	.word	0x4bbebc20

08006650 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006650:	b480      	push	{r7}
 8006652:	b089      	sub	sp, #36	@ 0x24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006658:	4ba0      	ldr	r3, [pc, #640]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006662:	4b9e      	ldr	r3, [pc, #632]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800666c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800666e:	4b9b      	ldr	r3, [pc, #620]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006678:	4b98      	ldr	r3, [pc, #608]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667c:	08db      	lsrs	r3, r3, #3
 800667e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006690:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8111 	beq.w	80068be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	f000 8083 	beq.w	80067aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	f200 80a1 	bhi.w	80067ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d056      	beq.n	8006766 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80066b8:	e099      	b.n	80067ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ba:	4b88      	ldr	r3, [pc, #544]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02d      	beq.n	8006722 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c6:	4b85      	ldr	r3, [pc, #532]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	4a83      	ldr	r2, [pc, #524]	@ (80068e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f0:	4b7a      	ldr	r3, [pc, #488]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006700:	ed97 6a03 	vldr	s12, [r7, #12]
 8006704:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006720:	e087      	b.n	8006832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80068e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006734:	4b69      	ldr	r3, [pc, #420]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006744:	ed97 6a03 	vldr	s12, [r7, #12]
 8006748:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800674c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006754:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006764:	e065      	b.n	8006832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006770:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006778:	4b58      	ldr	r3, [pc, #352]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006788:	ed97 6a03 	vldr	s12, [r7, #12]
 800678c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006798:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800679c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067a8:	e043      	b.n	8006832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80068f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80067b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067bc:	4b47      	ldr	r3, [pc, #284]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ec:	e021      	b.n	8006832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80068e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006800:	4b36      	ldr	r3, [pc, #216]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006810:	ed97 6a03 	vldr	s12, [r7, #12]
 8006814:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80068e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006820:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006830:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006832:	4b2a      	ldr	r3, [pc, #168]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	0a5b      	lsrs	r3, r3, #9
 8006838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800684c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006858:	ee17 2a90 	vmov	r2, s15
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006860:	4b1e      	ldr	r3, [pc, #120]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800687a:	edd7 6a07 	vldr	s13, [r7, #28]
 800687e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006886:	ee17 2a90 	vmov	r2, s15
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800688e:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006892:	0e1b      	lsrs	r3, r3, #24
 8006894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b4:	ee17 2a90 	vmov	r2, s15
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	3724      	adds	r7, #36	@ 0x24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	58024400 	.word	0x58024400
 80068e0:	03d09000 	.word	0x03d09000
 80068e4:	46000000 	.word	0x46000000
 80068e8:	4c742400 	.word	0x4c742400
 80068ec:	4a742400 	.word	0x4a742400
 80068f0:	4bbebc20 	.word	0x4bbebc20

080068f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006902:	4b53      	ldr	r3, [pc, #332]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b03      	cmp	r3, #3
 800690c:	d101      	bne.n	8006912 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e099      	b.n	8006a46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006912:	4b4f      	ldr	r3, [pc, #316]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a4e      	ldr	r2, [pc, #312]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006918:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800691c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691e:	f7fa ffd5 	bl	80018cc <HAL_GetTick>
 8006922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006924:	e008      	b.n	8006938 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006926:	f7fa ffd1 	bl	80018cc <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e086      	b.n	8006a46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006938:	4b45      	ldr	r3, [pc, #276]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f0      	bne.n	8006926 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006944:	4b42      	ldr	r3, [pc, #264]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	493f      	ldr	r1, [pc, #252]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	628b      	str	r3, [r1, #40]	@ 0x28
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	3b01      	subs	r3, #1
 800695e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	3b01      	subs	r3, #1
 8006968:	025b      	lsls	r3, r3, #9
 800696a:	b29b      	uxth	r3, r3
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	3b01      	subs	r3, #1
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	3b01      	subs	r3, #1
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006988:	4931      	ldr	r1, [pc, #196]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 800698a:	4313      	orrs	r3, r2
 800698c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800698e:	4b30      	ldr	r3, [pc, #192]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	492d      	ldr	r1, [pc, #180]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 800699c:	4313      	orrs	r3, r2
 800699e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	f023 0220 	bic.w	r2, r3, #32
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	4928      	ldr	r1, [pc, #160]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069b2:	4b27      	ldr	r3, [pc, #156]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	4a26      	ldr	r2, [pc, #152]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069b8:	f023 0310 	bic.w	r3, r3, #16
 80069bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069be:	4b24      	ldr	r3, [pc, #144]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069c2:	4b24      	ldr	r3, [pc, #144]	@ (8006a54 <RCCEx_PLL2_Config+0x160>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	69d2      	ldr	r2, [r2, #28]
 80069ca:	00d2      	lsls	r2, r2, #3
 80069cc:	4920      	ldr	r1, [pc, #128]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	f043 0310 	orr.w	r3, r3, #16
 80069dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069f0:	e00f      	b.n	8006a12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d106      	bne.n	8006a06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	4a14      	ldr	r2, [pc, #80]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a04:	e005      	b.n	8006a12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a06:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0a:	4a11      	ldr	r2, [pc, #68]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a12:	4b0f      	ldr	r3, [pc, #60]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a0e      	ldr	r2, [pc, #56]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1e:	f7fa ff55 	bl	80018cc <HAL_GetTick>
 8006a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a24:	e008      	b.n	8006a38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a26:	f7fa ff51 	bl	80018cc <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e006      	b.n	8006a46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a38:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <RCCEx_PLL2_Config+0x15c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	58024400 	.word	0x58024400
 8006a54:	ffff0007 	.word	0xffff0007

08006a58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a66:	4b53      	ldr	r3, [pc, #332]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d101      	bne.n	8006a76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e099      	b.n	8006baa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a76:	4b4f      	ldr	r3, [pc, #316]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a82:	f7fa ff23 	bl	80018cc <HAL_GetTick>
 8006a86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a88:	e008      	b.n	8006a9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a8a:	f7fa ff1f 	bl	80018cc <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e086      	b.n	8006baa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a9c:	4b45      	ldr	r3, [pc, #276]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1f0      	bne.n	8006a8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006aa8:	4b42      	ldr	r3, [pc, #264]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	051b      	lsls	r3, r3, #20
 8006ab6:	493f      	ldr	r1, [pc, #252]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	628b      	str	r3, [r1, #40]	@ 0x28
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	025b      	lsls	r3, r3, #9
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006aec:	4931      	ldr	r1, [pc, #196]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006af2:	4b30      	ldr	r3, [pc, #192]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	492d      	ldr	r1, [pc, #180]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b04:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	4928      	ldr	r1, [pc, #160]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b16:	4b27      	ldr	r3, [pc, #156]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1a:	4a26      	ldr	r2, [pc, #152]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b22:	4b24      	ldr	r3, [pc, #144]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b26:	4b24      	ldr	r3, [pc, #144]	@ (8006bb8 <RCCEx_PLL3_Config+0x160>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	69d2      	ldr	r2, [r2, #28]
 8006b2e:	00d2      	lsls	r2, r2, #3
 8006b30:	4920      	ldr	r1, [pc, #128]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b36:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b48:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	4a19      	ldr	r2, [pc, #100]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b54:	e00f      	b.n	8006b76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d106      	bne.n	8006b6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b5c:	4b15      	ldr	r3, [pc, #84]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	4a14      	ldr	r2, [pc, #80]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b68:	e005      	b.n	8006b76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b6a:	4b12      	ldr	r3, [pc, #72]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	4a11      	ldr	r2, [pc, #68]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b76:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b82:	f7fa fea3 	bl	80018cc <HAL_GetTick>
 8006b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b88:	e008      	b.n	8006b9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b8a:	f7fa fe9f 	bl	80018cc <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e006      	b.n	8006baa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <RCCEx_PLL3_Config+0x15c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	ffff0007 	.word	0xffff0007

08006bbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	@ 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e075      	b.n	8006cba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d105      	bne.n	8006be6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7fa fbef 	bl	80013c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2204      	movs	r2, #4
 8006bea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f868 	bl	8006cc4 <HAL_SD_InitCard>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e05d      	b.n	8006cba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006bfe:	f107 0308 	add.w	r3, r7, #8
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fdaf 	bl	8007768 <HAL_SD_GetCardStatus>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e052      	b.n	8006cba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006c14:	7e3b      	ldrb	r3, [r7, #24]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006c1a:	7e7b      	ldrb	r3, [r7, #25]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10a      	bne.n	8006c3e <HAL_SD_Init+0x82>
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <HAL_SD_Init+0x78>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c3c:	e00b      	b.n	8006c56 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d104      	bne.n	8006c50 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c4e:	e002      	b.n	8006c56 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fe6d 	bl	800793c <HAL_SD_ConfigWideBusOperation>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e026      	b.n	8006cba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006c6c:	f7fa fe2e 	bl	80018cc <HAL_GetTick>
 8006c70:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c72:	e011      	b.n	8006c98 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c74:	f7fa fe2a 	bl	80018cc <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d109      	bne.n	8006c98 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c8a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e010      	b.n	8006cba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 ff61 	bl	8007b60 <HAL_SD_GetCardState>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d1e7      	bne.n	8006c74 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3728      	adds	r7, #40	@ 0x28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006cc4:	b590      	push	{r4, r7, lr}
 8006cc6:	b08d      	sub	sp, #52	@ 0x34
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006cdc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006ce0:	f04f 0100 	mov.w	r1, #0
 8006ce4:	f7fe fc76 	bl	80055d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006cfe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e070      	b.n	8006de6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	4a39      	ldr	r2, [pc, #228]	@ (8006df0 <HAL_SD_InitCard+0x12c>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	091b      	lsrs	r3, r3, #4
 8006d10:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681c      	ldr	r4, [r3, #0]
 8006d16:	466a      	mov	r2, sp
 8006d18:	f107 0318 	add.w	r3, r7, #24
 8006d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d20:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d24:	f107 030c 	add.w	r3, r7, #12
 8006d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f003 f882 	bl	8009e34 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f003 f8c5 	bl	8009ec4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006d52:	4a28      	ldr	r2, [pc, #160]	@ (8006df4 <HAL_SD_InitCard+0x130>)
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fa fdc1 	bl	80018e4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 ffea 	bl	8007d3c <SD_PowerON>
 8006d68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e02e      	b.n	8006de6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 ff09 	bl	8007ba0 <SD_InitCard>
 8006d8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e01b      	b.n	8006de6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006db6:	4618      	mov	r0, r3
 8006db8:	f003 f91a 	bl	8009ff0 <SDMMC_CmdBlockLength>
 8006dbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00f      	beq.n	8006de4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8006df8 <HAL_SD_InitCard+0x134>)
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	372c      	adds	r7, #44	@ 0x2c
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd90      	pop	{r4, r7, pc}
 8006dee:	bf00      	nop
 8006df0:	014f8b59 	.word	0x014f8b59
 8006df4:	00012110 	.word	0x00012110
 8006df8:	1fe00fff 	.word	0x1fe00fff

08006dfc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08c      	sub	sp, #48	@ 0x30
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d107      	bne.n	8006e24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e08d      	b.n	8006f40 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 8086 	bne.w	8006f3e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d907      	bls.n	8006e56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e074      	b.n	8006f40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2203      	movs	r2, #3
 8006e5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	025a      	lsls	r2, r3, #9
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d002      	beq.n	8006e82 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7e:	025b      	lsls	r3, r3, #9
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e8e:	2390      	movs	r3, #144	@ 0x90
 8006e90:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e92:	2302      	movs	r3, #2
 8006e94:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f107 0210 	add.w	r2, r7, #16
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f003 f875 	bl	8009f98 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ebc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d90a      	bls.n	8006eea <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2282      	movs	r2, #130	@ 0x82
 8006ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f003 f8cb 	bl	800a07c <SDMMC_CmdReadMultiBlock>
 8006ee6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006ee8:	e009      	b.n	8006efe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2281      	movs	r2, #129	@ 0x81
 8006eee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f003 f89d 	bl	800a036 <SDMMC_CmdReadSingleBlock>
 8006efc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d012      	beq.n	8006f2a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a0f      	ldr	r2, [pc, #60]	@ (8006f48 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f12:	431a      	orrs	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e00a      	b.n	8006f40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006f38:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e000      	b.n	8006f40 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006f3e:	2302      	movs	r3, #2
  }
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3730      	adds	r7, #48	@ 0x30
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	1fe00fff 	.word	0x1fe00fff

08006f4c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08c      	sub	sp, #48	@ 0x30
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e08d      	b.n	8007090 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f040 8086 	bne.w	800708e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	441a      	add	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d907      	bls.n	8006fa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e074      	b.n	8007090 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	025a      	lsls	r2, r3, #9
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d002      	beq.n	8006fd2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	025b      	lsls	r3, r3, #9
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	025b      	lsls	r3, r3, #9
 8006fdc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006fde:	2390      	movs	r3, #144	@ 0x90
 8006fe0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f107 0210 	add.w	r2, r7, #16
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f002 ffcd 	bl	8009f98 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800700c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2201      	movs	r2, #1
 800701c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d90a      	bls.n	800703a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	22a0      	movs	r2, #160	@ 0xa0
 8007028:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007030:	4618      	mov	r0, r3
 8007032:	f003 f869 	bl	800a108 <SDMMC_CmdWriteMultiBlock>
 8007036:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007038:	e009      	b.n	800704e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2290      	movs	r2, #144	@ 0x90
 800703e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007046:	4618      	mov	r0, r3
 8007048:	f003 f83b 	bl	800a0c2 <SDMMC_CmdWriteSingleBlock>
 800704c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d012      	beq.n	800707a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a0f      	ldr	r2, [pc, #60]	@ (8007098 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800705a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007062:	431a      	orrs	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e00a      	b.n	8007090 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007088:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e000      	b.n	8007090 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800708e:	2302      	movs	r3, #2
  }
}
 8007090:	4618      	mov	r0, r3
 8007092:	3730      	adds	r7, #48	@ 0x30
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	1fe00fff 	.word	0x1fe00fff

0800709c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_SD_IRQHandler+0x2e>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 f926 	bl	8008314 <SD_Read_IT>
 80070c8:	e19a      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80ac 	beq.w	8007232 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070e2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4b59      	ldr	r3, [pc, #356]	@ (8007254 <HAL_SD_IRQHandler+0x1b8>)
 80070f0:	400b      	ands	r3, r1
 80070f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007102:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007112:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d038      	beq.n	8007190 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_SD_IRQHandler+0x96>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f003 f80a 	bl	800a150 <SDMMC_CmdStopTransfer>
 800713c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f95b 	bl	800740c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a3f      	ldr	r2, [pc, #252]	@ (8007258 <HAL_SD_IRQHandler+0x1bc>)
 800715c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <HAL_SD_IRQHandler+0xe4>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f003 fcb5 	bl	800aaf0 <HAL_SD_RxCpltCallback>
 8007186:	e13b      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f003 fca7 	bl	800aadc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800718e:	e137      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 8132 	beq.w	8007400 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2200      	movs	r2, #0
 80071aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_SD_IRQHandler+0x12c>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d011      	beq.n	80071ec <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 ffbf 	bl	800a150 <SDMMC_CmdStopTransfer>
 80071d2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d008      	beq.n	80071ec <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	431a      	orrs	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f910 	bl	800740c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <HAL_SD_IRQHandler+0x172>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f003 fc64 	bl	800aadc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <HAL_SD_IRQHandler+0x18e>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80eb 	beq.w	8007400 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f003 fc60 	bl	800aaf0 <HAL_SD_RxCpltCallback>
}
 8007230:	e0e6      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00d      	beq.n	800725c <HAL_SD_IRQHandler+0x1c0>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 f8a8 	bl	80083a0 <SD_Write_IT>
 8007250:	e0d6      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
 8007252:	bf00      	nop
 8007254:	ffff3ec5 	.word	0xffff3ec5
 8007258:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007262:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 809d 	beq.w	80073a6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727e:	f043 0202 	orr.w	r2, r3, #2
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007298:	f043 0208 	orr.w	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072cc:	f043 0210 	orr.w	r2, r3, #16
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007408 <HAL_SD_IRQHandler+0x36c>)
 80072da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80072ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072fa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800730a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800731a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f002 ff15 	bl	800a150 <SDMMC_CmdStopTransfer>
 8007326:	4602      	mov	r2, r0
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007340:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800734a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f851 	bl	800740c <HAL_SD_ErrorCallback>
}
 800736a:	e049      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007372:	2b00      	cmp	r3, #0
 8007374:	d044      	beq.n	8007400 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800737a:	2b00      	cmp	r3, #0
 800737c:	d040      	beq.n	8007400 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800738c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f834 	bl	800740c <HAL_SD_ErrorCallback>
}
 80073a4:	e02c      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d025      	beq.n	8007400 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 f84a 	bl	8008470 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80073dc:	e010      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 f832 	bl	8008448 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80073e4:	e00c      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 f833 	bl	800845c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80073f6:	e003      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 f81b 	bl	8008434 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80073fe:	e7ff      	b.n	8007400 <HAL_SD_IRQHandler+0x364>
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	18000f3a 	.word	0x18000f3a

0800740c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742e:	0f9b      	lsrs	r3, r3, #30
 8007430:	b2da      	uxtb	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743a:	0e9b      	lsrs	r3, r3, #26
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	b2da      	uxtb	r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800744c:	0e1b      	lsrs	r3, r3, #24
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	b2da      	uxtb	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	b2da      	uxtb	r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b2da      	uxtb	r2, r3
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007480:	0d1b      	lsrs	r3, r3, #20
 8007482:	b29a      	uxth	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	b2da      	uxtb	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800749e:	0bdb      	lsrs	r3, r3, #15
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b0:	0b9b      	lsrs	r3, r3, #14
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c2:	0b5b      	lsrs	r3, r3, #13
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d4:	0b1b      	lsrs	r3, r3, #12
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2200      	movs	r2, #0
 80074e6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d163      	bne.n	80075b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f4:	009a      	lsls	r2, r3, #2
 80074f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80074fa:	4013      	ands	r3, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007500:	0f92      	lsrs	r2, r2, #30
 8007502:	431a      	orrs	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800750c:	0edb      	lsrs	r3, r3, #27
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	b2da      	uxtb	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800751e:	0e1b      	lsrs	r3, r3, #24
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	b2da      	uxtb	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007530:	0d5b      	lsrs	r3, r3, #21
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	b2da      	uxtb	r2, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007542:	0c9b      	lsrs	r3, r3, #18
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	b2da      	uxtb	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007554:	0bdb      	lsrs	r3, r3, #15
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	b2da      	uxtb	r2, r3
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	7e1b      	ldrb	r3, [r3, #24]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	3302      	adds	r3, #2
 8007578:	2201      	movs	r2, #1
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007582:	fb03 f202 	mul.w	r2, r3, r2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	7a1b      	ldrb	r3, [r3, #8]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	2201      	movs	r2, #1
 8007596:	409a      	lsls	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80075a4:	0a52      	lsrs	r2, r2, #9
 80075a6:	fb03 f202 	mul.w	r2, r3, r2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80075b6:	e031      	b.n	800761c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d11d      	bne.n	80075fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ce:	0c1b      	lsrs	r3, r3, #16
 80075d0:	431a      	orrs	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	3301      	adds	r3, #1
 80075dc:	029a      	lsls	r2, r3, #10
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80075fa:	e00f      	b.n	800761c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a58      	ldr	r2, [pc, #352]	@ (8007764 <HAL_SD_GetCardCSD+0x344>)
 8007602:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007608:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e09d      	b.n	8007758 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007620:	0b9b      	lsrs	r3, r3, #14
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007632:	09db      	lsrs	r3, r3, #7
 8007634:	b2db      	uxtb	r3, r3
 8007636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800764a:	b2da      	uxtb	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007654:	0fdb      	lsrs	r3, r3, #31
 8007656:	b2da      	uxtb	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007660:	0f5b      	lsrs	r3, r3, #29
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	b2da      	uxtb	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007672:	0e9b      	lsrs	r3, r3, #26
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007684:	0d9b      	lsrs	r3, r3, #22
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007696:	0d5b      	lsrs	r3, r3, #21
 8007698:	b2db      	uxtb	r3, r3
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076c6:	0bdb      	lsrs	r3, r3, #15
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076da:	0b9b      	lsrs	r3, r3, #14
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ee:	0b5b      	lsrs	r3, r3, #13
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007702:	0b1b      	lsrs	r3, r3, #12
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	b2da      	uxtb	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007716:	0a9b      	lsrs	r3, r3, #10
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	b2da      	uxtb	r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	b2da      	uxtb	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800773e:	085b      	lsrs	r3, r3, #1
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007746:	b2da      	uxtb	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	1fe00fff 	.word	0x1fe00fff

08007768 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b094      	sub	sp, #80	@ 0x50
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b03      	cmp	r3, #3
 8007782:	d101      	bne.n	8007788 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0a7      	b.n	80078d8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007788:	f107 0308 	add.w	r3, r7, #8
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fb62 	bl	8007e58 <SD_SendSDStatus>
 8007794:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a4f      	ldr	r2, [pc, #316]	@ (80078e0 <HAL_SD_GetCardStatus+0x178>)
 80077a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80077be:	e070      	b.n	80078a2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	099b      	lsrs	r3, r3, #6
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	0e1b      	lsrs	r3, r3, #24
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	4313      	orrs	r3, r2
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	061a      	lsls	r2, r3, #24
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007806:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007810:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	0e1b      	lsrs	r3, r3, #24
 8007816:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	b2da      	uxtb	r2, r3
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	b2da      	uxtb	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	0d1b      	lsrs	r3, r3, #20
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	b2da      	uxtb	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	b29b      	uxth	r3, r3
 8007844:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007848:	b29a      	uxth	r2, r3
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	b29b      	uxth	r3, r3
 800784e:	b2db      	uxtb	r3, r3
 8007850:	b29b      	uxth	r3, r3
 8007852:	4313      	orrs	r3, r2
 8007854:	b29a      	uxth	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	0a9b      	lsrs	r3, r3, #10
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007864:	b2da      	uxtb	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	b2da      	uxtb	r2, r3
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	091b      	lsrs	r3, r3, #4
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	b2da      	uxtb	r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	0e1b      	lsrs	r3, r3, #24
 800789c:	b2da      	uxtb	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078aa:	4618      	mov	r0, r3
 80078ac:	f002 fba0 	bl	8009ff0 <SDMMC_CmdBlockLength>
 80078b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80078b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a08      	ldr	r2, [pc, #32]	@ (80078e0 <HAL_SD_GetCardStatus+0x178>)
 80078be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078c4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80078d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3750      	adds	r7, #80	@ 0x50
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	1fe00fff 	.word	0x1fe00fff

080078e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b08d      	sub	sp, #52	@ 0x34
 8007940:	af02      	add	r7, sp, #8
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007958:	2b03      	cmp	r3, #3
 800795a:	d02e      	beq.n	80079ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007962:	d106      	bne.n	8007972 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007968:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007970:	e029      	b.n	80079c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007978:	d10a      	bne.n	8007990 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fb64 	bl	8008048 <SD_WideBus_Enable>
 8007980:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	635a      	str	r2, [r3, #52]	@ 0x34
 800798e:	e01a      	b.n	80079c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10a      	bne.n	80079ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fba1 	bl	80080de <SD_WideBus_Disable>
 800799c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80079aa:	e00c      	b.n	80079c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80079b8:	e005      	b.n	80079c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079be:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a5f      	ldr	r2, [pc, #380]	@ (8007b50 <HAL_SD_ConfigWideBusOperation+0x214>)
 80079d4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80079dc:	e096      	b.n	8007b0c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80079de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80079e2:	f04f 0100 	mov.w	r1, #0
 80079e6:	f7fd fdf5 	bl	80055d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80079ea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8083 	beq.w	8007afa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4950      	ldr	r1, [pc, #320]	@ (8007b54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a12:	fba1 1303 	umull	r1, r3, r1, r3
 8007a16:	0e1b      	lsrs	r3, r3, #24
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d303      	bcc.n	8007a24 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	e05a      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a2c:	d103      	bne.n	8007a36 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e051      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3e:	d126      	bne.n	8007a8e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10e      	bne.n	8007a66 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4a43      	ldr	r2, [pc, #268]	@ (8007b58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d906      	bls.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4a40      	ldr	r2, [pc, #256]	@ (8007b54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a54:	fba2 2303 	umull	r2, r3, r2, r3
 8007a58:	0e5b      	lsrs	r3, r3, #25
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e03d      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	e039      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	4a39      	ldr	r2, [pc, #228]	@ (8007b58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d906      	bls.n	8007a86 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4a36      	ldr	r2, [pc, #216]	@ (8007b54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	0e5b      	lsrs	r3, r3, #25
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	e029      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	e025      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10e      	bne.n	8007ab4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4a30      	ldr	r2, [pc, #192]	@ (8007b5c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d906      	bls.n	8007aac <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8007b54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	0e1b      	lsrs	r3, r3, #24
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	e016      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e012      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac0:	4a26      	ldr	r2, [pc, #152]	@ (8007b5c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d906      	bls.n	8007ad4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4a22      	ldr	r2, [pc, #136]	@ (8007b54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	0e1b      	lsrs	r3, r3, #24
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	e002      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681c      	ldr	r4, [r3, #0]
 8007ade:	466a      	mov	r2, sp
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ae8:	e882 0003 	stmia.w	r2, {r0, r1}
 8007aec:	f107 0308 	add.w	r3, r7, #8
 8007af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007af2:	4620      	mov	r0, r4
 8007af4:	f002 f99e 	bl	8009e34 <SDMMC_Init>
 8007af8:	e008      	b.n	8007b0c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 fa6b 	bl	8009ff0 <SDMMC_CmdBlockLength>
 8007b1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a0a      	ldr	r2, [pc, #40]	@ (8007b50 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007b28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	372c      	adds	r7, #44	@ 0x2c
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd90      	pop	{r4, r7, pc}
 8007b50:	1fe00fff 	.word	0x1fe00fff
 8007b54:	55e63b89 	.word	0x55e63b89
 8007b58:	02faf080 	.word	0x02faf080
 8007b5c:	017d7840 	.word	0x017d7840

08007b60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b6c:	f107 030c 	add.w	r3, r7, #12
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa40 	bl	8007ff8 <SD_SendStatus>
 8007b78:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	0a5b      	lsrs	r3, r3, #9
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b96:	693b      	ldr	r3, [r7, #16]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b090      	sub	sp, #64	@ 0x40
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007bac:	f7f9 fe8e 	bl	80018cc <HAL_GetTick>
 8007bb0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f002 f995 	bl	8009ee6 <SDMMC_GetPowerState>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007bc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007bc6:	e0b5      	b.n	8007d34 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d02e      	beq.n	8007c2e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f002 fbe0 	bl	800a39a <SDMMC_CmdSendCID>
 8007bda:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <SD_InitCard+0x46>
    {
      return errorstate;
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	e0a6      	b.n	8007d34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f002 f9c0 	bl	8009f72 <SDMMC_GetResponse>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2104      	movs	r1, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f002 f9b7 	bl	8009f72 <SDMMC_GetResponse>
 8007c04:	4602      	mov	r2, r0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2108      	movs	r1, #8
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 f9ae 	bl	8009f72 <SDMMC_GetResponse>
 8007c16:	4602      	mov	r2, r0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	210c      	movs	r1, #12
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 f9a5 	bl	8009f72 <SDMMC_GetResponse>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d01d      	beq.n	8007c72 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007c36:	e019      	b.n	8007c6c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f107 020a 	add.w	r2, r7, #10
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 fbe8 	bl	800a418 <SDMMC_CmdSetRelAdd>
 8007c48:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	e06f      	b.n	8007d34 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007c54:	f7f9 fe3a 	bl	80018cc <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d902      	bls.n	8007c6c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007c66:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c6a:	e063      	b.n	8007d34 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007c6c:	897b      	ldrh	r3, [r7, #10]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0e2      	beq.n	8007c38 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d036      	beq.n	8007ce8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c7a:	897b      	ldrh	r3, [r7, #10]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f002 fba2 	bl	800a3d8 <SDMMC_CmdSendCSD>
 8007c94:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <SD_InitCard+0x100>
    {
      return errorstate;
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	e049      	b.n	8007d34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f002 f963 	bl	8009f72 <SDMMC_GetResponse>
 8007cac:	4602      	mov	r2, r0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2104      	movs	r1, #4
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f002 f95a 	bl	8009f72 <SDMMC_GetResponse>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2108      	movs	r1, #8
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 f951 	bl	8009f72 <SDMMC_GetResponse>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	210c      	movs	r1, #12
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f002 f948 	bl	8009f72 <SDMMC_GetResponse>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2104      	movs	r1, #4
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f002 f93f 	bl	8009f72 <SDMMC_GetResponse>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	0d1a      	lsrs	r2, r3, #20
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007cfc:	f107 030c 	add.w	r3, r7, #12
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fb8c 	bl	8007420 <HAL_SD_GetCardCSD>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d12:	e00f      	b.n	8007d34 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4610      	mov	r0, r2
 8007d22:	f002 fa51 	bl	800a1c8 <SDMMC_CmdSelDesel>
 8007d26:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <SD_InitCard+0x192>
  {
    return errorstate;
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	e000      	b.n	8007d34 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3740      	adds	r7, #64	@ 0x40
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 fa5a 	bl	800a20e <SDMMC_CmdGoIdleState>
 8007d5a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	e072      	b.n	8007e4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 fa6d 	bl	800a24a <SDMMC_CmdOperCond>
 8007d70:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d78:	d10d      	bne.n	8007d96 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fa42 	bl	800a20e <SDMMC_CmdGoIdleState>
 8007d8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <SD_PowerON+0x60>
    {
      return errorstate;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	e05a      	b.n	8007e4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d137      	bne.n	8007e14 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f002 fa6d 	bl	800a28a <SDMMC_CmdAppCommand>
 8007db0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d02d      	beq.n	8007e14 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007db8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007dbc:	e046      	b.n	8007e4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f002 fa60 	bl	800a28a <SDMMC_CmdAppCommand>
 8007dca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	e03a      	b.n	8007e4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	491e      	ldr	r1, [pc, #120]	@ (8007e54 <SD_PowerON+0x118>)
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f002 fa77 	bl	800a2d0 <SDMMC_CmdAppOperCommand>
 8007de2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007dee:	e02d      	b.n	8007e4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f002 f8bb 	bl	8009f72 <SDMMC_GetResponse>
 8007dfc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	0fdb      	lsrs	r3, r3, #31
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <SD_PowerON+0xce>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <SD_PowerON+0xd0>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	613b      	str	r3, [r7, #16]

    count++;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	3301      	adds	r3, #1
 8007e12:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d802      	bhi.n	8007e24 <SD_PowerON+0xe8>
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0cc      	beq.n	8007dbe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d902      	bls.n	8007e34 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007e2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e32:	e00b      	b.n	8007e4c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	c1100000 	.word	0xc1100000

08007e58 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08c      	sub	sp, #48	@ 0x30
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e62:	f7f9 fd33 	bl	80018cc <HAL_GetTick>
 8007e66:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f002 f87d 	bl	8009f72 <SDMMC_GetResponse>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e82:	d102      	bne.n	8007e8a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e88:	e0b0      	b.n	8007fec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2140      	movs	r1, #64	@ 0x40
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 f8ad 	bl	8009ff0 <SDMMC_CmdBlockLength>
 8007e96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	e0a0      	b.n	8007fec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f002 f9e7 	bl	800a28a <SDMMC_CmdAppCommand>
 8007ebc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	e08d      	b.n	8007fec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007ed6:	2340      	movs	r3, #64	@ 0x40
 8007ed8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007eda:	2360      	movs	r3, #96	@ 0x60
 8007edc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f107 0208 	add.w	r2, r7, #8
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f002 f84f 	bl	8009f98 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 facf 	bl	800a4a2 <SDMMC_CmdStatusRegister>
 8007f04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02b      	beq.n	8007f64 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	e069      	b.n	8007fec <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d013      	beq.n	8007f4e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007f26:	2300      	movs	r3, #0
 8007f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f2a:	e00d      	b.n	8007f48 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 ffa9 	bl	8009e88 <SDMMC_ReadFIFO>
 8007f36:	4602      	mov	r2, r0
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	601a      	str	r2, [r3, #0]
        pData++;
 8007f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3e:	3304      	adds	r3, #4
 8007f40:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f44:	3301      	adds	r3, #1
 8007f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	d9ee      	bls.n	8007f2c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f4e:	f7f9 fcbd 	bl	80018cc <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d102      	bne.n	8007f64 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f62:	e043      	b.n	8007fec <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f6a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0d2      	beq.n	8007f18 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f80:	2308      	movs	r3, #8
 8007f82:	e033      	b.n	8007fec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f92:	2302      	movs	r3, #2
 8007f94:	e02a      	b.n	8007fec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d017      	beq.n	8007fd4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007fa4:	2320      	movs	r3, #32
 8007fa6:	e021      	b.n	8007fec <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 ff6b 	bl	8009e88 <SDMMC_ReadFIFO>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	601a      	str	r2, [r3, #0]
    pData++;
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	3304      	adds	r3, #4
 8007fbc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fbe:	f7f9 fc85 	bl	80018cc <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d102      	bne.n	8007fd4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007fce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fd2:	e00b      	b.n	8007fec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e2      	bne.n	8007fa8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a03      	ldr	r2, [pc, #12]	@ (8007ff4 <SD_SendSDStatus+0x19c>)
 8007fe8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3730      	adds	r7, #48	@ 0x30
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	18000f3a 	.word	0x18000f3a

08007ff8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008008:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800800c:	e018      	b.n	8008040 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f002 fa1e 	bl	800a45c <SDMMC_CmdSendStatus>
 8008020:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	e009      	b.n	8008040 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f001 ff9d 	bl	8009f72 <SDMMC_GetResponse>
 8008038:	4602      	mov	r2, r0
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f001 ff87 	bl	8009f72 <SDMMC_GetResponse>
 8008064:	4603      	mov	r3, r0
 8008066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800806e:	d102      	bne.n	8008076 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008070:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008074:	e02f      	b.n	80080d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f879 	bl	8008174 <SD_FindSCR>
 8008082:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	e023      	b.n	80080d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01c      	beq.n	80080d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f002 f8f0 	bl	800a28a <SDMMC_CmdAppCommand>
 80080aa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	e00f      	b.n	80080d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2102      	movs	r1, #2
 80080bc:	4618      	mov	r0, r3
 80080be:	f002 f927 	bl	800a310 <SDMMC_CmdBusWidth>
 80080c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	e003      	b.n	80080d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e001      	b.n	80080d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b086      	sub	sp, #24
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	2300      	movs	r3, #0
 80080ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 ff3c 	bl	8009f72 <SDMMC_GetResponse>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008104:	d102      	bne.n	800810c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800810a:	e02f      	b.n	800816c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800810c:	f107 030c 	add.w	r3, r7, #12
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f82e 	bl	8008174 <SD_FindSCR>
 8008118:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	e023      	b.n	800816c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01c      	beq.n	8008168 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f002 f8a5 	bl	800a28a <SDMMC_CmdAppCommand>
 8008140:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e00f      	b.n	800816c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f002 f8dc 	bl	800a310 <SDMMC_CmdBusWidth>
 8008158:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e003      	b.n	800816c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008164:	2300      	movs	r3, #0
 8008166:	e001      	b.n	800816c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008168:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	@ 0x38
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800817e:	f7f9 fba5 	bl	80018cc <HAL_GetTick>
 8008182:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008188:	2300      	movs	r3, #0
 800818a:	60bb      	str	r3, [r7, #8]
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2108      	movs	r1, #8
 800819a:	4618      	mov	r0, r3
 800819c:	f001 ff28 	bl	8009ff0 <SDMMC_CmdBlockLength>
 80081a0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	e0ad      	b.n	8008308 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b4:	041b      	lsls	r3, r3, #16
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f002 f866 	bl	800a28a <SDMMC_CmdAppCommand>
 80081be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80081c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	e09e      	b.n	8008308 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80081d0:	2308      	movs	r3, #8
 80081d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80081d4:	2330      	movs	r3, #48	@ 0x30
 80081d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081d8:	2302      	movs	r3, #2
 80081da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081dc:	2300      	movs	r3, #0
 80081de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80081e0:	2301      	movs	r3, #1
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f107 0210 	add.w	r2, r7, #16
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fed2 	bl	8009f98 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f002 f8ac 	bl	800a356 <SDMMC_CmdSendSCR>
 80081fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d027      	beq.n	8008256 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008208:	e07e      	b.n	8008308 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d113      	bne.n	8008240 <SD_FindSCR+0xcc>
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	2b00      	cmp	r3, #0
 800821c:	d110      	bne.n	8008240 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fe30 	bl	8009e88 <SDMMC_ReadFIFO>
 8008228:	4603      	mov	r3, r0
 800822a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f001 fe29 	bl	8009e88 <SDMMC_ReadFIFO>
 8008236:	4603      	mov	r3, r0
 8008238:	60fb      	str	r3, [r7, #12]
      index++;
 800823a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823c:	3301      	adds	r3, #1
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008240:	f7f9 fb44 	bl	80018cc <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824e:	d102      	bne.n	8008256 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008250:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008254:	e058      	b.n	8008308 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800825c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0d1      	beq.n	800820a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2208      	movs	r2, #8
 800827a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800827c:	2308      	movs	r3, #8
 800827e:	e043      	b.n	8008308 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2202      	movs	r2, #2
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008296:	2302      	movs	r3, #2
 8008298:	e036      	b.n	8008308 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2220      	movs	r2, #32
 80082ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80082b0:	2320      	movs	r3, #32
 80082b2:	e029      	b.n	8008308 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a15      	ldr	r2, [pc, #84]	@ (8008310 <SD_FindSCR+0x19c>)
 80082ba:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	061a      	lsls	r2, r3, #24
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80082d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	0e1b      	lsrs	r3, r3, #24
 80082d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80082da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082dc:	601a      	str	r2, [r3, #0]
    scr++;
 80082de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e0:	3304      	adds	r3, #4
 80082e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	061a      	lsls	r2, r3, #24
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80082fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	0e1b      	lsrs	r3, r3, #24
 8008300:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3738      	adds	r7, #56	@ 0x38
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	18000f3a 	.word	0x18000f3a

08008314 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008326:	2b1f      	cmp	r3, #31
 8008328:	d936      	bls.n	8008398 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e027      	b.n	8008380 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f001 fda7 	bl	8009e88 <SDMMC_ReadFIFO>
 800833a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	3301      	adds	r3, #1
 8008348:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	b2da      	uxtb	r2, r3
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	3301      	adds	r3, #1
 8008358:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	b2da      	uxtb	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	3301      	adds	r3, #1
 8008368:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	0e1b      	lsrs	r3, r3, #24
 800836e:	b2da      	uxtb	r2, r3
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	3301      	adds	r3, #1
 8008378:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	3301      	adds	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b07      	cmp	r3, #7
 8008384:	d9d4      	bls.n	8008330 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	f1a3 0220 	sub.w	r2, r3, #32
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	2b1f      	cmp	r3, #31
 80083b4:	d93a      	bls.n	800842c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	e02b      	b.n	8008414 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3301      	adds	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	021a      	lsls	r2, r3, #8
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	3301      	adds	r3, #1
 80083d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	041a      	lsls	r2, r3, #16
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	3301      	adds	r3, #1
 80083ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	061a      	lsls	r2, r3, #24
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	3301      	adds	r3, #1
 80083fc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f107 020c 	add.w	r2, r7, #12
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fd4a 	bl	8009ea2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	3301      	adds	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b07      	cmp	r3, #7
 8008418:	d9d0      	bls.n	80083bc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	f1a3 0220 	sub.w	r2, r3, #32
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	621a      	str	r2, [r3, #32]
  }
}
 800842c:	bf00      	nop
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e10f      	b.n	80086b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a87      	ldr	r2, [pc, #540]	@ (80086c0 <HAL_SPI_Init+0x23c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00f      	beq.n	80084c6 <HAL_SPI_Init+0x42>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a86      	ldr	r2, [pc, #536]	@ (80086c4 <HAL_SPI_Init+0x240>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00a      	beq.n	80084c6 <HAL_SPI_Init+0x42>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a84      	ldr	r2, [pc, #528]	@ (80086c8 <HAL_SPI_Init+0x244>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d005      	beq.n	80084c6 <HAL_SPI_Init+0x42>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b0f      	cmp	r3, #15
 80084c0:	d901      	bls.n	80084c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e0f7      	b.n	80086b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fbbc 	bl	8008c44 <SPI_GetPacketSize>
 80084cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a7b      	ldr	r2, [pc, #492]	@ (80086c0 <HAL_SPI_Init+0x23c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00c      	beq.n	80084f2 <HAL_SPI_Init+0x6e>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a79      	ldr	r2, [pc, #484]	@ (80086c4 <HAL_SPI_Init+0x240>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d007      	beq.n	80084f2 <HAL_SPI_Init+0x6e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a78      	ldr	r2, [pc, #480]	@ (80086c8 <HAL_SPI_Init+0x244>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d002      	beq.n	80084f2 <HAL_SPI_Init+0x6e>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d811      	bhi.n	8008516 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084f6:	4a72      	ldr	r2, [pc, #456]	@ (80086c0 <HAL_SPI_Init+0x23c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d009      	beq.n	8008510 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a70      	ldr	r2, [pc, #448]	@ (80086c4 <HAL_SPI_Init+0x240>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d004      	beq.n	8008510 <HAL_SPI_Init+0x8c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a6f      	ldr	r2, [pc, #444]	@ (80086c8 <HAL_SPI_Init+0x244>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d104      	bne.n	800851a <HAL_SPI_Init+0x96>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b10      	cmp	r3, #16
 8008514:	d901      	bls.n	800851a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e0cd      	b.n	80086b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7f8 ffde 	bl	80014f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0201 	bic.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008556:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008560:	d119      	bne.n	8008596 <HAL_SPI_Init+0x112>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800856a:	d103      	bne.n	8008574 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10c      	bne.n	8008596 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008584:	d107      	bne.n	8008596 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008594:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <HAL_SPI_Init+0x13e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	2b06      	cmp	r3, #6
 80085a8:	d90b      	bls.n	80085c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	e007      	b.n	80085d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69da      	ldr	r2, [r3, #28]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085da:	431a      	orrs	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e4:	ea42 0103 	orr.w	r1, r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	431a      	orrs	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008632:	ea42 0103 	orr.w	r1, r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d113      	bne.n	8008672 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800865c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008670:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	40013000 	.word	0x40013000
 80086c4:	40003800 	.word	0x40003800
 80086c8:	40003c00 	.word	0x40003c00

080086cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	4613      	mov	r3, r2
 80086da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3320      	adds	r3, #32
 80086e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086e4:	f7f9 f8f2 	bl	80018cc <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d001      	beq.n	80086fa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80086f6:	2302      	movs	r3, #2
 80086f8:	e1d1      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <HAL_SPI_Transmit+0x3a>
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e1c9      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_SPI_Transmit+0x4c>
 8008714:	2302      	movs	r3, #2
 8008716:	e1c2      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2203      	movs	r2, #3
 8008724:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	88fa      	ldrh	r2, [r7, #6]
 800873a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008770:	d108      	bne.n	8008784 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	e009      	b.n	8008798 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008796:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	4b96      	ldr	r3, [pc, #600]	@ (80089f8 <HAL_SPI_Transmit+0x32c>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	88f9      	ldrh	r1, [r7, #6]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087c4:	d107      	bne.n	80087d6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	d947      	bls.n	800886e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087de:	e03f      	b.n	8008860 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d114      	bne.n	8008818 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087fe:	1d1a      	adds	r2, r3, #4
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008816:	e023      	b.n	8008860 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008818:	f7f9 f858 	bl	80018cc <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d803      	bhi.n	8008830 <HAL_SPI_Transmit+0x164>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d102      	bne.n	8008836 <HAL_SPI_Transmit+0x16a>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d114      	bne.n	8008860 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f936 	bl	8008aa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008842:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e11e      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1b9      	bne.n	80087e0 <HAL_SPI_Transmit+0x114>
 800886c:	e0f1      	b.n	8008a52 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b07      	cmp	r3, #7
 8008874:	f240 80e6 	bls.w	8008a44 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008878:	e05d      	b.n	8008936 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b02      	cmp	r3, #2
 8008886:	d132      	bne.n	80088ee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d918      	bls.n	80088c6 <HAL_SPI_Transmit+0x1fa>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	2b00      	cmp	r3, #0
 800889a:	d014      	beq.n	80088c6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6812      	ldr	r2, [r2, #0]
 80088a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b02      	subs	r3, #2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088c4:	e037      	b.n	8008936 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ca:	881a      	ldrh	r2, [r3, #0]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d4:	1c9a      	adds	r2, r3, #2
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088ec:	e023      	b.n	8008936 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ee:	f7f8 ffed 	bl	80018cc <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d803      	bhi.n	8008906 <HAL_SPI_Transmit+0x23a>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d102      	bne.n	800890c <HAL_SPI_Transmit+0x240>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d114      	bne.n	8008936 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 f8cb 	bl	8008aa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e0b3      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d19b      	bne.n	800887a <HAL_SPI_Transmit+0x1ae>
 8008942:	e086      	b.n	8008a52 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	d154      	bne.n	80089fc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b03      	cmp	r3, #3
 800895c:	d918      	bls.n	8008990 <HAL_SPI_Transmit+0x2c4>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d914      	bls.n	8008990 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b04      	subs	r3, #4
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800898e:	e059      	b.n	8008a44 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	d917      	bls.n	80089cc <HAL_SPI_Transmit+0x300>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d013      	beq.n	80089cc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a8:	881a      	ldrh	r2, [r3, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b2:	1c9a      	adds	r2, r3, #2
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089be:	b29b      	uxth	r3, r3
 80089c0:	3b02      	subs	r3, #2
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089ca:	e03b      	b.n	8008a44 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3320      	adds	r3, #32
 80089d6:	7812      	ldrb	r2, [r2, #0]
 80089d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089f6:	e025      	b.n	8008a44 <HAL_SPI_Transmit+0x378>
 80089f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089fc:	f7f8 ff66 	bl	80018cc <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d803      	bhi.n	8008a14 <HAL_SPI_Transmit+0x348>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d102      	bne.n	8008a1a <HAL_SPI_Transmit+0x34e>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d114      	bne.n	8008a44 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f844 	bl	8008aa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e02c      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f47f af79 	bne.w	8008944 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2108      	movs	r1, #8
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 f8c3 	bl	8008be8 <SPI_WaitOnFlagUntilTimeout>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a6e:	f043 0220 	orr.w	r2, r3, #32
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f815 	bl	8008aa8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e000      	b.n	8008a9e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
  }
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop

08008aa8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699a      	ldr	r2, [r3, #24]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0208 	orr.w	r2, r2, #8
 8008ac6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0210 	orr.w	r2, r2, #16
 8008ad6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6919      	ldr	r1, [r3, #16]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	4b3c      	ldr	r3, [pc, #240]	@ (8008be4 <SPI_CloseTransfer+0x13c>)
 8008af4:	400b      	ands	r3, r1
 8008af6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008b06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d014      	beq.n	8008b3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	699a      	ldr	r2, [r3, #24]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0220 	orr.w	r2, r2, #32
 8008b3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d014      	beq.n	8008b74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00f      	beq.n	8008b74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b5a:	f043 0204 	orr.w	r2, r3, #4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00f      	beq.n	8008b9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b84:	f043 0201 	orr.w	r2, r3, #1
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bae:	f043 0208 	orr.w	r2, r3, #8
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bc6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	fffffc90 	.word	0xfffffc90

08008be8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008bf8:	e010      	b.n	8008c1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bfa:	f7f8 fe67 	bl	80018cc <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d803      	bhi.n	8008c12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c10:	d102      	bne.n	8008c18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e00f      	b.n	8008c3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695a      	ldr	r2, [r3, #20]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	4013      	ands	r3, r2
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d0df      	beq.n	8008bfa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	3307      	adds	r3, #7
 8008c62:	08db      	lsrs	r3, r3, #3
 8008c64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e042      	b.n	8008d12 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7f8 fcb6 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2224      	movs	r2, #36	@ 0x24
 8008ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 0201 	bic.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fd91 	bl	80097ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f826 	bl	8008d1c <UART_SetConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e01b      	b.n	8008d12 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ce8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0201 	orr.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fe10 	bl	8009930 <UART_CheckIdleState>
 8008d10:	4603      	mov	r3, r0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d20:	b092      	sub	sp, #72	@ 0x48
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	431a      	orrs	r2, r3
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4bbe      	ldr	r3, [pc, #760]	@ (8009044 <UART_SetConfig+0x328>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d54:	430b      	orrs	r3, r1
 8008d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4ab3      	ldr	r2, [pc, #716]	@ (8009048 <UART_SetConfig+0x32c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d004      	beq.n	8008d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d84:	4313      	orrs	r3, r2
 8008d86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	4baf      	ldr	r3, [pc, #700]	@ (800904c <UART_SetConfig+0x330>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	f023 010f 	bic.w	r1, r3, #15
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4aa6      	ldr	r2, [pc, #664]	@ (8009050 <UART_SetConfig+0x334>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d177      	bne.n	8008eac <UART_SetConfig+0x190>
 8008dbc:	4ba5      	ldr	r3, [pc, #660]	@ (8009054 <UART_SetConfig+0x338>)
 8008dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dc4:	2b28      	cmp	r3, #40	@ 0x28
 8008dc6:	d86d      	bhi.n	8008ea4 <UART_SetConfig+0x188>
 8008dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <UART_SetConfig+0xb4>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008e75 	.word	0x08008e75
 8008dd4:	08008ea5 	.word	0x08008ea5
 8008dd8:	08008ea5 	.word	0x08008ea5
 8008ddc:	08008ea5 	.word	0x08008ea5
 8008de0:	08008ea5 	.word	0x08008ea5
 8008de4:	08008ea5 	.word	0x08008ea5
 8008de8:	08008ea5 	.word	0x08008ea5
 8008dec:	08008ea5 	.word	0x08008ea5
 8008df0:	08008e7d 	.word	0x08008e7d
 8008df4:	08008ea5 	.word	0x08008ea5
 8008df8:	08008ea5 	.word	0x08008ea5
 8008dfc:	08008ea5 	.word	0x08008ea5
 8008e00:	08008ea5 	.word	0x08008ea5
 8008e04:	08008ea5 	.word	0x08008ea5
 8008e08:	08008ea5 	.word	0x08008ea5
 8008e0c:	08008ea5 	.word	0x08008ea5
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008ea5 	.word	0x08008ea5
 8008e18:	08008ea5 	.word	0x08008ea5
 8008e1c:	08008ea5 	.word	0x08008ea5
 8008e20:	08008ea5 	.word	0x08008ea5
 8008e24:	08008ea5 	.word	0x08008ea5
 8008e28:	08008ea5 	.word	0x08008ea5
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008ea5 	.word	0x08008ea5
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008e95 	.word	0x08008e95
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ea5 	.word	0x08008ea5
 8008e64:	08008ea5 	.word	0x08008ea5
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008ea5 	.word	0x08008ea5
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e222      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e21e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e21a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e216      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e212      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e9c:	2340      	movs	r3, #64	@ 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e20e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ea4:	2380      	movs	r3, #128	@ 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e20a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a69      	ldr	r2, [pc, #420]	@ (8009058 <UART_SetConfig+0x33c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x1fc>
 8008eb6:	4b67      	ldr	r3, [pc, #412]	@ (8009054 <UART_SetConfig+0x338>)
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x1f4>
 8008ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <UART_SetConfig+0x1ac>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e1ec      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e1e8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e1e4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e1e0      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e1dc      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f08:	2340      	movs	r3, #64	@ 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e1d8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e1d4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800905c <UART_SetConfig+0x340>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d130      	bne.n	8008f84 <UART_SetConfig+0x268>
 8008f22:	4b4c      	ldr	r3, [pc, #304]	@ (8009054 <UART_SetConfig+0x338>)
 8008f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d826      	bhi.n	8008f7c <UART_SetConfig+0x260>
 8008f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <UART_SetConfig+0x218>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f75 	.word	0x08008f75
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e1b6      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e1b2      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e1ae      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e1aa      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e1a6      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f74:	2340      	movs	r3, #64	@ 0x40
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e1a2      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f7c:	2380      	movs	r3, #128	@ 0x80
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e19e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a35      	ldr	r2, [pc, #212]	@ (8009060 <UART_SetConfig+0x344>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d130      	bne.n	8008ff0 <UART_SetConfig+0x2d4>
 8008f8e:	4b31      	ldr	r3, [pc, #196]	@ (8009054 <UART_SetConfig+0x338>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d826      	bhi.n	8008fe8 <UART_SetConfig+0x2cc>
 8008f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa0 <UART_SetConfig+0x284>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08008fe1 	.word	0x08008fe1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e180      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e17c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e178      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e174      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e170      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fe0:	2340      	movs	r3, #64	@ 0x40
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e16c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fe8:	2380      	movs	r3, #128	@ 0x80
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e168      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8009064 <UART_SetConfig+0x348>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d142      	bne.n	8009080 <UART_SetConfig+0x364>
 8008ffa:	4b16      	ldr	r3, [pc, #88]	@ (8009054 <UART_SetConfig+0x338>)
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b05      	cmp	r3, #5
 8009004:	d838      	bhi.n	8009078 <UART_SetConfig+0x35c>
 8009006:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <UART_SetConfig+0x2f0>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009025 	.word	0x08009025
 8009010:	0800902d 	.word	0x0800902d
 8009014:	08009035 	.word	0x08009035
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009069 	.word	0x08009069
 8009020:	08009071 	.word	0x08009071
 8009024:	2300      	movs	r3, #0
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902a:	e14a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800902c:	2304      	movs	r3, #4
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e146      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009034:	2308      	movs	r3, #8
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e142      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800903c:	2310      	movs	r3, #16
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e13e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009044:	cfff69f3 	.word	0xcfff69f3
 8009048:	58000c00 	.word	0x58000c00
 800904c:	11fff4ff 	.word	0x11fff4ff
 8009050:	40011000 	.word	0x40011000
 8009054:	58024400 	.word	0x58024400
 8009058:	40004400 	.word	0x40004400
 800905c:	40004800 	.word	0x40004800
 8009060:	40004c00 	.word	0x40004c00
 8009064:	40005000 	.word	0x40005000
 8009068:	2320      	movs	r3, #32
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e128      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009070:	2340      	movs	r3, #64	@ 0x40
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e124      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009078:	2380      	movs	r3, #128	@ 0x80
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907e:	e120      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4acb      	ldr	r2, [pc, #812]	@ (80093b4 <UART_SetConfig+0x698>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d176      	bne.n	8009178 <UART_SetConfig+0x45c>
 800908a:	4bcb      	ldr	r3, [pc, #812]	@ (80093b8 <UART_SetConfig+0x69c>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800908e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009092:	2b28      	cmp	r3, #40	@ 0x28
 8009094:	d86c      	bhi.n	8009170 <UART_SetConfig+0x454>
 8009096:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <UART_SetConfig+0x380>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	08009141 	.word	0x08009141
 80090a0:	08009171 	.word	0x08009171
 80090a4:	08009171 	.word	0x08009171
 80090a8:	08009171 	.word	0x08009171
 80090ac:	08009171 	.word	0x08009171
 80090b0:	08009171 	.word	0x08009171
 80090b4:	08009171 	.word	0x08009171
 80090b8:	08009171 	.word	0x08009171
 80090bc:	08009149 	.word	0x08009149
 80090c0:	08009171 	.word	0x08009171
 80090c4:	08009171 	.word	0x08009171
 80090c8:	08009171 	.word	0x08009171
 80090cc:	08009171 	.word	0x08009171
 80090d0:	08009171 	.word	0x08009171
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009171 	.word	0x08009171
 80090dc:	08009151 	.word	0x08009151
 80090e0:	08009171 	.word	0x08009171
 80090e4:	08009171 	.word	0x08009171
 80090e8:	08009171 	.word	0x08009171
 80090ec:	08009171 	.word	0x08009171
 80090f0:	08009171 	.word	0x08009171
 80090f4:	08009171 	.word	0x08009171
 80090f8:	08009171 	.word	0x08009171
 80090fc:	08009159 	.word	0x08009159
 8009100:	08009171 	.word	0x08009171
 8009104:	08009171 	.word	0x08009171
 8009108:	08009171 	.word	0x08009171
 800910c:	08009171 	.word	0x08009171
 8009110:	08009171 	.word	0x08009171
 8009114:	08009171 	.word	0x08009171
 8009118:	08009171 	.word	0x08009171
 800911c:	08009161 	.word	0x08009161
 8009120:	08009171 	.word	0x08009171
 8009124:	08009171 	.word	0x08009171
 8009128:	08009171 	.word	0x08009171
 800912c:	08009171 	.word	0x08009171
 8009130:	08009171 	.word	0x08009171
 8009134:	08009171 	.word	0x08009171
 8009138:	08009171 	.word	0x08009171
 800913c:	08009169 	.word	0x08009169
 8009140:	2301      	movs	r3, #1
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e0bc      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009148:	2304      	movs	r3, #4
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914e:	e0b8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009150:	2308      	movs	r3, #8
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009156:	e0b4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009158:	2310      	movs	r3, #16
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915e:	e0b0      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009160:	2320      	movs	r3, #32
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009166:	e0ac      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009168:	2340      	movs	r3, #64	@ 0x40
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916e:	e0a8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009170:	2380      	movs	r3, #128	@ 0x80
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009176:	e0a4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a8f      	ldr	r2, [pc, #572]	@ (80093bc <UART_SetConfig+0x6a0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d130      	bne.n	80091e4 <UART_SetConfig+0x4c8>
 8009182:	4b8d      	ldr	r3, [pc, #564]	@ (80093b8 <UART_SetConfig+0x69c>)
 8009184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b05      	cmp	r3, #5
 800918c:	d826      	bhi.n	80091dc <UART_SetConfig+0x4c0>
 800918e:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <UART_SetConfig+0x478>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091ad 	.word	0x080091ad
 8009198:	080091b5 	.word	0x080091b5
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080091c5 	.word	0x080091c5
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	2300      	movs	r3, #0
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b2:	e086      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091b4:	2304      	movs	r3, #4
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ba:	e082      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091bc:	2308      	movs	r3, #8
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c2:	e07e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091c4:	2310      	movs	r3, #16
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e07a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091cc:	2320      	movs	r3, #32
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e076      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091d4:	2340      	movs	r3, #64	@ 0x40
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e072      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091dc:	2380      	movs	r3, #128	@ 0x80
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e2:	e06e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a75      	ldr	r2, [pc, #468]	@ (80093c0 <UART_SetConfig+0x6a4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d130      	bne.n	8009250 <UART_SetConfig+0x534>
 80091ee:	4b72      	ldr	r3, [pc, #456]	@ (80093b8 <UART_SetConfig+0x69c>)
 80091f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	2b05      	cmp	r3, #5
 80091f8:	d826      	bhi.n	8009248 <UART_SetConfig+0x52c>
 80091fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009200 <UART_SetConfig+0x4e4>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009219 	.word	0x08009219
 8009204:	08009221 	.word	0x08009221
 8009208:	08009229 	.word	0x08009229
 800920c:	08009231 	.word	0x08009231
 8009210:	08009239 	.word	0x08009239
 8009214:	08009241 	.word	0x08009241
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e050      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009220:	2304      	movs	r3, #4
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009226:	e04c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009228:	2308      	movs	r3, #8
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922e:	e048      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009230:	2310      	movs	r3, #16
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e044      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009238:	2320      	movs	r3, #32
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e040      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009240:	2340      	movs	r3, #64	@ 0x40
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e03c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009248:	2380      	movs	r3, #128	@ 0x80
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924e:	e038      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a5b      	ldr	r2, [pc, #364]	@ (80093c4 <UART_SetConfig+0x6a8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d130      	bne.n	80092bc <UART_SetConfig+0x5a0>
 800925a:	4b57      	ldr	r3, [pc, #348]	@ (80093b8 <UART_SetConfig+0x69c>)
 800925c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800925e:	f003 0307 	and.w	r3, r3, #7
 8009262:	2b05      	cmp	r3, #5
 8009264:	d826      	bhi.n	80092b4 <UART_SetConfig+0x598>
 8009266:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <UART_SetConfig+0x550>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	08009285 	.word	0x08009285
 8009270:	0800928d 	.word	0x0800928d
 8009274:	08009295 	.word	0x08009295
 8009278:	0800929d 	.word	0x0800929d
 800927c:	080092a5 	.word	0x080092a5
 8009280:	080092ad 	.word	0x080092ad
 8009284:	2302      	movs	r3, #2
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928a:	e01a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800928c:	2304      	movs	r3, #4
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009292:	e016      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009294:	2308      	movs	r3, #8
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929a:	e012      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800929c:	2310      	movs	r3, #16
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a2:	e00e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092a4:	2320      	movs	r3, #32
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e00a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092ac:	2340      	movs	r3, #64	@ 0x40
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e006      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092b4:	2380      	movs	r3, #128	@ 0x80
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ba:	e002      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092bc:	2380      	movs	r3, #128	@ 0x80
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a3f      	ldr	r2, [pc, #252]	@ (80093c4 <UART_SetConfig+0x6a8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f040 80f8 	bne.w	80094be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	dc46      	bgt.n	8009364 <UART_SetConfig+0x648>
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	f2c0 8082 	blt.w	80093e0 <UART_SetConfig+0x6c4>
 80092dc:	3b02      	subs	r3, #2
 80092de:	2b1e      	cmp	r3, #30
 80092e0:	d87e      	bhi.n	80093e0 <UART_SetConfig+0x6c4>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <UART_SetConfig+0x5cc>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800936b 	.word	0x0800936b
 80092ec:	080093e1 	.word	0x080093e1
 80092f0:	08009373 	.word	0x08009373
 80092f4:	080093e1 	.word	0x080093e1
 80092f8:	080093e1 	.word	0x080093e1
 80092fc:	080093e1 	.word	0x080093e1
 8009300:	08009383 	.word	0x08009383
 8009304:	080093e1 	.word	0x080093e1
 8009308:	080093e1 	.word	0x080093e1
 800930c:	080093e1 	.word	0x080093e1
 8009310:	080093e1 	.word	0x080093e1
 8009314:	080093e1 	.word	0x080093e1
 8009318:	080093e1 	.word	0x080093e1
 800931c:	080093e1 	.word	0x080093e1
 8009320:	08009393 	.word	0x08009393
 8009324:	080093e1 	.word	0x080093e1
 8009328:	080093e1 	.word	0x080093e1
 800932c:	080093e1 	.word	0x080093e1
 8009330:	080093e1 	.word	0x080093e1
 8009334:	080093e1 	.word	0x080093e1
 8009338:	080093e1 	.word	0x080093e1
 800933c:	080093e1 	.word	0x080093e1
 8009340:	080093e1 	.word	0x080093e1
 8009344:	080093e1 	.word	0x080093e1
 8009348:	080093e1 	.word	0x080093e1
 800934c:	080093e1 	.word	0x080093e1
 8009350:	080093e1 	.word	0x080093e1
 8009354:	080093e1 	.word	0x080093e1
 8009358:	080093e1 	.word	0x080093e1
 800935c:	080093e1 	.word	0x080093e1
 8009360:	080093d3 	.word	0x080093d3
 8009364:	2b40      	cmp	r3, #64	@ 0x40
 8009366:	d037      	beq.n	80093d8 <UART_SetConfig+0x6bc>
 8009368:	e03a      	b.n	80093e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800936a:	f7fc feb3 	bl	80060d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800936e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009370:	e03c      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009376:	4618      	mov	r0, r3
 8009378:	f7fc fec2 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e034      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009382:	f107 0318 	add.w	r3, r7, #24
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd f80e 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009390:	e02c      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009392:	4b09      	ldr	r3, [pc, #36]	@ (80093b8 <UART_SetConfig+0x69c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d016      	beq.n	80093cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800939e:	4b06      	ldr	r3, [pc, #24]	@ (80093b8 <UART_SetConfig+0x69c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	08db      	lsrs	r3, r3, #3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	4a07      	ldr	r2, [pc, #28]	@ (80093c8 <UART_SetConfig+0x6ac>)
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b0:	e01c      	b.n	80093ec <UART_SetConfig+0x6d0>
 80093b2:	bf00      	nop
 80093b4:	40011400 	.word	0x40011400
 80093b8:	58024400 	.word	0x58024400
 80093bc:	40007800 	.word	0x40007800
 80093c0:	40007c00 	.word	0x40007c00
 80093c4:	58000c00 	.word	0x58000c00
 80093c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80093cc:	4b9d      	ldr	r3, [pc, #628]	@ (8009644 <UART_SetConfig+0x928>)
 80093ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d0:	e00c      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093d2:	4b9d      	ldr	r3, [pc, #628]	@ (8009648 <UART_SetConfig+0x92c>)
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d6:	e009      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093de:	e005      	b.n	80093ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 81de 	beq.w	80097b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f8:	4a94      	ldr	r2, [pc, #592]	@ (800964c <UART_SetConfig+0x930>)
 80093fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093fe:	461a      	mov	r2, r3
 8009400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009402:	fbb3 f3f2 	udiv	r3, r3, r2
 8009406:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4413      	add	r3, r2
 8009412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009414:	429a      	cmp	r2, r3
 8009416:	d305      	bcc.n	8009424 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800941e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800942a:	e1c1      	b.n	80097b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800942e:	2200      	movs	r2, #0
 8009430:	60bb      	str	r3, [r7, #8]
 8009432:	60fa      	str	r2, [r7, #12]
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	4a84      	ldr	r2, [pc, #528]	@ (800964c <UART_SetConfig+0x930>)
 800943a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943e:	b29b      	uxth	r3, r3
 8009440:	2200      	movs	r2, #0
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800944e:	f7f6 ff43 	bl	80002d8 <__aeabi_uldivmod>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	020b      	lsls	r3, r1, #8
 8009464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009468:	0202      	lsls	r2, r0, #8
 800946a:	6979      	ldr	r1, [r7, #20]
 800946c:	6849      	ldr	r1, [r1, #4]
 800946e:	0849      	lsrs	r1, r1, #1
 8009470:	2000      	movs	r0, #0
 8009472:	460c      	mov	r4, r1
 8009474:	4605      	mov	r5, r0
 8009476:	eb12 0804 	adds.w	r8, r2, r4
 800947a:	eb43 0905 	adc.w	r9, r3, r5
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	469a      	mov	sl, r3
 8009486:	4693      	mov	fp, r2
 8009488:	4652      	mov	r2, sl
 800948a:	465b      	mov	r3, fp
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f6 ff22 	bl	80002d8 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4613      	mov	r3, r2
 800949a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800949c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094a2:	d308      	bcc.n	80094b6 <UART_SetConfig+0x79a>
 80094a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094aa:	d204      	bcs.n	80094b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e17c      	b.n	80097b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094bc:	e178      	b.n	80097b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094c6:	f040 80c5 	bne.w	8009654 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80094ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	dc48      	bgt.n	8009564 <UART_SetConfig+0x848>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	db7b      	blt.n	80095ce <UART_SetConfig+0x8b2>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d879      	bhi.n	80095ce <UART_SetConfig+0x8b2>
 80094da:	a201      	add	r2, pc, #4	@ (adr r2, 80094e0 <UART_SetConfig+0x7c4>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	0800956b 	.word	0x0800956b
 80094e4:	08009573 	.word	0x08009573
 80094e8:	080095cf 	.word	0x080095cf
 80094ec:	080095cf 	.word	0x080095cf
 80094f0:	0800957b 	.word	0x0800957b
 80094f4:	080095cf 	.word	0x080095cf
 80094f8:	080095cf 	.word	0x080095cf
 80094fc:	080095cf 	.word	0x080095cf
 8009500:	0800958b 	.word	0x0800958b
 8009504:	080095cf 	.word	0x080095cf
 8009508:	080095cf 	.word	0x080095cf
 800950c:	080095cf 	.word	0x080095cf
 8009510:	080095cf 	.word	0x080095cf
 8009514:	080095cf 	.word	0x080095cf
 8009518:	080095cf 	.word	0x080095cf
 800951c:	080095cf 	.word	0x080095cf
 8009520:	0800959b 	.word	0x0800959b
 8009524:	080095cf 	.word	0x080095cf
 8009528:	080095cf 	.word	0x080095cf
 800952c:	080095cf 	.word	0x080095cf
 8009530:	080095cf 	.word	0x080095cf
 8009534:	080095cf 	.word	0x080095cf
 8009538:	080095cf 	.word	0x080095cf
 800953c:	080095cf 	.word	0x080095cf
 8009540:	080095cf 	.word	0x080095cf
 8009544:	080095cf 	.word	0x080095cf
 8009548:	080095cf 	.word	0x080095cf
 800954c:	080095cf 	.word	0x080095cf
 8009550:	080095cf 	.word	0x080095cf
 8009554:	080095cf 	.word	0x080095cf
 8009558:	080095cf 	.word	0x080095cf
 800955c:	080095cf 	.word	0x080095cf
 8009560:	080095c1 	.word	0x080095c1
 8009564:	2b40      	cmp	r3, #64	@ 0x40
 8009566:	d02e      	beq.n	80095c6 <UART_SetConfig+0x8aa>
 8009568:	e031      	b.n	80095ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800956a:	f7fa fdbd 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800956e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009570:	e033      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009572:	f7fa fdcf 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 8009576:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009578:	e02f      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800957e:	4618      	mov	r0, r3
 8009580:	f7fc fdbe 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009588:	e027      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800958a:	f107 0318 	add.w	r3, r7, #24
 800958e:	4618      	mov	r0, r3
 8009590:	f7fc ff0a 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	e01f      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959a:	4b2d      	ldr	r3, [pc, #180]	@ (8009650 <UART_SetConfig+0x934>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d009      	beq.n	80095ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009650 <UART_SetConfig+0x934>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	08db      	lsrs	r3, r3, #3
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	4a24      	ldr	r2, [pc, #144]	@ (8009644 <UART_SetConfig+0x928>)
 80095b2:	fa22 f303 	lsr.w	r3, r2, r3
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095b8:	e00f      	b.n	80095da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80095ba:	4b22      	ldr	r3, [pc, #136]	@ (8009644 <UART_SetConfig+0x928>)
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095be:	e00c      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095c0:	4b21      	ldr	r3, [pc, #132]	@ (8009648 <UART_SetConfig+0x92c>)
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c4:	e009      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095cc:	e005      	b.n	80095da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80e7 	beq.w	80097b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e6:	4a19      	ldr	r2, [pc, #100]	@ (800964c <UART_SetConfig+0x930>)
 80095e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ec:	461a      	mov	r2, r3
 80095ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f4:	005a      	lsls	r2, r3, #1
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	085b      	lsrs	r3, r3, #1
 80095fc:	441a      	add	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	fbb2 f3f3 	udiv	r3, r2, r3
 8009606:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	2b0f      	cmp	r3, #15
 800960c:	d916      	bls.n	800963c <UART_SetConfig+0x920>
 800960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009614:	d212      	bcs.n	800963c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	b29b      	uxth	r3, r3
 800961a:	f023 030f 	bic.w	r3, r3, #15
 800961e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	085b      	lsrs	r3, r3, #1
 8009624:	b29b      	uxth	r3, r3
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	b29a      	uxth	r2, r3
 800962c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800962e:	4313      	orrs	r3, r2
 8009630:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009638:	60da      	str	r2, [r3, #12]
 800963a:	e0b9      	b.n	80097b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009642:	e0b5      	b.n	80097b0 <UART_SetConfig+0xa94>
 8009644:	03d09000 	.word	0x03d09000
 8009648:	003d0900 	.word	0x003d0900
 800964c:	0800be9c 	.word	0x0800be9c
 8009650:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009654:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009658:	2b20      	cmp	r3, #32
 800965a:	dc49      	bgt.n	80096f0 <UART_SetConfig+0x9d4>
 800965c:	2b00      	cmp	r3, #0
 800965e:	db7c      	blt.n	800975a <UART_SetConfig+0xa3e>
 8009660:	2b20      	cmp	r3, #32
 8009662:	d87a      	bhi.n	800975a <UART_SetConfig+0xa3e>
 8009664:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <UART_SetConfig+0x950>)
 8009666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966a:	bf00      	nop
 800966c:	080096f7 	.word	0x080096f7
 8009670:	080096ff 	.word	0x080096ff
 8009674:	0800975b 	.word	0x0800975b
 8009678:	0800975b 	.word	0x0800975b
 800967c:	08009707 	.word	0x08009707
 8009680:	0800975b 	.word	0x0800975b
 8009684:	0800975b 	.word	0x0800975b
 8009688:	0800975b 	.word	0x0800975b
 800968c:	08009717 	.word	0x08009717
 8009690:	0800975b 	.word	0x0800975b
 8009694:	0800975b 	.word	0x0800975b
 8009698:	0800975b 	.word	0x0800975b
 800969c:	0800975b 	.word	0x0800975b
 80096a0:	0800975b 	.word	0x0800975b
 80096a4:	0800975b 	.word	0x0800975b
 80096a8:	0800975b 	.word	0x0800975b
 80096ac:	08009727 	.word	0x08009727
 80096b0:	0800975b 	.word	0x0800975b
 80096b4:	0800975b 	.word	0x0800975b
 80096b8:	0800975b 	.word	0x0800975b
 80096bc:	0800975b 	.word	0x0800975b
 80096c0:	0800975b 	.word	0x0800975b
 80096c4:	0800975b 	.word	0x0800975b
 80096c8:	0800975b 	.word	0x0800975b
 80096cc:	0800975b 	.word	0x0800975b
 80096d0:	0800975b 	.word	0x0800975b
 80096d4:	0800975b 	.word	0x0800975b
 80096d8:	0800975b 	.word	0x0800975b
 80096dc:	0800975b 	.word	0x0800975b
 80096e0:	0800975b 	.word	0x0800975b
 80096e4:	0800975b 	.word	0x0800975b
 80096e8:	0800975b 	.word	0x0800975b
 80096ec:	0800974d 	.word	0x0800974d
 80096f0:	2b40      	cmp	r3, #64	@ 0x40
 80096f2:	d02e      	beq.n	8009752 <UART_SetConfig+0xa36>
 80096f4:	e031      	b.n	800975a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f6:	f7fa fcf7 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80096fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096fc:	e033      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096fe:	f7fa fd09 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 8009702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009704:	e02f      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f7fc fcf8 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009714:	e027      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009716:	f107 0318 	add.w	r3, r7, #24
 800971a:	4618      	mov	r0, r3
 800971c:	f7fc fe44 	bl	80063a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009724:	e01f      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009726:	4b2d      	ldr	r3, [pc, #180]	@ (80097dc <UART_SetConfig+0xac0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d009      	beq.n	8009746 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009732:	4b2a      	ldr	r3, [pc, #168]	@ (80097dc <UART_SetConfig+0xac0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	08db      	lsrs	r3, r3, #3
 8009738:	f003 0303 	and.w	r3, r3, #3
 800973c:	4a28      	ldr	r2, [pc, #160]	@ (80097e0 <UART_SetConfig+0xac4>)
 800973e:	fa22 f303 	lsr.w	r3, r2, r3
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009744:	e00f      	b.n	8009766 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009746:	4b26      	ldr	r3, [pc, #152]	@ (80097e0 <UART_SetConfig+0xac4>)
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974a:	e00c      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800974c:	4b25      	ldr	r3, [pc, #148]	@ (80097e4 <UART_SetConfig+0xac8>)
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	e009      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009758:	e005      	b.n	8009766 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009764:	bf00      	nop
    }

    if (pclk != 0U)
 8009766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d021      	beq.n	80097b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009770:	4a1d      	ldr	r2, [pc, #116]	@ (80097e8 <UART_SetConfig+0xacc>)
 8009772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009776:	461a      	mov	r2, r3
 8009778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977a:	fbb3 f2f2 	udiv	r2, r3, r2
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	441a      	add	r2, r3
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	fbb2 f3f3 	udiv	r3, r2, r3
 800978e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b0f      	cmp	r3, #15
 8009794:	d909      	bls.n	80097aa <UART_SetConfig+0xa8e>
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800979c:	d205      	bcs.n	80097aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60da      	str	r2, [r3, #12]
 80097a8:	e002      	b.n	80097b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2200      	movs	r2, #0
 80097ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3748      	adds	r7, #72	@ 0x48
 80097d4:	46bd      	mov	sp, r7
 80097d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	003d0900 	.word	0x003d0900
 80097e8:	0800be9c 	.word	0x0800be9c

080097ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	f003 0304 	and.w	r3, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01a      	beq.n	8009902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098ea:	d10a      	bne.n	8009902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	605a      	str	r2, [r3, #4]
  }
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b098      	sub	sp, #96	@ 0x60
 8009934:	af02      	add	r7, sp, #8
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009940:	f7f7 ffc4 	bl	80018cc <HAL_GetTick>
 8009944:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b08      	cmp	r3, #8
 8009952:	d12f      	bne.n	80099b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800995c:	2200      	movs	r2, #0
 800995e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f88e 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d022      	beq.n	80099b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800997c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800997e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009982:	653b      	str	r3, [r7, #80]	@ 0x50
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800998c:	647b      	str	r3, [r7, #68]	@ 0x44
 800998e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800999a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e6      	bne.n	800996e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e063      	b.n	8009a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d149      	bne.n	8009a56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ca:	2200      	movs	r2, #0
 80099cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f857 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d03c      	beq.n	8009a56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	623b      	str	r3, [r7, #32]
   return(result);
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80099fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e6      	bne.n	80099dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a2e:	61fa      	str	r2, [r7, #28]
 8009a30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	69b9      	ldr	r1, [r7, #24]
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e5      	bne.n	8009a0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e012      	b.n	8009a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3758      	adds	r7, #88	@ 0x58
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	4613      	mov	r3, r2
 8009a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a94:	e04f      	b.n	8009b36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9c:	d04b      	beq.n	8009b36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9e:	f7f7 ff15 	bl	80018cc <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d302      	bcc.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e04e      	b.n	8009b56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d037      	beq.n	8009b36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b80      	cmp	r3, #128	@ 0x80
 8009aca:	d034      	beq.n	8009b36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b40      	cmp	r3, #64	@ 0x40
 8009ad0:	d031      	beq.n	8009b36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f003 0308 	and.w	r3, r3, #8
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d110      	bne.n	8009b02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f839 	bl	8009b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2208      	movs	r2, #8
 8009af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e029      	b.n	8009b56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b10:	d111      	bne.n	8009b36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 f81f 	bl	8009b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e00f      	b.n	8009b56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69da      	ldr	r2, [r3, #28]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	bf0c      	ite	eq
 8009b46:	2301      	moveq	r3, #1
 8009b48:	2300      	movne	r3, #0
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d0a0      	beq.n	8009a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b095      	sub	sp, #84	@ 0x54
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e6      	bne.n	8009b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	4b1e      	ldr	r3, [pc, #120]	@ (8009c28 <UART_EndRxTransfer+0xc8>)
 8009bae:	4013      	ands	r3, r2
 8009bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e5      	bne.n	8009b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d118      	bne.n	8009c08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f023 0310 	bic.w	r3, r3, #16
 8009bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bf4:	61bb      	str	r3, [r7, #24]
 8009bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6979      	ldr	r1, [r7, #20]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	613b      	str	r3, [r7, #16]
   return(result);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e6      	bne.n	8009bd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c1c:	bf00      	nop
 8009c1e:	3754      	adds	r7, #84	@ 0x54
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	effffffe 	.word	0xeffffffe

08009c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e027      	b.n	8009c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2224      	movs	r2, #36	@ 0x24
 8009c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0201 	bic.w	r2, r2, #1
 8009c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e02d      	b.n	8009d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2224      	movs	r2, #36	@ 0x24
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0201 	bic.w	r2, r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f850 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e02d      	b.n	8009d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2224      	movs	r2, #36	@ 0x24
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f812 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d108      	bne.n	8009dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009db8:	e031      	b.n	8009e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dba:	2310      	movs	r3, #16
 8009dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009dbe:	2310      	movs	r3, #16
 8009dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	0e5b      	lsrs	r3, r3, #25
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	0f5b      	lsrs	r3, r3, #29
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0307 	and.w	r3, r3, #7
 8009de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	7b3a      	ldrb	r2, [r7, #12]
 8009de6:	4911      	ldr	r1, [pc, #68]	@ (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009de8:	5c8a      	ldrb	r2, [r1, r2]
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dee:	7b3a      	ldrb	r2, [r7, #12]
 8009df0:	490f      	ldr	r1, [pc, #60]	@ (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	7b7a      	ldrb	r2, [r7, #13]
 8009e04:	4909      	ldr	r1, [pc, #36]	@ (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009e06:	5c8a      	ldrb	r2, [r1, r2]
 8009e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e0c:	7b7a      	ldrb	r2, [r7, #13]
 8009e0e:	4908      	ldr	r1, [pc, #32]	@ (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	0800beb4 	.word	0x0800beb4
 8009e30:	0800bebc 	.word	0x0800bebc

08009e34 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009e34:	b084      	sub	sp, #16
 8009e36:	b480      	push	{r7}
 8009e38:	b085      	sub	sp, #20
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	f107 001c 	add.w	r0, r7, #28
 8009e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009e4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009e4e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8009e52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009e56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009e5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <SDMMC_Init+0x50>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	b004      	add	sp, #16
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	ffc02c00 	.word	0xffc02c00

08009e88 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f043 0203 	orr.w	r2, r3, #3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0303 	and.w	r3, r3, #3
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
	...

08009f04 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009f28:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009f2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <SDMMC_SendCommand+0x50>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	431a      	orrs	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	fffee0c0 	.word	0xfffee0c0

08009f58 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	b2db      	uxtb	r3, r3
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3314      	adds	r3, #20
 8009f80:	461a      	mov	r2, r3
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	4413      	add	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009fbe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009fc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009fca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0

}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ffe:	2310      	movs	r3, #16
 800a000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a008:	2300      	movs	r3, #0
 800a00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a00c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff ff73 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a01e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a022:	2110      	movs	r1, #16
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa5f 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a02c:	69fb      	ldr	r3, [r7, #28]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b088      	sub	sp, #32
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a044:	2311      	movs	r3, #17
 800a046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a058:	f107 0308 	add.w	r3, r7, #8
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff ff50 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a064:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a068:	2111      	movs	r1, #17
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa3c 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a072:	69fb      	ldr	r3, [r7, #28]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a08a:	2312      	movs	r3, #18
 800a08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a08e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a09c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff ff2d 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a0aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ae:	2112      	movs	r1, #18
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fa19 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a0b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3720      	adds	r7, #32
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a0d0:	2318      	movs	r3, #24
 800a0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0e4:	f107 0308 	add.w	r3, r7, #8
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7ff ff0a 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a0f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0f4:	2118      	movs	r1, #24
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9f6 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fe:	69fb      	ldr	r3, [r7, #28]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3720      	adds	r7, #32
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a116:	2319      	movs	r3, #25
 800a118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a11a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a128:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff fee7 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a13a:	2119      	movs	r1, #25
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f9d3 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a144:	69fb      	ldr	r3, [r7, #28]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a15c:	230c      	movs	r3, #12
 800a15e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a16a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a16e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a188:	f107 0308 	add.w	r3, r7, #8
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff feb8 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a194:	4a0b      	ldr	r2, [pc, #44]	@ (800a1c4 <SDMMC_CmdStopTransfer+0x74>)
 800a196:	210c      	movs	r1, #12
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9a5 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a19e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1b2:	d101      	bne.n	800a1b8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3720      	adds	r7, #32
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	05f5e100 	.word	0x05f5e100

0800a1c8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a1d6:	2307      	movs	r3, #7
 800a1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1ea:	f107 0308 	add.w	r3, r7, #8
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fe87 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a1f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1fa:	2107      	movs	r1, #7
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f973 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a204:	69fb      	ldr	r3, [r7, #28]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a222:	2300      	movs	r3, #0
 800a224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a22a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a22c:	f107 0308 	add.w	r3, r7, #8
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fe66 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fb97 	bl	800a96c <SDMMC_GetCmdError>
 800a23e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a240:	69fb      	ldr	r3, [r7, #28]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3720      	adds	r7, #32
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b088      	sub	sp, #32
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a252:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a258:	2308      	movs	r3, #8
 800a25a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a25c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a26a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff fe46 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fb29 	bl	800a8d0 <SDMMC_GetCmdResp7>
 800a27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a280:	69fb      	ldr	r3, [r7, #28]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3720      	adds	r7, #32
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b088      	sub	sp, #32
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a298:	2337      	movs	r3, #55	@ 0x37
 800a29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a29c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2ac:	f107 0308 	add.w	r3, r7, #8
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fe26 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2bc:	2137      	movs	r1, #55	@ 0x37
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f912 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a2de:	2329      	movs	r3, #41	@ 0x29
 800a2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2f2:	f107 0308 	add.w	r3, r7, #8
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fe03 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa2e 	bl	800a760 <SDMMC_GetCmdResp3>
 800a304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a306:	69fb      	ldr	r3, [r7, #28]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3720      	adds	r7, #32
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a31e:	2306      	movs	r3, #6
 800a320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a32c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a330:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a332:	f107 0308 	add.w	r3, r7, #8
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fde3 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a33e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a342:	2106      	movs	r1, #6
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f8cf 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a34a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a34c:	69fb      	ldr	r3, [r7, #28]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b088      	sub	sp, #32
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a362:	2333      	movs	r3, #51	@ 0x33
 800a364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a36a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a374:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a376:	f107 0308 	add.w	r3, r7, #8
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fdc1 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a382:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a386:	2133      	movs	r1, #51	@ 0x33
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f8ad 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a38e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a390:	69fb      	ldr	r3, [r7, #28]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3720      	adds	r7, #32
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b088      	sub	sp, #32
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a3aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff fd9f 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f980 	bl	800a6cc <SDMMC_GetCmdResp2>
 800a3cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3ce:	69fb      	ldr	r3, [r7, #28]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3720      	adds	r7, #32
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a3e6:	2309      	movs	r3, #9
 800a3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a3ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a3ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3fa:	f107 0308 	add.w	r3, r7, #8
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7ff fd7f 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f960 	bl	800a6cc <SDMMC_GetCmdResp2>
 800a40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a40e:	69fb      	ldr	r3, [r7, #28]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a426:	2303      	movs	r3, #3
 800a428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a42a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a438:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a43a:	f107 0308 	add.w	r3, r7, #8
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff fd5f 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	2103      	movs	r1, #3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f9c8 	bl	800a7e0 <SDMMC_GetCmdResp6>
 800a450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a452:	69fb      	ldr	r3, [r7, #28]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3720      	adds	r7, #32
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a46a:	230d      	movs	r3, #13
 800a46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a46e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a474:	2300      	movs	r3, #0
 800a476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a47c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a47e:	f107 0308 	add.w	r3, r7, #8
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fd3d 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a48a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a48e:	210d      	movs	r1, #13
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f829 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a498:	69fb      	ldr	r3, [r7, #28]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3720      	adds	r7, #32
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b088      	sub	sp, #32
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a4ae:	230d      	movs	r3, #13
 800a4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4c2:	f107 0308 	add.w	r3, r7, #8
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff fd1b 	bl	8009f04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a4ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d2:	210d      	movs	r1, #13
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f807 	bl	800a4e8 <SDMMC_GetCmdResp1>
 800a4da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3720      	adds	r7, #32
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a4f6:	4b70      	ldr	r3, [pc, #448]	@ (800a6b8 <SDMMC_GetCmdResp1+0x1d0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a70      	ldr	r2, [pc, #448]	@ (800a6bc <SDMMC_GetCmdResp1+0x1d4>)
 800a4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a500:	0a5a      	lsrs	r2, r3, #9
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	fb02 f303 	mul.w	r3, r2, r3
 800a508:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	1e5a      	subs	r2, r3, #1
 800a50e:	61fa      	str	r2, [r7, #28]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d102      	bne.n	800a51a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a514:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a518:	e0c9      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a51e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	4b67      	ldr	r3, [pc, #412]	@ (800a6c0 <SDMMC_GetCmdResp1+0x1d8>)
 800a524:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0ef      	beq.n	800a50a <SDMMC_GetCmdResp1+0x22>
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1ea      	bne.n	800a50a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a538:	f003 0304 	and.w	r3, r3, #4
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2204      	movs	r2, #4
 800a544:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a546:	2304      	movs	r3, #4
 800a548:	e0b1      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d004      	beq.n	800a560 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e0a6      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4a58      	ldr	r2, [pc, #352]	@ (800a6c4 <SDMMC_GetCmdResp1+0x1dc>)
 800a564:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff fcf6 	bl	8009f58 <SDMMC_GetCommandResponse>
 800a56c:	4603      	mov	r3, r0
 800a56e:	461a      	mov	r2, r3
 800a570:	7afb      	ldrb	r3, [r7, #11]
 800a572:	4293      	cmp	r3, r2
 800a574:	d001      	beq.n	800a57a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a576:	2301      	movs	r3, #1
 800a578:	e099      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a57a:	2100      	movs	r1, #0
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff fcf8 	bl	8009f72 <SDMMC_GetResponse>
 800a582:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	4b50      	ldr	r3, [pc, #320]	@ (800a6c8 <SDMMC_GetCmdResp1+0x1e0>)
 800a588:	4013      	ands	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a58e:	2300      	movs	r3, #0
 800a590:	e08d      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	da02      	bge.n	800a59e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a598:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a59c:	e087      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5a8:	2340      	movs	r3, #64	@ 0x40
 800a5aa:	e080      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5b6:	2380      	movs	r3, #128	@ 0x80
 800a5b8:	e079      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5c8:	e071      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5d8:	e069      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a5e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e8:	e061      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a5f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5f8:	e059      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a608:	e051      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a614:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a618:	e049      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a624:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a628:	e041      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a638:	e039      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a648:	e031      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a654:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a658:	e029      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a664:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a668:	e021      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a674:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a678:	e019      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a684:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a688:	e011      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a694:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a698:	e009      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a6a4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a6a8:	e001      	b.n	800a6ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3720      	adds	r7, #32
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	24000000 	.word	0x24000000
 800a6bc:	10624dd3 	.word	0x10624dd3
 800a6c0:	00200045 	.word	0x00200045
 800a6c4:	002000c5 	.word	0x002000c5
 800a6c8:	fdffe008 	.word	0xfdffe008

0800a6cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6d4:	4b1f      	ldr	r3, [pc, #124]	@ (800a754 <SDMMC_GetCmdResp2+0x88>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a1f      	ldr	r2, [pc, #124]	@ (800a758 <SDMMC_GetCmdResp2+0x8c>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	0a5b      	lsrs	r3, r3, #9
 800a6e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6e4:	fb02 f303 	mul.w	r3, r2, r3
 800a6e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	1e5a      	subs	r2, r3, #1
 800a6ee:	60fa      	str	r2, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6f8:	e026      	b.n	800a748 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0ef      	beq.n	800a6ea <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1ea      	bne.n	800a6ea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d004      	beq.n	800a72a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2204      	movs	r2, #4
 800a724:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a726:	2304      	movs	r3, #4
 800a728:	e00e      	b.n	800a748 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e003      	b.n	800a748 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a06      	ldr	r2, [pc, #24]	@ (800a75c <SDMMC_GetCmdResp2+0x90>)
 800a744:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	24000000 	.word	0x24000000
 800a758:	10624dd3 	.word	0x10624dd3
 800a75c:	002000c5 	.word	0x002000c5

0800a760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a768:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d4 <SDMMC_GetCmdResp3+0x74>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d8 <SDMMC_GetCmdResp3+0x78>)
 800a76e:	fba2 2303 	umull	r2, r3, r2, r3
 800a772:	0a5b      	lsrs	r3, r3, #9
 800a774:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a778:	fb02 f303 	mul.w	r3, r2, r3
 800a77c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1e5a      	subs	r2, r3, #1
 800a782:	60fa      	str	r2, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a788:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a78c:	e01b      	b.n	800a7c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a792:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0ef      	beq.n	800a77e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1ea      	bne.n	800a77e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2204      	movs	r2, #4
 800a7b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	e003      	b.n	800a7c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a06      	ldr	r2, [pc, #24]	@ (800a7dc <SDMMC_GetCmdResp3+0x7c>)
 800a7c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	24000000 	.word	0x24000000
 800a7d8:	10624dd3 	.word	0x10624dd3
 800a7dc:	002000c5 	.word	0x002000c5

0800a7e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7ee:	4b35      	ldr	r3, [pc, #212]	@ (800a8c4 <SDMMC_GetCmdResp6+0xe4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a35      	ldr	r2, [pc, #212]	@ (800a8c8 <SDMMC_GetCmdResp6+0xe8>)
 800a7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f8:	0a5b      	lsrs	r3, r3, #9
 800a7fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7fe:	fb02 f303 	mul.w	r3, r2, r3
 800a802:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	1e5a      	subs	r2, r3, #1
 800a808:	61fa      	str	r2, [r7, #28]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a80e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a812:	e052      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a818:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0ef      	beq.n	800a804 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1ea      	bne.n	800a804 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2204      	movs	r2, #4
 800a83e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a840:	2304      	movs	r3, #4
 800a842:	e03a      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a856:	2301      	movs	r3, #1
 800a858:	e02f      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f7ff fb7c 	bl	8009f58 <SDMMC_GetCommandResponse>
 800a860:	4603      	mov	r3, r0
 800a862:	461a      	mov	r2, r3
 800a864:	7afb      	ldrb	r3, [r7, #11]
 800a866:	4293      	cmp	r3, r2
 800a868:	d001      	beq.n	800a86e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e025      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4a16      	ldr	r2, [pc, #88]	@ (800a8cc <SDMMC_GetCmdResp6+0xec>)
 800a872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fb7b 	bl	8009f72 <SDMMC_GetResponse>
 800a87c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a892:	2300      	movs	r3, #0
 800a894:	e011      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8a4:	e009      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8b4:	e001      	b.n	800a8ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	24000000 	.word	0x24000000
 800a8c8:	10624dd3 	.word	0x10624dd3
 800a8cc:	002000c5 	.word	0x002000c5

0800a8d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a8d8:	4b22      	ldr	r3, [pc, #136]	@ (800a964 <SDMMC_GetCmdResp7+0x94>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a22      	ldr	r2, [pc, #136]	@ (800a968 <SDMMC_GetCmdResp7+0x98>)
 800a8de:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e2:	0a5b      	lsrs	r3, r3, #9
 800a8e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	60fa      	str	r2, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8fc:	e02c      	b.n	800a958 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a902:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0ef      	beq.n	800a8ee <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1ea      	bne.n	800a8ee <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2204      	movs	r2, #4
 800a928:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a92a:	2304      	movs	r3, #4
 800a92c:	e014      	b.n	800a958 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a940:	2301      	movs	r3, #1
 800a942:	e009      	b.n	800a958 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2240      	movs	r2, #64	@ 0x40
 800a954:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a956:	2300      	movs	r3, #0

}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	24000000 	.word	0x24000000
 800a968:	10624dd3 	.word	0x10624dd3

0800a96c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a974:	4b11      	ldr	r3, [pc, #68]	@ (800a9bc <SDMMC_GetCmdError+0x50>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a11      	ldr	r2, [pc, #68]	@ (800a9c0 <SDMMC_GetCmdError+0x54>)
 800a97a:	fba2 2303 	umull	r2, r3, r2, r3
 800a97e:	0a5b      	lsrs	r3, r3, #9
 800a980:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a984:	fb02 f303 	mul.w	r3, r2, r3
 800a988:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	1e5a      	subs	r2, r3, #1
 800a98e:	60fa      	str	r2, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d102      	bne.n	800a99a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a994:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a998:	e009      	b.n	800a9ae <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a99e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0f1      	beq.n	800a98a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a06      	ldr	r2, [pc, #24]	@ (800a9c4 <SDMMC_GetCmdError+0x58>)
 800a9aa:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	24000000 	.word	0x24000000
 800a9c0:	10624dd3 	.word	0x10624dd3
 800a9c4:	002000c5 	.word	0x002000c5

0800a9c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a9cc:	4904      	ldr	r1, [pc, #16]	@ (800a9e0 <MX_FATFS_Init+0x18>)
 800a9ce:	4805      	ldr	r0, [pc, #20]	@ (800a9e4 <MX_FATFS_Init+0x1c>)
 800a9d0:	f000 ff16 	bl	800b800 <FATFS_LinkDriver>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	4b03      	ldr	r3, [pc, #12]	@ (800a9e8 <MX_FATFS_Init+0x20>)
 800a9da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a9dc:	bf00      	nop
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	240004c0 	.word	0x240004c0
 800a9e4:	0800bec4 	.word	0x0800bec4
 800a9e8:	240004bc 	.word	0x240004bc

0800a9ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a9f6:	f000 f885 	bl	800ab04 <BSP_SD_IsDetected>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d001      	beq.n	800aa04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aa00:	2302      	movs	r3, #2
 800aa02:	e012      	b.n	800aa2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800aa04:	480b      	ldr	r0, [pc, #44]	@ (800aa34 <BSP_SD_Init+0x48>)
 800aa06:	f7fc f8d9 	bl	8006bbc <HAL_SD_Init>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d109      	bne.n	800aa28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800aa14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800aa18:	4806      	ldr	r0, [pc, #24]	@ (800aa34 <BSP_SD_Init+0x48>)
 800aa1a:	f7fc ff8f 	bl	800793c <HAL_SD_ConfigWideBusOperation>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aa28:	79fb      	ldrb	r3, [r7, #7]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	24000320 	.word	0x24000320

0800aa38 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	68f9      	ldr	r1, [r7, #12]
 800aa4e:	4806      	ldr	r0, [pc, #24]	@ (800aa68 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aa50:	f7fc f9d4 	bl	8006dfc <HAL_SD_ReadBlocks_DMA>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	24000320 	.word	0x24000320

0800aa6c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	68f9      	ldr	r1, [r7, #12]
 800aa82:	4806      	ldr	r0, [pc, #24]	@ (800aa9c <BSP_SD_WriteBlocks_DMA+0x30>)
 800aa84:	f7fc fa62 	bl	8006f4c <HAL_SD_WriteBlocks_DMA>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	24000320 	.word	0x24000320

0800aaa0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aaa4:	4805      	ldr	r0, [pc, #20]	@ (800aabc <BSP_SD_GetCardState+0x1c>)
 800aaa6:	f7fd f85b 	bl	8007b60 <HAL_SD_GetCardState>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	bf14      	ite	ne
 800aab0:	2301      	movne	r3, #1
 800aab2:	2300      	moveq	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	24000320 	.word	0x24000320

0800aac0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4803      	ldr	r0, [pc, #12]	@ (800aad8 <BSP_SD_GetCardInfo+0x18>)
 800aacc:	f7fc ff0a 	bl	80078e4 <HAL_SD_GetCardInfo>
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	24000320 	.word	0x24000320

0800aadc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800aae4:	f000 f9a0 	bl	800ae28 <BSP_SD_WriteCpltCallback>
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800aaf8:	f000 f9a2 	bl	800ae40 <BSP_SD_ReadCpltCallback>
}
 800aafc:	bf00      	nop
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ab0e:	f000 f80b 	bl	800ab28 <BSP_PlatformIsDetected>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	b2db      	uxtb	r3, r3
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ab32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ab36:	4806      	ldr	r0, [pc, #24]	@ (800ab50 <BSP_PlatformIsDetected+0x28>)
 800ab38:	f7f7 fbe6 	bl	8002308 <HAL_GPIO_ReadPin>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ab42:	2300      	movs	r3, #0
 800ab44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ab46:	79fb      	ldrb	r3, [r7, #7]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	58022000 	.word	0x58022000

0800ab54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ab5c:	f7f6 feb6 	bl	80018cc <HAL_GetTick>
 800ab60:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ab62:	e006      	b.n	800ab72 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab64:	f7ff ff9c 	bl	800aaa0 <BSP_SD_GetCardState>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e009      	b.n	800ab86 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ab72:	f7f6 feab 	bl	80018cc <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d8f0      	bhi.n	800ab64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ab82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ab9a:	4b0b      	ldr	r3, [pc, #44]	@ (800abc8 <SD_CheckStatus+0x38>)
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800aba0:	f7ff ff7e 	bl	800aaa0 <BSP_SD_GetCardState>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d107      	bne.n	800abba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800abaa:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <SD_CheckStatus+0x38>)
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f023 0301 	bic.w	r3, r3, #1
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	4b04      	ldr	r3, [pc, #16]	@ (800abc8 <SD_CheckStatus+0x38>)
 800abb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800abba:	4b03      	ldr	r3, [pc, #12]	@ (800abc8 <SD_CheckStatus+0x38>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b2db      	uxtb	r3, r3
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	2400000d 	.word	0x2400000d

0800abcc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800abd6:	f7ff ff09 	bl	800a9ec <BSP_SD_Init>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d107      	bne.n	800abf0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7ff ffd4 	bl	800ab90 <SD_CheckStatus>
 800abe8:	4603      	mov	r3, r0
 800abea:	461a      	mov	r2, r3
 800abec:	4b04      	ldr	r3, [pc, #16]	@ (800ac00 <SD_initialize+0x34>)
 800abee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800abf0:	4b03      	ldr	r3, [pc, #12]	@ (800ac00 <SD_initialize+0x34>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	b2db      	uxtb	r3, r3
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	2400000d 	.word	0x2400000d

0800ac04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff ffbd 	bl	800ab90 <SD_CheckStatus>
 800ac16:	4603      	mov	r3, r0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ac34:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ac38:	f7ff ff8c 	bl	800ab54 <SD_CheckStatusWithTimeout>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	da01      	bge.n	800ac46 <SD_read+0x26>
  {
    return res;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	e03b      	b.n	800acbe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	68b8      	ldr	r0, [r7, #8]
 800ac4c:	f7ff fef4 	bl	800aa38 <BSP_SD_ReadBlocks_DMA>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d132      	bne.n	800acbc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ac56:	4b1c      	ldr	r3, [pc, #112]	@ (800acc8 <SD_read+0xa8>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ac5c:	f7f6 fe36 	bl	80018cc <HAL_GetTick>
 800ac60:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ac62:	bf00      	nop
 800ac64:	4b18      	ldr	r3, [pc, #96]	@ (800acc8 <SD_read+0xa8>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d108      	bne.n	800ac7e <SD_read+0x5e>
 800ac6c:	f7f6 fe2e 	bl	80018cc <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d9f2      	bls.n	800ac64 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ac7e:	4b12      	ldr	r3, [pc, #72]	@ (800acc8 <SD_read+0xa8>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	75fb      	strb	r3, [r7, #23]
 800ac8a:	e017      	b.n	800acbc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ac8c:	4b0e      	ldr	r3, [pc, #56]	@ (800acc8 <SD_read+0xa8>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ac92:	f7f6 fe1b 	bl	80018cc <HAL_GetTick>
 800ac96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ac98:	e007      	b.n	800acaa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac9a:	f7ff ff01 	bl	800aaa0 <BSP_SD_GetCardState>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <SD_read+0x8a>
          {
            res = RES_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aca8:	e008      	b.n	800acbc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800acaa:	f7f6 fe0f 	bl	80018cc <HAL_GetTick>
 800acae:	4602      	mov	r2, r0
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800acb8:	4293      	cmp	r3, r2
 800acba:	d9ee      	bls.n	800ac9a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	240004c8 	.word	0x240004c8

0800accc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ace0:	4b24      	ldr	r3, [pc, #144]	@ (800ad74 <SD_write+0xa8>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ace6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800acea:	f7ff ff33 	bl	800ab54 <SD_CheckStatusWithTimeout>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	da01      	bge.n	800acf8 <SD_write+0x2c>
  {
    return res;
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
 800acf6:	e038      	b.n	800ad6a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68b8      	ldr	r0, [r7, #8]
 800acfe:	f7ff feb5 	bl	800aa6c <BSP_SD_WriteBlocks_DMA>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d12f      	bne.n	800ad68 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ad08:	f7f6 fde0 	bl	80018cc <HAL_GetTick>
 800ad0c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ad0e:	bf00      	nop
 800ad10:	4b18      	ldr	r3, [pc, #96]	@ (800ad74 <SD_write+0xa8>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d108      	bne.n	800ad2a <SD_write+0x5e>
 800ad18:	f7f6 fdd8 	bl	80018cc <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d9f2      	bls.n	800ad10 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ad2a:	4b12      	ldr	r3, [pc, #72]	@ (800ad74 <SD_write+0xa8>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	75fb      	strb	r3, [r7, #23]
 800ad36:	e017      	b.n	800ad68 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ad38:	4b0e      	ldr	r3, [pc, #56]	@ (800ad74 <SD_write+0xa8>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ad3e:	f7f6 fdc5 	bl	80018cc <HAL_GetTick>
 800ad42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad44:	e007      	b.n	800ad56 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad46:	f7ff feab 	bl	800aaa0 <BSP_SD_GetCardState>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <SD_write+0x8a>
          {
            res = RES_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
            break;
 800ad54:	e008      	b.n	800ad68 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad56:	f7f6 fdb9 	bl	80018cc <HAL_GetTick>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d9ee      	bls.n	800ad46 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	240004c4 	.word	0x240004c4

0800ad78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08c      	sub	sp, #48	@ 0x30
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	603a      	str	r2, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
 800ad84:	460b      	mov	r3, r1
 800ad86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad8e:	4b25      	ldr	r3, [pc, #148]	@ (800ae24 <SD_ioctl+0xac>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <SD_ioctl+0x28>
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	e03c      	b.n	800ae1a <SD_ioctl+0xa2>

  switch (cmd)
 800ada0:	79bb      	ldrb	r3, [r7, #6]
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d834      	bhi.n	800ae10 <SD_ioctl+0x98>
 800ada6:	a201      	add	r2, pc, #4	@ (adr r2, 800adac <SD_ioctl+0x34>)
 800ada8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adc5 	.word	0x0800adc5
 800adb4:	0800addd 	.word	0x0800addd
 800adb8:	0800adf7 	.word	0x0800adf7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800adc2:	e028      	b.n	800ae16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fe79 	bl	800aac0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800adce:	6a3a      	ldr	r2, [r7, #32]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800adda:	e01c      	b.n	800ae16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800addc:	f107 0308 	add.w	r3, r7, #8
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7ff fe6d 	bl	800aac0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	b29a      	uxth	r2, r3
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800adf4:	e00f      	b.n	800ae16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800adf6:	f107 0308 	add.w	r3, r7, #8
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fe60 	bl	800aac0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	0a5a      	lsrs	r2, r3, #9
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae0e:	e002      	b.n	800ae16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ae10:	2304      	movs	r3, #4
 800ae12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ae16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3730      	adds	r7, #48	@ 0x30
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	2400000d 	.word	0x2400000d

0800ae28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ae2c:	4b03      	ldr	r3, [pc, #12]	@ (800ae3c <BSP_SD_WriteCpltCallback+0x14>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	601a      	str	r2, [r3, #0]
}
 800ae32:	bf00      	nop
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	240004c4 	.word	0x240004c4

0800ae40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ae44:	4b03      	ldr	r3, [pc, #12]	@ (800ae54 <BSP_SD_ReadCpltCallback+0x14>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
}
 800ae4a:	bf00      	nop
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	240004c8 	.word	0x240004c8

0800ae58 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800ae5c:	bf00      	nop
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
	...

0800ae68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	4a08      	ldr	r2, [pc, #32]	@ (800ae98 <disk_status+0x30>)
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	79fa      	ldrb	r2, [r7, #7]
 800ae80:	4905      	ldr	r1, [pc, #20]	@ (800ae98 <disk_status+0x30>)
 800ae82:	440a      	add	r2, r1
 800ae84:	7a12      	ldrb	r2, [r2, #8]
 800ae86:	4610      	mov	r0, r2
 800ae88:	4798      	blx	r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	240004f4 	.word	0x240004f4

0800ae9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4603      	mov	r3, r0
 800aea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	4a0e      	ldr	r2, [pc, #56]	@ (800aee8 <disk_initialize+0x4c>)
 800aeae:	5cd3      	ldrb	r3, [r2, r3]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d114      	bne.n	800aede <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	4a0c      	ldr	r2, [pc, #48]	@ (800aee8 <disk_initialize+0x4c>)
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	79fa      	ldrb	r2, [r7, #7]
 800aec2:	4909      	ldr	r1, [pc, #36]	@ (800aee8 <disk_initialize+0x4c>)
 800aec4:	440a      	add	r2, r1
 800aec6:	7a12      	ldrb	r2, [r2, #8]
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	4603      	mov	r3, r0
 800aece:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d103      	bne.n	800aede <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	4a03      	ldr	r2, [pc, #12]	@ (800aee8 <disk_initialize+0x4c>)
 800aeda:	2101      	movs	r1, #1
 800aedc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	240004f4 	.word	0x240004f4

0800aeec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	607a      	str	r2, [r7, #4]
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	4a0a      	ldr	r2, [pc, #40]	@ (800af28 <disk_read+0x3c>)
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	689c      	ldr	r4, [r3, #8]
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	4a07      	ldr	r2, [pc, #28]	@ (800af28 <disk_read+0x3c>)
 800af0c:	4413      	add	r3, r2
 800af0e:	7a18      	ldrb	r0, [r3, #8]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	47a0      	blx	r4
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	bd90      	pop	{r4, r7, pc}
 800af26:	bf00      	nop
 800af28:	240004f4 	.word	0x240004f4

0800af2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60b9      	str	r1, [r7, #8]
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4a0a      	ldr	r2, [pc, #40]	@ (800af68 <disk_write+0x3c>)
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	68dc      	ldr	r4, [r3, #12]
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	4a07      	ldr	r2, [pc, #28]	@ (800af68 <disk_write+0x3c>)
 800af4c:	4413      	add	r3, r2
 800af4e:	7a18      	ldrb	r0, [r3, #8]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	68b9      	ldr	r1, [r7, #8]
 800af56:	47a0      	blx	r4
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
  return res;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	bd90      	pop	{r4, r7, pc}
 800af66:	bf00      	nop
 800af68:	240004f4 	.word	0x240004f4

0800af6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3301      	adds	r3, #1
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800af7c:	89fb      	ldrh	r3, [r7, #14]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	b21a      	sxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	b21b      	sxth	r3, r3
 800af88:	4313      	orrs	r3, r2
 800af8a:	b21b      	sxth	r3, r3
 800af8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800af8e:	89fb      	ldrh	r3, [r7, #14]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3303      	adds	r3, #3
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	021b      	lsls	r3, r3, #8
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	3202      	adds	r2, #2
 800afb4:	7812      	ldrb	r2, [r2, #0]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	3201      	adds	r2, #1
 800afc2:	7812      	ldrb	r2, [r2, #0]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	021b      	lsls	r3, r3, #8
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	7812      	ldrb	r2, [r2, #0]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]
	return rv;
 800afd4:	68fb      	ldr	r3, [r7, #12]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
	...

0800afe4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	e010      	b.n	800b014 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aff2:	4a0d      	ldr	r2, [pc, #52]	@ (800b028 <clear_lock+0x44>)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	4413      	add	r3, r2
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	429a      	cmp	r2, r3
 800b000:	d105      	bne.n	800b00e <clear_lock+0x2a>
 800b002:	4a09      	ldr	r2, [pc, #36]	@ (800b028 <clear_lock+0x44>)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	011b      	lsls	r3, r3, #4
 800b008:	4413      	add	r3, r2
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d9eb      	bls.n	800aff2 <clear_lock+0xe>
	}
}
 800b01a:	bf00      	nop
 800b01c:	bf00      	nop
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	240004d4 	.word	0x240004d4

0800b02c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	78db      	ldrb	r3, [r3, #3]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d034      	beq.n	800b0aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7858      	ldrb	r0, [r3, #1]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b050:	2301      	movs	r3, #1
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	f7ff ff6a 	bl	800af2c <disk_write>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b05e:	2301      	movs	r3, #1
 800b060:	73fb      	strb	r3, [r7, #15]
 800b062:	e022      	b.n	800b0aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	1ad2      	subs	r2, r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	429a      	cmp	r2, r3
 800b078:	d217      	bcs.n	800b0aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	789b      	ldrb	r3, [r3, #2]
 800b07e:	613b      	str	r3, [r7, #16]
 800b080:	e010      	b.n	800b0a4 <sync_window+0x78>
					wsect += fs->fsize;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4413      	add	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	7858      	ldrb	r0, [r3, #1]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b096:	2301      	movs	r3, #1
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	f7ff ff47 	bl	800af2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d8eb      	bhi.n	800b082 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d01b      	beq.n	800b104 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ffad 	bl	800b02c <sync_window>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d113      	bne.n	800b104 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	7858      	ldrb	r0, [r3, #1]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	f7ff feff 	bl	800aeec <disk_read>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b10e:	b480      	push	{r7}
 800b110:	b087      	sub	sp, #28
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b116:	f04f 33ff 	mov.w	r3, #4294967295
 800b11a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d031      	beq.n	800b188 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	e002      	b.n	800b132 <get_ldnumber+0x24>
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3301      	adds	r3, #1
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b20      	cmp	r3, #32
 800b138:	d903      	bls.n	800b142 <get_ldnumber+0x34>
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b140:	d1f4      	bne.n	800b12c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b3a      	cmp	r3, #58	@ 0x3a
 800b148:	d11c      	bne.n	800b184 <get_ldnumber+0x76>
			tp = *path;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	60fa      	str	r2, [r7, #12]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	3b30      	subs	r3, #48	@ 0x30
 800b15a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b09      	cmp	r3, #9
 800b160:	d80e      	bhi.n	800b180 <get_ldnumber+0x72>
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	429a      	cmp	r2, r3
 800b168:	d10a      	bne.n	800b180 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d107      	bne.n	800b180 <get_ldnumber+0x72>
					vol = (int)i;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	3301      	adds	r3, #1
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	e002      	b.n	800b18a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b184:	2300      	movs	r3, #0
 800b186:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b188:	693b      	ldr	r3, [r7, #16]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
	...

0800b198 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	70da      	strb	r2, [r3, #3]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff ff7e 	bl	800b0b4 <move_window>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <check_fs+0x2a>
 800b1be:	2304      	movs	r3, #4
 800b1c0:	e038      	b.n	800b234 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3330      	adds	r3, #48	@ 0x30
 800b1c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff fece 	bl	800af6c <ld_word>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d001      	beq.n	800b1e0 <check_fs+0x48>
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e029      	b.n	800b234 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b1e6:	2be9      	cmp	r3, #233	@ 0xe9
 800b1e8:	d009      	beq.n	800b1fe <check_fs+0x66>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b1f0:	2beb      	cmp	r3, #235	@ 0xeb
 800b1f2:	d11e      	bne.n	800b232 <check_fs+0x9a>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b1fa:	2b90      	cmp	r3, #144	@ 0x90
 800b1fc:	d119      	bne.n	800b232 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3330      	adds	r3, #48	@ 0x30
 800b202:	3336      	adds	r3, #54	@ 0x36
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff fec9 	bl	800af9c <ld_dword>
 800b20a:	4603      	mov	r3, r0
 800b20c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b210:	4a0a      	ldr	r2, [pc, #40]	@ (800b23c <check_fs+0xa4>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d101      	bne.n	800b21a <check_fs+0x82>
 800b216:	2300      	movs	r3, #0
 800b218:	e00c      	b.n	800b234 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3330      	adds	r3, #48	@ 0x30
 800b21e:	3352      	adds	r3, #82	@ 0x52
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff febb 	bl	800af9c <ld_dword>
 800b226:	4603      	mov	r3, r0
 800b228:	4a05      	ldr	r2, [pc, #20]	@ (800b240 <check_fs+0xa8>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d101      	bne.n	800b232 <check_fs+0x9a>
 800b22e:	2300      	movs	r3, #0
 800b230:	e000      	b.n	800b234 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b232:	2302      	movs	r3, #2
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	00544146 	.word	0x00544146
 800b240:	33544146 	.word	0x33544146

0800b244 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b096      	sub	sp, #88	@ 0x58
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	4613      	mov	r3, r2
 800b250:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff ff58 	bl	800b10e <get_ldnumber>
 800b25e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b262:	2b00      	cmp	r3, #0
 800b264:	da01      	bge.n	800b26a <find_volume+0x26>
 800b266:	230b      	movs	r3, #11
 800b268:	e22d      	b.n	800b6c6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b26a:	4aa1      	ldr	r2, [pc, #644]	@ (800b4f0 <find_volume+0x2ac>)
 800b26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b272:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <find_volume+0x3a>
 800b27a:	230c      	movs	r3, #12
 800b27c:	e223      	b.n	800b6c6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b282:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	f023 0301 	bic.w	r3, r3, #1
 800b28a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d01a      	beq.n	800b2ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	785b      	ldrb	r3, [r3, #1]
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff fde5 	bl	800ae68 <disk_status>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b2a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10c      	bne.n	800b2ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d007      	beq.n	800b2c6 <find_volume+0x82>
 800b2b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2ba:	f003 0304 	and.w	r3, r3, #4
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b2c2:	230a      	movs	r3, #10
 800b2c4:	e1ff      	b.n	800b6c6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e1fd      	b.n	800b6c6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff fddd 	bl	800ae9c <disk_initialize>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b2e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e1e6      	b.n	800b6c6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d007      	beq.n	800b30e <find_volume+0xca>
 800b2fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b30a:	230a      	movs	r3, #10
 800b30c:	e1db      	b.n	800b6c6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b312:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b314:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b316:	f7ff ff3f 	bl	800b198 <check_fs>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b320:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b324:	2b02      	cmp	r3, #2
 800b326:	d149      	bne.n	800b3bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b328:	2300      	movs	r3, #0
 800b32a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b32c:	e01e      	b.n	800b36c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b33c:	4413      	add	r3, r2
 800b33e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	3304      	adds	r3, #4
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d006      	beq.n	800b358 <find_volume+0x114>
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	3308      	adds	r3, #8
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fe24 	bl	800af9c <ld_dword>
 800b354:	4602      	mov	r2, r0
 800b356:	e000      	b.n	800b35a <find_volume+0x116>
 800b358:	2200      	movs	r2, #0
 800b35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	3358      	adds	r3, #88	@ 0x58
 800b360:	443b      	add	r3, r7
 800b362:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b368:	3301      	adds	r3, #1
 800b36a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d9dd      	bls.n	800b32e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b372:	2300      	movs	r3, #0
 800b374:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <find_volume+0x13e>
 800b37c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b37e:	3b01      	subs	r3, #1
 800b380:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	3358      	adds	r3, #88	@ 0x58
 800b388:	443b      	add	r3, r7
 800b38a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b38e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <find_volume+0x15e>
 800b396:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b398:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b39a:	f7ff fefd 	bl	800b198 <check_fs>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	e000      	b.n	800b3a4 <find_volume+0x160>
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d905      	bls.n	800b3bc <find_volume+0x178>
 800b3b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d9e2      	bls.n	800b382 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b3bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d101      	bne.n	800b3c8 <find_volume+0x184>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e17e      	b.n	800b6c6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d901      	bls.n	800b3d4 <find_volume+0x190>
 800b3d0:	230d      	movs	r3, #13
 800b3d2:	e178      	b.n	800b6c6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d6:	3330      	adds	r3, #48	@ 0x30
 800b3d8:	330b      	adds	r3, #11
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fdc6 	bl	800af6c <ld_word>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3e6:	d001      	beq.n	800b3ec <find_volume+0x1a8>
 800b3e8:	230d      	movs	r3, #13
 800b3ea:	e16c      	b.n	800b6c6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ee:	3330      	adds	r3, #48	@ 0x30
 800b3f0:	3316      	adds	r3, #22
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff fdba 	bl	800af6c <ld_word>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b3fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d106      	bne.n	800b410 <find_volume+0x1cc>
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	3330      	adds	r3, #48	@ 0x30
 800b406:	3324      	adds	r3, #36	@ 0x24
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fdc7 	bl	800af9c <ld_dword>
 800b40e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b414:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	789b      	ldrb	r3, [r3, #2]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d005      	beq.n	800b434 <find_volume+0x1f0>
 800b428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42a:	789b      	ldrb	r3, [r3, #2]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d001      	beq.n	800b434 <find_volume+0x1f0>
 800b430:	230d      	movs	r3, #13
 800b432:	e148      	b.n	800b6c6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	789b      	ldrb	r3, [r3, #2]
 800b438:	461a      	mov	r2, r3
 800b43a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b43c:	fb02 f303 	mul.w	r3, r2, r3
 800b440:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b448:	461a      	mov	r2, r3
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b450:	895b      	ldrh	r3, [r3, #10]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d008      	beq.n	800b468 <find_volume+0x224>
 800b456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b458:	895b      	ldrh	r3, [r3, #10]
 800b45a:	461a      	mov	r2, r3
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	895b      	ldrh	r3, [r3, #10]
 800b460:	3b01      	subs	r3, #1
 800b462:	4013      	ands	r3, r2
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <find_volume+0x228>
 800b468:	230d      	movs	r3, #13
 800b46a:	e12c      	b.n	800b6c6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46e:	3330      	adds	r3, #48	@ 0x30
 800b470:	3311      	adds	r3, #17
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fd7a 	bl	800af6c <ld_word>
 800b478:	4603      	mov	r3, r0
 800b47a:	461a      	mov	r2, r3
 800b47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b482:	891b      	ldrh	r3, [r3, #8]
 800b484:	f003 030f 	and.w	r3, r3, #15
 800b488:	b29b      	uxth	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <find_volume+0x24e>
 800b48e:	230d      	movs	r3, #13
 800b490:	e119      	b.n	800b6c6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b494:	3330      	adds	r3, #48	@ 0x30
 800b496:	3313      	adds	r3, #19
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff fd67 	bl	800af6c <ld_word>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d106      	bne.n	800b4b6 <find_volume+0x272>
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4aa:	3330      	adds	r3, #48	@ 0x30
 800b4ac:	3320      	adds	r3, #32
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff fd74 	bl	800af9c <ld_dword>
 800b4b4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b8:	3330      	adds	r3, #48	@ 0x30
 800b4ba:	330e      	adds	r3, #14
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff fd55 	bl	800af6c <ld_word>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b4c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <find_volume+0x28c>
 800b4cc:	230d      	movs	r3, #13
 800b4ce:	e0fa      	b.n	800b6c6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b4d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4d4:	4413      	add	r3, r2
 800b4d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4d8:	8912      	ldrh	r2, [r2, #8]
 800b4da:	0912      	lsrs	r2, r2, #4
 800b4dc:	b292      	uxth	r2, r2
 800b4de:	4413      	add	r3, r2
 800b4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d204      	bcs.n	800b4f4 <find_volume+0x2b0>
 800b4ea:	230d      	movs	r3, #13
 800b4ec:	e0eb      	b.n	800b6c6 <find_volume+0x482>
 800b4ee:	bf00      	nop
 800b4f0:	240004cc 	.word	0x240004cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4fc:	8952      	ldrh	r2, [r2, #10]
 800b4fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b502:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <find_volume+0x2ca>
 800b50a:	230d      	movs	r3, #13
 800b50c:	e0db      	b.n	800b6c6 <find_volume+0x482>
		fmt = FS_FAT32;
 800b50e:	2303      	movs	r3, #3
 800b510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b516:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d802      	bhi.n	800b524 <find_volume+0x2e0>
 800b51e:	2302      	movs	r3, #2
 800b520:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d802      	bhi.n	800b534 <find_volume+0x2f0>
 800b52e:	2301      	movs	r3, #1
 800b530:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b536:	1c9a      	adds	r2, r3, #2
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b540:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b542:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b546:	441a      	add	r2, r3
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b54c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b550:	441a      	add	r2, r3
 800b552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b554:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b556:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d11e      	bne.n	800b59c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b560:	3330      	adds	r3, #48	@ 0x30
 800b562:	332a      	adds	r3, #42	@ 0x2a
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fd01 	bl	800af6c <ld_word>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <find_volume+0x330>
 800b570:	230d      	movs	r3, #13
 800b572:	e0a8      	b.n	800b6c6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	891b      	ldrh	r3, [r3, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <find_volume+0x33c>
 800b57c:	230d      	movs	r3, #13
 800b57e:	e0a2      	b.n	800b6c6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	3330      	adds	r3, #48	@ 0x30
 800b584:	332c      	adds	r3, #44	@ 0x2c
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff fd08 	bl	800af9c <ld_dword>
 800b58c:	4602      	mov	r2, r0
 800b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b590:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	647b      	str	r3, [r7, #68]	@ 0x44
 800b59a:	e01f      	b.n	800b5dc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59e:	891b      	ldrh	r3, [r3, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <find_volume+0x364>
 800b5a4:	230d      	movs	r3, #13
 800b5a6:	e08e      	b.n	800b6c6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5aa:	6a1a      	ldr	r2, [r3, #32]
 800b5ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ae:	441a      	add	r2, r3
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d103      	bne.n	800b5c4 <find_volume+0x380>
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	e00a      	b.n	800b5da <find_volume+0x396>
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c6:	695a      	ldr	r2, [r3, #20]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	4413      	add	r3, r2
 800b5ce:	085a      	lsrs	r2, r3, #1
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5da:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5de:	699a      	ldr	r2, [r3, #24]
 800b5e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5e2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b5e6:	0a5b      	lsrs	r3, r3, #9
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d201      	bcs.n	800b5f0 <find_volume+0x3ac>
 800b5ec:	230d      	movs	r3, #13
 800b5ee:	e06a      	b.n	800b6c6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f6:	611a      	str	r2, [r3, #16]
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	691a      	ldr	r2, [r3, #16]
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	2280      	movs	r2, #128	@ 0x80
 800b604:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b606:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d149      	bne.n	800b6a2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	3330      	adds	r3, #48	@ 0x30
 800b612:	3330      	adds	r3, #48	@ 0x30
 800b614:	4618      	mov	r0, r3
 800b616:	f7ff fca9 	bl	800af6c <ld_word>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d140      	bne.n	800b6a2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b622:	3301      	adds	r3, #1
 800b624:	4619      	mov	r1, r3
 800b626:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b628:	f7ff fd44 	bl	800b0b4 <move_window>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d137      	bne.n	800b6a2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	2200      	movs	r2, #0
 800b636:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63a:	3330      	adds	r3, #48	@ 0x30
 800b63c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fc93 	bl	800af6c <ld_word>
 800b646:	4603      	mov	r3, r0
 800b648:	461a      	mov	r2, r3
 800b64a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b64e:	429a      	cmp	r2, r3
 800b650:	d127      	bne.n	800b6a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b654:	3330      	adds	r3, #48	@ 0x30
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff fca0 	bl	800af9c <ld_dword>
 800b65c:	4603      	mov	r3, r0
 800b65e:	4a1c      	ldr	r2, [pc, #112]	@ (800b6d0 <find_volume+0x48c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d11e      	bne.n	800b6a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b666:	3330      	adds	r3, #48	@ 0x30
 800b668:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff fc95 	bl	800af9c <ld_dword>
 800b672:	4603      	mov	r3, r0
 800b674:	4a17      	ldr	r2, [pc, #92]	@ (800b6d4 <find_volume+0x490>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d113      	bne.n	800b6a2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67c:	3330      	adds	r3, #48	@ 0x30
 800b67e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff fc8a 	bl	800af9c <ld_dword>
 800b688:	4602      	mov	r2, r0
 800b68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b690:	3330      	adds	r3, #48	@ 0x30
 800b692:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff fc80 	bl	800af9c <ld_dword>
 800b69c:	4602      	mov	r2, r0
 800b69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b6a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b6aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d8 <find_volume+0x494>)
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	4b09      	ldr	r3, [pc, #36]	@ (800b6d8 <find_volume+0x494>)
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	4b08      	ldr	r3, [pc, #32]	@ (800b6d8 <find_volume+0x494>)
 800b6b8:	881a      	ldrh	r2, [r3, #0]
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b6c0:	f7ff fc90 	bl	800afe4 <clear_lock>
#endif
	return FR_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3758      	adds	r7, #88	@ 0x58
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	41615252 	.word	0x41615252
 800b6d4:	61417272 	.word	0x61417272
 800b6d8:	240004d0 	.word	0x240004d0

0800b6dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b6ee:	f107 0310 	add.w	r3, r7, #16
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7ff fd0b 	bl	800b10e <get_ldnumber>
 800b6f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	da01      	bge.n	800b704 <f_mount+0x28>
 800b700:	230b      	movs	r3, #11
 800b702:	e02b      	b.n	800b75c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b704:	4a17      	ldr	r2, [pc, #92]	@ (800b764 <f_mount+0x88>)
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b70c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b714:	69b8      	ldr	r0, [r7, #24]
 800b716:	f7ff fc65 	bl	800afe4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2200      	movs	r2, #0
 800b71e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	490d      	ldr	r1, [pc, #52]	@ (800b764 <f_mount+0x88>)
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <f_mount+0x66>
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d001      	beq.n	800b746 <f_mount+0x6a>
 800b742:	2300      	movs	r3, #0
 800b744:	e00a      	b.n	800b75c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b746:	f107 010c 	add.w	r1, r7, #12
 800b74a:	f107 0308 	add.w	r3, r7, #8
 800b74e:	2200      	movs	r2, #0
 800b750:	4618      	mov	r0, r3
 800b752:	f7ff fd77 	bl	800b244 <find_volume>
 800b756:	4603      	mov	r3, r0
 800b758:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3720      	adds	r7, #32
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	240004cc 	.word	0x240004cc

0800b768 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4613      	mov	r3, r2
 800b774:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b776:	2301      	movs	r3, #1
 800b778:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b77e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b780:	7a5b      	ldrb	r3, [r3, #9]
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b00      	cmp	r3, #0
 800b786:	d131      	bne.n	800b7ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b788:	4b1c      	ldr	r3, [pc, #112]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b78a:	7a5b      	ldrb	r3, [r3, #9]
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	4b1a      	ldr	r3, [pc, #104]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b792:	2100      	movs	r1, #0
 800b794:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b796:	4b19      	ldr	r3, [pc, #100]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b798:	7a5b      	ldrb	r3, [r3, #9]
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	4a17      	ldr	r2, [pc, #92]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b7a6:	4b15      	ldr	r3, [pc, #84]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b7a8:	7a5b      	ldrb	r3, [r3, #9]
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4b13      	ldr	r3, [pc, #76]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	79fa      	ldrb	r2, [r7, #7]
 800b7b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7b6:	4b11      	ldr	r3, [pc, #68]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b7b8:	7a5b      	ldrb	r3, [r3, #9]
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	b2d1      	uxtb	r1, r2
 800b7c0:	4a0e      	ldr	r2, [pc, #56]	@ (800b7fc <FATFS_LinkDriverEx+0x94>)
 800b7c2:	7251      	strb	r1, [r2, #9]
 800b7c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b7c6:	7dbb      	ldrb	r3, [r7, #22]
 800b7c8:	3330      	adds	r3, #48	@ 0x30
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	223a      	movs	r2, #58	@ 0x3a
 800b7d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3302      	adds	r3, #2
 800b7dc:	222f      	movs	r2, #47	@ 0x2f
 800b7de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	3303      	adds	r3, #3
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	240004f4 	.word	0x240004f4

0800b800 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b80a:	2200      	movs	r2, #0
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff ffaa 	bl	800b768 <FATFS_LinkDriverEx>
 800b814:	4603      	mov	r3, r0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800b826:	2300      	movs	r3, #0
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	e02e      	b.n	800b88a <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3b80      	subs	r3, #128	@ 0x80
 800b830:	005b      	lsls	r3, r3, #1
 800b832:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b842:	141a      	asrs	r2, r3, #16
 800b844:	4916      	ldr	r1, [pc, #88]	@ (800b8a0 <JPEG_InitPostProcColorTables+0x80>)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800b852:	fb02 f303 	mul.w	r3, r2, r3
 800b856:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b85a:	141a      	asrs	r2, r3, #16
 800b85c:	4911      	ldr	r1, [pc, #68]	@ (800b8a4 <JPEG_InitPostProcColorTables+0x84>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	4a10      	ldr	r2, [pc, #64]	@ (800b8a8 <JPEG_InitPostProcColorTables+0x88>)
 800b868:	fb03 f202 	mul.w	r2, r3, r2
 800b86c:	490f      	ldr	r1, [pc, #60]	@ (800b8ac <JPEG_InitPostProcColorTables+0x8c>)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	4a0e      	ldr	r2, [pc, #56]	@ (800b8b0 <JPEG_InitPostProcColorTables+0x90>)
 800b878:	fb03 f202 	mul.w	r2, r3, r2
 800b87c:	490d      	ldr	r1, [pc, #52]	@ (800b8b4 <JPEG_InitPostProcColorTables+0x94>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3301      	adds	r3, #1
 800b888:	607b      	str	r3, [r7, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2bff      	cmp	r3, #255	@ 0xff
 800b88e:	ddcd      	ble.n	800b82c <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	24000500 	.word	0x24000500
 800b8a4:	24000900 	.word	0x24000900
 800b8a8:	ffffa498 	.word	0xffffa498
 800b8ac:	24000d00 	.word	0x24000d00
 800b8b0:	ffffd3f4 	.word	0xffffd3f4
 800b8b4:	24001100 	.word	0x24001100

0800b8b8 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800b8bc:	f000 f806 	bl	800b8cc <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800b8c0:	f000 f888 	bl	800b9d4 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800b8c4:	f7ff ffac 	bl	800b820 <JPEG_InitPostProcColorTables>
#endif

}
 800b8c8:	bf00      	nop
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	607b      	str	r3, [r7, #4]
 800b8d6:	e05a      	b.n	800b98e <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800b8de:	fb02 f303 	mul.w	r3, r2, r3
 800b8e2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b8e6:	141a      	asrs	r2, r3, #16
 800b8e8:	492e      	ldr	r1, [pc, #184]	@ (800b9a4 <JPEG_InitPreProcColorTables+0xd8>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f249 6245 	movw	r2, #38469	@ 0x9645
 800b8f6:	fb02 f303 	mul.w	r3, r2, r3
 800b8fa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b8fe:	141a      	asrs	r2, r3, #16
 800b900:	4929      	ldr	r1, [pc, #164]	@ (800b9a8 <JPEG_InitPreProcColorTables+0xdc>)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800b90e:	fb02 f303 	mul.w	r3, r2, r3
 800b912:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b916:	141a      	asrs	r2, r3, #16
 800b918:	4924      	ldr	r1, [pc, #144]	@ (800b9ac <JPEG_InitPreProcColorTables+0xe0>)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a23      	ldr	r2, [pc, #140]	@ (800b9b0 <JPEG_InitPreProcColorTables+0xe4>)
 800b924:	fb02 f303 	mul.w	r3, r2, r3
 800b928:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b92c:	141a      	asrs	r2, r3, #16
 800b92e:	4921      	ldr	r1, [pc, #132]	@ (800b9b4 <JPEG_InitPreProcColorTables+0xe8>)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4a1f      	ldr	r2, [pc, #124]	@ (800b9b8 <JPEG_InitPreProcColorTables+0xec>)
 800b93a:	fb02 f303 	mul.w	r3, r2, r3
 800b93e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b942:	141a      	asrs	r2, r3, #16
 800b944:	491d      	ldr	r1, [pc, #116]	@ (800b9bc <JPEG_InitPreProcColorTables+0xf0>)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3301      	adds	r3, #1
 800b950:	03db      	lsls	r3, r3, #15
 800b952:	141a      	asrs	r2, r3, #16
 800b954:	491a      	ldr	r1, [pc, #104]	@ (800b9c0 <JPEG_InitPreProcColorTables+0xf4>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a19      	ldr	r2, [pc, #100]	@ (800b9c4 <JPEG_InitPreProcColorTables+0xf8>)
 800b960:	fb02 f303 	mul.w	r3, r2, r3
 800b964:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b968:	141a      	asrs	r2, r3, #16
 800b96a:	4917      	ldr	r1, [pc, #92]	@ (800b9c8 <JPEG_InitPreProcColorTables+0xfc>)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a15      	ldr	r2, [pc, #84]	@ (800b9cc <JPEG_InitPreProcColorTables+0x100>)
 800b976:	fb02 f303 	mul.w	r3, r2, r3
 800b97a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b97e:	141a      	asrs	r2, r3, #16
 800b980:	4913      	ldr	r1, [pc, #76]	@ (800b9d0 <JPEG_InitPreProcColorTables+0x104>)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3301      	adds	r3, #1
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2bff      	cmp	r3, #255	@ 0xff
 800b992:	dda1      	ble.n	800b8d8 <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	24001500 	.word	0x24001500
 800b9a8:	24002100 	.word	0x24002100
 800b9ac:	24002d00 	.word	0x24002d00
 800b9b0:	ffffd4d1 	.word	0xffffd4d1
 800b9b4:	24001900 	.word	0x24001900
 800b9b8:	ffffab30 	.word	0xffffab30
 800b9bc:	24002900 	.word	0x24002900
 800b9c0:	24001d00 	.word	0x24001d00
 800b9c4:	ffff94d1 	.word	0xffff94d1
 800b9c8:	24002500 	.word	0x24002500
 800b9cc:	ffffeb30 	.word	0xffffeb30
 800b9d0:	24003100 	.word	0x24003100

0800b9d4 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	e036      	b.n	800ba4e <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60bb      	str	r3, [r7, #8]
 800b9e4:	e02d      	b.n	800ba42 <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2b07      	cmp	r3, #7
 800b9f4:	d906      	bls.n	800ba04 <JPEG_Init_MCU_LUT+0x30>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b07      	cmp	r3, #7
 800b9fa:	d903      	bls.n	800ba04 <JPEG_Init_MCU_LUT+0x30>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3378      	adds	r3, #120	@ 0x78
 800ba00:	607b      	str	r3, [r7, #4]
 800ba02:	e012      	b.n	800ba2a <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b07      	cmp	r3, #7
 800ba08:	d906      	bls.n	800ba18 <JPEG_Init_MCU_LUT+0x44>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b07      	cmp	r3, #7
 800ba0e:	d803      	bhi.n	800ba18 <JPEG_Init_MCU_LUT+0x44>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3338      	adds	r3, #56	@ 0x38
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	e008      	b.n	800ba2a <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b07      	cmp	r3, #7
 800ba1c:	d805      	bhi.n	800ba2a <JPEG_Init_MCU_LUT+0x56>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b07      	cmp	r3, #7
 800ba22:	d902      	bls.n	800ba2a <JPEG_Init_MCU_LUT+0x56>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3340      	adds	r3, #64	@ 0x40
 800ba28:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	011a      	lsls	r2, r3, #4
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	4413      	add	r3, r2
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	b291      	uxth	r1, r2
 800ba36:	4a62      	ldr	r2, [pc, #392]	@ (800bbc0 <JPEG_Init_MCU_LUT+0x1ec>)
 800ba38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	60bb      	str	r3, [r7, #8]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b0f      	cmp	r3, #15
 800ba46:	d9ce      	bls.n	800b9e6 <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b0f      	cmp	r3, #15
 800ba52:	d9c5      	bls.n	800b9e0 <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800ba54:	2300      	movs	r3, #0
 800ba56:	60fb      	str	r3, [r7, #12]
 800ba58:	e072      	b.n	800bb40 <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60bb      	str	r3, [r7, #8]
 800ba5e:	e069      	b.n	800bb34 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	011b      	lsls	r3, r3, #4
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	4413      	add	r3, r2
 800ba68:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	085b      	lsrs	r3, r3, #1
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	085b      	lsrs	r3, r3, #1
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	4413      	add	r3, r2
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ba82:	b299      	uxth	r1, r3
 800ba84:	4a4f      	ldr	r2, [pc, #316]	@ (800bbc4 <JPEG_Init_MCU_LUT+0x1f0>)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	085b      	lsrs	r3, r3, #1
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	4413      	add	r3, r2
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3380      	adds	r3, #128	@ 0x80
 800baa0:	b299      	uxth	r1, r3
 800baa2:	4a49      	ldr	r2, [pc, #292]	@ (800bbc8 <JPEG_Init_MCU_LUT+0x1f4>)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	085b      	lsrs	r3, r3, #1
 800baae:	b29a      	uxth	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	085b      	lsrs	r3, r3, #1
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	b29b      	uxth	r3, r3
 800baba:	4413      	add	r3, r2
 800babc:	b29b      	uxth	r3, r3
 800babe:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800bac2:	b299      	uxth	r1, r3
 800bac4:	4a41      	ldr	r2, [pc, #260]	@ (800bbcc <JPEG_Init_MCU_LUT+0x1f8>)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	085b      	lsrs	r3, r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	b29b      	uxth	r3, r3
 800bada:	4413      	add	r3, r2
 800badc:	b29b      	uxth	r3, r3
 800bade:	33c0      	adds	r3, #192	@ 0xc0
 800bae0:	b299      	uxth	r1, r3
 800bae2:	4a3b      	ldr	r2, [pc, #236]	@ (800bbd0 <JPEG_Init_MCU_LUT+0x1fc>)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	085b      	lsrs	r3, r3, #1
 800baee:	b29a      	uxth	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	4413      	add	r3, r2
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800bb02:	b299      	uxth	r1, r3
 800bb04:	4a33      	ldr	r2, [pc, #204]	@ (800bbd4 <JPEG_Init_MCU_LUT+0x200>)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	085b      	lsrs	r3, r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	085b      	lsrs	r3, r3, #1
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	4413      	add	r3, r2
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800bb24:	b299      	uxth	r1, r3
 800bb26:	4a2c      	ldr	r2, [pc, #176]	@ (800bbd8 <JPEG_Init_MCU_LUT+0x204>)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	3301      	adds	r3, #1
 800bb32:	60bb      	str	r3, [r7, #8]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b0f      	cmp	r3, #15
 800bb38:	d992      	bls.n	800ba60 <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b0f      	cmp	r3, #15
 800bb44:	d989      	bls.n	800ba5a <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800bb46:	2300      	movs	r3, #0
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	e02e      	b.n	800bbaa <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60bb      	str	r3, [r7, #8]
 800bb50:	e025      	b.n	800bb9e <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	4413      	add	r3, r2
 800bb5a:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	b299      	uxth	r1, r3
 800bb60:	4a1e      	ldr	r2, [pc, #120]	@ (800bbdc <JPEG_Init_MCU_LUT+0x208>)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	3340      	adds	r3, #64	@ 0x40
 800bb6e:	b299      	uxth	r1, r3
 800bb70:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe0 <JPEG_Init_MCU_LUT+0x20c>)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3380      	adds	r3, #128	@ 0x80
 800bb7e:	b299      	uxth	r1, r3
 800bb80:	4a18      	ldr	r2, [pc, #96]	@ (800bbe4 <JPEG_Init_MCU_LUT+0x210>)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	33c0      	adds	r3, #192	@ 0xc0
 800bb8e:	b299      	uxth	r1, r3
 800bb90:	4a15      	ldr	r2, [pc, #84]	@ (800bbe8 <JPEG_Init_MCU_LUT+0x214>)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60bb      	str	r3, [r7, #8]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2b07      	cmp	r3, #7
 800bba2:	d9d6      	bls.n	800bb52 <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3301      	adds	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b07      	cmp	r3, #7
 800bbae:	d9cd      	bls.n	800bb4c <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	24003500 	.word	0x24003500
 800bbc4:	24003780 	.word	0x24003780
 800bbc8:	24003980 	.word	0x24003980
 800bbcc:	24003c00 	.word	0x24003c00
 800bbd0:	24003e00 	.word	0x24003e00
 800bbd4:	24004080 	.word	0x24004080
 800bbd8:	24004280 	.word	0x24004280
 800bbdc:	24003700 	.word	0x24003700
 800bbe0:	24003b80 	.word	0x24003b80
 800bbe4:	24004000 	.word	0x24004000
 800bbe8:	24004480 	.word	0x24004480

0800bbec <memset>:
 800bbec:	4402      	add	r2, r0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d100      	bne.n	800bbf6 <memset+0xa>
 800bbf4:	4770      	bx	lr
 800bbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbfa:	e7f9      	b.n	800bbf0 <memset+0x4>

0800bbfc <__libc_init_array>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	4d0d      	ldr	r5, [pc, #52]	@ (800bc34 <__libc_init_array+0x38>)
 800bc00:	4c0d      	ldr	r4, [pc, #52]	@ (800bc38 <__libc_init_array+0x3c>)
 800bc02:	1b64      	subs	r4, r4, r5
 800bc04:	10a4      	asrs	r4, r4, #2
 800bc06:	2600      	movs	r6, #0
 800bc08:	42a6      	cmp	r6, r4
 800bc0a:	d109      	bne.n	800bc20 <__libc_init_array+0x24>
 800bc0c:	4d0b      	ldr	r5, [pc, #44]	@ (800bc3c <__libc_init_array+0x40>)
 800bc0e:	4c0c      	ldr	r4, [pc, #48]	@ (800bc40 <__libc_init_array+0x44>)
 800bc10:	f000 f818 	bl	800bc44 <_init>
 800bc14:	1b64      	subs	r4, r4, r5
 800bc16:	10a4      	asrs	r4, r4, #2
 800bc18:	2600      	movs	r6, #0
 800bc1a:	42a6      	cmp	r6, r4
 800bc1c:	d105      	bne.n	800bc2a <__libc_init_array+0x2e>
 800bc1e:	bd70      	pop	{r4, r5, r6, pc}
 800bc20:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc24:	4798      	blx	r3
 800bc26:	3601      	adds	r6, #1
 800bc28:	e7ee      	b.n	800bc08 <__libc_init_array+0xc>
 800bc2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc2e:	4798      	blx	r3
 800bc30:	3601      	adds	r6, #1
 800bc32:	e7f2      	b.n	800bc1a <__libc_init_array+0x1e>
 800bc34:	0800bee0 	.word	0x0800bee0
 800bc38:	0800bee0 	.word	0x0800bee0
 800bc3c:	0800bee0 	.word	0x0800bee0
 800bc40:	0800bee4 	.word	0x0800bee4

0800bc44 <_init>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr

0800bc50 <_fini>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr
