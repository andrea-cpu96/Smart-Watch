
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f440  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800f6d8  0800f6d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa80  0800fa80  0001101c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa80  0800fa80  00010a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa88  0800fa88  0001101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa88  0800fa88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa8c  0800fa8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  24000000  0800fa90  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0007ae00  2400001c  0800faac  0001101c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2407ae1c  0800faac  00011e1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024191  00000000  00000000  0001104a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004720  00000000  00000000  000351db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00039900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f7  00000000  00000000  0003b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000449b8  00000000  00000000  0003c6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d8a  00000000  00000000  00081097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6702  00000000  00000000  000a9e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00250523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c00  00000000  00000000  00250568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00257168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f6c0 	.word	0x0800f6c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	0800f6c0 	.word	0x0800f6c0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b04      	subs	r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e02a      	b.n	8000762 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d11f      	bne.n	800075c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d115      	bne.n	800075c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	3302      	adds	r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d10b      	bne.n	800075c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3303      	adds	r3, #3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3303      	adds	r3, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <__AVI_SearchID+0x68>
            return i;  
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	e007      	b.n	800076c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8d0      	bhi.n	800070c <__AVI_SearchID+0x18>
  }
  return 0;    
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3303      	adds	r3, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	431a      	orrs	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3306      	adds	r3, #6
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3307      	adds	r3, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	4313      	orrs	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8bdb      	ldrh	r3, [r3, #30]
 80007e4:	f246 4263 	movw	r2, #25699	@ 0x6463
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d005      	beq.n	80007f8 <__AVI_GetStreamInfo+0x80>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8bdb      	ldrh	r3, [r3, #30]
 80007f0:	f247 7262 	movw	r2, #30562	@ 0x7762
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d101      	bne.n	80007fc <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80007fc:	230b      	movs	r3, #11
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <__AVI_Init+0x23c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d001      	beq.n	8000834 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 8000830:	2301      	movs	r3, #1
 8000832:	e170      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a84      	ldr	r2, [pc, #528]	@ (8000a4c <__AVI_Init+0x240>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d001      	beq.n	8000842 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800083e:	2302      	movs	r3, #2
 8000840:	e169      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330c      	adds	r3, #12
 8000846:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <__AVI_Init+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d001      	beq.n	800085a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000856:	2303      	movs	r3, #3
 8000858:	e15d      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a54 <__AVI_Init+0x248>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d001      	beq.n	8000868 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000864:	2304      	movs	r3, #4
 8000866:	e156      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a78      	ldr	r2, [pc, #480]	@ (8000a58 <__AVI_Init+0x24c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d001      	beq.n	8000880 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800087c:	2305      	movs	r3, #5
 800087e:	e14a      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	3308      	adds	r3, #8
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80008a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <__AVI_Init+0x244>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d001      	beq.n	80008ae <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e133      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <__AVI_Init+0x250>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 80008b8:	2306      	movs	r3, #6
 80008ba:	e12c      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	330c      	adds	r3, #12
 80008c0:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a66      	ldr	r2, [pc, #408]	@ (8000a60 <__AVI_Init+0x254>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d001      	beq.n	80008d0 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 80008cc:	2307      	movs	r3, #7
 80008ce:	e122      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	@ (8000a64 <__AVI_Init+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <__AVI_Init+0x25c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d001      	beq.n	80008e8 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 80008e4:	230a      	movs	r3, #10
 80008e6:	e116      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <__AVI_Init+0x260>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80008ee:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <__AVI_Init+0x264>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	3314      	adds	r3, #20
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a5b      	ldr	r2, [pc, #364]	@ (8000a74 <__AVI_Init+0x268>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d001      	beq.n	800090e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800090a:	2308      	movs	r3, #8
 800090c:	e103      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3308      	adds	r3, #8
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <__AVI_Init+0x244>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d009      	beq.n	800094c <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	839a      	strh	r2, [r3, #28]
 800094a:	e0b7      	b.n	8000abc <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <__AVI_Init+0x250>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d001      	beq.n	800095a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000956:	2306      	movs	r3, #6
 8000958:	e0dd      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <__AVI_Init+0x254>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d001      	beq.n	800096e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800096a:	2307      	movs	r3, #7
 800096c:	e0d3      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <__AVI_Init+0x26c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d001      	beq.n	800097c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000978:	230a      	movs	r3, #10
 800097a:	e0cc      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	3314      	adds	r3, #20
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <__AVI_Init+0x268>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d001      	beq.n	8000996 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 8000992:	2308      	movs	r3, #8
 8000994:	e0bf      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	895a      	ldrh	r2, [r3, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	891a      	ldrh	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	839a      	strh	r2, [r3, #28]
 80009ae:	e085      	b.n	8000abc <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <__AVI_Init+0x26c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 8080 	bne.w	8000abc <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <__AVI_Init+0x270>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <__AVI_Init+0x274>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3314      	adds	r3, #20
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <__AVI_Init+0x268>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d001      	beq.n	80009e2 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 80009de:	2308      	movs	r3, #8
 80009e0:	e099      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	895a      	ldrh	r2, [r3, #10]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	891a      	ldrh	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	3308      	adds	r3, #8
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <__AVI_Init+0x244>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d001      	beq.n	8000a18 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 8000a14:	2303      	movs	r3, #3
 8000a16:	e07e      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <__AVI_Init+0x250>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d001      	beq.n	8000a26 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 8000a22:	2306      	movs	r3, #6
 8000a24:	e077      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <__AVI_Init+0x254>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d001      	beq.n	8000a3a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 8000a36:	2307      	movs	r3, #7
 8000a38:	e06d      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <__AVI_Init+0x258>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 8000a44:	230a      	movs	r3, #10
 8000a46:	e066      	b.n	8000b16 <__AVI_Init+0x30a>
 8000a48:	46464952 	.word	0x46464952
 8000a4c:	20495641 	.word	0x20495641
 8000a50:	5453494c 	.word	0x5453494c
 8000a54:	6c726468 	.word	0x6c726468
 8000a58:	68697661 	.word	0x68697661
 8000a5c:	6c727473 	.word	0x6c727473
 8000a60:	68727473 	.word	0x68727473
 8000a64:	73646976 	.word	0x73646976
 8000a68:	47504a4d 	.word	0x47504a4d
 8000a6c:	0800f6d8 	.word	0x0800f6d8
 8000a70:	0800f6f0 	.word	0x0800f6f0
 8000a74:	66727473 	.word	0x66727473
 8000a78:	73647561 	.word	0x73647561
 8000a7c:	0800f6e0 	.word	0x0800f6e0
 8000a80:	0800f6e8 	.word	0x0800f6e8
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	3314      	adds	r3, #20
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <__AVI_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d001      	beq.n	8000a9e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	e03b      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <__AVI_Init+0x318>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d001      	beq.n	8000aac <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	e034      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <__AVI_Init+0x31c>)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac2:	f7ff fe17 	bl	80006f4 <__AVI_SearchID>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	e020      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01a      	beq.n	8000b12 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aee:	f7ff fe01 	bl	80006f4 <__AVI_SearchID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000afc:	230b      	movs	r3, #11
 8000afe:	e00a      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3304      	adds	r3, #4
 8000b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	@ 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	66727473 	.word	0x66727473
 8000b24:	47504a4d 	.word	0x47504a4d
 8000b28:	0800f6f8 	.word	0x0800f6f8

08000b2c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT *pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]

  UINT readSize= 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  

  // Initialize some parameters for the AVI file handler
  pavi->pVideoBuffer = pVideoBuffer;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38
  pavi->pAudioBuffer = pAudioBuffer;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
  
  // Go to the beginning of the file
  f_lseek(file, 0 );
 8000b56:	2100      	movs	r1, #0
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f00e f92c 	bl	800edb6 <f_lseek>
  
  // Fill the videoBuffer with the first 96kB of the file
  f_read(file, pavi->pVideoBuffer, VideoBufferSize, &readSize);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f00d ff3d 	bl	800e9e8 <f_read>

  // Manage the error if present
  if(readSize != VideoBufferSize)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d001      	beq.n	8000b7a <AVI_ParserInit+0x4e>
    return 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e013      	b.n	8000ba2 <AVI_ParserInit+0x76>
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe42 	bl	800080c <__AVI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <AVI_ParserInit+0x66>
    return 1;    
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e007      	b.n	8000ba2 <AVI_ParserInit+0x76>

  // Initialize other parameters for the AVI file handler
  pavi->FileSize= f_size(file);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 8000ba0:	2300      	movs	r3, #0

}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT *pavi, FIL *file)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]

  uint32_t  offset ;
  uint32_t readSize = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  

  if(pavi->CurrentImage== 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d124      	bne.n	8000c0c <AVI_GetFrame+0x60>
  {
    
	// Go to the beginning of the file
    f_lseek(file, 0 );
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f00e f8f6 	bl	800edb6 <f_lseek>

    // File the videoBuffer with the first 96kB of file data
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00d ff06 	bl	800e9e8 <f_read>
    
    // Check for "movi" tag
    offset = __AVI_SearchID(pavi->pVideoBuffer, pavi->VideoBufferSize, (uint8_t*)"movi");
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <AVI_GetFrame+0xe4>)
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__AVI_SearchID>
 8000bec:	60f8      	str	r0, [r7, #12]

    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);	// 4 byte di offset per per via dell'ID movi
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdbc 	bl	8000778 <__AVI_GetStreamInfo>

    // Si sposta ai dati del primo frame
    f_lseek(file, offset + 12 );								// 12 byte di offset dovuti alle informazioni
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	330c      	adds	r3, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f00e f8d5 	bl	800edb6 <f_lseek>
    															// legate all'ID movi
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8bdb      	ldrh	r3, [r3, #30]
 8000c18:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d115      	bne.n	8000c4c <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f103 0208 	add.w	r2, r3, #8
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f00d fed9 	bl	800e9e8 <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fd98 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e01c      	b.n	8000c86 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8bdb      	ldrh	r3, [r3, #30]
 8000c50:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d115      	bne.n	8000c84 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f103 0208 	add.w	r2, r3, #8
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f00d febd 	bl	800e9e8 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	4413      	add	r3, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fd7c 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 8000c80:	2302      	movs	r3, #2
 8000c82:	e000      	b.n	8000c86 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800f6f8 	.word	0x0800f6f8

08000c94 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000caa:	f002 fae1 	bl	8003270 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 8000cae:	e004      	b.n	8000cba <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000cb6:	f002 fadb 	bl	8003270 <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58022400 	.word	0x58022400

08000cc8 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cde:	f002 fac7 	bl	8003270 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000ce2:	e004      	b.n	8000cee <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cea:	f002 fac1 	bl	8003270 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58022400 	.word	0x58022400

08000cfc <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d12:	f002 faad 	bl	8003270 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000d16:	e004      	b.n	8000d22 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d1e:	f002 faa7 	bl	8003270 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58022800 	.word	0x58022800

08000d30 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffc4 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ffdb 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa92 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffd3 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffad 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffc4 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa7a 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ffbb 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffde 	bl	8000d5e <GC9A01_write_data>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000db4:	202c      	movs	r0, #44	@ 0x2c
 8000db6:	f7ff ffbb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffce 	bl	8000d5e <GC9A01_write_data>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000dd4:	203c      	movs	r0, #60	@ 0x3c
 8000dd6:	f7ff ffab 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffbe 	bl	8000d5e <GC9A01_write_data>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <GC9A01_init>:

void GC9A01_init(void) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff84 	bl	8000cfc <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f001 fb57 	bl	80024a8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ff4a 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(10);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 fb51 	bl	80024a8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff ff44 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(120);
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f001 fb4b 	bl	80024a8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000e12:	20ef      	movs	r0, #239	@ 0xef
 8000e14:	f7ff ff8c 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e18:	20eb      	movs	r0, #235	@ 0xeb
 8000e1a:	f7ff ff89 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f7ff ffb5 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000e24:	20fe      	movs	r0, #254	@ 0xfe
 8000e26:	f7ff ff83 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000e2a:	20ef      	movs	r0, #239	@ 0xef
 8000e2c:	f7ff ff80 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e30:	20eb      	movs	r0, #235	@ 0xeb
 8000e32:	f7ff ff7d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ffa9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000e3c:	2084      	movs	r0, #132	@ 0x84
 8000e3e:	f7ff ff77 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e42:	2040      	movs	r0, #64	@ 0x40
 8000e44:	f7ff ffa3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000e48:	2085      	movs	r0, #133	@ 0x85
 8000e4a:	f7ff ff71 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	f7ff ff9d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000e54:	2086      	movs	r0, #134	@ 0x86
 8000e56:	f7ff ff6b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	f7ff ff97 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000e60:	2087      	movs	r0, #135	@ 0x87
 8000e62:	f7ff ff65 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e66:	20ff      	movs	r0, #255	@ 0xff
 8000e68:	f7ff ff91 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000e6c:	2088      	movs	r0, #136	@ 0x88
 8000e6e:	f7ff ff5f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff8b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000e78:	2089      	movs	r0, #137	@ 0x89
 8000e7a:	f7ff ff59 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000e7e:	2021      	movs	r0, #33	@ 0x21
 8000e80:	f7ff ff85 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000e84:	208a      	movs	r0, #138	@ 0x8a
 8000e86:	f7ff ff53 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff7f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000e90:	208b      	movs	r0, #139	@ 0x8b
 8000e92:	f7ff ff4d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e96:	2080      	movs	r0, #128	@ 0x80
 8000e98:	f7ff ff79 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000e9c:	208c      	movs	r0, #140	@ 0x8c
 8000e9e:	f7ff ff47 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ff73 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000ea8:	208d      	movs	r0, #141	@ 0x8d
 8000eaa:	f7ff ff41 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff6d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000eb4:	208e      	movs	r0, #142	@ 0x8e
 8000eb6:	f7ff ff3b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000eba:	20ff      	movs	r0, #255	@ 0xff
 8000ebc:	f7ff ff67 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000ec0:	208f      	movs	r0, #143	@ 0x8f
 8000ec2:	f7ff ff35 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	f7ff ff61 	bl	8000d8e <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ecc:	20b6      	movs	r0, #182	@ 0xb6
 8000ece:	f7ff ff2f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff5b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff ff58 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000ede:	2036      	movs	r0, #54	@ 0x36
 8000ee0:	f7ff ff26 	bl	8000d30 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000ee4:	2048      	movs	r0, #72	@ 0x48
 8000ee6:	f7ff ff52 	bl	8000d8e <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000eea:	203a      	movs	r0, #58	@ 0x3a
 8000eec:	f7ff ff20 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f7ff ff4c 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000ef6:	2090      	movs	r0, #144	@ 0x90
 8000ef8:	f7ff ff1a 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff ff46 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f02:	2008      	movs	r0, #8
 8000f04:	f7ff ff43 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f08:	2008      	movs	r0, #8
 8000f0a:	f7ff ff40 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f7ff ff3d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000f14:	20bd      	movs	r0, #189	@ 0xbd
 8000f16:	f7ff ff0b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f7ff ff37 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000f20:	20bc      	movs	r0, #188	@ 0xbc
 8000f22:	f7ff ff05 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ff31 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000f2c:	20ff      	movs	r0, #255	@ 0xff
 8000f2e:	f7ff feff 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f32:	2060      	movs	r0, #96	@ 0x60
 8000f34:	f7ff ff2b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff28 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff25 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000f44:	20c3      	movs	r0, #195	@ 0xc3
 8000f46:	f7ff fef3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f7ff ff1f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000f50:	20c4      	movs	r0, #196	@ 0xc4
 8000f52:	f7ff feed 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f7ff ff19 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000f5c:	20c9      	movs	r0, #201	@ 0xc9
 8000f5e:	f7ff fee7 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f62:	2022      	movs	r0, #34	@ 0x22
 8000f64:	f7ff ff13 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000f68:	20be      	movs	r0, #190	@ 0xbe
 8000f6a:	f7ff fee1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f7ff ff0d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000f74:	20e1      	movs	r0, #225	@ 0xe1
 8000f76:	f7ff fedb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff07 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f7ff ff04 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000f86:	20df      	movs	r0, #223	@ 0xdf
 8000f88:	f7ff fed2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000f8c:	2021      	movs	r0, #33	@ 0x21
 8000f8e:	f7ff fefe 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fefb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fef8 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000f9e:	20f0      	movs	r0, #240	@ 0xf0
 8000fa0:	f7ff fec6 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f7ff fef2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000faa:	2009      	movs	r0, #9
 8000fac:	f7ff feef 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff feec 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff fee9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000fbc:	2026      	movs	r0, #38	@ 0x26
 8000fbe:	f7ff fee6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000fc2:	202a      	movs	r0, #42	@ 0x2a
 8000fc4:	f7ff fee3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000fc8:	20f1      	movs	r0, #241	@ 0xf1
 8000fca:	f7ff feb1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000fce:	2043      	movs	r0, #67	@ 0x43
 8000fd0:	f7ff fedd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000fd4:	2070      	movs	r0, #112	@ 0x70
 8000fd6:	f7ff feda 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000fda:	2072      	movs	r0, #114	@ 0x72
 8000fdc:	f7ff fed7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000fe0:	2036      	movs	r0, #54	@ 0x36
 8000fe2:	f7ff fed4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000fe6:	2037      	movs	r0, #55	@ 0x37
 8000fe8:	f7ff fed1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000fec:	206f      	movs	r0, #111	@ 0x6f
 8000fee:	f7ff fece 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000ff2:	20f2      	movs	r0, #242	@ 0xf2
 8000ff4:	f7ff fe9c 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000ff8:	2045      	movs	r0, #69	@ 0x45
 8000ffa:	f7ff fec8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000ffe:	2009      	movs	r0, #9
 8001000:	f7ff fec5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff fec2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800100a:	2008      	movs	r0, #8
 800100c:	f7ff febf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8001010:	2026      	movs	r0, #38	@ 0x26
 8001012:	f7ff febc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8001016:	202a      	movs	r0, #42	@ 0x2a
 8001018:	f7ff feb9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800101c:	20f3      	movs	r0, #243	@ 0xf3
 800101e:	f7ff fe87 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001022:	2043      	movs	r0, #67	@ 0x43
 8001024:	f7ff feb3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001028:	2070      	movs	r0, #112	@ 0x70
 800102a:	f7ff feb0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800102e:	2072      	movs	r0, #114	@ 0x72
 8001030:	f7ff fead 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8001034:	2036      	movs	r0, #54	@ 0x36
 8001036:	f7ff feaa 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fea7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8001040:	206f      	movs	r0, #111	@ 0x6f
 8001042:	f7ff fea4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8001046:	20ed      	movs	r0, #237	@ 0xed
 8001048:	f7ff fe72 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800104c:	201b      	movs	r0, #27
 800104e:	f7ff fe9e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fe9b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8001058:	20ae      	movs	r0, #174	@ 0xae
 800105a:	f7ff fe69 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800105e:	2077      	movs	r0, #119	@ 0x77
 8001060:	f7ff fe95 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8001064:	20cd      	movs	r0, #205	@ 0xcd
 8001066:	f7ff fe63 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800106a:	2063      	movs	r0, #99	@ 0x63
 800106c:	f7ff fe8f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8001070:	2070      	movs	r0, #112	@ 0x70
 8001072:	f7ff fe5d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fe89 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800107c:	2007      	movs	r0, #7
 800107e:	f7ff fe86 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff fe83 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8001088:	200e      	movs	r0, #14
 800108a:	f7ff fe80 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800108e:	200f      	movs	r0, #15
 8001090:	f7ff fe7d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fe7a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800109a:	2007      	movs	r0, #7
 800109c:	f7ff fe77 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe74 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fe71 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80010ac:	20e8      	movs	r0, #232	@ 0xe8
 80010ae:	f7ff fe3f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80010b2:	2034      	movs	r0, #52	@ 0x34
 80010b4:	f7ff fe6b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80010b8:	2062      	movs	r0, #98	@ 0x62
 80010ba:	f7ff fe39 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80010be:	2018      	movs	r0, #24
 80010c0:	f7ff fe65 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80010c4:	200d      	movs	r0, #13
 80010c6:	f7ff fe62 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ca:	2071      	movs	r0, #113	@ 0x71
 80010cc:	f7ff fe5f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 80010d0:	20ed      	movs	r0, #237	@ 0xed
 80010d2:	f7ff fe5c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010d6:	2070      	movs	r0, #112	@ 0x70
 80010d8:	f7ff fe59 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010dc:	2070      	movs	r0, #112	@ 0x70
 80010de:	f7ff fe56 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f7ff fe53 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f7ff fe50 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ee:	2071      	movs	r0, #113	@ 0x71
 80010f0:	f7ff fe4d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 80010f4:	20ef      	movs	r0, #239	@ 0xef
 80010f6:	f7ff fe4a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010fa:	2070      	movs	r0, #112	@ 0x70
 80010fc:	f7ff fe47 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001100:	2070      	movs	r0, #112	@ 0x70
 8001102:	f7ff fe44 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8001106:	2063      	movs	r0, #99	@ 0x63
 8001108:	f7ff fe12 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800110c:	2018      	movs	r0, #24
 800110e:	f7ff fe3e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8001112:	2011      	movs	r0, #17
 8001114:	f7ff fe3b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001118:	2071      	movs	r0, #113	@ 0x71
 800111a:	f7ff fe38 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800111e:	20f1      	movs	r0, #241	@ 0xf1
 8001120:	f7ff fe35 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001124:	2070      	movs	r0, #112	@ 0x70
 8001126:	f7ff fe32 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800112a:	2070      	movs	r0, #112	@ 0x70
 800112c:	f7ff fe2f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8001130:	2018      	movs	r0, #24
 8001132:	f7ff fe2c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8001136:	2013      	movs	r0, #19
 8001138:	f7ff fe29 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800113c:	2071      	movs	r0, #113	@ 0x71
 800113e:	f7ff fe26 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8001142:	20f3      	movs	r0, #243	@ 0xf3
 8001144:	f7ff fe23 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001148:	2070      	movs	r0, #112	@ 0x70
 800114a:	f7ff fe20 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800114e:	2070      	movs	r0, #112	@ 0x70
 8001150:	f7ff fe1d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f7ff fdeb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800115a:	2028      	movs	r0, #40	@ 0x28
 800115c:	f7ff fe17 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8001160:	2029      	movs	r0, #41	@ 0x29
 8001162:	f7ff fe14 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001166:	20f1      	movs	r0, #241	@ 0xf1
 8001168:	f7ff fe11 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fe0e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001172:	20f1      	movs	r0, #241	@ 0xf1
 8001174:	f7ff fe0b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe08 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800117e:	2007      	movs	r0, #7
 8001180:	f7ff fe05 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8001184:	2066      	movs	r0, #102	@ 0x66
 8001186:	f7ff fdd3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800118a:	203c      	movs	r0, #60	@ 0x3c
 800118c:	f7ff fdff 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fdfc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8001196:	20cd      	movs	r0, #205	@ 0xcd
 8001198:	f7ff fdf9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800119c:	2067      	movs	r0, #103	@ 0x67
 800119e:	f7ff fdf6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a2:	2045      	movs	r0, #69	@ 0x45
 80011a4:	f7ff fdf3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a8:	2045      	movs	r0, #69	@ 0x45
 80011aa:	f7ff fdf0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fded 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fdea 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fde7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fde4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80011c6:	2067      	movs	r0, #103	@ 0x67
 80011c8:	f7ff fdb2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdde 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 80011d2:	203c      	movs	r0, #60	@ 0x3c
 80011d4:	f7ff fddb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fdd8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fdd5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fdd2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fdcf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 80011f0:	2054      	movs	r0, #84	@ 0x54
 80011f2:	f7ff fdcc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff fdc9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f7ff fdc6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8001202:	2098      	movs	r0, #152	@ 0x98
 8001204:	f7ff fdc3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8001208:	2074      	movs	r0, #116	@ 0x74
 800120a:	f7ff fd91 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff fdbd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8001214:	2085      	movs	r0, #133	@ 0x85
 8001216:	f7ff fdba 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	f7ff fdb7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdb4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fdb1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800122c:	204e      	movs	r0, #78	@ 0x4e
 800122e:	f7ff fdae 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fdab 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8001238:	2098      	movs	r0, #152	@ 0x98
 800123a:	f7ff fd79 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800123e:	203e      	movs	r0, #62	@ 0x3e
 8001240:	f7ff fda5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fda2 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800124a:	2035      	movs	r0, #53	@ 0x35
 800124c:	f7ff fd70 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001250:	2021      	movs	r0, #33	@ 0x21
 8001252:	f7ff fd6d 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fd6a 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(120);
 800125c:	2078      	movs	r0, #120	@ 0x78
 800125e:	f001 f923 	bl	80024a8 <HAL_Delay>
    GC9A01_write_command(0x29);
 8001262:	2029      	movs	r0, #41	@ 0x29
 8001264:	f7ff fd64 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(20);
 8001268:	2014      	movs	r0, #20
 800126a:	f001 f91d 	bl	80024a8 <HAL_Delay>
    
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <GC9A01_spi_tx+0x30>)
 800128a:	f009 f89b 	bl	800a3c4 <HAL_SPI_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001294:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
		return;

}
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24076cb8 	.word	0x24076cb8
 80012a8:	24000038 	.word	0x24000038

080012ac <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, AVI_CONTEXT* AVI_Handel, uint32_t DestAddress)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]


  startSourceAddress = AVI_Handel->pVideoBuffer;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012bc:	4a19      	ldr	r2, [pc, #100]	@ (8001324 <JPEG_DecodePolling+0x78>)
 80012be:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 80012c0:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <JPEG_DecodePolling+0x7c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  pVideoBuffer = AVI_Handel->pVideoBuffer;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ca:	4a18      	ldr	r2, [pc, #96]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012cc:	6013      	str	r3, [r2, #0]

  // Read from JPG file and fill the input buffer

  memcpy(JPEG_InBuffer.DataBuffer, AVI_Handel->pVideoBuffer, AVI_Handel->FrameSize*sizeof(uint8_t));
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <JPEG_DecodePolling+0x84>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	461a      	mov	r2, r3
 80012dc:	f00e f9e2 	bl	800f6a4 <memcpy>
  JPEG_InBuffer.DataBufferSize = AVI_Handel->FrameSize;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <JPEG_DecodePolling+0x84>)
 80012e6:	6053      	str	r3, [r2, #4]

  // Increment the input buffer pointer
  pVideoBuffer += 0; 		//JPEG_InBuffer.DataBufferSize;
 80012e8:	4b10      	ldr	r3, [pc, #64]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0f      	ldr	r2, [pc, #60]	@ (800132c <JPEG_DecodePolling+0x80>)
 80012ee:	6013      	str	r3, [r2, #0]

  // Update the file Offset
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <JPEG_DecodePolling+0x84>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <JPEG_DecodePolling+0x88>)
 80012f6:	6013      	str	r3, [r2, #0]

  //Start JPEG decoding with polling (Blocking) method
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT,HAL_MAX_DELAY);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <JPEG_DecodePolling+0x84>)
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <JPEG_DecodePolling+0x84>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <JPEG_DecodePolling+0x7c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4603      	mov	r3, r0
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f002 f90a 	bl	800352e <HAL_JPEG_Decode>

  return 0;
 800131a:	2300      	movs	r3, #0

}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2400a048 	.word	0x2400a048
 8001328:	2400a044 	.word	0x2400a044
 800132c:	2400a04c 	.word	0x2400a04c
 8001330:	24000008 	.word	0x24000008
 8001334:	2400a03c 	.word	0x2400a03c

08001338 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]

  if(NbDecodedData != JPEG_InBuffer.DataBufferSize)
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_JPEG_GetDataCallback+0x24>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_JPEG_GetDataCallback+0x18>
    //Inputfile_Offset = Inputfile_Offset - JPEG_InBuffer.DataBufferSize + NbDecodedData;
    //pVideoBuffer = ( startSourceAddress + Inputfile_Offset );

	// Il CHUNKIN è pari al numero di dati nel frame da decodificare
	// solo una iterazione deve esserci
	while(1);
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HAL_JPEG_GetDataCallback+0x14>
  memcpy(JPEG_InBuffer.DataBuffer, pVideoBuffer, CHUNK_SIZE_IN*sizeof(uint8_t));

  Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
  HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
*/
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	24000008 	.word	0x24000008

08001378 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/
  FrameBufferAddress += OutDataLength;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <HAL_JPEG_DataReadyCallback+0x30>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <HAL_JPEG_DataReadyCallback+0x30>)
 800138e:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT);
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_JPEG_DataReadyCallback+0x30>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001398:	4619      	mov	r1, r3
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f002 f9a7 	bl	80036ee <HAL_JPEG_ConfigOutputBuffer>

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2400a044 	.word	0x2400a044

080013ac <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  Jpeg_Decoding_End = 1;
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2400a040 	.word	0x2400a040

080013cc <lcd_init>:




void lcd_init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 80013d0:	f000 f938 	bl	8001644 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 80013d4:	f00d ffa0 	bl	800f318 <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 80013d8:	f7ff fd07 	bl	8000dea <GC9A01_init>

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <lcd_process>:


void lcd_process(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	//jpeg_demo();

	mjpeg_demo();
 80013e4:	f000 f842 	bl	800146c <mjpeg_demo>

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	4603      	mov	r3, r0
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e022      	b.n	8001456 <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	e016      	b.n	8001444 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	429a      	cmp	r2, r3
 800141c:	d108      	bne.n	8001430 <lcd_draw+0x44>
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d104      	bne.n	8001430 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8001426:	2102      	movs	r1, #2
 8001428:	6a38      	ldr	r0, [r7, #32]
 800142a:	f7ff fcbe 	bl	8000daa <GC9A01_write>
 800142e:	e003      	b.n	8001438 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001430:	2102      	movs	r1, #2
 8001432:	6a38      	ldr	r0, [r7, #32]
 8001434:	f7ff fcc9 	bl	8000dca <GC9A01_write_continue>

			}

			data += 2;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	3302      	adds	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3301      	adds	r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	883a      	ldrh	r2, [r7, #0]
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbe2      	blt.n	8001416 <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	4413      	add	r3, r2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	dbd6      	blt.n	8001410 <lcd_draw+0x24>

		}

	}

}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <mjpeg_demo>:
uint8_t JPEG_OutputBuffer_0[MAX_BUFFER_SIZE]; 					// RAW buffer 0
uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer


void mjpeg_demo(void)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af02      	add	r7, sp, #8

	uint32_t jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 8001472:	4b65      	ldr	r3, [pc, #404]	@ (8001608 <mjpeg_demo+0x19c>)
 8001474:	617b      	str	r3, [r7, #20]
	uint32_t FrameType = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]

	// Open the MJPEG avi file with read access
    if(f_open(&file, FILE_NAME, FA_READ) == FR_OK)
 800147a:	2201      	movs	r2, #1
 800147c:	4963      	ldr	r1, [pc, #396]	@ (800160c <mjpeg_demo+0x1a0>)
 800147e:	4864      	ldr	r0, [pc, #400]	@ (8001610 <mjpeg_demo+0x1a4>)
 8001480:	f00d f8f8 	bl	800e674 <f_open>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 80ba 	bne.w	8001600 <mjpeg_demo+0x194>
    {

    	isfirstFrame = 1; // First frame flag
 800148c:	4b61      	ldr	r3, [pc, #388]	@ (8001614 <mjpeg_demo+0x1a8>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
    	FrameRate = 0;
 8001492:	4b61      	ldr	r3, [pc, #388]	@ (8001618 <mjpeg_demo+0x1ac>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]

    	// Parse the AVI file Header
    	if(AVI_ParserInit(&AVI_Handel, &file, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001498:	2300      	movs	r3, #0
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <mjpeg_demo+0x1b0>)
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 80014a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001620 <mjpeg_demo+0x1b4>)
 80014a6:	495a      	ldr	r1, [pc, #360]	@ (8001610 <mjpeg_demo+0x1a4>)
 80014a8:	485e      	ldr	r0, [pc, #376]	@ (8001624 <mjpeg_demo+0x1b8>)
 80014aa:	f7ff fb3f 	bl	8000b2c <AVI_ParserInit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <mjpeg_demo+0x4c>
    		while(1);
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <mjpeg_demo+0x48>

    	// Get current tick to track the frame time
    	startTime = HAL_GetTick();
 80014b8:	f000 ffea 	bl	8002490 <HAL_GetTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a5a      	ldr	r2, [pc, #360]	@ (8001628 <mjpeg_demo+0x1bc>)
 80014c0:	6013      	str	r3, [r2, #0]

    	do
    	{

    		FrameType = AVI_GetFrame(&AVI_Handel, &file);
 80014c2:	4953      	ldr	r1, [pc, #332]	@ (8001610 <mjpeg_demo+0x1a4>)
 80014c4:	4857      	ldr	r0, [pc, #348]	@ (8001624 <mjpeg_demo+0x1b8>)
 80014c6:	f7ff fb71 	bl	8000bac <AVI_GetFrame>
 80014ca:	6138      	str	r0, [r7, #16]

    		if(FrameType == AVI_VIDEO_FRAME)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d15b      	bne.n	800158a <mjpeg_demo+0x11e>
    		{

    			AVI_Handel.CurrentImage++;
 80014d2:	4b54      	ldr	r3, [pc, #336]	@ (8001624 <mjpeg_demo+0x1b8>)
 80014d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a52      	ldr	r2, [pc, #328]	@ (8001624 <mjpeg_demo+0x1b8>)
 80014da:	62d3      	str	r3, [r2, #44]	@ 0x2c

    			// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
    			JPEG_DecodePolling(&hjpeg, &AVI_Handel, (uint32_t)jpegOutDataAdreess);
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4951      	ldr	r1, [pc, #324]	@ (8001624 <mjpeg_demo+0x1b8>)
 80014e0:	4852      	ldr	r0, [pc, #328]	@ (800162c <mjpeg_demo+0x1c0>)
 80014e2:	f7ff fee3 	bl	80012ac <JPEG_DecodePolling>

    			// Wait till end of JPEG decoding
    			while(Jpeg_Decoding_End == 0);
 80014e6:	bf00      	nop
 80014e8:	4b51      	ldr	r3, [pc, #324]	@ (8001630 <mjpeg_demo+0x1c4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0fb      	beq.n	80014e8 <mjpeg_demo+0x7c>

    			if(isfirstFrame == 1)
 80014f0:	4b48      	ldr	r3, [pc, #288]	@ (8001614 <mjpeg_demo+0x1a8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d111      	bne.n	800151c <mjpeg_demo+0xb0>
    			{

    				// First time

    				isfirstFrame = 0;
 80014f8:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <mjpeg_demo+0x1a8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]

    				// Get JPEG Info
    				HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 80014fe:	494d      	ldr	r1, [pc, #308]	@ (8001634 <mjpeg_demo+0x1c8>)
 8001500:	484a      	ldr	r0, [pc, #296]	@ (800162c <mjpeg_demo+0x1c0>)
 8001502:	f001 ff7f 	bl	8003404 <HAL_JPEG_GetInfo>

    				// Initialize the DMA2D
    				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001506:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <mjpeg_demo+0x1c8>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4a49      	ldr	r2, [pc, #292]	@ (8001634 <mjpeg_demo+0x1c8>)
 800150e:	6892      	ldr	r2, [r2, #8]
 8001510:	b291      	uxth	r1, r2
 8001512:	4a48      	ldr	r2, [pc, #288]	@ (8001634 <mjpeg_demo+0x1c8>)
 8001514:	6852      	ldr	r2, [r2, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f918 	bl	800174c <DMA2D_Init>

    			}


    			// Copy the Decoded frame to the display frame buffer using the DMA2D
    			DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)DECODED_OutputBuffer, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	4b45      	ldr	r3, [pc, #276]	@ (8001634 <mjpeg_demo+0x1c8>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b43      	ldr	r3, [pc, #268]	@ (8001634 <mjpeg_demo+0x1c8>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4943      	ldr	r1, [pc, #268]	@ (8001638 <mjpeg_demo+0x1cc>)
 800152c:	f000 f98a 	bl	8001844 <DMA2D_CopyBuffer>

    			// Change frame buffer
    			//jpegOutDataAdreess = (jpegOutDataAdreess == (uint32_t)JPEG_OutputBuffer_0) ? (uint32_t)JPEG_OutputBuffer_1 : (uint32_t)JPEG_OutputBuffer_0;
    			jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 8001530:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <mjpeg_demo+0x19c>)
 8001532:	617b      	str	r3, [r7, #20]

//
    		    uint16_t width = JPEG_Info.ImageWidth;
 8001534:	4b3f      	ldr	r3, [pc, #252]	@ (8001634 <mjpeg_demo+0x1c8>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	81fb      	strh	r3, [r7, #14]
    			uint16_t height = JPEG_Info.ImageHeight;
 800153a:	4b3e      	ldr	r3, [pc, #248]	@ (8001634 <mjpeg_demo+0x1c8>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	81bb      	strh	r3, [r7, #12]

    		    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001546:	2b00      	cmp	r3, #0
 8001548:	da00      	bge.n	800154c <mjpeg_demo+0xe0>
 800154a:	3301      	adds	r3, #1
 800154c:	105b      	asrs	r3, r3, #1
 800154e:	817b      	strh	r3, [r7, #10]
    		    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001556:	2b00      	cmp	r3, #0
 8001558:	da00      	bge.n	800155c <mjpeg_demo+0xf0>
 800155a:	3301      	adds	r3, #1
 800155c:	105b      	asrs	r3, r3, #1
 800155e:	813b      	strh	r3, [r7, #8]

    		    doubleFormat pOut;
    		    pOut.u8Arr = DECODED_OutputBuffer;
 8001560:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <mjpeg_demo+0x1cc>)
 8001562:	607b      	str	r3, [r7, #4]

    		    depth24To16(&pOut, width*height, 3);
 8001564:	89fa      	ldrh	r2, [r7, #14]
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	fb12 f303 	smulbb	r3, r2, r3
 800156c:	b299      	uxth	r1, r3
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2203      	movs	r2, #3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f87c 	bl	8001670 <depth24To16>

    		    // Display the image
    		    lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	89bc      	ldrh	r4, [r7, #12]
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	8939      	ldrh	r1, [r7, #8]
 8001580:	8978      	ldrh	r0, [r7, #10]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4623      	mov	r3, r4
 8001586:	f7ff ff31 	bl	80013ec <lcd_draw>
    		}

#ifdef USE_FRAMERATE_REGULATION

              // Regulate the frame rate to the video native frame rate by inserting delays
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 800158a:	f000 ff81 	bl	8002490 <HAL_GetTick>
 800158e:	4603      	mov	r3, r0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <mjpeg_demo+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <mjpeg_demo+0x1ac>)
 80015a2:	701a      	strb	r2, [r3, #0]

              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <mjpeg_demo+0x1ac>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <mjpeg_demo+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a23      	ldr	r2, [pc, #140]	@ (800163c <mjpeg_demo+0x1d0>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <mjpeg_demo+0x1b8>)
 80015b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4299      	cmp	r1, r3
 80015c0:	d20f      	bcs.n	80015e2 <mjpeg_demo+0x176>
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <mjpeg_demo+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1d      	ldr	r2, [pc, #116]	@ (800163c <mjpeg_demo+0x1d0>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <mjpeg_demo+0x1b8>)
 80015d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <mjpeg_demo+0x1ac>)
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 ff63 	bl	80024a8 <HAL_Delay>

#endif /* USE_FRAMERATE_REGULATION */

    	}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <mjpeg_demo+0x1b8>)
 80015e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <mjpeg_demo+0x1b8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	f4ff af69 	bcc.w	80014c2 <mjpeg_demo+0x56>

    	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 80015f0:	2132      	movs	r1, #50	@ 0x32
 80015f2:	4813      	ldr	r0, [pc, #76]	@ (8001640 <mjpeg_demo+0x1d4>)
 80015f4:	f001 f927 	bl	8002846 <HAL_DMA2D_PollForTransfer>


      f_close(&file);
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <mjpeg_demo+0x1a4>)
 80015fa:	f00d fbb2 	bl	800ed62 <f_close>

      while(1);

    }

}
 80015fe:	e000      	b.n	8001602 <mjpeg_demo+0x196>
      while(1);
 8001600:	e7fe      	b.n	8001600 <mjpeg_demo+0x194>
}
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	2402257c 	.word	0x2402257c
 800160c:	0800f700 	.word	0x0800f700
 8001610:	2400a280 	.word	0x2400a280
 8001614:	24000010 	.word	0x24000010
 8001618:	2400a574 	.word	0x2400a574
 800161c:	2402257c 	.word	0x2402257c
 8001620:	2400a57c 	.word	0x2400a57c
 8001624:	2400a52c 	.word	0x2400a52c
 8001628:	2400a578 	.word	0x2400a578
 800162c:	24076be4 	.word	0x24076be4
 8001630:	2400a040 	.word	0x2400a040
 8001634:	2400a518 	.word	0x2400a518
 8001638:	2404c87c 	.word	0x2404c87c
 800163c:	10624dd3 	.word	0x10624dd3
 8001640:	2400a4b0 	.word	0x2400a4b0

08001644 <sd_init>:


// SD

static void sd_init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8001648:	2201      	movs	r2, #1
 800164a:	4905      	ldr	r1, [pc, #20]	@ (8001660 <sd_init+0x1c>)
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <sd_init+0x20>)
 800164e:	f00c ffcb 	bl	800e5e8 <f_mount>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <sd_init+0x18>
    	sd_error_handler();
 8001658:	f000 f806 	bl	8001668 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	0800f70c 	.word	0x0800f70c
 8001664:	2400a050 	.word	0x2400a050

08001668 <sd_error_handler>:


static void sd_error_handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

	while(1);
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <sd_error_handler+0x4>

08001670 <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e054      	b.n	8001730 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	787a      	ldrb	r2, [r7, #1]
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	fb01 f202 	mul.w	r2, r1, r2
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	3302      	adds	r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 80016c0:	7a7b      	ldrb	r3, [r7, #9]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <depth24To16+0xd8>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b219      	sxth	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	b28a      	uxth	r2, r1
 80016f4:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	440b      	add	r3, r1
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	b29b      	uxth	r3, r3
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b219      	sxth	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	b28a      	uxth	r2, r1
 8001728:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	dba6      	blt.n	8001686 <depth24To16+0x16>

	}

}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	fffff800 	.word	0xfffff800

0800174c <DMA2D_Init>:
  * @param  xSize: image width
  * @param  ysize: image Height
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	603a      	str	r2, [r7, #0]
 8001756:	80fb      	strh	r3, [r7, #6]
 8001758:	460b      	mov	r3, r1
 800175a:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 800175c:	2302      	movs	r3, #2
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]


  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10d      	bne.n	8001786 <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 800176a:	2302      	movs	r3, #2
 800176c:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d025      	beq.n	80017c8 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f1c3 0310 	rsb	r3, r3, #16
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	e020      	b.n	80017c8 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d014      	beq.n	80017c8 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f1c3 0308 	rsb	r3, r3, #8
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	e00f      	b.n	80017c8 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d10c      	bne.n	80017c8 <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 80017ae:	2301      	movs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f1c3 0310 	rsb	r3, r3, #16
 80017c6:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <DMA2D_Init+0xf0>)
 80017ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017ce:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <DMA2D_Init+0xf0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b17      	ldr	r3, [pc, #92]	@ (800183c <DMA2D_Init+0xf0>)
 80017e0:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <DMA2D_Init+0xf0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <DMA2D_Init+0xf0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <DMA2D_Init+0xf0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <DMA2D_Init+0xf0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <DMA2D_Init+0xf0>)
 80017fc:	22ff      	movs	r2, #255	@ 0xff
 80017fe:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <DMA2D_Init+0xf0>)
 8001802:	220b      	movs	r2, #11
 8001804:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001806:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <DMA2D_Init+0xf0>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800180c:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <DMA2D_Init+0xf0>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <DMA2D_Init+0xf0>)
 8001814:	2200      	movs	r2, #0
 8001816:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <DMA2D_Init+0xf0>)
 800181a:	2200      	movs	r2, #0
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <DMA2D_Init+0xf0>)
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <DMA2D_Init+0xf4>)
 8001822:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <DMA2D_Init+0xf0>)
 8001826:	f000 ff7f 	bl	8002728 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800182a:	2101      	movs	r1, #1
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <DMA2D_Init+0xf0>)
 800182e:	f001 fa03 	bl	8002c38 <HAL_DMA2D_ConfigLayer>

}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2400a4b0 	.word	0x2400a4b0
 8001840:	52001000 	.word	0x52001000

08001844 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t xsize, uint16_t ysize)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	460b      	mov	r3, r1
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4613      	mov	r3, r2
 8001858:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]


  uint16_t x =  ( (LCD_WIDTH - xsize) / 2 );
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001864:	2b00      	cmp	r3, #0
 8001866:	da00      	bge.n	800186a <DMA2D_CopyBuffer+0x26>
 8001868:	3301      	adds	r3, #1
 800186a:	105b      	asrs	r3, r3, #1
 800186c:	827b      	strh	r3, [r7, #18]
  uint16_t y = ( (LCD_HEIGHT - ysize) / 2 );
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001874:	2b00      	cmp	r3, #0
 8001876:	da00      	bge.n	800187a <DMA2D_CopyBuffer+0x36>
 8001878:	3301      	adds	r3, #1
 800187a:	105b      	asrs	r3, r3, #1
 800187c:	823b      	strh	r3, [r7, #16]

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 800187e:	8a3a      	ldrh	r2, [r7, #16]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	461a      	mov	r2, r3
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <DMA2D_CopyBuffer+0x78>)
 80018a6:	f000 ffa3 	bl	80027f0 <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80018aa:	2119      	movs	r1, #25
 80018ac:	4803      	ldr	r0, [pc, #12]	@ (80018bc <DMA2D_CopyBuffer+0x78>)
 80018ae:	f000 ffca 	bl	8002846 <HAL_DMA2D_PollForTransfer>

}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2400a4b0 	.word	0x2400a4b0

080018c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80018c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80018cc:	bf00      	nop
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <main+0xb8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <main+0x24>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dcf4      	bgt.n	80018ce <main+0xe>
  if ( timeout < 0 )
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da01      	bge.n	80018ee <main+0x2e>
  {
  Error_Handler();
 80018ea:	f000 fad3 	bl	8001e94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f000 fd49 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f843 	bl	800197c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018f6:	f000 f8c5 	bl	8001a84 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <main+0xb8>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <main+0xb8>)
 8001902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <main+0xb8>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001918:	2000      	movs	r0, #0
 800191a:	f001 fcc3 	bl	80032a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f001 fcd9 	bl	80032d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800192a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800192c:	bf00      	nop
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <main+0xb8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d104      	bne.n	8001944 <main+0x84>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1e5a      	subs	r2, r3, #1
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dcf4      	bgt.n	800192e <main+0x6e>
if ( timeout < 0 )
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da01      	bge.n	800194e <main+0x8e>
{
Error_Handler();
 800194a:	f000 faa3 	bl	8001e94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194e:	f000 f9db 	bl	8001d08 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001952:	f000 f8c7 	bl	8001ae4 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8001956:	f000 f913 	bl	8001b80 <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 800195a:	f000 f935 	bl	8001bc8 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800195e:	f000 f987 	bl	8001c70 <MX_USART1_UART_Init>
  MX_JPEG_Init();
 8001962:	f000 f8f9 	bl	8001b58 <MX_JPEG_Init>
  MX_FATFS_Init();
 8001966:	f00a feab 	bl	800c6c0 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 800196a:	f00b f8f9 	bl	800cb60 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800196e:	f7ff fd2d 	bl	80013cc <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8001972:	f7ff fd35 	bl	80013e0 <lcd_process>
 8001976:	e7fc      	b.n	8001972 <main+0xb2>
 8001978:	58024400 	.word	0x58024400

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b09c      	sub	sp, #112	@ 0x70
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001986:	224c      	movs	r2, #76	@ 0x4c
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f00d fe5e 	bl	800f64c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2220      	movs	r2, #32
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00d fe58 	bl	800f64c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800199c:	2004      	movs	r0, #4
 800199e:	f003 f9a1 	bl	8004ce4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b35      	ldr	r3, [pc, #212]	@ (8001a7c <SystemClock_Config+0x100>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	4a34      	ldr	r2, [pc, #208]	@ (8001a7c <SystemClock_Config+0x100>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019b2:	4b32      	ldr	r3, [pc, #200]	@ (8001a7c <SystemClock_Config+0x100>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <SystemClock_Config+0x104>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a80 <SystemClock_Config+0x104>)
 80019c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <SystemClock_Config+0x104>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019d4:	bf00      	nop
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <SystemClock_Config+0x104>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019e2:	d1f8      	bne.n	80019d6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80019e4:	230a      	movs	r3, #10
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ec:	2340      	movs	r3, #64	@ 0x40
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019f0:	2301      	movs	r3, #1
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f4:	2302      	movs	r3, #2
 80019f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f8:	2300      	movs	r3, #0
 80019fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019fc:	2304      	movs	r3, #4
 80019fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a00:	230c      	movs	r3, #12
 8001a02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a10:	230c      	movs	r3, #12
 8001a12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 f9b8 	bl	8004d98 <HAL_RCC_OscConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a2e:	f000 fa31 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a32:	233f      	movs	r3, #63	@ 0x3f
 8001a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a36:	2303      	movs	r3, #3
 8001a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a42:	2340      	movs	r3, #64	@ 0x40
 8001a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a50:	2340      	movs	r3, #64	@ 0x40
 8001a52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2101      	movs	r1, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fdf7 	bl	800564c <HAL_RCC_ClockConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001a64:	f000 fa16 	bl	8001e94 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001a68:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f003 ffa2 	bl	80059b8 <HAL_RCC_MCOConfig>
}
 8001a74:	bf00      	nop
 8001a76:	3770      	adds	r7, #112	@ 0x70
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58000400 	.word	0x58000400
 8001a80:	58024800 	.word	0x58024800

08001a84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0b2      	sub	sp, #200	@ 0xc8
 8001a88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	22c8      	movs	r2, #200	@ 0xc8
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00d fddb 	bl	800f64c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a96:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001aa6:	2309      	movs	r3, #9
 8001aa8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ab6:	23c0      	movs	r3, #192	@ 0xc0
 8001ab8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001aba:	2320      	movs	r3, #32
 8001abc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001abe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 f9b3 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001ad8:	f000 f9dc 	bl	8001e94 <Error_Handler>
  }
}
 8001adc:	bf00      	nop
 8001ade:	37c8      	adds	r7, #200	@ 0xc8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001aea:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <MX_DMA2D_Init+0x70>)
 8001aec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b2a:	4809      	ldr	r0, [pc, #36]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b2c:	f000 fdfc 	bl	8002728 <HAL_DMA2D_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b36:	f000 f9ad 	bl	8001e94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <MX_DMA2D_Init+0x6c>)
 8001b3e:	f001 f87b 	bl	8002c38 <HAL_DMA2D_ConfigLayer>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001b48:	f000 f9a4 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24076b7c 	.word	0x24076b7c
 8001b54:	52001000 	.word	0x52001000

08001b58 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <MX_JPEG_Init+0x20>)
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <MX_JPEG_Init+0x24>)
 8001b60:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_JPEG_Init+0x20>)
 8001b64:	f001 fbcc 	bl	8003300 <HAL_JPEG_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001b6e:	f000 f991 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	24076be4 	.word	0x24076be4
 8001b7c:	52003000 	.word	0x52003000

08001b80 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001b86:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <MX_SDMMC1_SD_Init+0x44>)
 8001b88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001b98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b9c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <MX_SDMMC1_SD_Init+0x40>)
 8001bac:	f006 fe82 	bl	80088b4 <HAL_SD_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001bb6:	f000 f96d 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	24076c3c 	.word	0x24076c3c
 8001bc4:	52007000 	.word	0x52007000

08001bc8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bcc:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001bce:	4a27      	ldr	r2, [pc, #156]	@ (8001c6c <MX_SPI5_Init+0xa4>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001bd4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001bd8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bda:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001be2:	2207      	movs	r2, #7
 8001be4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be6:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001bf4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bf8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <MX_SPI5_Init+0xa0>)
 8001c56:	f008 fa91 	bl	800a17c <HAL_SPI_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001c60:	f000 f918 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	24076cb8 	.word	0x24076cb8
 8001c6c:	40015000 	.word	0x40015000

08001c70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <MX_USART1_UART_Init+0x94>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cb8:	4811      	ldr	r0, [pc, #68]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001cba:	f008 fe5a 	bl	800a972 <HAL_UART_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cc4:	f000 f8e6 	bl	8001e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001ccc:	f009 fe63 	bl	800b996 <HAL_UARTEx_SetTxFifoThreshold>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cd6:	f000 f8dd 	bl	8001e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001cde:	f009 fe98 	bl	800ba12 <HAL_UARTEx_SetRxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f000 f8d4 	bl	8001e94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <MX_USART1_UART_Init+0x90>)
 8001cee:	f009 fe19 	bl	800b924 <HAL_UARTEx_DisableFifoMode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cf8:	f000 f8cc 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	24076d40 	.word	0x24076d40
 8001d04:	40011000 	.word	0x40011000

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b58      	ldr	r3, [pc, #352]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d2e:	4b54      	ldr	r3, [pc, #336]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3c:	4b50      	ldr	r3, [pc, #320]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	4a4f      	ldr	r2, [pc, #316]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b49      	ldr	r3, [pc, #292]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d60:	4a47      	ldr	r2, [pc, #284]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6a:	4b45      	ldr	r3, [pc, #276]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	4a40      	ldr	r2, [pc, #256]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d88:	4b3d      	ldr	r3, [pc, #244]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d96:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9c:	4a38      	ldr	r2, [pc, #224]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da6:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001db4:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dba:	4a31      	ldr	r2, [pc, #196]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001dbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd8:	4a29      	ldr	r2, [pc, #164]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de2:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <MX_GPIO_Init+0x178>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2102      	movs	r1, #2
 8001df4:	4823      	ldr	r0, [pc, #140]	@ (8001e84 <MX_GPIO_Init+0x17c>)
 8001df6:	f001 fa3b 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2161      	movs	r1, #97	@ 0x61
 8001dfe:	4822      	ldr	r0, [pc, #136]	@ (8001e88 <MX_GPIO_Init+0x180>)
 8001e00:	f001 fa36 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	481c      	ldr	r0, [pc, #112]	@ (8001e8c <MX_GPIO_Init+0x184>)
 8001e1a:	f001 f861 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <MX_GPIO_Init+0x188>)
 8001e3c:	f001 f850 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	480b      	ldr	r0, [pc, #44]	@ (8001e84 <MX_GPIO_Init+0x17c>)
 8001e58:	f001 f842 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001e5c:	2361      	movs	r3, #97	@ 0x61
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_GPIO_Init+0x180>)
 8001e74:	f001 f834 	bl	8002ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e78:	bf00      	nop
 8001e7a:	3730      	adds	r7, #48	@ 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58022800 	.word	0x58022800
 8001e88:	58022400 	.word	0x58022400
 8001e8c:	58022000 	.word	0x58022000
 8001e90:	58020000 	.word	0x58020000

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <Error_Handler+0x8>

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_MspInit+0x30>)
 8001ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eac:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_MspInit+0x30>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_MspInit+0x30>)
 8001eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	58024400 	.word	0x58024400

08001ed4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <HAL_DMA2D_MspInit+0x48>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d116      	bne.n	8001f14 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_DMA2D_MspInit+0x4c>)
 8001ee8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_DMA2D_MspInit+0x4c>)
 8001eee:	f043 0310 	orr.w	r3, r3, #16
 8001ef2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_DMA2D_MspInit+0x4c>)
 8001ef8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	205a      	movs	r0, #90	@ 0x5a
 8001f0a:	f000 fbd8 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f0e:	205a      	movs	r0, #90	@ 0x5a
 8001f10:	f000 fbef 	bl	80026f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	52001000 	.word	0x52001000
 8001f20:	58024400 	.word	0x58024400

08001f24 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0e      	ldr	r2, [pc, #56]	@ (8001f6c <HAL_JPEG_MspInit+0x48>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d116      	bne.n	8001f64 <HAL_JPEG_MspInit+0x40>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_JPEG_MspInit+0x4c>)
 8001f38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_JPEG_MspInit+0x4c>)
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_JPEG_MspInit+0x4c>)
 8001f48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2079      	movs	r0, #121	@ 0x79
 8001f5a:	f000 fbb0 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001f5e:	2079      	movs	r0, #121	@ 0x79
 8001f60:	f000 fbc7 	bl	80026f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	52003000 	.word	0x52003000
 8001f70:	58024400 	.word	0x58024400

08001f74 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0be      	sub	sp, #248	@ 0xf8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	22c8      	movs	r2, #200	@ 0xc8
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00d fb59 	bl	800f64c <memset>
  if(hsd->Instance==SDMMC1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8002090 <HAL_SD_MspInit+0x11c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d171      	bne.n	8002088 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001fa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 ff3d 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001fc4:	f7ff ff66 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001fc8:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8001fca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fce:	4a31      	ldr	r2, [pc, #196]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8001fda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fec:	4a29      	ldr	r2, [pc, #164]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff6:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_SD_MspInit+0x120>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <HAL_SD_MspInit+0x120>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8002022:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800203c:	230c      	movs	r3, #12
 800203e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002042:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002046:	4619      	mov	r1, r3
 8002048:	4813      	ldr	r0, [pc, #76]	@ (8002098 <HAL_SD_MspInit+0x124>)
 800204a:	f000 ff49 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800204e:	2304      	movs	r3, #4
 8002050:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002066:	230c      	movs	r3, #12
 8002068:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800206c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002070:	4619      	mov	r1, r3
 8002072:	480a      	ldr	r0, [pc, #40]	@ (800209c <HAL_SD_MspInit+0x128>)
 8002074:	f000 ff34 	bl	8002ee0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2031      	movs	r0, #49	@ 0x31
 800207e:	f000 fb1e 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002082:	2031      	movs	r0, #49	@ 0x31
 8002084:	f000 fb35 	bl	80026f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002088:	bf00      	nop
 800208a:	37f8      	adds	r7, #248	@ 0xf8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	52007000 	.word	0x52007000
 8002094:	58024400 	.word	0x58024400
 8002098:	58020800 	.word	0x58020800
 800209c:	58020c00 	.word	0x58020c00

080020a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0be      	sub	sp, #248	@ 0xf8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	22c8      	movs	r2, #200	@ 0xc8
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00d fac3 	bl	800f64c <memset>
  if(hspi->Instance==SPI5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a39      	ldr	r2, [pc, #228]	@ (80021b0 <HAL_SPI_MspInit+0x110>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d16a      	bne.n	80021a6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80020d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 0318 	add.w	r3, r7, #24
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fea6 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80020f2:	f7ff fecf 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80020f6:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 80020f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020fc:	4a2d      	ldr	r2, [pc, #180]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 80020fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002106:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800210c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211a:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 800211c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002124:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <HAL_SPI_MspInit+0x114>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002168:	2305      	movs	r3, #5
 800216a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002172:	4619      	mov	r1, r3
 8002174:	4810      	ldr	r0, [pc, #64]	@ (80021b8 <HAL_SPI_MspInit+0x118>)
 8002176:	f000 feb3 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800217a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800217e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002194:	2305      	movs	r3, #5
 8002196:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800219a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800219e:	4619      	mov	r1, r3
 80021a0:	4806      	ldr	r0, [pc, #24]	@ (80021bc <HAL_SPI_MspInit+0x11c>)
 80021a2:	f000 fe9d 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80021a6:	bf00      	nop
 80021a8:	37f8      	adds	r7, #248	@ 0xf8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40015000 	.word	0x40015000
 80021b4:	58024400 	.word	0x58024400
 80021b8:	58022800 	.word	0x58022800
 80021bc:	58022400 	.word	0x58022400

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0bc      	sub	sp, #240	@ 0xf0
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	22c8      	movs	r2, #200	@ 0xc8
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00d fa33 	bl	800f64c <memset>
  if(huart->Instance==USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a27      	ldr	r2, [pc, #156]	@ (8002288 <HAL_UART_MspInit+0xc8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d146      	bne.n	800227e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021f0:	f04f 0201 	mov.w	r2, #1
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fe16 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002212:	f7ff fe3f 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <HAL_UART_MspInit+0xcc>)
 8002218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_UART_MspInit+0xcc>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002226:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_UART_MspInit+0xcc>)
 8002228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_UART_MspInit+0xcc>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223a:	4a14      	ldr	r2, [pc, #80]	@ (800228c <HAL_UART_MspInit+0xcc>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_UART_MspInit+0xcc>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002252:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002256:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800226c:	2307      	movs	r3, #7
 800226e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	@ (8002290 <HAL_UART_MspInit+0xd0>)
 800227a:	f000 fe31 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800227e:	bf00      	nop
 8002280:	37f0      	adds	r7, #240	@ 0xf0
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40011000 	.word	0x40011000
 800228c:	58024400 	.word	0x58024400
 8002290:	58020000 	.word	0x58020000

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <NMI_Handler+0x4>

0800229c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <MemManage_Handler+0x4>

080022ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <UsageFault_Handler+0x4>

080022bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ea:	f000 f8bd 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <SDMMC1_IRQHandler+0x10>)
 80022fa:	f006 fd4b 	bl	8008d94 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	24076c3c 	.word	0x24076c3c

08002308 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA2D_IRQHandler+0x10>)
 800230e:	f000 fb83 	bl	8002a18 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24076b7c 	.word	0x24076b7c

0800231c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <JPEG_IRQHandler+0x10>)
 8002322:	f001 fa00 	bl	8003726 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	24076be4 	.word	0x24076be4

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002334:	f7fe f948 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	@ (8002370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	@ (800237c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235e:	f00d f97d 	bl	800f65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7ff faad 	bl	80018c0 <main>
  bx  lr
 8002366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002368:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800236c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002370:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8002374:	0800fa90 	.word	0x0800fa90
  ldr r2, =_sbss
 8002378:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 800237c:	2407ae1c 	.word	0x2407ae1c

08002380 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC3_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238a:	2003      	movs	r0, #3
 800238c:	f000 f98c 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002390:	f003 fb7c 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <HAL_Init+0x68>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	4913      	ldr	r1, [pc, #76]	@ (80023f0 <HAL_Init+0x6c>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_Init+0x68>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a0e      	ldr	r2, [pc, #56]	@ (80023f0 <HAL_Init+0x6c>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	4a0b      	ldr	r2, [pc, #44]	@ (80023f4 <HAL_Init+0x70>)
 80023c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c8:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <HAL_Init+0x74>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f814 	bl	80023fc <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e002      	b.n	80023e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023de:	f7ff fd5f 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	58024400 	.word	0x58024400
 80023f0:	0800f754 	.word	0x0800f754
 80023f4:	24000004 	.word	0x24000004
 80023f8:	24000000 	.word	0x24000000

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_InitTick+0x60>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e021      	b.n	8002454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_InitTick+0x64>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_InitTick+0x60>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f971 	bl	800270e <HAL_SYSTICK_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00e      	b.n	8002454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d80a      	bhi.n	8002452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f000 f93b 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002448:	4a06      	ldr	r2, [pc, #24]	@ (8002464 <HAL_InitTick+0x68>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24000018 	.word	0x24000018
 8002460:	24000000 	.word	0x24000000
 8002464:	24000014 	.word	0x24000014

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	24000018 	.word	0x24000018
 800248c:	24076dd4 	.word	0x24076dd4

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	24076dd4 	.word	0x24076dd4

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_Delay+0x44>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24000018 	.word	0x24000018

080024f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetREVID+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0c1b      	lsrs	r3, r3, #16
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	5c001000 	.word	0x5c001000

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	4313      	orrs	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0000 	.word	0x05fa0000

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	@ (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	@ (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	@ 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff40 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff90 	bl	80025fc <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5f 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff33 	bl	800256c <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa4 	bl	8002664 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e04f      	b.n	80027da <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fbc0 	bl	8001ed4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_DMA2D_Init+0xbc>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6851      	ldr	r1, [r2, #4]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	69d2      	ldr	r2, [r2, #28]
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	430b      	orrs	r3, r1
 8002776:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_DMA2D_Init+0xc0>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6891      	ldr	r1, [r2, #8]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6992      	ldr	r2, [r2, #24]
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800279a:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <HAL_DMA2D_Init+0xc4>)
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68d1      	ldr	r1, [r2, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	430b      	orrs	r3, r1
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	051a      	lsls	r2, r3, #20
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	fff8ffbf 	.word	0xfff8ffbf
 80027e8:	fffffef8 	.word	0xfffffef8
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_DMA2D_Start+0x1c>
 8002808:	2302      	movs	r3, #2
 800280a:	e018      	b.n	800283e <HAL_DMA2D_Start+0x4e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fab4 	bl	8002d94 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d056      	beq.n	8002910 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002862:	f7ff fe15 	bl	8002490 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002868:	e04b      	b.n	8002902 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2221      	movs	r2, #33	@ 0x21
 80028ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2204      	movs	r2, #4
 80028b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0a5      	b.n	8002a10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d01a      	beq.n	8002902 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028cc:	f7ff fde0 	bl	8002490 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d302      	bcc.n	80028e2 <HAL_DMA2D_PollForTransfer+0x9c>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e086      	b.n	8002a10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ac      	beq.n	800286a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d061      	beq.n	80029f6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002932:	f7ff fdad 	bl	8002490 <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002938:	e056      	b.n	80029e8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002948:	2b00      	cmp	r3, #0
 800294a:	d02e      	beq.n	80029aa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002970:	f043 0202 	orr.w	r2, r3, #2
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2229      	movs	r2, #41	@ 0x29
 8002994:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e032      	b.n	8002a10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff fd6d 	bl	8002490 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <HAL_DMA2D_PollForTransfer+0x182>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2203      	movs	r2, #3
 80029d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e013      	b.n	8002a10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0a1      	beq.n	800293a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2212      	movs	r2, #18
 80029fc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d026      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d021      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a52:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d026      	beq.n	8002ae0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d021      	beq.n	8002ae0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ab8:	f043 0202 	orr.w	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d026      	beq.n	8002b38 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d021      	beq.n	8002b38 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b02:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2204      	movs	r2, #4
 8002b62:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f853 	bl	8002c10 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d024      	beq.n	8002bbe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01f      	beq.n	8002bbe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01f      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01a      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002be0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f80e 	bl	8002c24 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_DMA2D_ConfigLayer+0x24>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e092      	b.n	8002d82 <HAL_DMA2D_ConfigLayer+0x14a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3328      	adds	r3, #40	@ 0x28
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c90:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <HAL_DMA2D_ConfigLayer+0x158>)
 8002c9e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b0a      	cmp	r3, #10
 8002ca6:	d003      	beq.n	8002cb0 <HAL_DMA2D_ConfigLayer+0x78>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e005      	b.n	8002ccc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d120      	bne.n	8002d14 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	ea02 0103 	and.w	r1, r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b0a      	cmp	r3, #10
 8002cfa:	d003      	beq.n	8002d04 <HAL_DMA2D_ConfigLayer+0xcc>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d135      	bne.n	8002d70 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d10:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d12:	e02d      	b.n	8002d70 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b0b      	cmp	r3, #11
 8002d1a:	d109      	bne.n	8002d30 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	049b      	lsls	r3, r3, #18
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002d2e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	ea02 0103 	and.w	r1, r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d003      	beq.n	8002d62 <HAL_DMA2D_ConfigLayer+0x12a>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b09      	cmp	r3, #9
 8002d60:	d106      	bne.n	8002d70 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d6e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	ff33000f 	.word	0xff33000f

08002d94 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b08b      	sub	sp, #44	@ 0x2c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	041a      	lsls	r2, r3, #16
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	431a      	orrs	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dcc:	d174      	bne.n	8002eb8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002dd4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002ddc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002de4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d108      	bne.n	8002e06 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e04:	e053      	b.n	8002eae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d106      	bne.n	8002e1c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1a:	e048      	b.n	8002eae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d111      	bne.n	8002e48 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	0cdb      	lsrs	r3, r3, #19
 8002e28:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	0a9b      	lsrs	r3, r3, #10
 8002e2e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	02db      	lsls	r3, r3, #11
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e46:	e032      	b.n	8002eae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d117      	bne.n	8002e80 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	0fdb      	lsrs	r3, r3, #31
 8002e54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	0cdb      	lsrs	r3, r3, #19
 8002e5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	0adb      	lsrs	r3, r3, #11
 8002e60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	029b      	lsls	r3, r3, #10
 8002e70:	431a      	orrs	r2, r3
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	03db      	lsls	r3, r3, #15
 8002e76:	4313      	orrs	r3, r2
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7e:	e016      	b.n	8002eae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	0f1b      	lsrs	r3, r3, #28
 8002e84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	0d1b      	lsrs	r3, r3, #20
 8002e8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	0b1b      	lsrs	r3, r3, #12
 8002e90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	011a      	lsls	r2, r3, #4
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	031b      	lsls	r3, r3, #12
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002eb6:	e00d      	b.n	8002ed4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ec0:	d104      	bne.n	8002ecc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	615a      	str	r2, [r3, #20]
}
 8002eca:	e003      	b.n	8002ed4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	372c      	adds	r7, #44	@ 0x2c
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <HAL_GPIO_Init+0x234>)
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ef2:	e194      	b.n	800321e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8186 	beq.w	8003218 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <HAL_GPIO_Init+0x44>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d130      	bne.n	8002f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0201 	and.w	r2, r3, #1
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d017      	beq.n	8002fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d123      	bne.n	8003016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	08da      	lsrs	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3208      	adds	r2, #8
 8002fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	69b9      	ldr	r1, [r7, #24]
 8003012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80e0 	beq.w	8003218 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003058:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <HAL_GPIO_Init+0x238>)
 800305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800305e:	4a2e      	ldr	r2, [pc, #184]	@ (8003118 <HAL_GPIO_Init+0x238>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003068:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_GPIO_Init+0x238>)
 800306a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003076:	4a29      	ldr	r2, [pc, #164]	@ (800311c <HAL_GPIO_Init+0x23c>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_GPIO_Init+0x240>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d052      	beq.n	8003148 <HAL_GPIO_Init+0x268>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <HAL_GPIO_Init+0x244>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d031      	beq.n	800310e <HAL_GPIO_Init+0x22e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003128 <HAL_GPIO_Init+0x248>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02b      	beq.n	800310a <HAL_GPIO_Init+0x22a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <HAL_GPIO_Init+0x24c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d025      	beq.n	8003106 <HAL_GPIO_Init+0x226>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <HAL_GPIO_Init+0x250>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01f      	beq.n	8003102 <HAL_GPIO_Init+0x222>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <HAL_GPIO_Init+0x254>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x21e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_GPIO_Init+0x258>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x21a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_GPIO_Init+0x25c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x216>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_GPIO_Init+0x260>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x212>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_GPIO_Init+0x264>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x20e>
 80030ea:	2309      	movs	r3, #9
 80030ec:	e02d      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030ee:	230a      	movs	r3, #10
 80030f0:	e02b      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030f2:	2308      	movs	r3, #8
 80030f4:	e029      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e027      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030fa:	2306      	movs	r3, #6
 80030fc:	e025      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030fe:	2305      	movs	r3, #5
 8003100:	e023      	b.n	800314a <HAL_GPIO_Init+0x26a>
 8003102:	2304      	movs	r3, #4
 8003104:	e021      	b.n	800314a <HAL_GPIO_Init+0x26a>
 8003106:	2303      	movs	r3, #3
 8003108:	e01f      	b.n	800314a <HAL_GPIO_Init+0x26a>
 800310a:	2302      	movs	r3, #2
 800310c:	e01d      	b.n	800314a <HAL_GPIO_Init+0x26a>
 800310e:	2301      	movs	r3, #1
 8003110:	e01b      	b.n	800314a <HAL_GPIO_Init+0x26a>
 8003112:	bf00      	nop
 8003114:	58000080 	.word	0x58000080
 8003118:	58024400 	.word	0x58024400
 800311c:	58000400 	.word	0x58000400
 8003120:	58020000 	.word	0x58020000
 8003124:	58020400 	.word	0x58020400
 8003128:	58020800 	.word	0x58020800
 800312c:	58020c00 	.word	0x58020c00
 8003130:	58021000 	.word	0x58021000
 8003134:	58021400 	.word	0x58021400
 8003138:	58021800 	.word	0x58021800
 800313c:	58021c00 	.word	0x58021c00
 8003140:	58022000 	.word	0x58022000
 8003144:	58022400 	.word	0x58022400
 8003148:	2300      	movs	r3, #0
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	f002 0203 	and.w	r2, r2, #3
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	4093      	lsls	r3, r2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315a:	4938      	ldr	r1, [pc, #224]	@ (800323c <HAL_GPIO_Init+0x35c>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800318e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	f47f ae63 	bne.w	8002ef4 <HAL_GPIO_Init+0x14>
  }
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	3724      	adds	r7, #36	@ 0x24
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	58000400 	.word	0x58000400

08003240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e001      	b.n	8003262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80032ac:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <HAL_HSEM_FastTake+0x2c>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3320      	adds	r3, #32
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_HSEM_FastTake+0x30>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	58026400 	.word	0x58026400
 80032d4:	80000300 	.word	0x80000300

080032d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032e2:	4906      	ldr	r1, [pc, #24]	@ (80032fc <HAL_HSEM_Release+0x24>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	58026400 	.word	0x58026400

08003300 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e070      	b.n	80033f4 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe fdfc 	bl	8001f24 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <HAL_JPEG_Init+0xfc>)
 8003398:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_JPEG_Init+0x100>)
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fcef 	bl	8003d90 <JPEG_Set_HuffEnc_Mem>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e018      	b.n	80033f4 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	0800f944 	.word	0x0800f944
 8003400:	0800f984 	.word	0x0800f984

08003404 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_JPEG_GetInfo+0x16>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e083      	b.n	8003526 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d103      	bne.n	8003434 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2210      	movs	r2, #16
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e017      	b.n	8003464 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e00c      	b.n	8003464 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b03      	cmp	r3, #3
 8003456:	d103      	bne.n	8003460 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2230      	movs	r2, #48	@ 0x30
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e001      	b.n	8003464 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e060      	b.n	8003526 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	b29a      	uxth	r2, r3
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b29a      	uxth	r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b10      	cmp	r3, #16
 8003486:	d003      	beq.n	8003490 <HAL_JPEG_GetInfo+0x8c>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b30      	cmp	r3, #48	@ 0x30
 800348e:	d140      	bne.n	8003512 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d109      	bne.n	80034d4 <HAL_JPEG_GetInfo+0xd0>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_JPEG_GetInfo+0xd0>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2202      	movs	r2, #2
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e01d      	b.n	8003510 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_JPEG_GetInfo+0xea>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <HAL_JPEG_GetInfo+0xea>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	e010      	b.n	8003510 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d109      	bne.n	8003508 <HAL_JPEG_GetInfo+0x104>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_JPEG_GetInfo+0x104>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	e003      	b.n	8003510 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800350e:	e003      	b.n	8003518 <HAL_JPEG_GetInfo+0x114>
 8003510:	e002      	b.n	8003518 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 fb5d 	bl	8004bd8 <JPEG_GetQuality>
 800351e:	4602      	mov	r2, r0
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_JPEG_Decode+0x20>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_JPEG_Decode+0x20>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e071      	b.n	8003636 <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_JPEG_Decode+0x32>
 800355c:	2302      	movs	r3, #2
 800355e:	e06a      	b.n	8003636 <HAL_JPEG_Decode+0x108>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8003568:	f7fe ff92 	bl	8002490 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d158      	bne.n	800362c <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2204      	movs	r2, #4
 800357e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	f023 020f 	bic.w	r2, r3, #15
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003592:	f043 0206 	orr.w	r2, r3, #6
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f023 0203 	bic.w	r2, r3, #3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fe64 	bl	8004294 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80035cc:	e01e      	b.n	800360c <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d01a      	beq.n	800360c <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80035d6:	f7fe ff5b 	bl	8002490 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <HAL_JPEG_Decode+0xbe>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10f      	bne.n	800360c <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f0:	f043 0208 	orr.w	r2, r3, #8
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e014      	b.n	8003636 <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 feb5 	bl	800437c <JPEG_Process>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0da      	beq.n	80035ce <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e004      	b.n	8003636 <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d116      	bne.n	8003686 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003666:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d033      	beq.n	80036e0 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
 8003684:	e02c      	b.n	80036e0 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b08      	cmp	r3, #8
 8003690:	d126      	bne.n	80036e0 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f043 0306 	orr.w	r3, r3, #6
 80036ae:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80036cc:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43da      	mvns	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	400a      	ands	r2, r1
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3b03      	subs	r3, #3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d813      	bhi.n	8003764 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d103      	bne.n	8003750 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fe17 	bl	800437c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800374e:	e00b      	b.n	8003768 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d105      	bne.n	8003768 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 f8bc 	bl	80048da <JPEG_DMA_ContinueProcess>
      break;
 8003762:	e001      	b.n	8003768 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <HAL_JPEG_IRQHandler+0x44>
      break;
 8003768:	bf00      	nop
  }
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8003772:	b480      	push	{r7}
 8003774:	b08b      	sub	sp, #44	@ 0x2c
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e020      	b.n	80037cc <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	4413      	add	r3, r2
 800379a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379e:	d90f      	bls.n	80037c0 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e055      	b.n	8003850 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	440b      	add	r3, r1
 80037ae:	3201      	adds	r2, #1
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
      p++;
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	3301      	adds	r3, #1
 80037b8:	623b      	str	r3, [r7, #32]
      i--;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	3b01      	subs	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ee      	bne.n	80037a4 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	d9db      	bls.n	800378a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	4413      	add	r3, r2
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	617b      	str	r3, [r7, #20]
  p = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80037f0:	e027      	b.n	8003842 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	601a      	str	r2, [r3, #0]
      p++;
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	3301      	adds	r3, #1
 8003802:	623b      	str	r3, [r7, #32]
      code++;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3301      	adds	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	4413      	add	r3, r2
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4293      	cmp	r3, r2
 8003818:	d0eb      	beq.n	80037f2 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b1f      	cmp	r3, #31
 800381e:	d901      	bls.n	8003824 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e015      	b.n	8003850 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8003824:	2201      	movs	r2, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	429a      	cmp	r2, r3
 8003830:	d301      	bcc.n	8003836 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00c      	b.n	8003850 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
    si++;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3301      	adds	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	4413      	add	r3, r2
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1dd      	bne.n	800380a <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	372c      	adds	r7, #44	@ 0x2c
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003862:	af00      	add	r7, sp, #0
 8003864:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003868:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800386c:	6018      	str	r0, [r3, #0]
 800386e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003872:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003876:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003878:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800387c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	f107 0308 	add.w	r3, r7, #8
 8003886:	f107 020c 	add.w	r2, r7, #12
 800388a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800388e:	f7ff ff70 	bl	8003772 <JPEG_Bits_To_SizeCodes>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8003898:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80038a0:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80038a4:	e075      	b.n	8003992 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80038ac:	e067      	b.n	800397e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80038ae:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80038b2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80038bc:	4413      	add	r3, r2
 80038be:	3310      	adds	r3, #16
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80038c6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80038ce:	23a0      	movs	r3, #160	@ 0xa0
 80038d0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80038d4:	e021      	b.n	800391a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80038d6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80038da:	2bf0      	cmp	r3, #240	@ 0xf0
 80038dc:	d103      	bne.n	80038e6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80038de:	23a1      	movs	r3, #161	@ 0xa1
 80038e0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80038e4:	e019      	b.n	800391a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80038e6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80038f4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8003900:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	461a      	mov	r2, r3
 800390e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003912:	4413      	add	r3, r2
 8003914:	3b01      	subs	r3, #1
 8003916:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800391a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800391e:	2ba1      	cmp	r3, #161	@ 0xa1
 8003920:	d901      	bls.n	8003926 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003922:	2301      	movs	r3, #1
 8003924:	e035      	b.n	8003992 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003926:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800392a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800392e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003932:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003936:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800393a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800394c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003950:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003954:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	b2d9      	uxtb	r1, r3
 8003960:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003964:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800396e:	4413      	add	r3, r2
 8003970:	460a      	mov	r2, r1
 8003972:	701a      	strb	r2, [r3, #0]
      k++;
 8003974:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003978:	3301      	adds	r3, #1
 800397a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800397e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003982:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800398c:	429a      	cmp	r2, r3
 800398e:	d38e      	bcc.n	80038ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80039a8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80039ac:	6018      	str	r0, [r3, #0]
 80039ae:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80039b2:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80039b6:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80039b8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80039bc:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80039c6:	f107 0208 	add.w	r2, r7, #8
 80039ca:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80039ce:	f7ff fed0 	bl	8003772 <JPEG_Bits_To_SizeCodes>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80039d8:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80039e0:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80039e4:	e048      	b.n	8003a78 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80039ec:	e03d      	b.n	8003a6a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80039ee:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80039f2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80039fc:	4413      	add	r3, r2
 80039fe:	3310      	adds	r3, #16
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8003a06:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a0a:	2b0b      	cmp	r3, #11
 8003a0c:	d901      	bls.n	8003a12 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e032      	b.n	8003a78 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003a12:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a16:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8003a1a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a22:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a26:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a30:	3302      	adds	r3, #2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003a38:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a3c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003a40:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003a44:	4413      	add	r3, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003a50:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a5a:	4413      	add	r3, r2
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	701a      	strb	r2, [r3, #0]
      k++;
 8003a60:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003a64:	3301      	adds	r3, #1
 8003a66:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8003a6a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003a6e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d3bb      	bcc.n	80039ee <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b09a      	sub	sp, #104	@ 0x68
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d106      	bne.n	8003aaa <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aa8:	e00f      	b.n	8003aca <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d106      	bne.n	8003ac6 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ac4:	e001      	b.n	8003aca <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e059      	b.n	8003b7e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d055      	beq.n	8003b7c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	68b8      	ldr	r0, [r7, #8]
 8003ad8:	f7ff ff60 	bl	800399c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8003aea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003aee:	e046      	b.n	8003b7e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8003af0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003af2:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003afa:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003afe:	3304      	adds	r3, #4
 8003b00:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b04:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003b08:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8003b0a:	230c      	movs	r3, #12
 8003b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8003b0e:	e032      	b.n	8003b76 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8003b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b12:	3b01      	subs	r3, #1
 8003b14:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8003b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b18:	3b04      	subs	r3, #4
 8003b1a:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003b1c:	f107 0214 	add.w	r2, r7, #20
 8003b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b22:	4413      	add	r3, r2
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b2e:	3302      	adds	r3, #2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	3368      	adds	r3, #104	@ 0x68
 8003b34:	443b      	add	r3, r7
 8003b36:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003b40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b42:	3b01      	subs	r3, #1
 8003b44:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003b46:	f107 0214 	add.w	r2, r7, #20
 8003b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b58:	3302      	adds	r3, #2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3368      	adds	r3, #104	@ 0x68
 8003b5e:	443b      	add	r3, r7
 8003b60:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	041a      	lsls	r2, r3, #16
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b70:	431a      	orrs	r2, r3
 8003b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b74:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d8c9      	bhi.n	8003b10 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3768      	adds	r7, #104	@ 0x68
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003b94:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003b98:	6018      	str	r0, [r3, #0]
 8003b9a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003b9e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003ba2:	6019      	str	r1, [r3, #0]
 8003ba4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ba8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003bac:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003bae:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003bb2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003bc2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d10c      	bne.n	8003be6 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003bcc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003bd0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bdc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003be0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003be4:	e01d      	b.n	8003c22 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003be6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003bea:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003bf6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003bfa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d10c      	bne.n	8003c1e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003c04:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c08:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003c14:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003c18:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003c1c:	e001      	b.n	8003c22 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0a8      	b.n	8003d74 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8003c22:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c26:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a0 	beq.w	8003d72 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003c32:	f107 0214 	add.w	r2, r7, #20
 8003c36:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003c3a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003c3e:	4611      	mov	r1, r2
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f7ff fe0b 	bl	800385c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003c4c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003c54:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003c58:	e08c      	b.n	8003d74 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003c5a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003c5e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003c68:	e00e      	b.n	8003c88 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8003c6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003c6e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c72:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003c74:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003c78:	3304      	adds	r3, #4
 8003c7a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003c7e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003c82:	3301      	adds	r3, #1
 8003c84:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003c88:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d9ec      	bls.n	8003c6a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003c90:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003c94:	4a3a      	ldr	r2, [pc, #232]	@ (8003d80 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003c96:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003c98:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003ca2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003ca6:	4a37      	ldr	r2, [pc, #220]	@ (8003d84 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003ca8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003caa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003cae:	3304      	adds	r3, #4
 8003cb0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003cb4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003cb8:	4a33      	ldr	r2, [pc, #204]	@ (8003d88 <JPEG_Set_HuffAC_Mem+0x200>)
 8003cba:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003cbc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003cc6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003cca:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <JPEG_Set_HuffAC_Mem+0x204>)
 8003ccc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003cce:	23a2      	movs	r3, #162	@ 0xa2
 8003cd0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003cd4:	e049      	b.n	8003d6a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003cd6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003ce0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003ce4:	3b04      	subs	r3, #4
 8003ce6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003cea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cee:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003cf2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003d00:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d04:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003d08:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d0c:	3328      	adds	r3, #40	@ 0x28
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8003d1c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d20:	3b01      	subs	r3, #1
 8003d22:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003d26:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d2a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003d2e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003d3c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d40:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003d44:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d48:	3328      	adds	r3, #40	@ 0x28
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003d58:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003d62:	431a      	orrs	r2, r3
 8003d64:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003d68:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003d6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d8b1      	bhi.n	8003cd6 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	0fd10fd0 	.word	0x0fd10fd0
 8003d84:	0fd30fd2 	.word	0x0fd30fd2
 8003d88:	0fd50fd4 	.word	0x0fd50fd4
 8003d8c:	0fd70fd6 	.word	0x0fd70fd6

08003d90 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f84d 	bl	8003e38 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003da6:	461a      	mov	r2, r3
 8003da8:	491f      	ldr	r1, [pc, #124]	@ (8003e28 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff feec 	bl	8003b88 <JPEG_Set_HuffAC_Mem>
 8003db0:	4603      	mov	r3, r0
 8003db2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	e030      	b.n	8003e20 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4918      	ldr	r1, [pc, #96]	@ (8003e2c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fedc 	bl	8003b88 <JPEG_Set_HuffAC_Mem>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	e020      	b.n	8003e20 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003de6:	461a      	mov	r2, r3
 8003de8:	4911      	ldr	r1, [pc, #68]	@ (8003e30 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fe49 	bl	8003a82 <JPEG_Set_HuffDC_Mem>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	e010      	b.n	8003e20 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003e06:	461a      	mov	r2, r3
 8003e08:	490a      	ldr	r1, [pc, #40]	@ (8003e34 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fe39 	bl	8003a82 <JPEG_Set_HuffDC_Mem>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	e000      	b.n	8003e20 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	0800f79c 	.word	0x0800f79c
 8003e2c:	0800f850 	.word	0x0800f850
 8003e30:	0800f764 	.word	0x0800f764
 8003e34:	0800f780 	.word	0x0800f780

08003e38 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b08b      	sub	sp, #44	@ 0x2c
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003e40:	4b80      	ldr	r3, [pc, #512]	@ (8004044 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003e42:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003e44:	4b80      	ldr	r3, [pc, #512]	@ (8004048 <JPEG_Set_Huff_DHTMem+0x210>)
 8003e46:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003e48:	4b80      	ldr	r3, [pc, #512]	@ (800404c <JPEG_Set_Huff_DHTMem+0x214>)
 8003e4a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003e4c:	4b80      	ldr	r3, [pc, #512]	@ (8004050 <JPEG_Set_Huff_DHTMem+0x218>)
 8003e4e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003e58:	330c      	adds	r3, #12
 8003e5a:	623b      	str	r3, [r7, #32]
  index = 16;
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003e60:	e01d      	b.n	8003e9e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	3b01      	subs	r3, #1
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	3b02      	subs	r3, #2
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003e76:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	3b03      	subs	r3, #3
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003e82:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	3a04      	subs	r2, #4
 8003e88:	6979      	ldr	r1, [r7, #20]
 8003e8a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003e8c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	601a      	str	r2, [r3, #0]
    address--;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	3b04      	subs	r3, #4
 8003e96:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d8de      	bhi.n	8003e62 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003eac:	3318      	adds	r3, #24
 8003eae:	623b      	str	r3, [r7, #32]
  index = 12;
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003eb4:	e021      	b.n	8003efa <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	7c1b      	ldrb	r3, [r3, #16]
 8003ec0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	3b02      	subs	r3, #2
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	440b      	add	r3, r1
 8003eca:	7c1b      	ldrb	r3, [r3, #16]
 8003ecc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003ece:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	3b03      	subs	r3, #3
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	7c1b      	ldrb	r3, [r3, #16]
 8003eda:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003edc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8003ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee0:	3a04      	subs	r2, #4
 8003ee2:	6979      	ldr	r1, [r7, #20]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003ee8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	601a      	str	r2, [r3, #0]
    address--;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	3b04      	subs	r3, #4
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d8da      	bhi.n	8003eb6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f08:	3328      	adds	r3, #40	@ 0x28
 8003f0a:	623b      	str	r3, [r7, #32]
  index = 16;
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f10:	e01d      	b.n	8003f4e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	3b01      	subs	r3, #1
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	5cd3      	ldrb	r3, [r2, r3]
 8003f1a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	3b02      	subs	r3, #2
 8003f20:	69f9      	ldr	r1, [r7, #28]
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f26:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	3b03      	subs	r3, #3
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003f32:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	3a04      	subs	r2, #4
 8003f38:	69f9      	ldr	r1, [r7, #28]
 8003f3a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003f3c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	601a      	str	r2, [r3, #0]
    address--;
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	3b04      	subs	r3, #4
 8003f46:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d8de      	bhi.n	8003f12 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f5c:	33cc      	adds	r3, #204	@ 0xcc
 8003f5e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	3b04      	subs	r3, #4
 8003f8a:	623b      	str	r3, [r7, #32]
  index = 160;
 8003f8c:	23a0      	movs	r3, #160	@ 0xa0
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f90:	e021      	b.n	8003fd6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	3b01      	subs	r3, #1
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	7c1b      	ldrb	r3, [r3, #16]
 8003f9c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	3b02      	subs	r3, #2
 8003fa2:	69f9      	ldr	r1, [r7, #28]
 8003fa4:	440b      	add	r3, r1
 8003fa6:	7c1b      	ldrb	r3, [r3, #16]
 8003fa8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003faa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	3b03      	subs	r3, #3
 8003fb0:	69f9      	ldr	r1, [r7, #28]
 8003fb2:	440b      	add	r3, r1
 8003fb4:	7c1b      	ldrb	r3, [r3, #16]
 8003fb6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003fb8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8003fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbc:	3a04      	subs	r2, #4
 8003fbe:	69f9      	ldr	r1, [r7, #28]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003fc4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	601a      	str	r2, [r3, #0]
    address--;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	3b04      	subs	r3, #4
 8003fce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d8da      	bhi.n	8003f92 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003fe4:	33cc      	adds	r3, #204	@ 0xcc
 8003fe6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	061a      	lsls	r2, r3, #24
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004012:	33dc      	adds	r3, #220	@ 0xdc
 8004014:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b0e      	ldr	r3, [pc, #56]	@ (8004054 <JPEG_Set_Huff_DHTMem+0x21c>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	7bdb      	ldrb	r3, [r3, #15]
 8004024:	021a      	lsls	r2, r3, #8
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	7b92      	ldrb	r2, [r2, #14]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	3b04      	subs	r3, #4
 800403c:	623b      	str	r3, [r7, #32]
  index = 12;
 800403e:	230c      	movs	r3, #12
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004042:	e027      	b.n	8004094 <JPEG_Set_Huff_DHTMem+0x25c>
 8004044:	0800f79c 	.word	0x0800f79c
 8004048:	0800f850 	.word	0x0800f850
 800404c:	0800f764 	.word	0x0800f764
 8004050:	0800f780 	.word	0x0800f780
 8004054:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	3301      	adds	r3, #1
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004062:	6939      	ldr	r1, [r7, #16]
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	440b      	add	r3, r1
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800406c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	3b01      	subs	r3, #1
 8004072:	6939      	ldr	r1, [r7, #16]
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004078:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800407a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407c:	3a02      	subs	r2, #2
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004082:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	601a      	str	r2, [r3, #0]
    address--;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	3b04      	subs	r3, #4
 800408c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	3b04      	subs	r3, #4
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	2b03      	cmp	r3, #3
 8004098:	d8de      	bhi.n	8004058 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80040a2:	33dc      	adds	r3, #220	@ 0xdc
 80040a4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	7c5b      	ldrb	r3, [r3, #17]
 80040b2:	061a      	lsls	r2, r3, #24
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	7c1b      	ldrb	r3, [r3, #16]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80040d0:	33e8      	adds	r3, #232	@ 0xe8
 80040d2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b6d      	ldr	r3, [pc, #436]	@ (8004290 <JPEG_Set_Huff_DHTMem+0x458>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	7edb      	ldrb	r3, [r3, #27]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	7e92      	ldrb	r2, [r2, #26]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  *address = value;
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	623b      	str	r3, [r7, #32]
  index = 8;
 80040fc:	2308      	movs	r3, #8
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004100:	e021      	b.n	8004146 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	3301      	adds	r3, #1
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4413      	add	r3, r2
 800410a:	7c1b      	ldrb	r3, [r3, #16]
 800410c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800410e:	6939      	ldr	r1, [r7, #16]
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	440b      	add	r3, r1
 8004114:	3310      	adds	r3, #16
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800411a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	3b01      	subs	r3, #1
 8004120:	6939      	ldr	r1, [r7, #16]
 8004122:	440b      	add	r3, r1
 8004124:	7c1b      	ldrb	r3, [r3, #16]
 8004126:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004128:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	3a02      	subs	r2, #2
 800412e:	6939      	ldr	r1, [r7, #16]
 8004130:	440a      	add	r2, r1
 8004132:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004134:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	601a      	str	r2, [r3, #0]
    address--;
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	3b04      	subs	r3, #4
 800413e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	3b04      	subs	r3, #4
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	2b03      	cmp	r3, #3
 800414a:	d8da      	bhi.n	8004102 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004154:	33e8      	adds	r3, #232	@ 0xe8
 8004156:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	061a      	lsls	r2, r3, #24
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	431a      	orrs	r2, r3
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004182:	33f8      	adds	r3, #248	@ 0xf8
 8004184:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <JPEG_Set_Huff_DHTMem+0x458>)
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	7bdb      	ldrb	r3, [r3, #15]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	7b92      	ldrb	r2, [r2, #14]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	3b04      	subs	r3, #4
 80041ac:	623b      	str	r3, [r7, #32]
  index = 12;
 80041ae:	230c      	movs	r3, #12
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041b2:	e01d      	b.n	80041f0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	3301      	adds	r3, #1
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	5cd3      	ldrb	r3, [r2, r3]
 80041bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80041be:	69b9      	ldr	r1, [r7, #24]
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	440b      	add	r3, r1
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041c8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	3b01      	subs	r3, #1
 80041ce:	69b9      	ldr	r1, [r7, #24]
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80041d4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	3a02      	subs	r2, #2
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041de:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	601a      	str	r2, [r3, #0]
    address--;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	3b04      	subs	r3, #4
 80041e8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	3b04      	subs	r3, #4
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d8de      	bhi.n	80041b4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041fe:	33f8      	adds	r3, #248	@ 0xf8
 8004200:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	7c5b      	ldrb	r3, [r3, #17]
 800420e:	061a      	lsls	r2, r3, #24
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	431a      	orrs	r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	7c1b      	ldrb	r3, [r3, #16]
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800422c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8004230:	623b      	str	r3, [r7, #32]
  index = 160;
 8004232:	23a0      	movs	r3, #160	@ 0xa0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004236:	e021      	b.n	800427c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	3301      	adds	r3, #1
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4413      	add	r3, r2
 8004240:	7c1b      	ldrb	r3, [r3, #16]
 8004242:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	440b      	add	r3, r1
 800424a:	3310      	adds	r3, #16
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004250:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	3b01      	subs	r3, #1
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	440b      	add	r3, r1
 800425a:	7c1b      	ldrb	r3, [r3, #16]
 800425c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800425e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004262:	3a02      	subs	r2, #2
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	440a      	add	r2, r1
 8004268:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800426a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	601a      	str	r2, [r3, #0]
    address--;
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	3b04      	subs	r3, #4
 8004274:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	3b04      	subs	r3, #4
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	2b03      	cmp	r3, #3
 8004280:	d8da      	bhi.n	8004238 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	372c      	adds	r7, #44	@ 0x2c
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	ffff0000 	.word	0xffff0000

08004294 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d108      	bne.n	80042c6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0208 	orr.w	r2, r2, #8
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	e007      	b.n	80042d6 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0208 	bic.w	r2, r2, #8
 80042d4:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004304:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004324:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b08      	cmp	r3, #8
 8004340:	d108      	bne.n	8004354 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8004352:	e00d      	b.n	8004370 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d107      	bne.n	8004370 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d125      	bne.n	80043dc <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01e      	beq.n	80043dc <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff f82d 	bl	8003404 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc ffbe 	bl	8001338 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80043f6:	2108      	movs	r1, #8
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f988 	bl	800470e <JPEG_ReadInputData>
 80043fe:	e00a      	b.n	8004416 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800440e:	2101      	movs	r1, #1
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f97c 	bl	800470e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004430:	2108      	movs	r1, #8
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f864 	bl	8004500 <JPEG_StoreOutputData>
 8004438:	e00a      	b.n	8004450 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8004448:	2101      	movs	r1, #1
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f858 	bl	8004500 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445a:	2b20      	cmp	r3, #32
 800445c:	d14b      	bne.n	80044f6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b08      	cmp	r3, #8
 8004478:	d107      	bne.n	800448a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004498:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69d9      	ldr	r1, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	461a      	mov	r2, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fc ff63 	bl	8001378 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d103      	bne.n	80044ec <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fc ff61 	bl	80013ac <HAL_JPEG_DecodeCpltCallback>
 80044ea:	e002      	b.n	80044f2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff f910 	bl	8003712 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	429a      	cmp	r2, r3
 800451a:	d34b      	bcc.n	80045b4 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e031      	b.n	8004586 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	4413      	add	r3, r2
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	0a19      	lsrs	r1, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	3301      	adds	r3, #1
 8004548:	4413      	add	r3, r2
 800454a:	b2ca      	uxtb	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	0c19      	lsrs	r1, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	3302      	adds	r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	b2ca      	uxtb	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	0e19      	lsrs	r1, r3, #24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	3303      	adds	r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	b2ca      	uxtb	r2, r1
 8004574:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	1d1a      	adds	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	3301      	adds	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d3c9      	bcc.n	8004522 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	429a      	cmp	r2, r3
 8004598:	f040 80b5 	bne.w	8004706 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	461a      	mov	r2, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fee6 	bl	8001378 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80045b2:	e0a8      	b.n	8004706 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	429a      	cmp	r2, r3
 80045be:	f240 80a2 	bls.w	8004706 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e031      	b.n	800463a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045dc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	4413      	add	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	0a19      	lsrs	r1, r3, #8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	3301      	adds	r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	b2ca      	uxtb	r2, r1
 8004600:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0c19      	lsrs	r1, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	3302      	adds	r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	b2ca      	uxtb	r2, r1
 8004614:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	0e19      	lsrs	r1, r3, #24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	3303      	adds	r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	b2ca      	uxtb	r2, r1
 8004628:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3301      	adds	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	429a      	cmp	r2, r3
 8004640:	d3c9      	bcc.n	80045d6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	429a      	cmp	r2, r3
 800464c:	d10b      	bne.n	8004666 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69d9      	ldr	r1, [r3, #28]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	461a      	mov	r2, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fc fe8d 	bl	8001378 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004664:	e04f      	b.n	8004706 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004678:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e015      	b.n	80046ac <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	fa22 f103 	lsr.w	r1, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	4413      	add	r3, r2
 8004698:	b2ca      	uxtb	r2, r1
 800469a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3301      	adds	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3e5      	bcc.n	8004680 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	461a      	mov	r2, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fe5a 	bl	8001378 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f1c3 0304 	rsb	r3, r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e013      	b.n	8004700 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	fa22 f103 	lsr.w	r1, r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	4413      	add	r3, r2
 80046ec:	b2ca      	uxtb	r2, r1
 80046ee:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d9e8      	bls.n	80046d8 <JPEG_StoreOutputData+0x1d8>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b088      	sub	sp, #32
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <JPEG_ReadInputData+0x1c>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800472a:	2101      	movs	r1, #1
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7fe ff86 	bl	800363e <HAL_JPEG_Pause>
 8004732:	e028      	b.n	8004786 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	429a      	cmp	r2, r3
 800473e:	d906      	bls.n	800474e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e01b      	b.n	8004786 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	429a      	cmp	r2, r3
 8004758:	d115      	bne.n	8004786 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc fdf5 	bl	8001350 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	2b04      	cmp	r3, #4
 800476c:	d905      	bls.n	800477a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 809f 	bne.w	80048d2 <JPEG_ReadInputData+0x1c4>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 809b 	beq.w	80048d2 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d335      	bcc.n	8004816 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e02d      	b.n	800480c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80047d0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3302      	adds	r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80047e2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3303      	adds	r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80047f8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3301      	adds	r3, #1
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d3cd      	bcc.n	80047b0 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8004814:	e05d      	b.n	80048d2 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d035      	beq.n	8004888 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e02d      	b.n	800487e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004842:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6999      	ldr	r1, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3302      	adds	r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004854:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3303      	adds	r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800486a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	1d1a      	adds	r2, r3, #4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	3301      	adds	r3, #1
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3cd      	bcc.n	8004822 <JPEG_ReadInputData+0x114>
}
 8004886:	e024      	b.n	80048d2 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e017      	b.n	80048c2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	3301      	adds	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3e3      	bcc.n	8004892 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d125      	bne.n	800493a <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01e      	beq.n	800493a <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe fd7e 	bl	8003404 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc fd0f 	bl	8001338 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004938:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d039      	beq.n	80049bc <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004982:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d104      	bne.n	800499c <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f97c 	bl	8004c94 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d105      	bne.n	80049b6 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f970 	bl	8004c94 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80049b4:	e002      	b.n	80049bc <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f804 	bl	80049c4 <JPEG_DMA_EndProcess>
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80049dc:	1ad2      	subs	r2, r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d10a      	bne.n	8004a04 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69d9      	ldr	r1, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	461a      	mov	r2, r3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fc fcbd 	bl	8001378 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d134      	bne.n	8004a7c <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69d9      	ldr	r1, [r3, #28]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	461a      	mov	r2, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fc fca7 	bl	8001378 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a44:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d103      	bne.n	8004a74 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7fc fc9d 	bl	80013ac <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8004a72:	e00c      	b.n	8004a8e <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fe fe4c 	bl	8003712 <HAL_JPEG_EncodeCpltCallback>
}
 8004a7a:	e008      	b.n	8004a8e <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f804 	bl	8004a96 <JPEG_DMA_PollResidualData>
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e04f      	b.n	8004b44 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d146      	bne.n	8004b3e <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03f      	beq.n	8004b3e <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac4:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	4413      	add	r3, r2
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0a19      	lsrs	r1, r3, #8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69da      	ldr	r2, [r3, #28]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b2ca      	uxtb	r2, r1
 8004ae8:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	0c19      	lsrs	r1, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	3302      	adds	r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	b2ca      	uxtb	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	0e19      	lsrs	r1, r3, #24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	3303      	adds	r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b2ca      	uxtb	r2, r1
 8004b10:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d10a      	bne.n	8004b3e <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	461a      	mov	r2, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fc20 	bl	8001378 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ac      	bne.n	8004aa4 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <JPEG_DMA_PollResidualData+0xd2>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d133      	bne.n	8004bd0 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69d9      	ldr	r1, [r3, #28]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc fbf4 	bl	8001378 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9a:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d103      	bne.n	8004bca <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fbf2 	bl	80013ac <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8004bc8:	e002      	b.n	8004bd0 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe fda1 	bl	8003712 <HAL_JPEG_EncodeCpltCallback>
}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b08b      	sub	sp, #44	@ 0x2c
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3350      	adds	r3, #80	@ 0x50
 8004bea:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004bf0:	e042      	b.n	8004c78 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e033      	b.n	8004c66 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d103      	bne.n	8004c1a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	3364      	adds	r3, #100	@ 0x64
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c18:	e022      	b.n	8004c60 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2264      	movs	r2, #100	@ 0x64
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c26:	6a38      	ldr	r0, [r7, #32]
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	4818      	ldr	r0, [pc, #96]	@ (8004c90 <JPEG_GetQuality+0xb8>)
 8004c2e:	5c41      	ldrb	r1, [r0, r1]
 8004c30:	440a      	add	r2, r1
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b64      	cmp	r3, #100	@ 0x64
 8004c3e:	d807      	bhi.n	8004c50 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4a:	4413      	add	r3, r2
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4e:	e007      	b.n	8004c60 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5c:	4413      	add	r3, r2
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d9c8      	bls.n	8004bfe <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	3304      	adds	r3, #4
 8004c76:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b3c      	cmp	r3, #60	@ 0x3c
 8004c7c:	d9b9      	bls.n	8004bf2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	099b      	lsrs	r3, r3, #6
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	372c      	adds	r7, #44	@ 0x2c
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	0800f904 	.word	0x0800f904

08004c94 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e017      	b.n	8004cd6 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d004      	beq.n	8004cbc <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2280      	movs	r2, #128	@ 0x80
 8004cb6:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e00c      	b.n	8004cd6 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004cec:	4b29      	ldr	r3, [pc, #164]	@ (8004d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d00a      	beq.n	8004d0e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cf8:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e040      	b.n	8004d8c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e03e      	b.n	8004d8c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d0e:	4b21      	ldr	r3, [pc, #132]	@ (8004d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004d16:	491f      	ldr	r1, [pc, #124]	@ (8004d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d1e:	f7fd fbb7 	bl	8002490 <HAL_GetTick>
 8004d22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d24:	e009      	b.n	8004d3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d26:	f7fd fbb3 	bl	8002490 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d34:	d901      	bls.n	8004d3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e028      	b.n	8004d8c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d46:	d1ee      	bne.n	8004d26 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b1e      	cmp	r3, #30
 8004d4c:	d008      	beq.n	8004d60 <HAL_PWREx_ConfigSupply+0x7c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d52:	d005      	beq.n	8004d60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b1d      	cmp	r3, #29
 8004d58:	d002      	beq.n	8004d60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004d5e:	d114      	bne.n	8004d8a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004d60:	f7fd fb96 	bl	8002490 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d66:	e009      	b.n	8004d7c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d68:	f7fd fb92 	bl	8002490 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d76:	d901      	bls.n	8004d7c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e007      	b.n	8004d8c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d88:	d1ee      	bne.n	8004d68 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	58024800 	.word	0x58024800

08004d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	@ 0x30
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f000 bc48 	b.w	800563c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8088 	beq.w	8004eca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dba:	4b99      	ldr	r3, [pc, #612]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dc4:	4b96      	ldr	r3, [pc, #600]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d007      	beq.n	8004de0 <HAL_RCC_OscConfig+0x48>
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	2b18      	cmp	r3, #24
 8004dd4:	d111      	bne.n	8004dfa <HAL_RCC_OscConfig+0x62>
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de0:	4b8f      	ldr	r3, [pc, #572]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d06d      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x130>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d169      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f000 bc21 	b.w	800563c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x7a>
 8004e04:	4b86      	ldr	r3, [pc, #536]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a85      	ldr	r2, [pc, #532]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e02e      	b.n	8004e70 <HAL_RCC_OscConfig+0xd8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x9c>
 8004e1a:	4b81      	ldr	r3, [pc, #516]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a80      	ldr	r2, [pc, #512]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b7e      	ldr	r3, [pc, #504]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a7d      	ldr	r2, [pc, #500]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e01d      	b.n	8004e70 <HAL_RCC_OscConfig+0xd8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCC_OscConfig+0xc0>
 8004e3e:	4b78      	ldr	r3, [pc, #480]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a77      	ldr	r2, [pc, #476]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4b75      	ldr	r3, [pc, #468]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a74      	ldr	r2, [pc, #464]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e00b      	b.n	8004e70 <HAL_RCC_OscConfig+0xd8>
 8004e58:	4b71      	ldr	r3, [pc, #452]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a70      	ldr	r2, [pc, #448]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b6e      	ldr	r3, [pc, #440]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6d      	ldr	r2, [pc, #436]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d013      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fd fb0a 	bl	8002490 <HAL_GetTick>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e80:	f7fd fb06 	bl	8002490 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	@ 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e3d4      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e92:	4b63      	ldr	r3, [pc, #396]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0xe8>
 8004e9e:	e014      	b.n	8004eca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fd faf6 	bl	8002490 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fd faf2 	bl	8002490 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	@ 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e3c0      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004eba:	4b59      	ldr	r3, [pc, #356]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x110>
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80ca 	beq.w	800506c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed8:	4b51      	ldr	r3, [pc, #324]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_RCC_OscConfig+0x166>
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b18      	cmp	r3, #24
 8004ef2:	d156      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x20a>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d151      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004efe:	4b48      	ldr	r3, [pc, #288]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_RCC_OscConfig+0x17e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e392      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f16:	4b42      	ldr	r3, [pc, #264]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0219 	bic.w	r2, r3, #25
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	493f      	ldr	r1, [pc, #252]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd fab2 	bl	8002490 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fd faae 	bl	8002490 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e37c      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f42:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4e:	f7fd facf 	bl	80024f0 <HAL_GetREVID>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d817      	bhi.n	8004f8c <HAL_RCC_OscConfig+0x1f4>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b40      	cmp	r3, #64	@ 0x40
 8004f62:	d108      	bne.n	8004f76 <HAL_RCC_OscConfig+0x1de>
 8004f64:	4b2e      	ldr	r3, [pc, #184]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f74:	e07a      	b.n	800506c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f76:	4b2a      	ldr	r3, [pc, #168]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	031b      	lsls	r3, r3, #12
 8004f84:	4926      	ldr	r1, [pc, #152]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f8a:	e06f      	b.n	800506c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	4921      	ldr	r1, [pc, #132]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fa0:	e064      	b.n	800506c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d047      	beq.n	800503a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004faa:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 0219 	bic.w	r2, r3, #25
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	491a      	ldr	r1, [pc, #104]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fa68 	bl	8002490 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fd fa64 	bl	8002490 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e332      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	f7fd fa85 	bl	80024f0 <HAL_GetREVID>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d819      	bhi.n	8005024 <HAL_RCC_OscConfig+0x28c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d108      	bne.n	800500a <HAL_RCC_OscConfig+0x272>
 8004ff8:	4b09      	ldr	r3, [pc, #36]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005000:	4a07      	ldr	r2, [pc, #28]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005006:	6053      	str	r3, [r2, #4]
 8005008:	e030      	b.n	800506c <HAL_RCC_OscConfig+0x2d4>
 800500a:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	031b      	lsls	r3, r3, #12
 8005018:	4901      	ldr	r1, [pc, #4]	@ (8005020 <HAL_RCC_OscConfig+0x288>)
 800501a:	4313      	orrs	r3, r2
 800501c:	604b      	str	r3, [r1, #4]
 800501e:	e025      	b.n	800506c <HAL_RCC_OscConfig+0x2d4>
 8005020:	58024400 	.word	0x58024400
 8005024:	4b9a      	ldr	r3, [pc, #616]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	4997      	ldr	r1, [pc, #604]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
 8005038:	e018      	b.n	800506c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503a:	4b95      	ldr	r3, [pc, #596]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a94      	ldr	r2, [pc, #592]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fd fa23 	bl	8002490 <HAL_GetTick>
 800504a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504e:	f7fd fa1f 	bl	8002490 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e2ed      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005060:	4b8b      	ldr	r3, [pc, #556]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f0      	bne.n	800504e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a9 	beq.w	80051cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507a:	4b85      	ldr	r3, [pc, #532]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005082:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005084:	4b82      	ldr	r3, [pc, #520]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d007      	beq.n	80050a0 <HAL_RCC_OscConfig+0x308>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b18      	cmp	r3, #24
 8005094:	d13a      	bne.n	800510c <HAL_RCC_OscConfig+0x374>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d135      	bne.n	800510c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_OscConfig+0x320>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b80      	cmp	r3, #128	@ 0x80
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e2c1      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050b8:	f7fd fa1a 	bl	80024f0 <HAL_GetREVID>
 80050bc:	4603      	mov	r3, r0
 80050be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d817      	bhi.n	80050f6 <HAL_RCC_OscConfig+0x35e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d108      	bne.n	80050e0 <HAL_RCC_OscConfig+0x348>
 80050ce:	4b70      	ldr	r3, [pc, #448]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050d6:	4a6e      	ldr	r2, [pc, #440]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050de:	e075      	b.n	80051cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	069b      	lsls	r3, r3, #26
 80050ee:	4968      	ldr	r1, [pc, #416]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050f4:	e06a      	b.n	80051cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050f6:	4b66      	ldr	r3, [pc, #408]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	4962      	ldr	r1, [pc, #392]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800510a:	e05f      	b.n	80051cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d042      	beq.n	800519a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005114:	4b5e      	ldr	r3, [pc, #376]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a5d      	ldr	r2, [pc, #372]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800511a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd f9b6 	bl	8002490 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005128:	f7fd f9b2 	bl	8002490 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e280      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800513a:	4b55      	ldr	r3, [pc, #340]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005146:	f7fd f9d3 	bl	80024f0 <HAL_GetREVID>
 800514a:	4603      	mov	r3, r0
 800514c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005150:	4293      	cmp	r3, r2
 8005152:	d817      	bhi.n	8005184 <HAL_RCC_OscConfig+0x3ec>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	2b20      	cmp	r3, #32
 800515a:	d108      	bne.n	800516e <HAL_RCC_OscConfig+0x3d6>
 800515c:	4b4c      	ldr	r3, [pc, #304]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005164:	4a4a      	ldr	r2, [pc, #296]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800516a:	6053      	str	r3, [r2, #4]
 800516c:	e02e      	b.n	80051cc <HAL_RCC_OscConfig+0x434>
 800516e:	4b48      	ldr	r3, [pc, #288]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	069b      	lsls	r3, r3, #26
 800517c:	4944      	ldr	r1, [pc, #272]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
 8005182:	e023      	b.n	80051cc <HAL_RCC_OscConfig+0x434>
 8005184:	4b42      	ldr	r3, [pc, #264]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	493f      	ldr	r1, [pc, #252]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005194:	4313      	orrs	r3, r2
 8005196:	60cb      	str	r3, [r1, #12]
 8005198:	e018      	b.n	80051cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800519a:	4b3d      	ldr	r3, [pc, #244]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a3c      	ldr	r2, [pc, #240]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80051a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd f973 	bl	8002490 <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051ae:	f7fd f96f 	bl	8002490 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e23d      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051c0:	4b33      	ldr	r3, [pc, #204]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d036      	beq.n	8005246 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d019      	beq.n	8005214 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80051e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fd f950 	bl	8002490 <HAL_GetTick>
 80051f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fd f94c 	bl	8002490 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e21a      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005206:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x45c>
 8005212:	e018      	b.n	8005246 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005214:	4b1e      	ldr	r3, [pc, #120]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005220:	f7fd f936 	bl	8002490 <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005228:	f7fd f932 	bl	8002490 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e200      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800523a:	4b15      	ldr	r3, [pc, #84]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800523c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d039      	beq.n	80052c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01c      	beq.n	8005294 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a0c      	ldr	r2, [pc, #48]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005260:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005266:	f7fd f913 	bl	8002490 <HAL_GetTick>
 800526a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800526e:	f7fd f90f 	bl	8002490 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1dd      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005280:	4b03      	ldr	r3, [pc, #12]	@ (8005290 <HAL_RCC_OscConfig+0x4f8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x4d6>
 800528c:	e01b      	b.n	80052c6 <HAL_RCC_OscConfig+0x52e>
 800528e:	bf00      	nop
 8005290:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005294:	4b9b      	ldr	r3, [pc, #620]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a9a      	ldr	r2, [pc, #616]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800529a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800529e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052a0:	f7fd f8f6 	bl	8002490 <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052a8:	f7fd f8f2 	bl	8002490 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1c0      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052ba:	4b92      	ldr	r3, [pc, #584]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8081 	beq.w	80053d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005508 <HAL_RCC_OscConfig+0x770>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a8b      	ldr	r2, [pc, #556]	@ (8005508 <HAL_RCC_OscConfig+0x770>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052e0:	f7fd f8d6 	bl	8002490 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e8:	f7fd f8d2 	bl	8002490 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	@ 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e1a0      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052fa:	4b83      	ldr	r3, [pc, #524]	@ (8005508 <HAL_RCC_OscConfig+0x770>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d106      	bne.n	800531c <HAL_RCC_OscConfig+0x584>
 800530e:	4b7d      	ldr	r3, [pc, #500]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	4a7c      	ldr	r2, [pc, #496]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6713      	str	r3, [r2, #112]	@ 0x70
 800531a:	e02d      	b.n	8005378 <HAL_RCC_OscConfig+0x5e0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10c      	bne.n	800533e <HAL_RCC_OscConfig+0x5a6>
 8005324:	4b77      	ldr	r3, [pc, #476]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a76      	ldr	r2, [pc, #472]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005330:	4b74      	ldr	r3, [pc, #464]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a73      	ldr	r2, [pc, #460]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x5e0>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x5c8>
 8005346:	4b6f      	ldr	r3, [pc, #444]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	4a6e      	ldr	r2, [pc, #440]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	@ 0x70
 8005352:	4b6c      	ldr	r3, [pc, #432]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a6b      	ldr	r2, [pc, #428]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x5e0>
 8005360:	4b68      	ldr	r3, [pc, #416]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	4a67      	ldr	r2, [pc, #412]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	@ 0x70
 800536c:	4b65      	ldr	r3, [pc, #404]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a64      	ldr	r2, [pc, #400]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fd f886 	bl	8002490 <HAL_GetTick>
 8005384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fd f882 	bl	8002490 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e14e      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800539e:	4b59      	ldr	r3, [pc, #356]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x5f0>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fd f870 	bl	8002490 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fd f86c 	bl	8002490 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e138      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 812d 	beq.w	800563a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053e0:	4b48      	ldr	r3, [pc, #288]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053e8:	2b18      	cmp	r3, #24
 80053ea:	f000 80bd 	beq.w	8005568 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	f040 809e 	bne.w	8005534 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f8:	4b42      	ldr	r3, [pc, #264]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a41      	ldr	r2, [pc, #260]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80053fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fd f844 	bl	8002490 <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540c:	f7fd f840 	bl	8002490 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e10e      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541e:	4b39      	ldr	r3, [pc, #228]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800542a:	4b36      	ldr	r3, [pc, #216]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800542c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800542e:	4b37      	ldr	r3, [pc, #220]	@ (800550c <HAL_RCC_OscConfig+0x774>)
 8005430:	4013      	ands	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	430a      	orrs	r2, r1
 800543e:	4931      	ldr	r1, [pc, #196]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	628b      	str	r3, [r1, #40]	@ 0x28
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	3b01      	subs	r3, #1
 800544a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005452:	3b01      	subs	r3, #1
 8005454:	025b      	lsls	r3, r3, #9
 8005456:	b29b      	uxth	r3, r3
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	3b01      	subs	r3, #1
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546c:	3b01      	subs	r3, #1
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005474:	4923      	ldr	r1, [pc, #140]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005476:	4313      	orrs	r3, r2
 8005478:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800547a:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547e:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005486:	4b1f      	ldr	r3, [pc, #124]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800548a:	4b21      	ldr	r3, [pc, #132]	@ (8005510 <HAL_RCC_OscConfig+0x778>)
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005492:	00d2      	lsls	r2, r2, #3
 8005494:	491b      	ldr	r1, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800549a:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 800549c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549e:	f023 020c 	bic.w	r2, r3, #12
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	4917      	ldr	r1, [pc, #92]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054ac:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	f023 0202 	bic.w	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b8:	4912      	ldr	r1, [pc, #72]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054be:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	4a10      	ldr	r2, [pc, #64]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	4a0a      	ldr	r2, [pc, #40]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80054e2:	4b08      	ldr	r3, [pc, #32]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	4a07      	ldr	r2, [pc, #28]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a04      	ldr	r2, [pc, #16]	@ (8005504 <HAL_RCC_OscConfig+0x76c>)
 80054f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fa:	f7fc ffc9 	bl	8002490 <HAL_GetTick>
 80054fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005500:	e011      	b.n	8005526 <HAL_RCC_OscConfig+0x78e>
 8005502:	bf00      	nop
 8005504:	58024400 	.word	0x58024400
 8005508:	58024800 	.word	0x58024800
 800550c:	fffffc0c 	.word	0xfffffc0c
 8005510:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fc ffbc 	bl	8002490 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e08a      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005526:	4b47      	ldr	r3, [pc, #284]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x77c>
 8005532:	e082      	b.n	800563a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	4b43      	ldr	r3, [pc, #268]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a42      	ldr	r2, [pc, #264]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc ffa6 	bl	8002490 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fc ffa2 	bl	8002490 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e070      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800555a:	4b3a      	ldr	r3, [pc, #232]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x7b0>
 8005566:	e068      	b.n	800563a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005568:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800556e:	4b35      	ldr	r3, [pc, #212]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	2b01      	cmp	r3, #1
 800557a:	d031      	beq.n	80055e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f003 0203 	and.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d12a      	bne.n	80055e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d122      	bne.n	80055e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d11a      	bne.n	80055e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	0a5b      	lsrs	r3, r3, #9
 80055ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d111      	bne.n	80055e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d108      	bne.n	80055e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	0e1b      	lsrs	r3, r3, #24
 80055d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e02b      	b.n	800563c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80055e4:	4b17      	ldr	r3, [pc, #92]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 80055e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d01f      	beq.n	800563a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055fa:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	4a11      	ldr	r2, [pc, #68]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005606:	f7fc ff43 	bl	8002490 <HAL_GetTick>
 800560a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800560c:	bf00      	nop
 800560e:	f7fc ff3f 	bl	8002490 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	4293      	cmp	r3, r2
 8005618:	d0f9      	beq.n	800560e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800561a:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <HAL_RCC_OscConfig+0x8b0>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005626:	00d2      	lsls	r2, r2, #3
 8005628:	4906      	ldr	r1, [pc, #24]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 800562a:	4313      	orrs	r3, r2
 800562c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800562e:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	4a04      	ldr	r2, [pc, #16]	@ (8005644 <HAL_RCC_OscConfig+0x8ac>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3730      	adds	r7, #48	@ 0x30
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	58024400 	.word	0x58024400
 8005648:	ffff0007 	.word	0xffff0007

0800564c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e19c      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005660:	4b8a      	ldr	r3, [pc, #552]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d910      	bls.n	8005690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b87      	ldr	r3, [pc, #540]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 020f 	bic.w	r2, r3, #15
 8005676:	4985      	ldr	r1, [pc, #532]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567e:	4b83      	ldr	r3, [pc, #524]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e184      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d010      	beq.n	80056be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d908      	bls.n	80056be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056ac:	4b78      	ldr	r3, [pc, #480]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4975      	ldr	r1, [pc, #468]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d010      	beq.n	80056ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	4b70      	ldr	r3, [pc, #448]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d908      	bls.n	80056ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056da:	4b6d      	ldr	r3, [pc, #436]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	496a      	ldr	r1, [pc, #424]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699a      	ldr	r2, [r3, #24]
 80056fc:	4b64      	ldr	r3, [pc, #400]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005704:	429a      	cmp	r2, r3
 8005706:	d908      	bls.n	800571a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005708:	4b61      	ldr	r3, [pc, #388]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	495e      	ldr	r1, [pc, #376]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005716:	4313      	orrs	r3, r2
 8005718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d010      	beq.n	8005748 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	4b59      	ldr	r3, [pc, #356]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005732:	429a      	cmp	r2, r3
 8005734:	d908      	bls.n	8005748 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005736:	4b56      	ldr	r3, [pc, #344]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4953      	ldr	r1, [pc, #332]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005744:	4313      	orrs	r3, r2
 8005746:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	4b4d      	ldr	r3, [pc, #308]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	429a      	cmp	r2, r3
 8005762:	d908      	bls.n	8005776 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005764:	4b4a      	ldr	r3, [pc, #296]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f023 020f 	bic.w	r2, r3, #15
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4947      	ldr	r1, [pc, #284]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005772:	4313      	orrs	r3, r2
 8005774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d055      	beq.n	800582e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005782:	4b43      	ldr	r3, [pc, #268]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4940      	ldr	r1, [pc, #256]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005790:	4313      	orrs	r3, r2
 8005792:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d107      	bne.n	80057ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800579c:	4b3c      	ldr	r3, [pc, #240]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d121      	bne.n	80057ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0f6      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d107      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057b4:	4b36      	ldr	r3, [pc, #216]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d115      	bne.n	80057ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0ea      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d107      	bne.n	80057dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057cc:	4b30      	ldr	r3, [pc, #192]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0de      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0d6      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057ec:	4b28      	ldr	r3, [pc, #160]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f023 0207 	bic.w	r2, r3, #7
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4925      	ldr	r1, [pc, #148]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fe:	f7fc fe47 	bl	8002490 <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005804:	e00a      	b.n	800581c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005806:	f7fc fe43 	bl	8002490 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e0be      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581c:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	429a      	cmp	r2, r3
 800582c:	d1eb      	bne.n	8005806 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d010      	beq.n	800585c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	4b14      	ldr	r3, [pc, #80]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	429a      	cmp	r2, r3
 8005848:	d208      	bcs.n	800585c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800584a:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f023 020f 	bic.w	r2, r3, #15
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	490e      	ldr	r1, [pc, #56]	@ (8005890 <HAL_RCC_ClockConfig+0x244>)
 8005858:	4313      	orrs	r3, r2
 800585a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d214      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b08      	ldr	r3, [pc, #32]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 020f 	bic.w	r2, r3, #15
 8005872:	4906      	ldr	r1, [pc, #24]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587a:	4b04      	ldr	r3, [pc, #16]	@ (800588c <HAL_RCC_ClockConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e086      	b.n	800599a <HAL_RCC_ClockConfig+0x34e>
 800588c:	52002000 	.word	0x52002000
 8005890:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d010      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	4b3f      	ldr	r3, [pc, #252]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d208      	bcs.n	80058c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058b0:	4b3c      	ldr	r3, [pc, #240]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	4939      	ldr	r1, [pc, #228]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d010      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	4b34      	ldr	r3, [pc, #208]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058da:	429a      	cmp	r2, r3
 80058dc:	d208      	bcs.n	80058f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058de:	4b31      	ldr	r3, [pc, #196]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	492e      	ldr	r1, [pc, #184]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d010      	beq.n	800591e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	4b28      	ldr	r3, [pc, #160]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005908:	429a      	cmp	r2, r3
 800590a:	d208      	bcs.n	800591e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800590c:	4b25      	ldr	r3, [pc, #148]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	4922      	ldr	r1, [pc, #136]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 800591a:	4313      	orrs	r3, r2
 800591c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d010      	beq.n	800594c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	4b1d      	ldr	r3, [pc, #116]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005936:	429a      	cmp	r2, r3
 8005938:	d208      	bcs.n	800594c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800593a:	4b1a      	ldr	r3, [pc, #104]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	4917      	ldr	r1, [pc, #92]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 8005948:	4313      	orrs	r3, r2
 800594a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800594c:	f000 f89e 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b14      	ldr	r3, [pc, #80]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	4912      	ldr	r1, [pc, #72]	@ (80059a8 <HAL_RCC_ClockConfig+0x35c>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
 8005968:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <HAL_RCC_ClockConfig+0x358>)
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	4a0d      	ldr	r2, [pc, #52]	@ (80059a8 <HAL_RCC_ClockConfig+0x35c>)
 8005974:	5cd3      	ldrb	r3, [r2, r3]
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
 8005980:	4a0a      	ldr	r2, [pc, #40]	@ (80059ac <HAL_RCC_ClockConfig+0x360>)
 8005982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005984:	4a0a      	ldr	r2, [pc, #40]	@ (80059b0 <HAL_RCC_ClockConfig+0x364>)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800598a:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <HAL_RCC_ClockConfig+0x368>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f7fc fd34 	bl	80023fc <HAL_InitTick>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
 80059a8:	0800f754 	.word	0x0800f754
 80059ac:	24000004 	.word	0x24000004
 80059b0:	24000000 	.word	0x24000000
 80059b4:	24000014 	.word	0x24000014

080059b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	@ 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d12a      	bne.n	8005a20 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80059ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 80059cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80059da:	4b29      	ldr	r3, [pc, #164]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 80059dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80059e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	2302      	movs	r3, #2
 80059f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f2:	2303      	movs	r3, #3
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80059fa:	2300      	movs	r3, #0
 80059fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80059fe:	f107 031c 	add.w	r3, r7, #28
 8005a02:	4619      	mov	r1, r3
 8005a04:	481f      	ldr	r0, [pc, #124]	@ (8005a84 <HAL_RCC_MCOConfig+0xcc>)
 8005a06:	f7fd fa6b 	bl	8002ee0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	430b      	orrs	r3, r1
 8005a18:	4919      	ldr	r1, [pc, #100]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005a1e:	e02a      	b.n	8005a76 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005a20:	4b17      	ldr	r3, [pc, #92]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a26:	4a16      	ldr	r2, [pc, #88]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a28:	f043 0304 	orr.w	r3, r3, #4
 8005a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a30:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005a3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005a54:	f107 031c 	add.w	r3, r7, #28
 8005a58:	4619      	mov	r1, r3
 8005a5a:	480b      	ldr	r0, [pc, #44]	@ (8005a88 <HAL_RCC_MCOConfig+0xd0>)
 8005a5c:	f7fd fa40 	bl	8002ee0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005a60:	4b07      	ldr	r3, [pc, #28]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	01d9      	lsls	r1, r3, #7
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	4903      	ldr	r1, [pc, #12]	@ (8005a80 <HAL_RCC_MCOConfig+0xc8>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]
}
 8005a76:	bf00      	nop
 8005a78:	3730      	adds	r7, #48	@ 0x30
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400
 8005a84:	58020000 	.word	0x58020000
 8005a88:	58020800 	.word	0x58020800

08005a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a92:	4bb3      	ldr	r3, [pc, #716]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a9a:	2b18      	cmp	r3, #24
 8005a9c:	f200 8155 	bhi.w	8005d4a <HAL_RCC_GetSysClockFreq+0x2be>
 8005aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005d4b 	.word	0x08005d4b
 8005ab0:	08005d4b 	.word	0x08005d4b
 8005ab4:	08005d4b 	.word	0x08005d4b
 8005ab8:	08005d4b 	.word	0x08005d4b
 8005abc:	08005d4b 	.word	0x08005d4b
 8005ac0:	08005d4b 	.word	0x08005d4b
 8005ac4:	08005d4b 	.word	0x08005d4b
 8005ac8:	08005b33 	.word	0x08005b33
 8005acc:	08005d4b 	.word	0x08005d4b
 8005ad0:	08005d4b 	.word	0x08005d4b
 8005ad4:	08005d4b 	.word	0x08005d4b
 8005ad8:	08005d4b 	.word	0x08005d4b
 8005adc:	08005d4b 	.word	0x08005d4b
 8005ae0:	08005d4b 	.word	0x08005d4b
 8005ae4:	08005d4b 	.word	0x08005d4b
 8005ae8:	08005b39 	.word	0x08005b39
 8005aec:	08005d4b 	.word	0x08005d4b
 8005af0:	08005d4b 	.word	0x08005d4b
 8005af4:	08005d4b 	.word	0x08005d4b
 8005af8:	08005d4b 	.word	0x08005d4b
 8005afc:	08005d4b 	.word	0x08005d4b
 8005b00:	08005d4b 	.word	0x08005d4b
 8005b04:	08005d4b 	.word	0x08005d4b
 8005b08:	08005b3f 	.word	0x08005b3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b0c:	4b94      	ldr	r3, [pc, #592]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b18:	4b91      	ldr	r3, [pc, #580]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	08db      	lsrs	r3, r3, #3
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	4a90      	ldr	r2, [pc, #576]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b2a:	e111      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b2e:	61bb      	str	r3, [r7, #24]
      break;
 8005b30:	e10e      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b32:	4b8d      	ldr	r3, [pc, #564]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b34:	61bb      	str	r3, [r7, #24]
      break;
 8005b36:	e10b      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b38:	4b8c      	ldr	r3, [pc, #560]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b3a:	61bb      	str	r3, [r7, #24]
      break;
 8005b3c:	e108      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b3e:	4b88      	ldr	r3, [pc, #544]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b48:	4b85      	ldr	r3, [pc, #532]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b54:	4b82      	ldr	r3, [pc, #520]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b5e:	4b80      	ldr	r3, [pc, #512]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80e1 	beq.w	8005d44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	f000 8083 	beq.w	8005c90 <HAL_RCC_GetSysClockFreq+0x204>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	f200 80a1 	bhi.w	8005cd4 <HAL_RCC_GetSysClockFreq+0x248>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x114>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d056      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b9e:	e099      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02d      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bac:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	4a6b      	ldr	r2, [pc, #428]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b62      	ldr	r3, [pc, #392]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c06:	e087      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b51      	ldr	r3, [pc, #324]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c4a:	e065      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b40      	ldr	r3, [pc, #256]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c8e:	e043      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cd2:	e021      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cfa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d18:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1c:	0a5b      	lsrs	r3, r3, #9
 8005d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d22:	3301      	adds	r3, #1
 8005d24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d3c:	ee17 3a90 	vmov	r3, s15
 8005d40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d42:	e005      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
      break;
 8005d48:	e002      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d4a:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d4c:	61bb      	str	r3, [r7, #24]
      break;
 8005d4e:	bf00      	nop
  }

  return sysclockfreq;
 8005d50:	69bb      	ldr	r3, [r7, #24]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3724      	adds	r7, #36	@ 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400
 8005d64:	03d09000 	.word	0x03d09000
 8005d68:	003d0900 	.word	0x003d0900
 8005d6c:	017d7840 	.word	0x017d7840
 8005d70:	46000000 	.word	0x46000000
 8005d74:	4c742400 	.word	0x4c742400
 8005d78:	4a742400 	.word	0x4a742400
 8005d7c:	4bbebc20 	.word	0x4bbebc20

08005d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d86:	f7ff fe81 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b10      	ldr	r3, [pc, #64]	@ (8005dd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	490f      	ldr	r1, [pc, #60]	@ (8005dd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d98:	5ccb      	ldrb	r3, [r1, r3]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005da2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	4a09      	ldr	r2, [pc, #36]	@ (8005dd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dae:	5cd3      	ldrb	r3, [r2, r3]
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	4a07      	ldr	r2, [pc, #28]	@ (8005dd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dbe:	4a07      	ldr	r2, [pc, #28]	@ (8005ddc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005dc4:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	0800f754 	.word	0x0800f754
 8005dd8:	24000004 	.word	0x24000004
 8005ddc:	24000000 	.word	0x24000000

08005de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005de4:	f7ff ffcc 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	091b      	lsrs	r3, r3, #4
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	4904      	ldr	r1, [pc, #16]	@ (8005e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005df6:	5ccb      	ldrb	r3, [r1, r3]
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	58024400 	.word	0x58024400
 8005e08:	0800f754 	.word	0x0800f754

08005e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e10:	f7ff ffb6 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005e14:	4602      	mov	r2, r0
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4904      	ldr	r1, [pc, #16]	@ (8005e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e22:	5ccb      	ldrb	r3, [r1, r3]
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	58024400 	.word	0x58024400
 8005e34:	0800f754 	.word	0x0800f754

08005e38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e3c:	b0cc      	sub	sp, #304	@ 0x130
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e62:	d049      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e6e:	d02f      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e74:	d828      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e7a:	d01a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e80:	d822      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e8a:	d007      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e8c:	e01c      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8e:	4bb8      	ldr	r3, [pc, #736]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	4ab7      	ldr	r2, [pc, #732]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e9a:	e01a      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f002 fba1 	bl	80085ec <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eb0:	e00f      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb6:	3328      	adds	r3, #40	@ 0x28
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f002 fc48 	bl	8008750 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ec6:	e004      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ece:	e000      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005eda:	4ba5      	ldr	r3, [pc, #660]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ede:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ee8:	4aa1      	ldr	r2, [pc, #644]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eee:	e003      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ef4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f04:	f04f 0900 	mov.w	r9, #0
 8005f08:	ea58 0309 	orrs.w	r3, r8, r9
 8005f0c:	d047      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d82a      	bhi.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f18:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f35 	.word	0x08005f35
 8005f24:	08005f43 	.word	0x08005f43
 8005f28:	08005f59 	.word	0x08005f59
 8005f2c:	08005f77 	.word	0x08005f77
 8005f30:	08005f77 	.word	0x08005f77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f34:	4b8e      	ldr	r3, [pc, #568]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	4a8d      	ldr	r2, [pc, #564]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f40:	e01a      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f46:	3308      	adds	r3, #8
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f002 fb4e 	bl	80085ec <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f56:	e00f      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5c:	3328      	adds	r3, #40	@ 0x28
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f002 fbf5 	bl	8008750 <RCCEx_PLL3_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f6c:	e004      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f74:	e000      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f80:	4b7b      	ldr	r3, [pc, #492]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f84:	f023 0107 	bic.w	r1, r3, #7
 8005f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8e:	4a78      	ldr	r2, [pc, #480]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005faa:	f04f 0b00 	mov.w	fp, #0
 8005fae:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fb2:	d04c      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fbe:	d030      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fc4:	d829      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fc8:	d02d      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005fca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fcc:	d825      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fce:	2b80      	cmp	r3, #128	@ 0x80
 8005fd0:	d018      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005fd2:	2b80      	cmp	r3, #128	@ 0x80
 8005fd4:	d821      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d007      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005fde:	e01c      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe0:	4b63      	ldr	r3, [pc, #396]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	4a62      	ldr	r2, [pc, #392]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005fec:	e01c      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 faf8 	bl	80085ec <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006002:	e011      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006008:	3328      	adds	r3, #40	@ 0x28
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f002 fb9f 	bl	8008750 <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006028:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006030:	4b4f      	ldr	r3, [pc, #316]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800603c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603e:	4a4c      	ldr	r2, [pc, #304]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006040:	430b      	orrs	r3, r1
 8006042:	6513      	str	r3, [r2, #80]	@ 0x50
 8006044:	e003      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006046:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800604a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800604e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800605a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800605e:	2300      	movs	r3, #0
 8006060:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006064:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8006068:	460b      	mov	r3, r1
 800606a:	4313      	orrs	r3, r2
 800606c:	d053      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800606e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006076:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800607a:	d035      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800607c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006080:	d82e      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006082:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006086:	d031      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006088:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800608c:	d828      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800608e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006092:	d01a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006098:	d822      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800609e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060a2:	d007      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80060a4:	e01c      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a6:	4b32      	ldr	r3, [pc, #200]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	4a31      	ldr	r2, [pc, #196]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060b2:	e01c      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060b8:	3308      	adds	r3, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f002 fa95 	bl	80085ec <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060c8:	e011      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ce:	3328      	adds	r3, #40	@ 0x28
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f002 fb3c 	bl	8008750 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060de:	e006      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060e6:	e002      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060e8:	bf00      	nop
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80060fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006106:	4a1a      	ldr	r2, [pc, #104]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6593      	str	r3, [r2, #88]	@ 0x58
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006112:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006122:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800612c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d056      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800613e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006142:	d038      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006148:	d831      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800614a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800614e:	d034      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006150:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006154:	d82b      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800615a:	d01d      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800615c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006160:	d825      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800616a:	d00a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800616c:	e01f      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006174:	4ba2      	ldr	r3, [pc, #648]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4aa1      	ldr	r2, [pc, #644]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800617a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006180:	e01c      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006186:	3308      	adds	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fa2e 	bl	80085ec <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006196:	e011      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619c:	3328      	adds	r3, #40	@ 0x28
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 fad5 	bl	8008750 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061ac:	e006      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061b4:	e002      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10b      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80061cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061d4:	4a8a      	ldr	r2, [pc, #552]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061da:	e003      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80061f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061fa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80061fe:	460b      	mov	r3, r1
 8006200:	4313      	orrs	r3, r2
 8006202:	d03a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006204:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620a:	2b30      	cmp	r3, #48	@ 0x30
 800620c:	d01f      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800620e:	2b30      	cmp	r3, #48	@ 0x30
 8006210:	d819      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006212:	2b20      	cmp	r3, #32
 8006214:	d00c      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006216:	2b20      	cmp	r3, #32
 8006218:	d815      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d019      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800621e:	2b10      	cmp	r3, #16
 8006220:	d111      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006222:	4b77      	ldr	r3, [pc, #476]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	4a76      	ldr	r2, [pc, #472]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800622c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800622e:	e011      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006234:	3308      	adds	r3, #8
 8006236:	2102      	movs	r1, #2
 8006238:	4618      	mov	r0, r3
 800623a:	f002 f9d7 	bl	80085ec <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006254:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800625c:	4b68      	ldr	r3, [pc, #416]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800625e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006260:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626a:	4a65      	ldr	r2, [pc, #404]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800626c:	430b      	orrs	r3, r1
 800626e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006270:	e003      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006276:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800627a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006286:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800628a:	2300      	movs	r3, #0
 800628c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006290:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d051      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800629a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800629e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062a4:	d035      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80062a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062aa:	d82e      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062b0:	d031      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80062b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062b6:	d828      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062bc:	d01a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c2:	d822      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062cc:	d007      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80062ce:	e01c      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062dc:	e01c      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e2:	3308      	adds	r3, #8
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 f980 	bl	80085ec <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062f2:	e011      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062f8:	3328      	adds	r3, #40	@ 0x28
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f002 fa27 	bl	8008750 <RCCEx_PLL3_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006310:	e002      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006318:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006320:	4b37      	ldr	r3, [pc, #220]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006324:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800632c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800632e:	4a34      	ldr	r2, [pc, #208]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006330:	430b      	orrs	r3, r1
 8006332:	6513      	str	r3, [r2, #80]	@ 0x50
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800633a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800633e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800634a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006354:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d056      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800635e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006368:	d033      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800636a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800636e:	d82c      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006370:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006374:	d02f      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006376:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800637a:	d826      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800637c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006380:	d02b      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006386:	d820      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800638c:	d012      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800638e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006392:	d81a      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d022      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800639c:	d115      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800639e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a2:	3308      	adds	r3, #8
 80063a4:	2101      	movs	r1, #1
 80063a6:	4618      	mov	r0, r3
 80063a8:	f002 f920 	bl	80085ec <RCCEx_PLL2_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063b2:	e015      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b8:	3328      	adds	r3, #40	@ 0x28
 80063ba:	2101      	movs	r1, #1
 80063bc:	4618      	mov	r0, r3
 80063be:	f002 f9c7 	bl	8008750 <RCCEx_PLL3_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00a      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063d0:	e006      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063d2:	bf00      	nop
 80063d4:	e004      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80063f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063f6:	4a02      	ldr	r2, [pc, #8]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80063fc:	e006      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063fe:	bf00      	nop
 8006400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006408:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800640c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006418:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006422:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006426:	460b      	mov	r3, r1
 8006428:	4313      	orrs	r3, r2
 800642a:	d055      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800642c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006438:	d033      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800643a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800643e:	d82c      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006444:	d02f      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644a:	d826      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800644c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006450:	d02b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006452:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006456:	d820      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645c:	d012      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800645e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006462:	d81a      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d022      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800646c:	d115      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006472:	3308      	adds	r3, #8
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f002 f8b8 	bl	80085ec <RCCEx_PLL2_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006482:	e015      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006488:	3328      	adds	r3, #40	@ 0x28
 800648a:	2101      	movs	r1, #1
 800648c:	4618      	mov	r0, r3
 800648e:	f002 f95f 	bl	8008750 <RCCEx_PLL3_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006498:	e00a      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064a0:	e006      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064a2:	bf00      	nop
 80064a4:	e004      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064b8:	4bb6      	ldr	r3, [pc, #728]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064bc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064c8:	4ab2      	ldr	r2, [pc, #712]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ce:	e003      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80064d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80064e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d02a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80064f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d011      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006506:	d10a      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800650c:	3308      	adds	r3, #8
 800650e:	2101      	movs	r1, #1
 8006510:	4618      	mov	r0, r3
 8006512:	f002 f86b 	bl	80085ec <RCCEx_PLL2_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800651c:	e004      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8006526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006528:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006530:	4b98      	ldr	r3, [pc, #608]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006534:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653e:	4a95      	ldr	r2, [pc, #596]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006540:	430b      	orrs	r3, r1
 8006542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006544:	e003      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800654a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800654e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800655a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800655e:	2300      	movs	r3, #0
 8006560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006564:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006568:	460b      	mov	r3, r1
 800656a:	4313      	orrs	r3, r2
 800656c:	d037      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800656e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006578:	d00e      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800657a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800657e:	d816      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d018      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006588:	d111      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800658a:	4b82      	ldr	r3, [pc, #520]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	4a81      	ldr	r2, [pc, #516]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006596:	e00f      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659c:	3308      	adds	r3, #8
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 f823 	bl	80085ec <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065ac:	e004      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065b4:	e000      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80065b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065c0:	4b74      	ldr	r3, [pc, #464]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80065c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ce:	4a71      	ldr	r2, [pc, #452]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d4:	e003      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80065ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065f4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d03a      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006604:	2b03      	cmp	r3, #3
 8006606:	d81d      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006608:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	0800664d 	.word	0x0800664d
 8006614:	08006621 	.word	0x08006621
 8006618:	0800662f 	.word	0x0800662f
 800661c:	0800664d 	.word	0x0800664d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4b5c      	ldr	r3, [pc, #368]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	4a5b      	ldr	r2, [pc, #364]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800662c:	e00f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800662e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006632:	3308      	adds	r3, #8
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f001 ffd8 	bl	80085ec <RCCEx_PLL2_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006656:	4b4f      	ldr	r3, [pc, #316]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800665a:	f023 0103 	bic.w	r1, r3, #3
 800665e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006664:	4a4b      	ldr	r2, [pc, #300]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006666:	430b      	orrs	r3, r1
 8006668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006670:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006680:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800668a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	f000 80a0 	beq.w	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006696:	4b40      	ldr	r3, [pc, #256]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a3f      	ldr	r2, [pc, #252]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066a2:	f7fb fef5 	bl	8002490 <HAL_GetTick>
 80066a6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ac:	f7fb fef0 	bl	8002490 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b64      	cmp	r3, #100	@ 0x64
 80066ba:	d903      	bls.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066c2:	e005      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c4:	4b34      	ldr	r3, [pc, #208]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ed      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80066d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d17a      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066e4:	4053      	eors	r3, r2
 80066e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d015      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ee:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066fa:	4b26      	ldr	r3, [pc, #152]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fe:	4a25      	ldr	r2, [pc, #148]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006704:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006706:	4b23      	ldr	r3, [pc, #140]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	4a22      	ldr	r2, [pc, #136]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800670c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006710:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006712:	4a20      	ldr	r2, [pc, #128]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006714:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006718:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800671a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800671e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006726:	d118      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006728:	f7fb feb2 	bl	8002490 <HAL_GetTick>
 800672c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006730:	e00d      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fb fead 	bl	8002490 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006742:	429a      	cmp	r2, r3
 8006744:	d903      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800674c:	e005      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800674e:	4b11      	ldr	r3, [pc, #68]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0eb      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800675a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800675e:	2b00      	cmp	r3, #0
 8006760:	d130      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006766:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800676a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800676e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006772:	d115      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006774:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800677c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006780:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006784:	091a      	lsrs	r2, r3, #4
 8006786:	4b05      	ldr	r3, [pc, #20]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006788:	4013      	ands	r3, r2
 800678a:	4a02      	ldr	r2, [pc, #8]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800678c:	430b      	orrs	r3, r1
 800678e:	6113      	str	r3, [r2, #16]
 8006790:	e00c      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x974>
 8006792:	bf00      	nop
 8006794:	58024400 	.word	0x58024400
 8006798:	58024800 	.word	0x58024800
 800679c:	00ffffcf 	.word	0x00ffffcf
 80067a0:	4bd4      	ldr	r3, [pc, #848]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	4ad3      	ldr	r2, [pc, #844]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80067aa:	6113      	str	r3, [r2, #16]
 80067ac:	4bd1      	ldr	r3, [pc, #836]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067ae:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80067b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067bc:	4acd      	ldr	r2, [pc, #820]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c2:	e008      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f002 0301 	and.w	r3, r2, #1
 80067e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067e6:	2300      	movs	r3, #0
 80067e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f000 808b 	beq.w	800690e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006800:	2b28      	cmp	r3, #40	@ 0x28
 8006802:	d86b      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006804:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	080068e5 	.word	0x080068e5
 8006810:	080068dd 	.word	0x080068dd
 8006814:	080068dd 	.word	0x080068dd
 8006818:	080068dd 	.word	0x080068dd
 800681c:	080068dd 	.word	0x080068dd
 8006820:	080068dd 	.word	0x080068dd
 8006824:	080068dd 	.word	0x080068dd
 8006828:	080068dd 	.word	0x080068dd
 800682c:	080068b1 	.word	0x080068b1
 8006830:	080068dd 	.word	0x080068dd
 8006834:	080068dd 	.word	0x080068dd
 8006838:	080068dd 	.word	0x080068dd
 800683c:	080068dd 	.word	0x080068dd
 8006840:	080068dd 	.word	0x080068dd
 8006844:	080068dd 	.word	0x080068dd
 8006848:	080068dd 	.word	0x080068dd
 800684c:	080068c7 	.word	0x080068c7
 8006850:	080068dd 	.word	0x080068dd
 8006854:	080068dd 	.word	0x080068dd
 8006858:	080068dd 	.word	0x080068dd
 800685c:	080068dd 	.word	0x080068dd
 8006860:	080068dd 	.word	0x080068dd
 8006864:	080068dd 	.word	0x080068dd
 8006868:	080068dd 	.word	0x080068dd
 800686c:	080068e5 	.word	0x080068e5
 8006870:	080068dd 	.word	0x080068dd
 8006874:	080068dd 	.word	0x080068dd
 8006878:	080068dd 	.word	0x080068dd
 800687c:	080068dd 	.word	0x080068dd
 8006880:	080068dd 	.word	0x080068dd
 8006884:	080068dd 	.word	0x080068dd
 8006888:	080068dd 	.word	0x080068dd
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068dd 	.word	0x080068dd
 8006894:	080068dd 	.word	0x080068dd
 8006898:	080068dd 	.word	0x080068dd
 800689c:	080068dd 	.word	0x080068dd
 80068a0:	080068dd 	.word	0x080068dd
 80068a4:	080068dd 	.word	0x080068dd
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080068e5 	.word	0x080068e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068b4:	3308      	adds	r3, #8
 80068b6:	2101      	movs	r1, #1
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fe97 	bl	80085ec <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068c4:	e00f      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068ca:	3328      	adds	r3, #40	@ 0x28
 80068cc:	2101      	movs	r1, #1
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 ff3e 	bl	8008750 <RCCEx_PLL3_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068da:	e004      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068e2:	e000      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80068e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10b      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068ee:	4b81      	ldr	r3, [pc, #516]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80068f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fe:	4a7d      	ldr	r2, [pc, #500]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006900:	430b      	orrs	r3, r1
 8006902:	6553      	str	r3, [r2, #84]	@ 0x54
 8006904:	e003      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800690a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800690e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f002 0302 	and.w	r3, r2, #2
 800691a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800691e:	2300      	movs	r3, #0
 8006920:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006924:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d042      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800692e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006934:	2b05      	cmp	r3, #5
 8006936:	d825      	bhi.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	0800698d 	.word	0x0800698d
 8006944:	08006959 	.word	0x08006959
 8006948:	0800696f 	.word	0x0800696f
 800694c:	0800698d 	.word	0x0800698d
 8006950:	0800698d 	.word	0x0800698d
 8006954:	0800698d 	.word	0x0800698d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800695c:	3308      	adds	r3, #8
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fe43 	bl	80085ec <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800696c:	e00f      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800696e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006972:	3328      	adds	r3, #40	@ 0x28
 8006974:	2101      	movs	r1, #1
 8006976:	4618      	mov	r0, r3
 8006978:	f001 feea 	bl	8008750 <RCCEx_PLL3_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006982:	e004      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006996:	4b57      	ldr	r3, [pc, #348]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699a:	f023 0107 	bic.w	r1, r3, #7
 800699e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069a4:	4a53      	ldr	r2, [pc, #332]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80069a6:	430b      	orrs	r3, r1
 80069a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f002 0304 	and.w	r3, r2, #4
 80069c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4313      	orrs	r3, r2
 80069d2:	d044      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d825      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80069e0:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a04:	3308      	adds	r3, #8
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fdef 	bl	80085ec <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a14:	e00f      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a1a:	3328      	adds	r3, #40	@ 0x28
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fe96 	bl	8008750 <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a42:	f023 0107 	bic.w	r1, r3, #7
 8006a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a4e:	4a29      	ldr	r2, [pc, #164]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f002 0320 	and.w	r3, r2, #32
 8006a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	d057      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a8a:	d035      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a90:	d82c      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a96:	d031      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9c:	d826      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006a9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006aa2:	d02d      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006aa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006aa8:	d820      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aae:	d012      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ab4:	d81a      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d024      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006abe:	d115      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fd8f 	bl	80085ec <RCCEx_PLL2_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e017      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ada:	3328      	adds	r3, #40	@ 0x28
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 fe36 	bl	8008750 <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006aea:	e00c      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006af2:	e008      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006af4:	58024400 	.word	0x58024400
        break;
 8006af8:	bf00      	nop
 8006afa:	e004      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b0e:	4bc2      	ldr	r3, [pc, #776]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b1e:	4abe      	ldr	r2, [pc, #760]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b24:	e003      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	d055      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b56:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b5a:	d033      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006b5c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b60:	d82c      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b66:	d02f      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6c:	d826      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b72:	d02b      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006b74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b78:	d820      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b7e:	d012      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b84:	d81a      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d022      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8e:	d115      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b94:	3308      	adds	r3, #8
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 fd27 	bl	80085ec <RCCEx_PLL2_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ba4:	e015      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006baa:	3328      	adds	r3, #40	@ 0x28
 8006bac:	2102      	movs	r1, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fdce 	bl	8008750 <RCCEx_PLL3_Config>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bba:	e00a      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006bc2:	e006      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bc4:	bf00      	nop
 8006bc6:	e004      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bda:	4b8f      	ldr	r3, [pc, #572]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bde:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006be6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bea:	4a8b      	ldr	r2, [pc, #556]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bf0:	e003      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006c06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c10:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c14:	460b      	mov	r3, r1
 8006c16:	4313      	orrs	r3, r2
 8006c18:	d055      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c26:	d033      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006c28:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006c2c:	d82c      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c32:	d02f      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c38:	d826      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c3e:	d02b      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006c40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c44:	d820      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c4a:	d012      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c50:	d81a      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d022      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c5a:	d115      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c60:	3308      	adds	r3, #8
 8006c62:	2100      	movs	r1, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fcc1 	bl	80085ec <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c70:	e015      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c76:	3328      	adds	r3, #40	@ 0x28
 8006c78:	2102      	movs	r1, #2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 fd68 	bl	8008750 <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c86:	e00a      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c8e:	e006      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c90:	bf00      	nop
 8006c92:	e004      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c94:	bf00      	nop
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c98:	bf00      	nop
 8006c9a:	e000      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10b      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006caa:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cb6:	4a58      	ldr	r2, [pc, #352]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cbc:	e003      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cc2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f002 0308 	and.w	r3, r2, #8
 8006cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cdc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	d01e      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf2:	d10c      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cf8:	3328      	adds	r3, #40	@ 0x28
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fd27 	bl	8008750 <RCCEx_PLL3_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d0e:	4b42      	ldr	r3, [pc, #264]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f002 0310 	and.w	r3, r2, #16
 8006d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d34:	2300      	movs	r3, #0
 8006d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d01e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d50:	d10c      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d56:	3328      	adds	r3, #40	@ 0x28
 8006d58:	2102      	movs	r1, #2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fcf8 	bl	8008750 <RCCEx_PLL3_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d7c:	4a26      	ldr	r2, [pc, #152]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d92:	2300      	movs	r3, #0
 8006d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	d040      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dae:	d022      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006db4:	d81b      	bhi.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dbe:	d00b      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006dc0:	e015      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 fc0e 	bl	80085ec <RCCEx_PLL2_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dd6:	e00f      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ddc:	3328      	adds	r3, #40	@ 0x28
 8006dde:	2102      	movs	r1, #2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 fcb5 	bl	8008750 <RCCEx_PLL3_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dec:	e004      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10d      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e00:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e04:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e10:	4a01      	ldr	r2, [pc, #4]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e12:	430b      	orrs	r3, r1
 8006e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e16:	e005      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006e18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e32:	2300      	movs	r3, #0
 8006e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	d03b      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e4c:	d01f      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006e4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e52:	d818      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e58:	d003      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006e5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e5e:	d007      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006e60:	e011      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e62:	4b64      	ldr	r3, [pc, #400]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	4a63      	ldr	r2, [pc, #396]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e6e:	e00f      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e74:	3328      	adds	r3, #40	@ 0x28
 8006e76:	2101      	movs	r1, #1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 fc69 	bl	8008750 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e84:	e004      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006e8c:	e000      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10b      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e98:	4b56      	ldr	r3, [pc, #344]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e9c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ea8:	4a52      	ldr	r2, [pc, #328]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8006eae:	e003      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006eb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006ec4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	677b      	str	r3, [r7, #116]	@ 0x74
 8006eca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d031      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee2:	d007      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006ee4:	e011      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee6:	4b43      	ldr	r3, [pc, #268]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eea:	4a42      	ldr	r2, [pc, #264]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ef2:	e00e      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ef8:	3308      	adds	r3, #8
 8006efa:	2102      	movs	r1, #2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 fb75 	bl	80085ec <RCCEx_PLL2_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f08:	e003      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f1a:	4b36      	ldr	r3, [pc, #216]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f28:	4a32      	ldr	r2, [pc, #200]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f2e:	e003      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f46:	2300      	movs	r3, #0
 8006f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d00c      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f58:	3328      	adds	r3, #40	@ 0x28
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 fbf7 	bl	8008750 <RCCEx_PLL3_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f84:	460b      	mov	r3, r1
 8006f86:	4313      	orrs	r3, r2
 8006f88:	d03a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f96:	d018      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f9c:	d811      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa2:	d014      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa8:	d80b      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d011      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006fc8:	e004      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e002      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fce:	bf00      	nop
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10d      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fec:	4a01      	ldr	r2, [pc, #4]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ff2:	e005      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ffc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800700c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800700e:	2300      	movs	r3, #0
 8007010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007012:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007016:	460b      	mov	r3, r1
 8007018:	4313      	orrs	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800701c:	4baa      	ldr	r3, [pc, #680]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800701e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007020:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800702a:	4aa7      	ldr	r2, [pc, #668]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800703c:	653b      	str	r3, [r7, #80]	@ 0x50
 800703e:	2300      	movs	r3, #0
 8007040:	657b      	str	r3, [r7, #84]	@ 0x54
 8007042:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007046:	460b      	mov	r3, r1
 8007048:	4313      	orrs	r3, r2
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800704c:	4b9e      	ldr	r3, [pc, #632]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007058:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800705c:	4a9a      	ldr	r2, [pc, #616]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800705e:	430b      	orrs	r3, r1
 8007060:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800706e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007070:	2300      	movs	r3, #0
 8007072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007074:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d009      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800707e:	4b92      	ldr	r3, [pc, #584]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007082:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800708a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708c:	4a8e      	ldr	r2, [pc, #568]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800709e:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a0:	2300      	movs	r3, #0
 80070a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80070a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80070a8:	460b      	mov	r3, r1
 80070aa:	4313      	orrs	r3, r2
 80070ac:	d00e      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ae:	4b86      	ldr	r3, [pc, #536]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	4a85      	ldr	r2, [pc, #532]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070b8:	6113      	str	r3, [r2, #16]
 80070ba:	4b83      	ldr	r3, [pc, #524]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070bc:	6919      	ldr	r1, [r3, #16]
 80070be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80070c6:	4a80      	ldr	r2, [pc, #512]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80070d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070da:	2300      	movs	r3, #0
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070e8:	4b77      	ldr	r3, [pc, #476]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f6:	4a74      	ldr	r2, [pc, #464]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80070f8:	430b      	orrs	r3, r1
 80070fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007108:	633b      	str	r3, [r7, #48]	@ 0x30
 800710a:	2300      	movs	r3, #0
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
 800710e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007112:	460b      	mov	r3, r1
 8007114:	4313      	orrs	r3, r2
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007118:	4b6b      	ldr	r3, [pc, #428]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800711a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007128:	4a67      	ldr	r2, [pc, #412]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800712a:	430b      	orrs	r3, r1
 800712c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800712e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	2100      	movs	r1, #0
 8007138:	62b9      	str	r1, [r7, #40]	@ 0x28
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007140:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007144:	460b      	mov	r3, r1
 8007146:	4313      	orrs	r3, r2
 8007148:	d011      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800714a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800714e:	3308      	adds	r3, #8
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fa4a 	bl	80085ec <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800715e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800716a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800716e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	2100      	movs	r1, #0
 8007178:	6239      	str	r1, [r7, #32]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007180:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d011      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800718e:	3308      	adds	r3, #8
 8007190:	2101      	movs	r1, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f001 fa2a 	bl	80085ec <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800719e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	2100      	movs	r1, #0
 80071b8:	61b9      	str	r1, [r7, #24]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071c4:	460b      	mov	r3, r1
 80071c6:	4313      	orrs	r3, r2
 80071c8:	d011      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ce:	3308      	adds	r3, #8
 80071d0:	2102      	movs	r1, #2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 fa0a 	bl	80085ec <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80071de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80071ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	2100      	movs	r1, #0
 80071f8:	6139      	str	r1, [r7, #16]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007204:	460b      	mov	r3, r1
 8007206:	4313      	orrs	r3, r2
 8007208:	d011      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800720a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800720e:	3328      	adds	r3, #40	@ 0x28
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fa9c 	bl	8008750 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800721e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007226:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800722a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800722e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	2100      	movs	r1, #0
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007244:	460b      	mov	r3, r1
 8007246:	4313      	orrs	r3, r2
 8007248:	d011      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800724a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800724e:	3328      	adds	r3, #40	@ 0x28
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fa7c 	bl	8008750 <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800725e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007266:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800726a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800726e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	2100      	movs	r1, #0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007284:	460b      	mov	r3, r1
 8007286:	4313      	orrs	r3, r2
 8007288:	d011      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800728a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800728e:	3328      	adds	r3, #40	@ 0x28
 8007290:	2102      	movs	r1, #2
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fa5c 	bl	8008750 <RCCEx_PLL3_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800729e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80072ae:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e000      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
}
 80072bc:	4618      	mov	r0, r3
 80072be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80072c2:	46bd      	mov	sp, r7
 80072c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072c8:	58024400 	.word	0x58024400

080072cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b090      	sub	sp, #64	@ 0x40
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072da:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80072de:	430b      	orrs	r3, r1
 80072e0:	f040 8094 	bne.w	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80072e4:	4b9e      	ldr	r3, [pc, #632]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	f200 8087 	bhi.w	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80072f6:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	08007311 	.word	0x08007311
 8007300:	08007339 	.word	0x08007339
 8007304:	08007361 	.word	0x08007361
 8007308:	080073fd 	.word	0x080073fd
 800730c:	08007389 	.word	0x08007389
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007310:	4b93      	ldr	r3, [pc, #588]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800731c:	d108      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f810 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800732c:	f000 bd45 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007334:	f000 bd41 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007338:	4b89      	ldr	r3, [pc, #548]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007344:	d108      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007346:	f107 0318 	add.w	r3, r7, #24
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fd54 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007354:	f000 bd31 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800735c:	f000 bd2d 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007360:	4b7f      	ldr	r3, [pc, #508]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800736c:	d108      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fe94 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800737c:	f000 bd1d 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007384:	f000 bd19 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007388:	4b75      	ldr	r3, [pc, #468]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800738a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007392:	4b73      	ldr	r3, [pc, #460]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b04      	cmp	r3, #4
 800739c:	d10c      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	08db      	lsrs	r3, r3, #3
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
 80073b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b6:	e01f      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073b8:	4b69      	ldr	r3, [pc, #420]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c4:	d106      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80073c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073cc:	d102      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073ce:	4b66      	ldr	r3, [pc, #408]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d2:	e011      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073d4:	4b62      	ldr	r3, [pc, #392]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073e0:	d106      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80073e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e8:	d102      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073ea:	4b60      	ldr	r3, [pc, #384]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80073ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ee:	e003      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073f4:	f000 bce1 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073f8:	f000 bcdf 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80073fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007400:	f000 bcdb 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007408:	f000 bcd7 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800740c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007410:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007414:	430b      	orrs	r3, r1
 8007416:	f040 80ad 	bne.w	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800741a:	4b51      	ldr	r3, [pc, #324]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800741c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007422:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742a:	d056      	beq.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007432:	f200 8090 	bhi.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	2bc0      	cmp	r3, #192	@ 0xc0
 800743a:	f000 8088 	beq.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	2bc0      	cmp	r3, #192	@ 0xc0
 8007442:	f200 8088 	bhi.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	2b80      	cmp	r3, #128	@ 0x80
 800744a:	d032      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	2b80      	cmp	r3, #128	@ 0x80
 8007450:	f200 8081 	bhi.w	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	2b40      	cmp	r3, #64	@ 0x40
 800745e:	d014      	beq.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007460:	e079      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007462:	4b3f      	ldr	r3, [pc, #252]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800746a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800746e:	d108      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007474:	4618      	mov	r0, r3
 8007476:	f000 ff67 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800747e:	f000 bc9c 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007486:	f000 bc98 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800748a:	4b35      	ldr	r3, [pc, #212]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007496:	d108      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007498:	f107 0318 	add.w	r3, r7, #24
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fcab 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a6:	f000 bc88 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ae:	f000 bc84 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074be:	d108      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fdeb 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ce:	f000 bc74 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d6:	f000 bc70 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074da:	4b21      	ldr	r3, [pc, #132]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d10c      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	4a18      	ldr	r2, [pc, #96]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007508:	e01f      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800750a:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007516:	d106      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800751e:	d102      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007520:	4b11      	ldr	r3, [pc, #68]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007524:	e011      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007526:	4b0e      	ldr	r3, [pc, #56]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007532:	d106      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800753a:	d102      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800753c:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800753e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007540:	e003      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007546:	f000 bc38 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800754a:	f000 bc36 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800754e:	4b08      	ldr	r3, [pc, #32]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007552:	f000 bc32 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800755a:	f000 bc2e 	b.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800755e:	bf00      	nop
 8007560:	58024400 	.word	0x58024400
 8007564:	03d09000 	.word	0x03d09000
 8007568:	003d0900 	.word	0x003d0900
 800756c:	017d7840 	.word	0x017d7840
 8007570:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007578:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800757c:	430b      	orrs	r3, r1
 800757e:	f040 809c 	bne.w	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007582:	4b9e      	ldr	r3, [pc, #632]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007586:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007592:	d054      	beq.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800759a:	f200 808b 	bhi.w	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075a4:	f000 8083 	beq.w	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075ae:	f200 8081 	bhi.w	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075b8:	d02f      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075c0:	d878      	bhi.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075ce:	d012      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80075d0:	e070      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075d2:	4b8a      	ldr	r3, [pc, #552]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075de:	d107      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 feaf 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ee:	e3e4      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f4:	e3e1      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075f6:	4b81      	ldr	r3, [pc, #516]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007602:	d107      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007604:	f107 0318 	add.w	r3, r7, #24
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fbf5 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007612:	e3d2      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007618:	e3cf      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800761a:	4b78      	ldr	r3, [pc, #480]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007626:	d107      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007628:	f107 030c 	add.w	r3, r7, #12
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fd37 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007636:	e3c0      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800763c:	e3bd      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800763e:	4b6f      	ldr	r3, [pc, #444]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007642:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007648:	4b6c      	ldr	r3, [pc, #432]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d10c      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800765a:	4b68      	ldr	r3, [pc, #416]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	08db      	lsrs	r3, r3, #3
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	4a66      	ldr	r2, [pc, #408]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800766c:	e01e      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800766e:	4b63      	ldr	r3, [pc, #396]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767a:	d106      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800767c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007682:	d102      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007684:	4b5f      	ldr	r3, [pc, #380]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007688:	e010      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800768a:	4b5c      	ldr	r3, [pc, #368]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007696:	d106      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800769e:	d102      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076a0:	4b59      	ldr	r3, [pc, #356]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80076a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076aa:	e386      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076ac:	e385      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076ae:	4b57      	ldr	r3, [pc, #348]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80076b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b2:	e382      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b8:	e37f      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80076ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076be:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80076c2:	430b      	orrs	r3, r1
 80076c4:	f040 80a7 	bne.w	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80076c8:	4b4c      	ldr	r3, [pc, #304]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076cc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80076d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076d8:	d055      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076e0:	f200 8096 	bhi.w	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076ea:	f000 8084 	beq.w	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076f4:	f200 808c 	bhi.w	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076fe:	d030      	beq.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007706:	f200 8083 	bhi.w	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007716:	d012      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007718:	e07a      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800771a:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007726:	d107      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fe0b 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007736:	e340      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773c:	e33d      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800773e:	4b2f      	ldr	r3, [pc, #188]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800774a:	d107      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774c:	f107 0318 	add.w	r3, r7, #24
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fb51 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800775a:	e32e      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007760:	e32b      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007762:	4b26      	ldr	r3, [pc, #152]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800776a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800776e:	d107      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fc93 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777e:	e31c      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007784:	e319      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007786:	4b1d      	ldr	r3, [pc, #116]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007790:	4b1a      	ldr	r3, [pc, #104]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d10c      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800779c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077a2:	4b16      	ldr	r3, [pc, #88]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	08db      	lsrs	r3, r3, #3
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	4a14      	ldr	r2, [pc, #80]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077ae:	fa22 f303 	lsr.w	r3, r2, r3
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b4:	e01e      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077b6:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c2:	d106      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80077c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077ca:	d102      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077d0:	e010      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077de:	d106      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80077e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e6:	d102      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077e8:	4b07      	ldr	r3, [pc, #28]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ec:	e002      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077f2:	e2e2      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077f4:	e2e1      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077f6:	4b05      	ldr	r3, [pc, #20]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fa:	e2de      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077fc:	58024400 	.word	0x58024400
 8007800:	03d09000 	.word	0x03d09000
 8007804:	003d0900 	.word	0x003d0900
 8007808:	017d7840 	.word	0x017d7840
 800780c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007814:	e2d1      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800781e:	430b      	orrs	r3, r1
 8007820:	f040 809c 	bne.w	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007824:	4b93      	ldr	r3, [pc, #588]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007828:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800782c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007834:	d054      	beq.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800783c:	f200 808b 	bhi.w	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007842:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007846:	f000 8083 	beq.w	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007850:	f200 8081 	bhi.w	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785a:	d02f      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007862:	d878      	bhi.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007870:	d012      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007872:	e070      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007874:	4b7f      	ldr	r3, [pc, #508]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800787c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007880:	d107      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fd5e 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007890:	e293      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007896:	e290      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007898:	4b76      	ldr	r3, [pc, #472]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078a4:	d107      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a6:	f107 0318 	add.w	r3, r7, #24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 faa4 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b4:	e281      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ba:	e27e      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c8:	d107      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ca:	f107 030c 	add.w	r3, r7, #12
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fbe6 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d8:	e26f      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078de:	e26c      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078e0:	4b64      	ldr	r3, [pc, #400]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078ea:	4b62      	ldr	r3, [pc, #392]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d10c      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80078f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	08db      	lsrs	r3, r3, #3
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	4a5c      	ldr	r2, [pc, #368]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800790e:	e01e      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007910:	4b58      	ldr	r3, [pc, #352]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800791c:	d106      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800791e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007924:	d102      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007926:	4b55      	ldr	r3, [pc, #340]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800792a:	e010      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800792c:	4b51      	ldr	r3, [pc, #324]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007938:	d106      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800793a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007940:	d102      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007942:	4b4f      	ldr	r3, [pc, #316]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007946:	e002      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800794c:	e235      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800794e:	e234      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007950:	4b4c      	ldr	r3, [pc, #304]	@ (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007954:	e231      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795a:	e22e      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800795c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007960:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007964:	430b      	orrs	r3, r1
 8007966:	f040 808f 	bne.w	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800796a:	4b42      	ldr	r3, [pc, #264]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800796c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800796e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007972:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007976:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800797a:	d06b      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007982:	d874      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800798a:	d056      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007992:	d86c      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800799a:	d03b      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800799c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079a2:	d864      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079aa:	d021      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079b2:	d85c      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c0:	d004      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80079c2:	e054      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80079c4:	f7fe fa0c 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 80079c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079ca:	e1f6      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079cc:	4b29      	ldr	r3, [pc, #164]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d8:	d107      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079da:	f107 0318 	add.w	r3, r7, #24
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fa0a 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e8:	e1e7      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ee:	e1e4      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079f0:	4b20      	ldr	r3, [pc, #128]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079fc:	d107      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb4c 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0c:	e1d5      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a12:	e1d2      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a14:	4b17      	ldr	r3, [pc, #92]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d109      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a20:	4b14      	ldr	r3, [pc, #80]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	08db      	lsrs	r3, r3, #3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	4a13      	ldr	r2, [pc, #76]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a32:	e1c2      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a38:	e1bf      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a46:	d102      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007a48:	4b0c      	ldr	r3, [pc, #48]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a4c:	e1b5      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a52:	e1b2      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a54:	4b07      	ldr	r3, [pc, #28]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a60:	d102      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007a62:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a66:	e1a8      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e1a5      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a72:	e1a2      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a74:	58024400 	.word	0x58024400
 8007a78:	03d09000 	.word	0x03d09000
 8007a7c:	003d0900 	.word	0x003d0900
 8007a80:	017d7840 	.word	0x017d7840
 8007a84:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a8c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007a90:	430b      	orrs	r3, r1
 8007a92:	d173      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007a94:	4b9c      	ldr	r3, [pc, #624]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aa4:	d02f      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aac:	d863      	bhi.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aba:	d012      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007abc:	e05b      	b.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007abe:	4b92      	ldr	r3, [pc, #584]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aca:	d107      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007acc:	f107 0318 	add.w	r3, r7, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 f991 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ada:	e16e      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae0:	e16b      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae2:	4b89      	ldr	r3, [pc, #548]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aee:	d107      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fad3 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afe:	e15c      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b04:	e159      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b06:	4b80      	ldr	r3, [pc, #512]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b10:	4b7d      	ldr	r3, [pc, #500]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d10c      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b22:	4b79      	ldr	r3, [pc, #484]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	08db      	lsrs	r3, r3, #3
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	4a77      	ldr	r2, [pc, #476]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b34:	e01e      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b36:	4b74      	ldr	r3, [pc, #464]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b42:	d106      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b4a:	d102      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b4c:	4b70      	ldr	r3, [pc, #448]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b50:	e010      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b52:	4b6d      	ldr	r3, [pc, #436]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b5e:	d106      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b66:	d102      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b68:	4b6a      	ldr	r3, [pc, #424]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b72:	e122      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b74:	e121      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7a:	e11e      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b80:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007b84:	430b      	orrs	r3, r1
 8007b86:	d133      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b88:	4b5f      	ldr	r3, [pc, #380]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b9e:	d012      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007ba0:	e023      	b.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ba2:	4b59      	ldr	r3, [pc, #356]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fbc7 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bbe:	e0fc      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc4:	e0f9      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc6:	4b50      	ldr	r3, [pc, #320]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd4:	f107 0318 	add.w	r3, r7, #24
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 f90d 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be2:	e0ea      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007be8:	e0e7      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bee:	e0e4      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	f040 808d 	bne.w	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007bfe:	4b42      	ldr	r3, [pc, #264]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c02:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007c06:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c0e:	d06b      	beq.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c16:	d874      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1e:	d056      	beq.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c26:	d86c      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c2e:	d03b      	beq.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c36:	d864      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c3e:	d021      	beq.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c46:	d85c      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c54:	d004      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007c56:	e054      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007c58:	f000 f8b8 	bl	8007dcc <HAL_RCCEx_GetD3PCLK1Freq>
 8007c5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c5e:	e0ac      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c60:	4b29      	ldr	r3, [pc, #164]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c6c:	d107      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6e:	f107 0318 	add.w	r3, r7, #24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f8c0 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c7c:	e09d      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c82:	e09a      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c84:	4b20      	ldr	r3, [pc, #128]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c90:	d107      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c92:	f107 030c 	add.w	r3, r7, #12
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fa02 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca0:	e08b      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca6:	e088      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca8:	4b17      	ldr	r3, [pc, #92]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d109      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb4:	4b14      	ldr	r3, [pc, #80]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	08db      	lsrs	r3, r3, #3
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	4a13      	ldr	r2, [pc, #76]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cc6:	e078      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ccc:	e075      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007cce:	4b0e      	ldr	r3, [pc, #56]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cda:	d102      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce0:	e06b      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce6:	e068      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ce8:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf4:	d102      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007cf6:	4b07      	ldr	r3, [pc, #28]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfa:	e05e      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d00:	e05b      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d06:	e058      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	03d09000 	.word	0x03d09000
 8007d10:	003d0900 	.word	0x003d0900
 8007d14:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007d20:	430b      	orrs	r3, r1
 8007d22:	d148      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007d24:	4b27      	ldr	r3, [pc, #156]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d34:	d02a      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d3c:	d838      	bhi.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d4a:	d00d      	beq.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007d4c:	e030      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d5a:	d102      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d60:	e02b      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d66:	e028      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d68:	4b16      	ldr	r3, [pc, #88]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d74:	d107      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fae4 	bl	8008348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d84:	e019      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d8a:	e016      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d98:	d107      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9a:	f107 0318 	add.w	r3, r7, #24
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 f82a 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da8:	e007      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dae:	e004      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db4:	e001      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3740      	adds	r7, #64	@ 0x40
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	58024400 	.word	0x58024400
 8007dc8:	017d7840 	.word	0x017d7840

08007dcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007dd0:	f7fd ffd6 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	4b06      	ldr	r3, [pc, #24]	@ (8007df0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	4904      	ldr	r1, [pc, #16]	@ (8007df4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007de2:	5ccb      	ldrb	r3, [r1, r3]
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	58024400 	.word	0x58024400
 8007df4:	0800f754 	.word	0x0800f754

08007df8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b089      	sub	sp, #36	@ 0x24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e00:	4ba1      	ldr	r3, [pc, #644]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007e0a:	4b9f      	ldr	r3, [pc, #636]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0e:	0b1b      	lsrs	r3, r3, #12
 8007e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e16:	4b9c      	ldr	r3, [pc, #624]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1a:	091b      	lsrs	r3, r3, #4
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007e22:	4b99      	ldr	r3, [pc, #612]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e26:	08db      	lsrs	r3, r3, #3
 8007e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	fb02 f303 	mul.w	r3, r2, r3
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8111 	beq.w	8008068 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	f000 8083 	beq.w	8007f54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	f200 80a1 	bhi.w	8007f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d056      	beq.n	8007f10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e62:	e099      	b.n	8007f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e64:	4b88      	ldr	r3, [pc, #544]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02d      	beq.n	8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e70:	4b85      	ldr	r3, [pc, #532]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	4a84      	ldr	r2, [pc, #528]	@ (800808c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007eca:	e087      	b.n	8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ede:	4b6a      	ldr	r3, [pc, #424]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f0e:	e065      	b.n	8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b59      	ldr	r3, [pc, #356]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f52:	e043      	b.n	8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800809c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f66:	4b48      	ldr	r3, [pc, #288]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f96:	e021      	b.n	8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007faa:	4b37      	ldr	r3, [pc, #220]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	0a5b      	lsrs	r3, r3, #9
 8007fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008002:	ee17 2a90 	vmov	r2, s15
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800800a:	4b1f      	ldr	r3, [pc, #124]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800e:	0c1b      	lsrs	r3, r3, #16
 8008010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008014:	ee07 3a90 	vmov	s15, r3
 8008018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008024:	edd7 6a07 	vldr	s13, [r7, #28]
 8008028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008030:	ee17 2a90 	vmov	r2, s15
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008038:	4b13      	ldr	r3, [pc, #76]	@ (8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803c:	0e1b      	lsrs	r3, r3, #24
 800803e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800804e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008052:	edd7 6a07 	vldr	s13, [r7, #28]
 8008056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800805a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800805e:	ee17 2a90 	vmov	r2, s15
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008066:	e008      	b.n	800807a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
}
 800807a:	bf00      	nop
 800807c:	3724      	adds	r7, #36	@ 0x24
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	58024400 	.word	0x58024400
 800808c:	03d09000 	.word	0x03d09000
 8008090:	46000000 	.word	0x46000000
 8008094:	4c742400 	.word	0x4c742400
 8008098:	4a742400 	.word	0x4a742400
 800809c:	4bbebc20 	.word	0x4bbebc20

080080a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b089      	sub	sp, #36	@ 0x24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080a8:	4ba1      	ldr	r3, [pc, #644]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80080b2:	4b9f      	ldr	r3, [pc, #636]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	0d1b      	lsrs	r3, r3, #20
 80080b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080be:	4b9c      	ldr	r3, [pc, #624]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c2:	0a1b      	lsrs	r3, r3, #8
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080ca:	4b99      	ldr	r3, [pc, #612]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ce:	08db      	lsrs	r3, r3, #3
 80080d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 8111 	beq.w	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	f000 8083 	beq.w	80081fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f200 80a1 	bhi.w	8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d056      	beq.n	80081b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800810a:	e099      	b.n	8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800810c:	4b88      	ldr	r3, [pc, #544]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02d      	beq.n	8008174 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008118:	4b85      	ldr	r3, [pc, #532]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	08db      	lsrs	r3, r3, #3
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	4a84      	ldr	r2, [pc, #528]	@ (8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
 8008128:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008142:	4b7b      	ldr	r3, [pc, #492]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008152:	ed97 6a03 	vldr	s12, [r7, #12]
 8008156:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800815a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008172:	e087      	b.n	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800833c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008186:	4b6a      	ldr	r3, [pc, #424]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008196:	ed97 6a03 	vldr	s12, [r7, #12]
 800819a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800819e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081b6:	e065      	b.n	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ca:	4b59      	ldr	r3, [pc, #356]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	ed97 6a03 	vldr	s12, [r7, #12]
 80081de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081fa:	e043      	b.n	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800820a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820e:	4b48      	ldr	r3, [pc, #288]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008222:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823e:	e021      	b.n	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	4b37      	ldr	r3, [pc, #220]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008262:	ed97 6a03 	vldr	s12, [r7, #12]
 8008266:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800826a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008282:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008284:	4b2a      	ldr	r3, [pc, #168]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008288:	0a5b      	lsrs	r3, r3, #9
 800828a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800829a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829e:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082aa:	ee17 2a90 	vmov	r2, s15
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80082b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	0c1b      	lsrs	r3, r3, #16
 80082b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d8:	ee17 2a90 	vmov	r2, s15
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80082e0:	4b13      	ldr	r3, [pc, #76]	@ (8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e4:	0e1b      	lsrs	r3, r3, #24
 80082e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008306:	ee17 2a90 	vmov	r2, s15
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800830e:	e008      	b.n	8008322 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
}
 8008322:	bf00      	nop
 8008324:	3724      	adds	r7, #36	@ 0x24
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	58024400 	.word	0x58024400
 8008334:	03d09000 	.word	0x03d09000
 8008338:	46000000 	.word	0x46000000
 800833c:	4c742400 	.word	0x4c742400
 8008340:	4a742400 	.word	0x4a742400
 8008344:	4bbebc20 	.word	0x4bbebc20

08008348 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008348:	b480      	push	{r7}
 800834a:	b089      	sub	sp, #36	@ 0x24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008350:	4ba0      	ldr	r3, [pc, #640]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800835a:	4b9e      	ldr	r3, [pc, #632]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800835c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835e:	091b      	lsrs	r3, r3, #4
 8008360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008364:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008366:	4b9b      	ldr	r3, [pc, #620]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008370:	4b98      	ldr	r3, [pc, #608]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008374:	08db      	lsrs	r3, r3, #3
 8008376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	fb02 f303 	mul.w	r3, r2, r3
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008388:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8111 	beq.w	80085b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b02      	cmp	r3, #2
 8008398:	f000 8083 	beq.w	80084a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	f200 80a1 	bhi.w	80084e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d056      	beq.n	800845e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80083b0:	e099      	b.n	80084e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083b2:	4b88      	ldr	r3, [pc, #544]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d02d      	beq.n	800841a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083be:	4b85      	ldr	r3, [pc, #532]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	4a83      	ldr	r2, [pc, #524]	@ (80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e8:	4b7a      	ldr	r3, [pc, #488]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083fc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800840c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008414:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008418:	e087      	b.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008424:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80085e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842c:	4b69      	ldr	r3, [pc, #420]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800842e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008440:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008458:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800845c:	e065      	b.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008468:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800846c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008470:	4b58      	ldr	r3, [pc, #352]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008480:	ed97 6a03 	vldr	s12, [r7, #12]
 8008484:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a0:	e043      	b.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80085e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80084b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b4:	4b47      	ldr	r3, [pc, #284]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084e4:	e021      	b.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80085e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80084f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f8:	4b36      	ldr	r3, [pc, #216]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008500:	ee07 3a90 	vmov	s15, r3
 8008504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008508:	ed97 6a03 	vldr	s12, [r7, #12]
 800850c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008528:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800852a:	4b2a      	ldr	r3, [pc, #168]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852e:	0a5b      	lsrs	r3, r3, #9
 8008530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008544:	edd7 6a07 	vldr	s13, [r7, #28]
 8008548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008550:	ee17 2a90 	vmov	r2, s15
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008558:	4b1e      	ldr	r3, [pc, #120]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800855a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008562:	ee07 3a90 	vmov	s15, r3
 8008566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800856e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008572:	edd7 6a07 	vldr	s13, [r7, #28]
 8008576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800857a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857e:	ee17 2a90 	vmov	r2, s15
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008586:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858a:	0e1b      	lsrs	r3, r3, #24
 800858c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800859c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ac:	ee17 2a90 	vmov	r2, s15
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80085b4:	e008      	b.n	80085c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	609a      	str	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	3724      	adds	r7, #36	@ 0x24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	58024400 	.word	0x58024400
 80085d8:	03d09000 	.word	0x03d09000
 80085dc:	46000000 	.word	0x46000000
 80085e0:	4c742400 	.word	0x4c742400
 80085e4:	4a742400 	.word	0x4a742400
 80085e8:	4bbebc20 	.word	0x4bbebc20

080085ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085fa:	4b53      	ldr	r3, [pc, #332]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80085fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	2b03      	cmp	r3, #3
 8008604:	d101      	bne.n	800860a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e099      	b.n	800873e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800860a:	4b4f      	ldr	r3, [pc, #316]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a4e      	ldr	r2, [pc, #312]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008610:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008616:	f7f9 ff3b 	bl	8002490 <HAL_GetTick>
 800861a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800861c:	e008      	b.n	8008630 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800861e:	f7f9 ff37 	bl	8002490 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e086      	b.n	800873e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008630:	4b45      	ldr	r3, [pc, #276]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800863c:	4b42      	ldr	r3, [pc, #264]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	031b      	lsls	r3, r3, #12
 800864a:	493f      	ldr	r1, [pc, #252]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 800864c:	4313      	orrs	r3, r2
 800864e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	3b01      	subs	r3, #1
 8008656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	3b01      	subs	r3, #1
 8008660:	025b      	lsls	r3, r3, #9
 8008662:	b29b      	uxth	r3, r3
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	3b01      	subs	r3, #1
 800866c:	041b      	lsls	r3, r3, #16
 800866e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	3b01      	subs	r3, #1
 800867a:	061b      	lsls	r3, r3, #24
 800867c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008680:	4931      	ldr	r1, [pc, #196]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008682:	4313      	orrs	r3, r2
 8008684:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008686:	4b30      	ldr	r3, [pc, #192]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	492d      	ldr	r1, [pc, #180]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008694:	4313      	orrs	r3, r2
 8008696:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008698:	4b2b      	ldr	r3, [pc, #172]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 800869a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869c:	f023 0220 	bic.w	r2, r3, #32
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	4928      	ldr	r1, [pc, #160]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ae:	4a26      	ldr	r2, [pc, #152]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086b0:	f023 0310 	bic.w	r3, r3, #16
 80086b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086b6:	4b24      	ldr	r3, [pc, #144]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ba:	4b24      	ldr	r3, [pc, #144]	@ (800874c <RCCEx_PLL2_Config+0x160>)
 80086bc:	4013      	ands	r3, r2
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	69d2      	ldr	r2, [r2, #28]
 80086c2:	00d2      	lsls	r2, r2, #3
 80086c4:	4920      	ldr	r1, [pc, #128]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80086ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086d0:	f043 0310 	orr.w	r3, r3, #16
 80086d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e0:	4a19      	ldr	r2, [pc, #100]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086e8:	e00f      	b.n	800870a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d106      	bne.n	80086fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086f0:	4b15      	ldr	r3, [pc, #84]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	4a14      	ldr	r2, [pc, #80]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 80086f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086fc:	e005      	b.n	800870a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086fe:	4b12      	ldr	r3, [pc, #72]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	4a11      	ldr	r2, [pc, #68]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008708:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800870a:	4b0f      	ldr	r3, [pc, #60]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a0e      	ldr	r2, [pc, #56]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008710:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008716:	f7f9 febb 	bl	8002490 <HAL_GetTick>
 800871a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800871c:	e008      	b.n	8008730 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800871e:	f7f9 feb7 	bl	8002490 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d901      	bls.n	8008730 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e006      	b.n	800873e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <RCCEx_PLL2_Config+0x15c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0f0      	beq.n	800871e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	58024400 	.word	0x58024400
 800874c:	ffff0007 	.word	0xffff0007

08008750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800875e:	4b53      	ldr	r3, [pc, #332]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b03      	cmp	r3, #3
 8008768:	d101      	bne.n	800876e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e099      	b.n	80088a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800876e:	4b4f      	ldr	r3, [pc, #316]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a4e      	ldr	r2, [pc, #312]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877a:	f7f9 fe89 	bl	8002490 <HAL_GetTick>
 800877e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008780:	e008      	b.n	8008794 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008782:	f7f9 fe85 	bl	8002490 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e086      	b.n	80088a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008794:	4b45      	ldr	r3, [pc, #276]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f0      	bne.n	8008782 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80087a0:	4b42      	ldr	r3, [pc, #264]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 80087a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	051b      	lsls	r3, r3, #20
 80087ae:	493f      	ldr	r1, [pc, #252]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	025b      	lsls	r3, r3, #9
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	431a      	orrs	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	3b01      	subs	r3, #1
 80087de:	061b      	lsls	r3, r3, #24
 80087e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087e4:	4931      	ldr	r1, [pc, #196]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087ea:	4b30      	ldr	r3, [pc, #192]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	492d      	ldr	r1, [pc, #180]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087fc:	4b2b      	ldr	r3, [pc, #172]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	4928      	ldr	r1, [pc, #160]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800880e:	4b27      	ldr	r3, [pc, #156]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008812:	4a26      	ldr	r2, [pc, #152]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008818:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800881a:	4b24      	ldr	r3, [pc, #144]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 800881c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800881e:	4b24      	ldr	r3, [pc, #144]	@ (80088b0 <RCCEx_PLL3_Config+0x160>)
 8008820:	4013      	ands	r3, r2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	69d2      	ldr	r2, [r2, #28]
 8008826:	00d2      	lsls	r2, r2, #3
 8008828:	4920      	ldr	r1, [pc, #128]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800882e:	4b1f      	ldr	r3, [pc, #124]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008832:	4a1e      	ldr	r2, [pc, #120]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008838:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008840:	4b1a      	ldr	r3, [pc, #104]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008844:	4a19      	ldr	r2, [pc, #100]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800884a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800884c:	e00f      	b.n	800886e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d106      	bne.n	8008862 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008854:	4b15      	ldr	r3, [pc, #84]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	4a14      	ldr	r2, [pc, #80]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 800885a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800885e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008860:	e005      	b.n	800886e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008862:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008866:	4a11      	ldr	r2, [pc, #68]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008868:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800886c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800886e:	4b0f      	ldr	r3, [pc, #60]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a0e      	ldr	r2, [pc, #56]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800887a:	f7f9 fe09 	bl	8002490 <HAL_GetTick>
 800887e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008880:	e008      	b.n	8008894 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008882:	f7f9 fe05 	bl	8002490 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d901      	bls.n	8008894 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e006      	b.n	80088a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008894:	4b05      	ldr	r3, [pc, #20]	@ (80088ac <RCCEx_PLL3_Config+0x15c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0f0      	beq.n	8008882 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	58024400 	.word	0x58024400
 80088b0:	ffff0007 	.word	0xffff0007

080088b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	@ 0x28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e075      	b.n	80089b2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d105      	bne.n	80088de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7f9 fb4b 	bl	8001f74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2204      	movs	r2, #4
 80088e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f868 	bl	80089bc <HAL_SD_InitCard>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e05d      	b.n	80089b2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80088f6:	f107 0308 	add.w	r3, r7, #8
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fdaf 	bl	8009460 <HAL_SD_GetCardStatus>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e052      	b.n	80089b2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800890c:	7e3b      	ldrb	r3, [r7, #24]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008912:	7e7b      	ldrb	r3, [r7, #25]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891c:	2b01      	cmp	r3, #1
 800891e:	d10a      	bne.n	8008936 <HAL_SD_Init+0x82>
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <HAL_SD_Init+0x78>
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d004      	beq.n	8008936 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008932:	659a      	str	r2, [r3, #88]	@ 0x58
 8008934:	e00b      	b.n	800894e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893a:	2b01      	cmp	r3, #1
 800893c:	d104      	bne.n	8008948 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008944:	659a      	str	r2, [r3, #88]	@ 0x58
 8008946:	e002      	b.n	800894e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fe6d 	bl	8009634 <HAL_SD_ConfigWideBusOperation>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e026      	b.n	80089b2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008964:	f7f9 fd94 	bl	8002490 <HAL_GetTick>
 8008968:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800896a:	e011      	b.n	8008990 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800896c:	f7f9 fd90 	bl	8002490 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d109      	bne.n	8008990 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008982:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e010      	b.n	80089b2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 ff61 	bl	8009858 <HAL_SD_GetCardState>
 8008996:	4603      	mov	r3, r0
 8008998:	2b04      	cmp	r3, #4
 800899a:	d1e7      	bne.n	800896c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3728      	adds	r7, #40	@ 0x28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b08d      	sub	sp, #52	@ 0x34
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80089d4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80089d8:	f04f 0100 	mov.w	r1, #0
 80089dc:	f7fe fc76 	bl	80072cc <HAL_RCCEx_GetPeriphCLKFreq>
 80089e0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80089f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e070      	b.n	8008ade <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80089fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	4a39      	ldr	r2, [pc, #228]	@ (8008ae8 <HAL_SD_InitCard+0x12c>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	091b      	lsrs	r3, r3, #4
 8008a08:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681c      	ldr	r4, [r3, #0]
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f107 0318 	add.w	r3, r7, #24
 8008a14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a18:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a1c:	f107 030c 	add.w	r3, r7, #12
 8008a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a22:	4620      	mov	r0, r4
 8008a24:	f003 f882 	bl	800bb2c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f003 f8c5 	bl	800bbbc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a42:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008a4a:	4a28      	ldr	r2, [pc, #160]	@ (8008aec <HAL_SD_InitCard+0x130>)
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a52:	3301      	adds	r3, #1
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7f9 fd27 	bl	80024a8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 ffea 	bl	8009a34 <SD_PowerON>
 8008a60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e02e      	b.n	8008ade <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 ff09 	bl	8009898 <SD_InitCard>
 8008a86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e01b      	b.n	8008ade <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f003 f91a 	bl	800bce8 <SDMMC_CmdBlockLength>
 8008ab4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00f      	beq.n	8008adc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8008af0 <HAL_SD_InitCard+0x134>)
 8008ac2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	372c      	adds	r7, #44	@ 0x2c
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd90      	pop	{r4, r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	014f8b59 	.word	0x014f8b59
 8008aec:	00012110 	.word	0x00012110
 8008af0:	1fe00fff 	.word	0x1fe00fff

08008af4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08c      	sub	sp, #48	@ 0x30
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d107      	bne.n	8008b1c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b10:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e08d      	b.n	8008c38 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	f040 8086 	bne.w	8008c36 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d907      	bls.n	8008b4e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b42:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e074      	b.n	8008c38 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2203      	movs	r2, #3
 8008b52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	025a      	lsls	r2, r3, #9
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d002      	beq.n	8008b7a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	025b      	lsls	r3, r3, #9
 8008b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	025b      	lsls	r3, r3, #9
 8008b84:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b86:	2390      	movs	r3, #144	@ 0x90
 8008b88:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f107 0210 	add.w	r2, r7, #16
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f003 f875 	bl	800bc90 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bb4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d90a      	bls.n	8008be2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2282      	movs	r2, #130	@ 0x82
 8008bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f003 f8cb 	bl	800bd74 <SDMMC_CmdReadMultiBlock>
 8008bde:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008be0:	e009      	b.n	8008bf6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2281      	movs	r2, #129	@ 0x81
 8008be6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f003 f89d 	bl	800bd2e <SDMMC_CmdReadSingleBlock>
 8008bf4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d012      	beq.n	8008c22 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0f      	ldr	r2, [pc, #60]	@ (8008c40 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008c02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e00a      	b.n	8008c38 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008c30:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e000      	b.n	8008c38 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008c36:	2302      	movs	r3, #2
  }
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3730      	adds	r7, #48	@ 0x30
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	1fe00fff 	.word	0x1fe00fff

08008c44 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08c      	sub	sp, #48	@ 0x30
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d107      	bne.n	8008c6c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c60:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e08d      	b.n	8008d88 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	f040 8086 	bne.w	8008d86 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	441a      	add	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d907      	bls.n	8008c9e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c92:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e074      	b.n	8008d88 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	025a      	lsls	r2, r3, #9
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d002      	beq.n	8008cca <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	025b      	lsls	r3, r3, #9
 8008cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295
 8008cce:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	025b      	lsls	r3, r3, #9
 8008cd4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cd6:	2390      	movs	r3, #144	@ 0x90
 8008cd8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f107 0210 	add.w	r2, r7, #16
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 ffcd 	bl	800bc90 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d04:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2201      	movs	r2, #1
 8008d14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d90a      	bls.n	8008d32 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	22a0      	movs	r2, #160	@ 0xa0
 8008d20:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f003 f869 	bl	800be00 <SDMMC_CmdWriteMultiBlock>
 8008d2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d30:	e009      	b.n	8008d46 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2290      	movs	r2, #144	@ 0x90
 8008d36:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f003 f83b 	bl	800bdba <SDMMC_CmdWriteSingleBlock>
 8008d44:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d012      	beq.n	8008d72 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a0f      	ldr	r2, [pc, #60]	@ (8008d90 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008d52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e00a      	b.n	8008d88 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e000      	b.n	8008d88 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008d86:	2302      	movs	r3, #2
  }
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3730      	adds	r7, #48	@ 0x30
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	1fe00fff 	.word	0x1fe00fff

08008d94 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <HAL_SD_IRQHandler+0x2e>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 f926 	bl	800a00c <SD_Read_IT>
 8008dc0:	e19a      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80ac 	beq.w	8008f2a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008dda:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	4b59      	ldr	r3, [pc, #356]	@ (8008f4c <HAL_SD_IRQHandler+0x1b8>)
 8008de8:	400b      	ands	r3, r1
 8008dea:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e0a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f003 0308 	and.w	r3, r3, #8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d038      	beq.n	8008e88 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <HAL_SD_IRQHandler+0x96>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d011      	beq.n	8008e4e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f003 f80a 	bl	800be48 <SDMMC_CmdStopTransfer>
 8008e34:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d008      	beq.n	8008e4e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f95b 	bl	8009104 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a3f      	ldr	r2, [pc, #252]	@ (8008f50 <HAL_SD_IRQHandler+0x1bc>)
 8008e54:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <HAL_SD_IRQHandler+0xe4>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f003 fcbd 	bl	800c7f8 <HAL_SD_RxCpltCallback>
 8008e7e:	e13b      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f003 fcaf 	bl	800c7e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e86:	e137      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8132 	beq.w	80090f8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <HAL_SD_IRQHandler+0x12c>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d011      	beq.n	8008ee4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f002 ffbf 	bl	800be48 <SDMMC_CmdStopTransfer>
 8008eca:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d008      	beq.n	8008ee4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f910 	bl	8009104 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d104      	bne.n	8008f06 <HAL_SD_IRQHandler+0x172>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f003 0320 	and.w	r3, r3, #32
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f003 fc6c 	bl	800c7e4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d105      	bne.n	8008f22 <HAL_SD_IRQHandler+0x18e>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 80eb 	beq.w	80090f8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f003 fc68 	bl	800c7f8 <HAL_SD_RxCpltCallback>
}
 8008f28:	e0e6      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00d      	beq.n	8008f54 <HAL_SD_IRQHandler+0x1c0>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 0308 	and.w	r3, r3, #8
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d008      	beq.n	8008f54 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f8a8 	bl	800a098 <SD_Write_IT>
 8008f48:	e0d6      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
 8008f4a:	bf00      	nop
 8008f4c:	ffff3ec5 	.word	0xffff3ec5
 8008f50:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f5a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 809d 	beq.w	800909e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d005      	beq.n	8008f7e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f76:	f043 0202 	orr.w	r2, r3, #2
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d005      	beq.n	8008f98 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f90:	f043 0208 	orr.w	r2, r3, #8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d005      	beq.n	8008fcc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc4:	f043 0210 	orr.w	r2, r3, #16
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8009100 <HAL_SD_IRQHandler+0x36c>)
 8008fd2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ff2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009002:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009012:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f002 ff15 	bl	800be48 <SDMMC_CmdStopTransfer>
 800901e:	4602      	mov	r2, r0
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009038:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009042:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f851 	bl	8009104 <HAL_SD_ErrorCallback>
}
 8009062:	e049      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	d044      	beq.n	80090f8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009072:	2b00      	cmp	r3, #0
 8009074:	d040      	beq.n	80090f8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009084:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f834 	bl	8009104 <HAL_SD_ErrorCallback>
}
 800909c:	e02c      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d025      	beq.n	80090f8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090b4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10c      	bne.n	80090de <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 f84a 	bl	800a168 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80090d4:	e010      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 f832 	bl	800a140 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80090dc:	e00c      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 f833 	bl	800a154 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80090ee:	e003      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 f81b 	bl	800a12c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80090f6:	e7ff      	b.n	80090f8 <HAL_SD_IRQHandler+0x364>
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	18000f3a 	.word	0x18000f3a

08009104 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009126:	0f9b      	lsrs	r3, r3, #30
 8009128:	b2da      	uxtb	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009132:	0e9b      	lsrs	r3, r3, #26
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	b2da      	uxtb	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009144:	0e1b      	lsrs	r3, r3, #24
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	b2da      	uxtb	r2, r3
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009156:	0c1b      	lsrs	r3, r3, #16
 8009158:	b2da      	uxtb	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	b2da      	uxtb	r2, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800916e:	b2da      	uxtb	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009178:	0d1b      	lsrs	r3, r3, #20
 800917a:	b29a      	uxth	r2, r3
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	b2db      	uxtb	r3, r3
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	b2da      	uxtb	r2, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009196:	0bdb      	lsrs	r3, r3, #15
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091a8:	0b9b      	lsrs	r3, r3, #14
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ba:	0b5b      	lsrs	r3, r3, #13
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091cc:	0b1b      	lsrs	r3, r3, #12
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2200      	movs	r2, #0
 80091de:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d163      	bne.n	80092b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ec:	009a      	lsls	r2, r3, #2
 80091ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80091f2:	4013      	ands	r3, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80091f8:	0f92      	lsrs	r2, r2, #30
 80091fa:	431a      	orrs	r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009204:	0edb      	lsrs	r3, r3, #27
 8009206:	b2db      	uxtb	r3, r3
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	b2da      	uxtb	r2, r3
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009216:	0e1b      	lsrs	r3, r3, #24
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	b2da      	uxtb	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009228:	0d5b      	lsrs	r3, r3, #21
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	b2da      	uxtb	r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800923a:	0c9b      	lsrs	r3, r3, #18
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800924c:	0bdb      	lsrs	r3, r3, #15
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	b2da      	uxtb	r2, r3
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	7e1b      	ldrb	r3, [r3, #24]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	3302      	adds	r3, #2
 8009270:	2201      	movs	r2, #1
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800927a:	fb03 f202 	mul.w	r2, r3, r2
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	7a1b      	ldrb	r3, [r3, #8]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	2201      	movs	r2, #1
 800928e:	409a      	lsls	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800929c:	0a52      	lsrs	r2, r2, #9
 800929e:	fb03 f202 	mul.w	r2, r3, r2
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80092ae:	e031      	b.n	8009314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d11d      	bne.n	80092f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092c6:	0c1b      	lsrs	r3, r3, #16
 80092c8:	431a      	orrs	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	3301      	adds	r3, #1
 80092d4:	029a      	lsls	r2, r3, #10
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80092f2:	e00f      	b.n	8009314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a58      	ldr	r2, [pc, #352]	@ (800945c <HAL_SD_GetCardCSD+0x344>)
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009300:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e09d      	b.n	8009450 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009318:	0b9b      	lsrs	r3, r3, #14
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800932a:	09db      	lsrs	r3, r3, #7
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009342:	b2da      	uxtb	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800934c:	0fdb      	lsrs	r3, r3, #31
 800934e:	b2da      	uxtb	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009358:	0f5b      	lsrs	r3, r3, #29
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800936a:	0e9b      	lsrs	r3, r3, #26
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	b2da      	uxtb	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800937c:	0d9b      	lsrs	r3, r3, #22
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800938e:	0d5b      	lsrs	r3, r3, #21
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093aa:	0c1b      	lsrs	r3, r3, #16
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093be:	0bdb      	lsrs	r3, r3, #15
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d2:	0b9b      	lsrs	r3, r3, #14
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093e6:	0b5b      	lsrs	r3, r3, #13
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093fa:	0b1b      	lsrs	r3, r3, #12
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800940e:	0a9b      	lsrs	r3, r3, #10
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	b2da      	uxtb	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	b2da      	uxtb	r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	b2db      	uxtb	r3, r3
 800943a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800943e:	b2da      	uxtb	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	1fe00fff 	.word	0x1fe00fff

08009460 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b094      	sub	sp, #80	@ 0x50
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b03      	cmp	r3, #3
 800947a:	d101      	bne.n	8009480 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e0a7      	b.n	80095d0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fb62 	bl	8009b50 <SD_SendSDStatus>
 800948c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800948e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009490:	2b00      	cmp	r3, #0
 8009492:	d011      	beq.n	80094b8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a4f      	ldr	r2, [pc, #316]	@ (80095d8 <HAL_SD_GetCardStatus+0x178>)
 800949a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80094b6:	e070      	b.n	800959a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	099b      	lsrs	r3, r3, #6
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	095b      	lsrs	r3, r3, #5
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	0e1b      	lsrs	r3, r3, #24
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4313      	orrs	r3, r2
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	061a      	lsls	r2, r3, #24
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80094fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009508:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	0e1b      	lsrs	r3, r3, #24
 800950e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	b2da      	uxtb	r2, r3
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	0d1b      	lsrs	r3, r3, #20
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 030f 	and.w	r3, r3, #15
 8009530:	b2da      	uxtb	r2, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	0c1b      	lsrs	r3, r3, #16
 800953a:	b29b      	uxth	r3, r3
 800953c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009540:	b29a      	uxth	r2, r3
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	b29b      	uxth	r3, r3
 8009546:	b2db      	uxtb	r3, r3
 8009548:	b29b      	uxth	r3, r3
 800954a:	4313      	orrs	r3, r2
 800954c:	b29a      	uxth	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	0a9b      	lsrs	r3, r3, #10
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800955c:	b2da      	uxtb	r2, r3
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	0a1b      	lsrs	r3, r3, #8
 8009566:	b2db      	uxtb	r3, r3
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	b2da      	uxtb	r2, r3
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	091b      	lsrs	r3, r3, #4
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	b2da      	uxtb	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	b2da      	uxtb	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	0e1b      	lsrs	r3, r3, #24
 8009594:	b2da      	uxtb	r2, r3
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 fba0 	bl	800bce8 <SDMMC_CmdBlockLength>
 80095a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00d      	beq.n	80095cc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a08      	ldr	r2, [pc, #32]	@ (80095d8 <HAL_SD_GetCardStatus+0x178>)
 80095b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80095cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3750      	adds	r7, #80	@ 0x50
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	1fe00fff 	.word	0x1fe00fff

080095dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b08d      	sub	sp, #52	@ 0x34
 8009638:	af02      	add	r7, sp, #8
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2203      	movs	r2, #3
 8009648:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009650:	2b03      	cmp	r3, #3
 8009652:	d02e      	beq.n	80096b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800965a:	d106      	bne.n	800966a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009660:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	635a      	str	r2, [r3, #52]	@ 0x34
 8009668:	e029      	b.n	80096be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009670:	d10a      	bne.n	8009688 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fb64 	bl	8009d40 <SD_WideBus_Enable>
 8009678:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	635a      	str	r2, [r3, #52]	@ 0x34
 8009686:	e01a      	b.n	80096be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fba1 	bl	8009dd6 <SD_WideBus_Disable>
 8009694:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	431a      	orrs	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80096a2:	e00c      	b.n	80096be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80096b0:	e005      	b.n	80096be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d007      	beq.n	80096d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a5f      	ldr	r2, [pc, #380]	@ (8009848 <HAL_SD_ConfigWideBusOperation+0x214>)
 80096cc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80096d4:	e096      	b.n	8009804 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80096d6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80096da:	f04f 0100 	mov.w	r1, #0
 80096de:	f7fd fdf5 	bl	80072cc <HAL_RCCEx_GetPeriphCLKFreq>
 80096e2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8083 	beq.w	80097f2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695a      	ldr	r2, [r3, #20]
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	4950      	ldr	r1, [pc, #320]	@ (800984c <HAL_SD_ConfigWideBusOperation+0x218>)
 800970a:	fba1 1303 	umull	r1, r3, r1, r3
 800970e:	0e1b      	lsrs	r3, r3, #24
 8009710:	429a      	cmp	r2, r3
 8009712:	d303      	bcc.n	800971c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	61bb      	str	r3, [r7, #24]
 800971a:	e05a      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009724:	d103      	bne.n	800972e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	e051      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009736:	d126      	bne.n	8009786 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10e      	bne.n	800975e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	4a43      	ldr	r2, [pc, #268]	@ (8009850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d906      	bls.n	8009756 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4a40      	ldr	r2, [pc, #256]	@ (800984c <HAL_SD_ConfigWideBusOperation+0x218>)
 800974c:	fba2 2303 	umull	r2, r3, r2, r3
 8009750:	0e5b      	lsrs	r3, r3, #25
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	e03d      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	e039      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	4a39      	ldr	r2, [pc, #228]	@ (8009850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d906      	bls.n	800977e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4a36      	ldr	r2, [pc, #216]	@ (800984c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	0e5b      	lsrs	r3, r3, #25
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	e029      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	e025      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10e      	bne.n	80097ac <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4a30      	ldr	r2, [pc, #192]	@ (8009854 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d906      	bls.n	80097a4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4a2c      	ldr	r2, [pc, #176]	@ (800984c <HAL_SD_ConfigWideBusOperation+0x218>)
 800979a:	fba2 2303 	umull	r2, r3, r2, r3
 800979e:	0e1b      	lsrs	r3, r3, #24
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	e016      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	e012      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b8:	4a26      	ldr	r2, [pc, #152]	@ (8009854 <HAL_SD_ConfigWideBusOperation+0x220>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d906      	bls.n	80097cc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4a22      	ldr	r2, [pc, #136]	@ (800984c <HAL_SD_ConfigWideBusOperation+0x218>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	0e1b      	lsrs	r3, r3, #24
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	e002      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681c      	ldr	r4, [r3, #0]
 80097d6:	466a      	mov	r2, sp
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ea:	4620      	mov	r0, r4
 80097ec:	f002 f99e 	bl	800bb2c <SDMMC_Init>
 80097f0:	e008      	b.n	8009804 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800980c:	4618      	mov	r0, r3
 800980e:	f002 fa6b 	bl	800bce8 <SDMMC_CmdBlockLength>
 8009812:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00c      	beq.n	8009834 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a0a      	ldr	r2, [pc, #40]	@ (8009848 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009820:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	431a      	orrs	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800983c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009840:	4618      	mov	r0, r3
 8009842:	372c      	adds	r7, #44	@ 0x2c
 8009844:	46bd      	mov	sp, r7
 8009846:	bd90      	pop	{r4, r7, pc}
 8009848:	1fe00fff 	.word	0x1fe00fff
 800984c:	55e63b89 	.word	0x55e63b89
 8009850:	02faf080 	.word	0x02faf080
 8009854:	017d7840 	.word	0x017d7840

08009858 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009864:	f107 030c 	add.w	r3, r7, #12
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa40 	bl	8009cf0 <SD_SendStatus>
 8009870:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0a5b      	lsrs	r3, r3, #9
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800988e:	693b      	ldr	r3, [r7, #16]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b090      	sub	sp, #64	@ 0x40
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80098a4:	f7f8 fdf4 	bl	8002490 <HAL_GetTick>
 80098a8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f002 f995 	bl	800bbde <SDMMC_GetPowerState>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80098be:	e0b5      	b.n	8009a2c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d02e      	beq.n	8009926 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f002 fbe0 	bl	800c092 <SDMMC_CmdSendCID>
 80098d2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <SD_InitCard+0x46>
    {
      return errorstate;
 80098da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098dc:	e0a6      	b.n	8009a2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f002 f9c0 	bl	800bc6a <SDMMC_GetResponse>
 80098ea:	4602      	mov	r2, r0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2104      	movs	r1, #4
 80098f6:	4618      	mov	r0, r3
 80098f8:	f002 f9b7 	bl	800bc6a <SDMMC_GetResponse>
 80098fc:	4602      	mov	r2, r0
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2108      	movs	r1, #8
 8009908:	4618      	mov	r0, r3
 800990a:	f002 f9ae 	bl	800bc6a <SDMMC_GetResponse>
 800990e:	4602      	mov	r2, r0
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	210c      	movs	r1, #12
 800991a:	4618      	mov	r0, r3
 800991c:	f002 f9a5 	bl	800bc6a <SDMMC_GetResponse>
 8009920:	4602      	mov	r2, r0
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992a:	2b03      	cmp	r3, #3
 800992c:	d01d      	beq.n	800996a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800992e:	e019      	b.n	8009964 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f107 020a 	add.w	r2, r7, #10
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f002 fbe8 	bl	800c110 <SDMMC_CmdSetRelAdd>
 8009940:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <SD_InitCard+0xb4>
      {
        return errorstate;
 8009948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994a:	e06f      	b.n	8009a2c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800994c:	f7f8 fda0 	bl	8002490 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	f241 3287 	movw	r2, #4999	@ 0x1387
 800995a:	4293      	cmp	r3, r2
 800995c:	d902      	bls.n	8009964 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800995e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009962:	e063      	b.n	8009a2c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009964:	897b      	ldrh	r3, [r7, #10]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0e2      	beq.n	8009930 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	2b03      	cmp	r3, #3
 8009970:	d036      	beq.n	80099e0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009972:	897b      	ldrh	r3, [r7, #10]
 8009974:	461a      	mov	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f002 fba2 	bl	800c0d0 <SDMMC_CmdSendCSD>
 800998c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <SD_InitCard+0x100>
    {
      return errorstate;
 8009994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009996:	e049      	b.n	8009a2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f002 f963 	bl	800bc6a <SDMMC_GetResponse>
 80099a4:	4602      	mov	r2, r0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2104      	movs	r1, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f002 f95a 	bl	800bc6a <SDMMC_GetResponse>
 80099b6:	4602      	mov	r2, r0
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2108      	movs	r1, #8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 f951 	bl	800bc6a <SDMMC_GetResponse>
 80099c8:	4602      	mov	r2, r0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	210c      	movs	r1, #12
 80099d4:	4618      	mov	r0, r3
 80099d6:	f002 f948 	bl	800bc6a <SDMMC_GetResponse>
 80099da:	4602      	mov	r2, r0
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2104      	movs	r1, #4
 80099e6:	4618      	mov	r0, r3
 80099e8:	f002 f93f 	bl	800bc6a <SDMMC_GetResponse>
 80099ec:	4603      	mov	r3, r0
 80099ee:	0d1a      	lsrs	r2, r3, #20
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff fb8c 	bl	8009118 <HAL_SD_GetCardCSD>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009a0a:	e00f      	b.n	8009a2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f002 fa51 	bl	800bec0 <SDMMC_CmdSelDesel>
 8009a1e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <SD_InitCard+0x192>
  {
    return errorstate;
 8009a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a28:	e000      	b.n	8009a2c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3740      	adds	r7, #64	@ 0x40
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 fa5a 	bl	800bf06 <SDMMC_CmdGoIdleState>
 8009a52:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	e072      	b.n	8009b44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f002 fa6d 	bl	800bf42 <SDMMC_CmdOperCond>
 8009a68:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a70:	d10d      	bne.n	8009a8e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f002 fa42 	bl	800bf06 <SDMMC_CmdGoIdleState>
 8009a82:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <SD_PowerON+0x60>
    {
      return errorstate;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	e05a      	b.n	8009b44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d137      	bne.n	8009b0c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f002 fa6d 	bl	800bf82 <SDMMC_CmdAppCommand>
 8009aa8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02d      	beq.n	8009b0c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ab0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ab4:	e046      	b.n	8009b44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f002 fa60 	bl	800bf82 <SDMMC_CmdAppCommand>
 8009ac2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <SD_PowerON+0x9a>
    {
      return errorstate;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	e03a      	b.n	8009b44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	491e      	ldr	r1, [pc, #120]	@ (8009b4c <SD_PowerON+0x118>)
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fa77 	bl	800bfc8 <SDMMC_CmdAppOperCommand>
 8009ada:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ae2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ae6:	e02d      	b.n	8009b44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2100      	movs	r1, #0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 f8bb 	bl	800bc6a <SDMMC_GetResponse>
 8009af4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	0fdb      	lsrs	r3, r3, #31
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <SD_PowerON+0xce>
 8009afe:	2301      	movs	r3, #1
 8009b00:	e000      	b.n	8009b04 <SD_PowerON+0xd0>
 8009b02:	2300      	movs	r3, #0
 8009b04:	613b      	str	r3, [r7, #16]

    count++;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d802      	bhi.n	8009b1c <SD_PowerON+0xe8>
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d0cc      	beq.n	8009ab6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d902      	bls.n	8009b2c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b2a:	e00b      	b.n	8009b44 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	c1100000 	.word	0xc1100000

08009b50 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08c      	sub	sp, #48	@ 0x30
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b5a:	f7f8 fc99 	bl	8002490 <HAL_GetTick>
 8009b5e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f002 f87d 	bl	800bc6a <SDMMC_GetResponse>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b7a:	d102      	bne.n	8009b82 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b80:	e0b0      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2140      	movs	r1, #64	@ 0x40
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 f8ad 	bl	800bce8 <SDMMC_CmdBlockLength>
 8009b8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	e0a0      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	4619      	mov	r1, r3
 8009bae:	4610      	mov	r0, r2
 8009bb0:	f002 f9e7 	bl	800bf82 <SDMMC_CmdAppCommand>
 8009bb4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d005      	beq.n	8009bc8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	e08d      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bcc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009bce:	2340      	movs	r3, #64	@ 0x40
 8009bd0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009bd2:	2360      	movs	r3, #96	@ 0x60
 8009bd4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bde:	2301      	movs	r3, #1
 8009be0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f107 0208 	add.w	r2, r7, #8
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f002 f84f 	bl	800bc90 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f002 facf 	bl	800c19a <SDMMC_CmdStatusRegister>
 8009bfc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d02b      	beq.n	8009c5c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	e069      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d013      	beq.n	8009c46 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c22:	e00d      	b.n	8009c40 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 ffa9 	bl	800bb80 <SDMMC_ReadFIFO>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	601a      	str	r2, [r3, #0]
        pData++;
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	3304      	adds	r3, #4
 8009c38:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c42:	2b07      	cmp	r3, #7
 8009c44:	d9ee      	bls.n	8009c24 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c46:	f7f8 fc23 	bl	8002490 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c54:	d102      	bne.n	8009c5c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c5a:	e043      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c62:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0d2      	beq.n	8009c10 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c70:	f003 0308 	and.w	r3, r3, #8
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c78:	2308      	movs	r3, #8
 8009c7a:	e033      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e02a      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d017      	beq.n	8009ccc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009c9c:	2320      	movs	r3, #32
 8009c9e:	e021      	b.n	8009ce4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 ff6b 	bl	800bb80 <SDMMC_ReadFIFO>
 8009caa:	4602      	mov	r2, r0
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	601a      	str	r2, [r3, #0]
    pData++;
 8009cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cb6:	f7f8 fbeb 	bl	8002490 <HAL_GetTick>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc4:	d102      	bne.n	8009ccc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cca:	e00b      	b.n	8009ce4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e2      	bne.n	8009ca0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a03      	ldr	r2, [pc, #12]	@ (8009cec <SD_SendSDStatus+0x19c>)
 8009ce0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3730      	adds	r7, #48	@ 0x30
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	18000f3a 	.word	0x18000f3a

08009cf0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d04:	e018      	b.n	8009d38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f002 fa1e 	bl	800c154 <SDMMC_CmdSendStatus>
 8009d18:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	e009      	b.n	8009d38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 ff9d 	bl	800bc6a <SDMMC_GetResponse>
 8009d30:	4602      	mov	r2, r0
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 ff87 	bl	800bc6a <SDMMC_GetResponse>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d66:	d102      	bne.n	8009d6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d6c:	e02f      	b.n	8009dce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d6e:	f107 030c 	add.w	r3, r7, #12
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f879 	bl	8009e6c <SD_FindSCR>
 8009d7a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	e023      	b.n	8009dce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01c      	beq.n	8009dca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f002 f8f0 	bl	800bf82 <SDMMC_CmdAppCommand>
 8009da2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	e00f      	b.n	8009dce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2102      	movs	r1, #2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 f927 	bl	800c008 <SDMMC_CmdBusWidth>
 8009dba:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	e003      	b.n	8009dce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e001      	b.n	8009dce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b086      	sub	sp, #24
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 ff3c 	bl	800bc6a <SDMMC_GetResponse>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009df8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dfc:	d102      	bne.n	8009e04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e02:	e02f      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e04:	f107 030c 	add.w	r3, r7, #12
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f82e 	bl	8009e6c <SD_FindSCR>
 8009e10:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	e023      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01c      	beq.n	8009e60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f002 f8a5 	bl	800bf82 <SDMMC_CmdAppCommand>
 8009e38:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	e00f      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f002 f8dc 	bl	800c008 <SDMMC_CmdBusWidth>
 8009e50:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	e003      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e001      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08e      	sub	sp, #56	@ 0x38
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e76:	f7f8 fb0b 	bl	8002490 <HAL_GetTick>
 8009e7a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009e80:	2300      	movs	r3, #0
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2108      	movs	r1, #8
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 ff28 	bl	800bce8 <SDMMC_CmdBlockLength>
 8009e98:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea2:	e0ad      	b.n	800a000 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f002 f866 	bl	800bf82 <SDMMC_CmdAppCommand>
 8009eb6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	e09e      	b.n	800a000 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ec8:	2308      	movs	r3, #8
 8009eca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009ecc:	2330      	movs	r3, #48	@ 0x30
 8009ece:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f107 0210 	add.w	r2, r7, #16
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fed2 	bl	800bc90 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 f8ac 	bl	800c04e <SDMMC_CmdSendSCR>
 8009ef6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d027      	beq.n	8009f4e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	e07e      	b.n	800a000 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d113      	bne.n	8009f38 <SD_FindSCR+0xcc>
 8009f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d110      	bne.n	8009f38 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 fe30 	bl	800bb80 <SDMMC_ReadFIFO>
 8009f20:	4603      	mov	r3, r0
 8009f22:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fe29 	bl	800bb80 <SDMMC_ReadFIFO>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	60fb      	str	r3, [r7, #12]
      index++;
 8009f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f34:	3301      	adds	r3, #1
 8009f36:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f38:	f7f8 faaa 	bl	8002490 <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	d102      	bne.n	8009f4e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f4c:	e058      	b.n	800a000 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f54:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0d1      	beq.n	8009f02 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2208      	movs	r2, #8
 8009f72:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f74:	2308      	movs	r3, #8
 8009f76:	e043      	b.n	800a000 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e036      	b.n	800a000 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f98:	f003 0320 	and.w	r3, r3, #32
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009fa8:	2320      	movs	r3, #32
 8009faa:	e029      	b.n	800a000 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a15      	ldr	r2, [pc, #84]	@ (800a008 <SD_FindSCR+0x19c>)
 8009fb2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	061a      	lsls	r2, r3, #24
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	021b      	lsls	r3, r3, #8
 8009fbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009fc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	0a1b      	lsrs	r3, r3, #8
 8009fc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	0e1b      	lsrs	r3, r3, #24
 8009fd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd4:	601a      	str	r2, [r3, #0]
    scr++;
 8009fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd8:	3304      	adds	r3, #4
 8009fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	061a      	lsls	r2, r3, #24
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009fe8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	0a1b      	lsrs	r3, r3, #8
 8009fee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009ff2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	0e1b      	lsrs	r3, r3, #24
 8009ff8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3738      	adds	r7, #56	@ 0x38
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	18000f3a 	.word	0x18000f3a

0800a00c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a018:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01e:	2b1f      	cmp	r3, #31
 800a020:	d936      	bls.n	800a090 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e027      	b.n	800a078 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 fda7 	bl	800bb80 <SDMMC_ReadFIFO>
 800a032:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	b2da      	uxtb	r2, r3
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	3301      	adds	r3, #1
 800a040:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	0a1b      	lsrs	r3, r3, #8
 800a046:	b2da      	uxtb	r2, r3
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3301      	adds	r3, #1
 800a050:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	0c1b      	lsrs	r3, r3, #16
 800a056:	b2da      	uxtb	r2, r3
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	3301      	adds	r3, #1
 800a060:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0e1b      	lsrs	r3, r3, #24
 800a066:	b2da      	uxtb	r2, r3
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	3301      	adds	r3, #1
 800a070:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	3301      	adds	r3, #1
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b07      	cmp	r3, #7
 800a07c:	d9d4      	bls.n	800a028 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a088:	f1a3 0220 	sub.w	r2, r3, #32
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a090:	bf00      	nop
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	2b1f      	cmp	r3, #31
 800a0ac:	d93a      	bls.n	800a124 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e02b      	b.n	800a10c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	021a      	lsls	r2, r3, #8
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	041a      	lsls	r2, r3, #16
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	061a      	lsls	r2, r3, #24
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f107 020c 	add.w	r2, r7, #12
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f001 fd4a 	bl	800bb9a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	3301      	adds	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b07      	cmp	r3, #7
 800a110:	d9d0      	bls.n	800a0b4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	f1a3 0220 	sub.w	r2, r3, #32
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	621a      	str	r2, [r3, #32]
  }
}
 800a124:	bf00      	nop
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e10f      	b.n	800a3ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a87      	ldr	r2, [pc, #540]	@ (800a3b8 <HAL_SPI_Init+0x23c>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d00f      	beq.n	800a1be <HAL_SPI_Init+0x42>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a86      	ldr	r2, [pc, #536]	@ (800a3bc <HAL_SPI_Init+0x240>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00a      	beq.n	800a1be <HAL_SPI_Init+0x42>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a84      	ldr	r2, [pc, #528]	@ (800a3c0 <HAL_SPI_Init+0x244>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d005      	beq.n	800a1be <HAL_SPI_Init+0x42>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d901      	bls.n	800a1be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e0f7      	b.n	800a3ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fbbc 	bl	800a93c <SPI_GetPacketSize>
 800a1c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a7b      	ldr	r2, [pc, #492]	@ (800a3b8 <HAL_SPI_Init+0x23c>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00c      	beq.n	800a1ea <HAL_SPI_Init+0x6e>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a79      	ldr	r2, [pc, #484]	@ (800a3bc <HAL_SPI_Init+0x240>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d007      	beq.n	800a1ea <HAL_SPI_Init+0x6e>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a78      	ldr	r2, [pc, #480]	@ (800a3c0 <HAL_SPI_Init+0x244>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d002      	beq.n	800a1ea <HAL_SPI_Init+0x6e>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d811      	bhi.n	800a20e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a1ee:	4a72      	ldr	r2, [pc, #456]	@ (800a3b8 <HAL_SPI_Init+0x23c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d009      	beq.n	800a208 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a70      	ldr	r2, [pc, #448]	@ (800a3bc <HAL_SPI_Init+0x240>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d004      	beq.n	800a208 <HAL_SPI_Init+0x8c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a6f      	ldr	r2, [pc, #444]	@ (800a3c0 <HAL_SPI_Init+0x244>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d104      	bne.n	800a212 <HAL_SPI_Init+0x96>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b10      	cmp	r3, #16
 800a20c:	d901      	bls.n	800a212 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e0cd      	b.n	800a3ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7f7 ff3a 	bl	80020a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0201 	bic.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a24e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a258:	d119      	bne.n	800a28e <HAL_SPI_Init+0x112>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a262:	d103      	bne.n	800a26c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10c      	bne.n	800a28e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a27c:	d107      	bne.n	800a28e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a28c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00f      	beq.n	800a2ba <HAL_SPI_Init+0x13e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	2b06      	cmp	r3, #6
 800a2a0:	d90b      	bls.n	800a2ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	e007      	b.n	800a2ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a2c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69da      	ldr	r2, [r3, #28]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2dc:	ea42 0103 	orr.w	r1, r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	431a      	orrs	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a32a:	ea42 0103 	orr.w	r1, r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d113      	bne.n	800a36a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a354:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a368:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0201 	bic.w	r2, r2, #1
 800a378:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	40013000 	.word	0x40013000
 800a3bc:	40003800 	.word	0x40003800
 800a3c0:	40003c00 	.word	0x40003c00

0800a3c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3320      	adds	r3, #32
 800a3da:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3dc:	f7f8 f858 	bl	8002490 <HAL_GetTick>
 800a3e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d001      	beq.n	800a3f2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e1d1      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <HAL_SPI_Transmit+0x3a>
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e1c9      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d101      	bne.n	800a410 <HAL_SPI_Transmit+0x4c>
 800a40c:	2302      	movs	r3, #2
 800a40e:	e1c2      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2203      	movs	r2, #3
 800a41c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	88fa      	ldrh	r2, [r7, #6]
 800a432:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	88fa      	ldrh	r2, [r7, #6]
 800a43a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a468:	d108      	bne.n	800a47c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	e009      	b.n	800a490 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a48e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	4b96      	ldr	r3, [pc, #600]	@ (800a6f0 <HAL_SPI_Transmit+0x32c>)
 800a498:	4013      	ands	r3, r2
 800a49a:	88f9      	ldrh	r1, [r7, #6]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0201 	orr.w	r2, r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4bc:	d107      	bne.n	800a4ce <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	2b0f      	cmp	r3, #15
 800a4d4:	d947      	bls.n	800a566 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a4d6:	e03f      	b.n	800a558 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d114      	bne.n	800a510 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4f6:	1d1a      	adds	r2, r3, #4
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a502:	b29b      	uxth	r3, r3
 800a504:	3b01      	subs	r3, #1
 800a506:	b29a      	uxth	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a50e:	e023      	b.n	800a558 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a510:	f7f7 ffbe 	bl	8002490 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d803      	bhi.n	800a528 <HAL_SPI_Transmit+0x164>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a526:	d102      	bne.n	800a52e <HAL_SPI_Transmit+0x16a>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d114      	bne.n	800a558 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f936 	bl	800a7a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a53a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e11e      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1b9      	bne.n	800a4d8 <HAL_SPI_Transmit+0x114>
 800a564:	e0f1      	b.n	800a74a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	2b07      	cmp	r3, #7
 800a56c:	f240 80e6 	bls.w	800a73c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a570:	e05d      	b.n	800a62e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d132      	bne.n	800a5e6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a586:	b29b      	uxth	r3, r3
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d918      	bls.n	800a5be <HAL_SPI_Transmit+0x1fa>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d014      	beq.n	800a5be <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6812      	ldr	r2, [r2, #0]
 800a59e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5a4:	1d1a      	adds	r2, r3, #4
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b02      	subs	r3, #2
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a5bc:	e037      	b.n	800a62e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5c2:	881a      	ldrh	r2, [r3, #0]
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5cc:	1c9a      	adds	r2, r3, #2
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a5e4:	e023      	b.n	800a62e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5e6:	f7f7 ff53 	bl	8002490 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d803      	bhi.n	800a5fe <HAL_SPI_Transmit+0x23a>
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d102      	bne.n	800a604 <HAL_SPI_Transmit+0x240>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d114      	bne.n	800a62e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f8cb 	bl	800a7a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e0b3      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a634:	b29b      	uxth	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d19b      	bne.n	800a572 <HAL_SPI_Transmit+0x1ae>
 800a63a:	e086      	b.n	800a74a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	2b02      	cmp	r3, #2
 800a648:	d154      	bne.n	800a6f4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a650:	b29b      	uxth	r3, r3
 800a652:	2b03      	cmp	r3, #3
 800a654:	d918      	bls.n	800a688 <HAL_SPI_Transmit+0x2c4>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	d914      	bls.n	800a688 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3b04      	subs	r3, #4
 800a67e:	b29a      	uxth	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a686:	e059      	b.n	800a73c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a68e:	b29b      	uxth	r3, r3
 800a690:	2b01      	cmp	r3, #1
 800a692:	d917      	bls.n	800a6c4 <HAL_SPI_Transmit+0x300>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d013      	beq.n	800a6c4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6a0:	881a      	ldrh	r2, [r3, #0]
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6aa:	1c9a      	adds	r2, r3, #2
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	3b02      	subs	r3, #2
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a6c2:	e03b      	b.n	800a73c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3320      	adds	r3, #32
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a6ee:	e025      	b.n	800a73c <HAL_SPI_Transmit+0x378>
 800a6f0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6f4:	f7f7 fecc 	bl	8002490 <HAL_GetTick>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	d803      	bhi.n	800a70c <HAL_SPI_Transmit+0x348>
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d102      	bne.n	800a712 <HAL_SPI_Transmit+0x34e>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d114      	bne.n	800a73c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f844 	bl	800a7a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a71e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e02c      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a742:	b29b      	uxth	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	f47f af79 	bne.w	800a63c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2200      	movs	r2, #0
 800a752:	2108      	movs	r1, #8
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f8c3 	bl	800a8e0 <SPI_WaitOnFlagUntilTimeout>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d007      	beq.n	800a770 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a766:	f043 0220 	orr.w	r2, r3, #32
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f815 	bl	800a7a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a794:	2300      	movs	r3, #0
  }
}
 800a796:	4618      	mov	r0, r3
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop

0800a7a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699a      	ldr	r2, [r3, #24]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f042 0208 	orr.w	r2, r2, #8
 800a7be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f042 0210 	orr.w	r2, r2, #16
 800a7ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0201 	bic.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6919      	ldr	r1, [r3, #16]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4b3c      	ldr	r3, [pc, #240]	@ (800a8dc <SPI_CloseTransfer+0x13c>)
 800a7ec:	400b      	ands	r3, r1
 800a7ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a7fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d014      	beq.n	800a836 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00f      	beq.n	800a836 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a81c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	699a      	ldr	r2, [r3, #24]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f042 0220 	orr.w	r2, r2, #32
 800a834:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d014      	beq.n	800a86c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00f      	beq.n	800a86c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a852:	f043 0204 	orr.w	r2, r3, #4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a86a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00f      	beq.n	800a896 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a87c:	f043 0201 	orr.w	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	699a      	ldr	r2, [r3, #24]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a894:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00f      	beq.n	800a8c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8a6:	f043 0208 	orr.w	r2, r3, #8
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a8d0:	bf00      	nop
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	fffffc90 	.word	0xfffffc90

0800a8e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a8f0:	e010      	b.n	800a914 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8f2:	f7f7 fdcd 	bl	8002490 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d803      	bhi.n	800a90a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a908:	d102      	bne.n	800a910 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e00f      	b.n	800a934 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	695a      	ldr	r2, [r3, #20]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4013      	ands	r3, r2
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	429a      	cmp	r2, r3
 800a922:	bf0c      	ite	eq
 800a924:	2301      	moveq	r3, #1
 800a926:	2300      	movne	r3, #0
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	461a      	mov	r2, r3
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d0df      	beq.n	800a8f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	3301      	adds	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	3307      	adds	r3, #7
 800a95a:	08db      	lsrs	r3, r3, #3
 800a95c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	fb02 f303 	mul.w	r3, r2, r3
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e042      	b.n	800aa0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7f7 fc12 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2224      	movs	r2, #36	@ 0x24
 800a9a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0201 	bic.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fd91 	bl	800b4e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f826 	bl	800aa14 <UART_SetConfig>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e01b      	b.n	800aa0a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a9e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f042 0201 	orr.w	r2, r2, #1
 800aa00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fe10 	bl	800b628 <UART_CheckIdleState>
 800aa08:	4603      	mov	r3, r0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa18:	b092      	sub	sp, #72	@ 0x48
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	431a      	orrs	r2, r3
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4bbe      	ldr	r3, [pc, #760]	@ (800ad3c <UART_SetConfig+0x328>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4ab3      	ldr	r2, [pc, #716]	@ (800ad40 <UART_SetConfig+0x32c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	4baf      	ldr	r3, [pc, #700]	@ (800ad44 <UART_SetConfig+0x330>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9a:	f023 010f 	bic.w	r1, r3, #15
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4aa6      	ldr	r2, [pc, #664]	@ (800ad48 <UART_SetConfig+0x334>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d177      	bne.n	800aba4 <UART_SetConfig+0x190>
 800aab4:	4ba5      	ldr	r3, [pc, #660]	@ (800ad4c <UART_SetConfig+0x338>)
 800aab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aabc:	2b28      	cmp	r3, #40	@ 0x28
 800aabe:	d86d      	bhi.n	800ab9c <UART_SetConfig+0x188>
 800aac0:	a201      	add	r2, pc, #4	@ (adr r2, 800aac8 <UART_SetConfig+0xb4>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800ab6d 	.word	0x0800ab6d
 800aacc:	0800ab9d 	.word	0x0800ab9d
 800aad0:	0800ab9d 	.word	0x0800ab9d
 800aad4:	0800ab9d 	.word	0x0800ab9d
 800aad8:	0800ab9d 	.word	0x0800ab9d
 800aadc:	0800ab9d 	.word	0x0800ab9d
 800aae0:	0800ab9d 	.word	0x0800ab9d
 800aae4:	0800ab9d 	.word	0x0800ab9d
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab9d 	.word	0x0800ab9d
 800aaf0:	0800ab9d 	.word	0x0800ab9d
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800ab9d 	.word	0x0800ab9d
 800ab00:	0800ab9d 	.word	0x0800ab9d
 800ab04:	0800ab9d 	.word	0x0800ab9d
 800ab08:	0800ab7d 	.word	0x0800ab7d
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab9d 	.word	0x0800ab9d
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab9d 	.word	0x0800ab9d
 800ab20:	0800ab9d 	.word	0x0800ab9d
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800ab85 	.word	0x0800ab85
 800ab2c:	0800ab9d 	.word	0x0800ab9d
 800ab30:	0800ab9d 	.word	0x0800ab9d
 800ab34:	0800ab9d 	.word	0x0800ab9d
 800ab38:	0800ab9d 	.word	0x0800ab9d
 800ab3c:	0800ab9d 	.word	0x0800ab9d
 800ab40:	0800ab9d 	.word	0x0800ab9d
 800ab44:	0800ab9d 	.word	0x0800ab9d
 800ab48:	0800ab8d 	.word	0x0800ab8d
 800ab4c:	0800ab9d 	.word	0x0800ab9d
 800ab50:	0800ab9d 	.word	0x0800ab9d
 800ab54:	0800ab9d 	.word	0x0800ab9d
 800ab58:	0800ab9d 	.word	0x0800ab9d
 800ab5c:	0800ab9d 	.word	0x0800ab9d
 800ab60:	0800ab9d 	.word	0x0800ab9d
 800ab64:	0800ab9d 	.word	0x0800ab9d
 800ab68:	0800ab95 	.word	0x0800ab95
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab72:	e222      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab74:	2304      	movs	r3, #4
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7a:	e21e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab82:	e21a      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab84:	2310      	movs	r3, #16
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8a:	e216      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab92:	e212      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab94:	2340      	movs	r3, #64	@ 0x40
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e20e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab9c:	2380      	movs	r3, #128	@ 0x80
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e20a      	b.n	800afba <UART_SetConfig+0x5a6>
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a69      	ldr	r2, [pc, #420]	@ (800ad50 <UART_SetConfig+0x33c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d130      	bne.n	800ac10 <UART_SetConfig+0x1fc>
 800abae:	4b67      	ldr	r3, [pc, #412]	@ (800ad4c <UART_SetConfig+0x338>)
 800abb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d826      	bhi.n	800ac08 <UART_SetConfig+0x1f4>
 800abba:	a201      	add	r2, pc, #4	@ (adr r2, 800abc0 <UART_SetConfig+0x1ac>)
 800abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe9 	.word	0x0800abe9
 800abcc:	0800abf1 	.word	0x0800abf1
 800abd0:	0800abf9 	.word	0x0800abf9
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abde:	e1ec      	b.n	800afba <UART_SetConfig+0x5a6>
 800abe0:	2304      	movs	r3, #4
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe6:	e1e8      	b.n	800afba <UART_SetConfig+0x5a6>
 800abe8:	2308      	movs	r3, #8
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abee:	e1e4      	b.n	800afba <UART_SetConfig+0x5a6>
 800abf0:	2310      	movs	r3, #16
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf6:	e1e0      	b.n	800afba <UART_SetConfig+0x5a6>
 800abf8:	2320      	movs	r3, #32
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfe:	e1dc      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac00:	2340      	movs	r3, #64	@ 0x40
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e1d8      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac08:	2380      	movs	r3, #128	@ 0x80
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e1d4      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a4f      	ldr	r2, [pc, #316]	@ (800ad54 <UART_SetConfig+0x340>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d130      	bne.n	800ac7c <UART_SetConfig+0x268>
 800ac1a:	4b4c      	ldr	r3, [pc, #304]	@ (800ad4c <UART_SetConfig+0x338>)
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d826      	bhi.n	800ac74 <UART_SetConfig+0x260>
 800ac26:	a201      	add	r2, pc, #4	@ (adr r2, 800ac2c <UART_SetConfig+0x218>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800ac45 	.word	0x0800ac45
 800ac30:	0800ac4d 	.word	0x0800ac4d
 800ac34:	0800ac55 	.word	0x0800ac55
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac65 	.word	0x0800ac65
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4a:	e1b6      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac52:	e1b2      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5a:	e1ae      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac62:	e1aa      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e1a6      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac6c:	2340      	movs	r3, #64	@ 0x40
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e1a2      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac74:	2380      	movs	r3, #128	@ 0x80
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e19e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a35      	ldr	r2, [pc, #212]	@ (800ad58 <UART_SetConfig+0x344>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d130      	bne.n	800ace8 <UART_SetConfig+0x2d4>
 800ac86:	4b31      	ldr	r3, [pc, #196]	@ (800ad4c <UART_SetConfig+0x338>)
 800ac88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d826      	bhi.n	800ace0 <UART_SetConfig+0x2cc>
 800ac92:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <UART_SetConfig+0x284>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acc1 	.word	0x0800acc1
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e180      	b.n	800afba <UART_SetConfig+0x5a6>
 800acb8:	2304      	movs	r3, #4
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e17c      	b.n	800afba <UART_SetConfig+0x5a6>
 800acc0:	2308      	movs	r3, #8
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e178      	b.n	800afba <UART_SetConfig+0x5a6>
 800acc8:	2310      	movs	r3, #16
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e174      	b.n	800afba <UART_SetConfig+0x5a6>
 800acd0:	2320      	movs	r3, #32
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e170      	b.n	800afba <UART_SetConfig+0x5a6>
 800acd8:	2340      	movs	r3, #64	@ 0x40
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e16c      	b.n	800afba <UART_SetConfig+0x5a6>
 800ace0:	2380      	movs	r3, #128	@ 0x80
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e168      	b.n	800afba <UART_SetConfig+0x5a6>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1b      	ldr	r2, [pc, #108]	@ (800ad5c <UART_SetConfig+0x348>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d142      	bne.n	800ad78 <UART_SetConfig+0x364>
 800acf2:	4b16      	ldr	r3, [pc, #88]	@ (800ad4c <UART_SetConfig+0x338>)
 800acf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d838      	bhi.n	800ad70 <UART_SetConfig+0x35c>
 800acfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ad04 <UART_SetConfig+0x2f0>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	0800ad2d 	.word	0x0800ad2d
 800ad10:	0800ad35 	.word	0x0800ad35
 800ad14:	0800ad61 	.word	0x0800ad61
 800ad18:	0800ad69 	.word	0x0800ad69
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e14a      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e146      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e142      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e13e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad3c:	cfff69f3 	.word	0xcfff69f3
 800ad40:	58000c00 	.word	0x58000c00
 800ad44:	11fff4ff 	.word	0x11fff4ff
 800ad48:	40011000 	.word	0x40011000
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	40004400 	.word	0x40004400
 800ad54:	40004800 	.word	0x40004800
 800ad58:	40004c00 	.word	0x40004c00
 800ad5c:	40005000 	.word	0x40005000
 800ad60:	2320      	movs	r3, #32
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad66:	e128      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad68:	2340      	movs	r3, #64	@ 0x40
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6e:	e124      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad70:	2380      	movs	r3, #128	@ 0x80
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad76:	e120      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4acb      	ldr	r2, [pc, #812]	@ (800b0ac <UART_SetConfig+0x698>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d176      	bne.n	800ae70 <UART_SetConfig+0x45c>
 800ad82:	4bcb      	ldr	r3, [pc, #812]	@ (800b0b0 <UART_SetConfig+0x69c>)
 800ad84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad8a:	2b28      	cmp	r3, #40	@ 0x28
 800ad8c:	d86c      	bhi.n	800ae68 <UART_SetConfig+0x454>
 800ad8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad94 <UART_SetConfig+0x380>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ae39 	.word	0x0800ae39
 800ad98:	0800ae69 	.word	0x0800ae69
 800ad9c:	0800ae69 	.word	0x0800ae69
 800ada0:	0800ae69 	.word	0x0800ae69
 800ada4:	0800ae69 	.word	0x0800ae69
 800ada8:	0800ae69 	.word	0x0800ae69
 800adac:	0800ae69 	.word	0x0800ae69
 800adb0:	0800ae69 	.word	0x0800ae69
 800adb4:	0800ae41 	.word	0x0800ae41
 800adb8:	0800ae69 	.word	0x0800ae69
 800adbc:	0800ae69 	.word	0x0800ae69
 800adc0:	0800ae69 	.word	0x0800ae69
 800adc4:	0800ae69 	.word	0x0800ae69
 800adc8:	0800ae69 	.word	0x0800ae69
 800adcc:	0800ae69 	.word	0x0800ae69
 800add0:	0800ae69 	.word	0x0800ae69
 800add4:	0800ae49 	.word	0x0800ae49
 800add8:	0800ae69 	.word	0x0800ae69
 800addc:	0800ae69 	.word	0x0800ae69
 800ade0:	0800ae69 	.word	0x0800ae69
 800ade4:	0800ae69 	.word	0x0800ae69
 800ade8:	0800ae69 	.word	0x0800ae69
 800adec:	0800ae69 	.word	0x0800ae69
 800adf0:	0800ae69 	.word	0x0800ae69
 800adf4:	0800ae51 	.word	0x0800ae51
 800adf8:	0800ae69 	.word	0x0800ae69
 800adfc:	0800ae69 	.word	0x0800ae69
 800ae00:	0800ae69 	.word	0x0800ae69
 800ae04:	0800ae69 	.word	0x0800ae69
 800ae08:	0800ae69 	.word	0x0800ae69
 800ae0c:	0800ae69 	.word	0x0800ae69
 800ae10:	0800ae69 	.word	0x0800ae69
 800ae14:	0800ae59 	.word	0x0800ae59
 800ae18:	0800ae69 	.word	0x0800ae69
 800ae1c:	0800ae69 	.word	0x0800ae69
 800ae20:	0800ae69 	.word	0x0800ae69
 800ae24:	0800ae69 	.word	0x0800ae69
 800ae28:	0800ae69 	.word	0x0800ae69
 800ae2c:	0800ae69 	.word	0x0800ae69
 800ae30:	0800ae69 	.word	0x0800ae69
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3e:	e0bc      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae40:	2304      	movs	r3, #4
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae46:	e0b8      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4e:	e0b4      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae50:	2310      	movs	r3, #16
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e0b0      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e0ac      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae60:	2340      	movs	r3, #64	@ 0x40
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e0a8      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae68:	2380      	movs	r3, #128	@ 0x80
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e0a4      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a8f      	ldr	r2, [pc, #572]	@ (800b0b4 <UART_SetConfig+0x6a0>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d130      	bne.n	800aedc <UART_SetConfig+0x4c8>
 800ae7a:	4b8d      	ldr	r3, [pc, #564]	@ (800b0b0 <UART_SetConfig+0x69c>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d826      	bhi.n	800aed4 <UART_SetConfig+0x4c0>
 800ae86:	a201      	add	r2, pc, #4	@ (adr r2, 800ae8c <UART_SetConfig+0x478>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aea5 	.word	0x0800aea5
 800ae90:	0800aead 	.word	0x0800aead
 800ae94:	0800aeb5 	.word	0x0800aeb5
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aec5 	.word	0x0800aec5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e086      	b.n	800afba <UART_SetConfig+0x5a6>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb2:	e082      	b.n	800afba <UART_SetConfig+0x5a6>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeba:	e07e      	b.n	800afba <UART_SetConfig+0x5a6>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec2:	e07a      	b.n	800afba <UART_SetConfig+0x5a6>
 800aec4:	2320      	movs	r3, #32
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeca:	e076      	b.n	800afba <UART_SetConfig+0x5a6>
 800aecc:	2340      	movs	r3, #64	@ 0x40
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e072      	b.n	800afba <UART_SetConfig+0x5a6>
 800aed4:	2380      	movs	r3, #128	@ 0x80
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e06e      	b.n	800afba <UART_SetConfig+0x5a6>
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a75      	ldr	r2, [pc, #468]	@ (800b0b8 <UART_SetConfig+0x6a4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d130      	bne.n	800af48 <UART_SetConfig+0x534>
 800aee6:	4b72      	ldr	r3, [pc, #456]	@ (800b0b0 <UART_SetConfig+0x69c>)
 800aee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d826      	bhi.n	800af40 <UART_SetConfig+0x52c>
 800aef2:	a201      	add	r2, pc, #4	@ (adr r2, 800aef8 <UART_SetConfig+0x4e4>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af11 	.word	0x0800af11
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af31 	.word	0x0800af31
 800af0c:	0800af39 	.word	0x0800af39
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af16:	e050      	b.n	800afba <UART_SetConfig+0x5a6>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1e:	e04c      	b.n	800afba <UART_SetConfig+0x5a6>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af26:	e048      	b.n	800afba <UART_SetConfig+0x5a6>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2e:	e044      	b.n	800afba <UART_SetConfig+0x5a6>
 800af30:	2320      	movs	r3, #32
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e040      	b.n	800afba <UART_SetConfig+0x5a6>
 800af38:	2340      	movs	r3, #64	@ 0x40
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3e:	e03c      	b.n	800afba <UART_SetConfig+0x5a6>
 800af40:	2380      	movs	r3, #128	@ 0x80
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af46:	e038      	b.n	800afba <UART_SetConfig+0x5a6>
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a5b      	ldr	r2, [pc, #364]	@ (800b0bc <UART_SetConfig+0x6a8>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d130      	bne.n	800afb4 <UART_SetConfig+0x5a0>
 800af52:	4b57      	ldr	r3, [pc, #348]	@ (800b0b0 <UART_SetConfig+0x69c>)
 800af54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d826      	bhi.n	800afac <UART_SetConfig+0x598>
 800af5e:	a201      	add	r2, pc, #4	@ (adr r2, 800af64 <UART_SetConfig+0x550>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af7d 	.word	0x0800af7d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	0800af8d 	.word	0x0800af8d
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800af9d 	.word	0x0800af9d
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	2302      	movs	r3, #2
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af82:	e01a      	b.n	800afba <UART_SetConfig+0x5a6>
 800af84:	2304      	movs	r3, #4
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e016      	b.n	800afba <UART_SetConfig+0x5a6>
 800af8c:	2308      	movs	r3, #8
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af92:	e012      	b.n	800afba <UART_SetConfig+0x5a6>
 800af94:	2310      	movs	r3, #16
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e00e      	b.n	800afba <UART_SetConfig+0x5a6>
 800af9c:	2320      	movs	r3, #32
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e00a      	b.n	800afba <UART_SetConfig+0x5a6>
 800afa4:	2340      	movs	r3, #64	@ 0x40
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e006      	b.n	800afba <UART_SetConfig+0x5a6>
 800afac:	2380      	movs	r3, #128	@ 0x80
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e002      	b.n	800afba <UART_SetConfig+0x5a6>
 800afb4:	2380      	movs	r3, #128	@ 0x80
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a3f      	ldr	r2, [pc, #252]	@ (800b0bc <UART_SetConfig+0x6a8>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	f040 80f8 	bne.w	800b1b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afca:	2b20      	cmp	r3, #32
 800afcc:	dc46      	bgt.n	800b05c <UART_SetConfig+0x648>
 800afce:	2b02      	cmp	r3, #2
 800afd0:	f2c0 8082 	blt.w	800b0d8 <UART_SetConfig+0x6c4>
 800afd4:	3b02      	subs	r3, #2
 800afd6:	2b1e      	cmp	r3, #30
 800afd8:	d87e      	bhi.n	800b0d8 <UART_SetConfig+0x6c4>
 800afda:	a201      	add	r2, pc, #4	@ (adr r2, 800afe0 <UART_SetConfig+0x5cc>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b063 	.word	0x0800b063
 800afe4:	0800b0d9 	.word	0x0800b0d9
 800afe8:	0800b06b 	.word	0x0800b06b
 800afec:	0800b0d9 	.word	0x0800b0d9
 800aff0:	0800b0d9 	.word	0x0800b0d9
 800aff4:	0800b0d9 	.word	0x0800b0d9
 800aff8:	0800b07b 	.word	0x0800b07b
 800affc:	0800b0d9 	.word	0x0800b0d9
 800b000:	0800b0d9 	.word	0x0800b0d9
 800b004:	0800b0d9 	.word	0x0800b0d9
 800b008:	0800b0d9 	.word	0x0800b0d9
 800b00c:	0800b0d9 	.word	0x0800b0d9
 800b010:	0800b0d9 	.word	0x0800b0d9
 800b014:	0800b0d9 	.word	0x0800b0d9
 800b018:	0800b08b 	.word	0x0800b08b
 800b01c:	0800b0d9 	.word	0x0800b0d9
 800b020:	0800b0d9 	.word	0x0800b0d9
 800b024:	0800b0d9 	.word	0x0800b0d9
 800b028:	0800b0d9 	.word	0x0800b0d9
 800b02c:	0800b0d9 	.word	0x0800b0d9
 800b030:	0800b0d9 	.word	0x0800b0d9
 800b034:	0800b0d9 	.word	0x0800b0d9
 800b038:	0800b0d9 	.word	0x0800b0d9
 800b03c:	0800b0d9 	.word	0x0800b0d9
 800b040:	0800b0d9 	.word	0x0800b0d9
 800b044:	0800b0d9 	.word	0x0800b0d9
 800b048:	0800b0d9 	.word	0x0800b0d9
 800b04c:	0800b0d9 	.word	0x0800b0d9
 800b050:	0800b0d9 	.word	0x0800b0d9
 800b054:	0800b0d9 	.word	0x0800b0d9
 800b058:	0800b0cb 	.word	0x0800b0cb
 800b05c:	2b40      	cmp	r3, #64	@ 0x40
 800b05e:	d037      	beq.n	800b0d0 <UART_SetConfig+0x6bc>
 800b060:	e03a      	b.n	800b0d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b062:	f7fc feb3 	bl	8007dcc <HAL_RCCEx_GetD3PCLK1Freq>
 800b066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b068:	e03c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b06a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fc fec2 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b078:	e034      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd f80e 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b088:	e02c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b08a:	4b09      	ldr	r3, [pc, #36]	@ (800b0b0 <UART_SetConfig+0x69c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b00      	cmp	r3, #0
 800b094:	d016      	beq.n	800b0c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b096:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <UART_SetConfig+0x69c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	4a07      	ldr	r2, [pc, #28]	@ (800b0c0 <UART_SetConfig+0x6ac>)
 800b0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0a8:	e01c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
 800b0aa:	bf00      	nop
 800b0ac:	40011400 	.word	0x40011400
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	40007800 	.word	0x40007800
 800b0b8:	40007c00 	.word	0x40007c00
 800b0bc:	58000c00 	.word	0x58000c00
 800b0c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b0c4:	4b9d      	ldr	r3, [pc, #628]	@ (800b33c <UART_SetConfig+0x928>)
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e00c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0ca:	4b9d      	ldr	r3, [pc, #628]	@ (800b340 <UART_SetConfig+0x92c>)
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ce:	e009      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d6:	e005      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 81de 	beq.w	800b4a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	4a94      	ldr	r2, [pc, #592]	@ (800b344 <UART_SetConfig+0x930>)
 800b0f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	4613      	mov	r3, r2
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4413      	add	r3, r2
 800b10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d305      	bcc.n	800b11c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b118:	429a      	cmp	r2, r3
 800b11a:	d903      	bls.n	800b124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b122:	e1c1      	b.n	800b4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b126:	2200      	movs	r2, #0
 800b128:	60bb      	str	r3, [r7, #8]
 800b12a:	60fa      	str	r2, [r7, #12]
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b130:	4a84      	ldr	r2, [pc, #528]	@ (800b344 <UART_SetConfig+0x930>)
 800b132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b136:	b29b      	uxth	r3, r3
 800b138:	2200      	movs	r2, #0
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	607a      	str	r2, [r7, #4]
 800b13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b146:	f7f5 f8c7 	bl	80002d8 <__aeabi_uldivmod>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4610      	mov	r0, r2
 800b150:	4619      	mov	r1, r3
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	f04f 0300 	mov.w	r3, #0
 800b15a:	020b      	lsls	r3, r1, #8
 800b15c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b160:	0202      	lsls	r2, r0, #8
 800b162:	6979      	ldr	r1, [r7, #20]
 800b164:	6849      	ldr	r1, [r1, #4]
 800b166:	0849      	lsrs	r1, r1, #1
 800b168:	2000      	movs	r0, #0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4605      	mov	r5, r0
 800b16e:	eb12 0804 	adds.w	r8, r2, r4
 800b172:	eb43 0905 	adc.w	r9, r3, r5
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	469a      	mov	sl, r3
 800b17e:	4693      	mov	fp, r2
 800b180:	4652      	mov	r2, sl
 800b182:	465b      	mov	r3, fp
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 f8a6 	bl	80002d8 <__aeabi_uldivmod>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4613      	mov	r3, r2
 800b192:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b19a:	d308      	bcc.n	800b1ae <UART_SetConfig+0x79a>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a2:	d204      	bcs.n	800b1ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1aa:	60da      	str	r2, [r3, #12]
 800b1ac:	e17c      	b.n	800b4a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1b4:	e178      	b.n	800b4a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1be:	f040 80c5 	bne.w	800b34c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b1c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	dc48      	bgt.n	800b25c <UART_SetConfig+0x848>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	db7b      	blt.n	800b2c6 <UART_SetConfig+0x8b2>
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d879      	bhi.n	800b2c6 <UART_SetConfig+0x8b2>
 800b1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d8 <UART_SetConfig+0x7c4>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b263 	.word	0x0800b263
 800b1dc:	0800b26b 	.word	0x0800b26b
 800b1e0:	0800b2c7 	.word	0x0800b2c7
 800b1e4:	0800b2c7 	.word	0x0800b2c7
 800b1e8:	0800b273 	.word	0x0800b273
 800b1ec:	0800b2c7 	.word	0x0800b2c7
 800b1f0:	0800b2c7 	.word	0x0800b2c7
 800b1f4:	0800b2c7 	.word	0x0800b2c7
 800b1f8:	0800b283 	.word	0x0800b283
 800b1fc:	0800b2c7 	.word	0x0800b2c7
 800b200:	0800b2c7 	.word	0x0800b2c7
 800b204:	0800b2c7 	.word	0x0800b2c7
 800b208:	0800b2c7 	.word	0x0800b2c7
 800b20c:	0800b2c7 	.word	0x0800b2c7
 800b210:	0800b2c7 	.word	0x0800b2c7
 800b214:	0800b2c7 	.word	0x0800b2c7
 800b218:	0800b293 	.word	0x0800b293
 800b21c:	0800b2c7 	.word	0x0800b2c7
 800b220:	0800b2c7 	.word	0x0800b2c7
 800b224:	0800b2c7 	.word	0x0800b2c7
 800b228:	0800b2c7 	.word	0x0800b2c7
 800b22c:	0800b2c7 	.word	0x0800b2c7
 800b230:	0800b2c7 	.word	0x0800b2c7
 800b234:	0800b2c7 	.word	0x0800b2c7
 800b238:	0800b2c7 	.word	0x0800b2c7
 800b23c:	0800b2c7 	.word	0x0800b2c7
 800b240:	0800b2c7 	.word	0x0800b2c7
 800b244:	0800b2c7 	.word	0x0800b2c7
 800b248:	0800b2c7 	.word	0x0800b2c7
 800b24c:	0800b2c7 	.word	0x0800b2c7
 800b250:	0800b2c7 	.word	0x0800b2c7
 800b254:	0800b2c7 	.word	0x0800b2c7
 800b258:	0800b2b9 	.word	0x0800b2b9
 800b25c:	2b40      	cmp	r3, #64	@ 0x40
 800b25e:	d02e      	beq.n	800b2be <UART_SetConfig+0x8aa>
 800b260:	e031      	b.n	800b2c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b262:	f7fa fdbd 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 800b266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b268:	e033      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b26a:	f7fa fdcf 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 800b26e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b270:	e02f      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fc fdbe 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b280:	e027      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b282:	f107 0318 	add.w	r3, r7, #24
 800b286:	4618      	mov	r0, r3
 800b288:	f7fc ff0a 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b290:	e01f      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b292:	4b2d      	ldr	r3, [pc, #180]	@ (800b348 <UART_SetConfig+0x934>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d009      	beq.n	800b2b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b29e:	4b2a      	ldr	r3, [pc, #168]	@ (800b348 <UART_SetConfig+0x934>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	08db      	lsrs	r3, r3, #3
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	4a24      	ldr	r2, [pc, #144]	@ (800b33c <UART_SetConfig+0x928>)
 800b2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2b0:	e00f      	b.n	800b2d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2b2:	4b22      	ldr	r3, [pc, #136]	@ (800b33c <UART_SetConfig+0x928>)
 800b2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b6:	e00c      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2b8:	4b21      	ldr	r3, [pc, #132]	@ (800b340 <UART_SetConfig+0x92c>)
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2bc:	e009      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	e005      	b.n	800b2d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 80e7 	beq.w	800b4a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	4a19      	ldr	r2, [pc, #100]	@ (800b344 <UART_SetConfig+0x930>)
 800b2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2ec:	005a      	lsls	r2, r3, #1
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	441a      	add	r2, r3
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b302:	2b0f      	cmp	r3, #15
 800b304:	d916      	bls.n	800b334 <UART_SetConfig+0x920>
 800b306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b30c:	d212      	bcs.n	800b334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b310:	b29b      	uxth	r3, r3
 800b312:	f023 030f 	bic.w	r3, r3, #15
 800b316:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	b29a      	uxth	r2, r3
 800b324:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b326:	4313      	orrs	r3, r2
 800b328:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	e0b9      	b.n	800b4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b33a:	e0b5      	b.n	800b4a8 <UART_SetConfig+0xa94>
 800b33c:	03d09000 	.word	0x03d09000
 800b340:	003d0900 	.word	0x003d0900
 800b344:	0800f9c4 	.word	0x0800f9c4
 800b348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b34c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b350:	2b20      	cmp	r3, #32
 800b352:	dc49      	bgt.n	800b3e8 <UART_SetConfig+0x9d4>
 800b354:	2b00      	cmp	r3, #0
 800b356:	db7c      	blt.n	800b452 <UART_SetConfig+0xa3e>
 800b358:	2b20      	cmp	r3, #32
 800b35a:	d87a      	bhi.n	800b452 <UART_SetConfig+0xa3e>
 800b35c:	a201      	add	r2, pc, #4	@ (adr r2, 800b364 <UART_SetConfig+0x950>)
 800b35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b362:	bf00      	nop
 800b364:	0800b3ef 	.word	0x0800b3ef
 800b368:	0800b3f7 	.word	0x0800b3f7
 800b36c:	0800b453 	.word	0x0800b453
 800b370:	0800b453 	.word	0x0800b453
 800b374:	0800b3ff 	.word	0x0800b3ff
 800b378:	0800b453 	.word	0x0800b453
 800b37c:	0800b453 	.word	0x0800b453
 800b380:	0800b453 	.word	0x0800b453
 800b384:	0800b40f 	.word	0x0800b40f
 800b388:	0800b453 	.word	0x0800b453
 800b38c:	0800b453 	.word	0x0800b453
 800b390:	0800b453 	.word	0x0800b453
 800b394:	0800b453 	.word	0x0800b453
 800b398:	0800b453 	.word	0x0800b453
 800b39c:	0800b453 	.word	0x0800b453
 800b3a0:	0800b453 	.word	0x0800b453
 800b3a4:	0800b41f 	.word	0x0800b41f
 800b3a8:	0800b453 	.word	0x0800b453
 800b3ac:	0800b453 	.word	0x0800b453
 800b3b0:	0800b453 	.word	0x0800b453
 800b3b4:	0800b453 	.word	0x0800b453
 800b3b8:	0800b453 	.word	0x0800b453
 800b3bc:	0800b453 	.word	0x0800b453
 800b3c0:	0800b453 	.word	0x0800b453
 800b3c4:	0800b453 	.word	0x0800b453
 800b3c8:	0800b453 	.word	0x0800b453
 800b3cc:	0800b453 	.word	0x0800b453
 800b3d0:	0800b453 	.word	0x0800b453
 800b3d4:	0800b453 	.word	0x0800b453
 800b3d8:	0800b453 	.word	0x0800b453
 800b3dc:	0800b453 	.word	0x0800b453
 800b3e0:	0800b453 	.word	0x0800b453
 800b3e4:	0800b445 	.word	0x0800b445
 800b3e8:	2b40      	cmp	r3, #64	@ 0x40
 800b3ea:	d02e      	beq.n	800b44a <UART_SetConfig+0xa36>
 800b3ec:	e031      	b.n	800b452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3ee:	f7fa fcf7 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 800b3f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3f4:	e033      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3f6:	f7fa fd09 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 800b3fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3fc:	e02f      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b402:	4618      	mov	r0, r3
 800b404:	f7fc fcf8 	bl	8007df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40c:	e027      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b40e:	f107 0318 	add.w	r3, r7, #24
 800b412:	4618      	mov	r0, r3
 800b414:	f7fc fe44 	bl	80080a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b41c:	e01f      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b41e:	4b2d      	ldr	r3, [pc, #180]	@ (800b4d4 <UART_SetConfig+0xac0>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0320 	and.w	r3, r3, #32
 800b426:	2b00      	cmp	r3, #0
 800b428:	d009      	beq.n	800b43e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b42a:	4b2a      	ldr	r3, [pc, #168]	@ (800b4d4 <UART_SetConfig+0xac0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	08db      	lsrs	r3, r3, #3
 800b430:	f003 0303 	and.w	r3, r3, #3
 800b434:	4a28      	ldr	r2, [pc, #160]	@ (800b4d8 <UART_SetConfig+0xac4>)
 800b436:	fa22 f303 	lsr.w	r3, r2, r3
 800b43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b43c:	e00f      	b.n	800b45e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b43e:	4b26      	ldr	r3, [pc, #152]	@ (800b4d8 <UART_SetConfig+0xac4>)
 800b440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b442:	e00c      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b444:	4b25      	ldr	r3, [pc, #148]	@ (800b4dc <UART_SetConfig+0xac8>)
 800b446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b448:	e009      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b44a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b450:	e005      	b.n	800b45e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b45c:	bf00      	nop
    }

    if (pclk != 0U)
 800b45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d021      	beq.n	800b4a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b468:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e0 <UART_SetConfig+0xacc>)
 800b46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b46e:	461a      	mov	r2, r3
 800b470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b472:	fbb3 f2f2 	udiv	r2, r3, r2
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	085b      	lsrs	r3, r3, #1
 800b47c:	441a      	add	r2, r3
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	fbb2 f3f3 	udiv	r3, r2, r3
 800b486:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48a:	2b0f      	cmp	r3, #15
 800b48c:	d909      	bls.n	800b4a2 <UART_SetConfig+0xa8e>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b494:	d205      	bcs.n	800b4a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b498:	b29a      	uxth	r2, r3
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60da      	str	r2, [r3, #12]
 800b4a0:	e002      	b.n	800b4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3748      	adds	r7, #72	@ 0x48
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4d2:	bf00      	nop
 800b4d4:	58024400 	.word	0x58024400
 800b4d8:	03d09000 	.word	0x03d09000
 800b4dc:	003d0900 	.word	0x003d0900
 800b4e0:	0800f9c4 	.word	0x0800f9c4

0800b4e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00a      	beq.n	800b50e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00a      	beq.n	800b530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00a      	beq.n	800b552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	f003 0304 	and.w	r3, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	430a      	orrs	r2, r1
 800b572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00a      	beq.n	800b596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	f003 0320 	and.w	r3, r3, #32
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01a      	beq.n	800b5fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5e2:	d10a      	bne.n	800b5fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	605a      	str	r2, [r3, #4]
  }
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b098      	sub	sp, #96	@ 0x60
 800b62c:	af02      	add	r7, sp, #8
 800b62e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b638:	f7f6 ff2a 	bl	8002490 <HAL_GetTick>
 800b63c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0308 	and.w	r3, r3, #8
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d12f      	bne.n	800b6ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b64c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b654:	2200      	movs	r2, #0
 800b656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f88e 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d022      	beq.n	800b6ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b67a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b684:	647b      	str	r3, [r7, #68]	@ 0x44
 800b686:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b68a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e6      	bne.n	800b666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e063      	b.n	800b774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d149      	bne.n	800b74e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f857 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d03c      	beq.n	800b74e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e6      	bne.n	800b6d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	60fb      	str	r3, [r7, #12]
   return(result);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b726:	61fa      	str	r2, [r7, #28]
 800b728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	69b9      	ldr	r1, [r7, #24]
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	617b      	str	r3, [r7, #20]
   return(result);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e5      	bne.n	800b706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2220      	movs	r2, #32
 800b73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e012      	b.n	800b774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3758      	adds	r7, #88	@ 0x58
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	4613      	mov	r3, r2
 800b78a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b78c:	e04f      	b.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d04b      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b796:	f7f6 fe7b 	bl	8002490 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d302      	bcc.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e04e      	b.n	800b84e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d037      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b80      	cmp	r3, #128	@ 0x80
 800b7c2:	d034      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2b40      	cmp	r3, #64	@ 0x40
 800b7c8:	d031      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d110      	bne.n	800b7fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2208      	movs	r2, #8
 800b7de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f839 	bl	800b858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2208      	movs	r2, #8
 800b7ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e029      	b.n	800b84e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	69db      	ldr	r3, [r3, #28]
 800b800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b808:	d111      	bne.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 f81f 	bl	800b858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e00f      	b.n	800b84e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69da      	ldr	r2, [r3, #28]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4013      	ands	r3, r2
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	bf0c      	ite	eq
 800b83e:	2301      	moveq	r3, #1
 800b840:	2300      	movne	r3, #0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	79fb      	ldrb	r3, [r7, #7]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d0a0      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b095      	sub	sp, #84	@ 0x54
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b87e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b880:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e6      	bne.n	800b860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	4b1e      	ldr	r3, [pc, #120]	@ (800b920 <UART_EndRxTransfer+0xc8>)
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e5      	bne.n	800b892 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d118      	bne.n	800b900 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f023 0310 	bic.w	r3, r3, #16
 800b8e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ec:	61bb      	str	r3, [r7, #24]
 800b8ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	6979      	ldr	r1, [r7, #20]
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e6      	bne.n	800b8ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2220      	movs	r2, #32
 800b904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b914:	bf00      	nop
 800b916:	3754      	adds	r7, #84	@ 0x54
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	effffffe 	.word	0xeffffffe

0800b924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b932:	2b01      	cmp	r3, #1
 800b934:	d101      	bne.n	800b93a <HAL_UARTEx_DisableFifoMode+0x16>
 800b936:	2302      	movs	r3, #2
 800b938:	e027      	b.n	800b98a <HAL_UARTEx_DisableFifoMode+0x66>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2224      	movs	r2, #36	@ 0x24
 800b946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 0201 	bic.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d101      	bne.n	800b9ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9aa:	2302      	movs	r3, #2
 800b9ac:	e02d      	b.n	800ba0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2224      	movs	r2, #36	@ 0x24
 800b9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 0201 	bic.w	r2, r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f850 	bl	800ba90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d101      	bne.n	800ba2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba26:	2302      	movs	r3, #2
 800ba28:	e02d      	b.n	800ba86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2224      	movs	r2, #36	@ 0x24
 800ba36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f022 0201 	bic.w	r2, r2, #1
 800ba50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f812 	bl	800ba90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d108      	bne.n	800bab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bab0:	e031      	b.n	800bb16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bab2:	2310      	movs	r3, #16
 800bab4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bab6:	2310      	movs	r3, #16
 800bab8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	0e5b      	lsrs	r3, r3, #25
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	f003 0307 	and.w	r3, r3, #7
 800bac8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	0f5b      	lsrs	r3, r3, #29
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	f003 0307 	and.w	r3, r3, #7
 800bad8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	7b3a      	ldrb	r2, [r7, #12]
 800bade:	4911      	ldr	r1, [pc, #68]	@ (800bb24 <UARTEx_SetNbDataToProcess+0x94>)
 800bae0:	5c8a      	ldrb	r2, [r1, r2]
 800bae2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bae6:	7b3a      	ldrb	r2, [r7, #12]
 800bae8:	490f      	ldr	r1, [pc, #60]	@ (800bb28 <UARTEx_SetNbDataToProcess+0x98>)
 800baea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baec:	fb93 f3f2 	sdiv	r3, r3, r2
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	7b7a      	ldrb	r2, [r7, #13]
 800bafc:	4909      	ldr	r1, [pc, #36]	@ (800bb24 <UARTEx_SetNbDataToProcess+0x94>)
 800bafe:	5c8a      	ldrb	r2, [r1, r2]
 800bb00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb04:	7b7a      	ldrb	r2, [r7, #13]
 800bb06:	4908      	ldr	r1, [pc, #32]	@ (800bb28 <UARTEx_SetNbDataToProcess+0x98>)
 800bb08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb16:	bf00      	nop
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	0800f9dc 	.word	0x0800f9dc
 800bb28:	0800f9e4 	.word	0x0800f9e4

0800bb2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	b480      	push	{r7}
 800bb30:	b085      	sub	sp, #20
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	f107 001c 	add.w	r0, r7, #28
 800bb3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bb42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bb44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bb46:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bb4a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bb4e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bb52:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	4b07      	ldr	r3, [pc, #28]	@ (800bb7c <SDMMC_Init+0x50>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	b004      	add	sp, #16
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	ffc02c00 	.word	0xffc02c00

0800bb80 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f043 0203 	orr.w	r2, r3, #3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 0303 	and.w	r3, r3, #3
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
	...

0800bbfc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bc20:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bc26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68da      	ldr	r2, [r3, #12]
 800bc32:	4b06      	ldr	r3, [pc, #24]	@ (800bc4c <SDMMC_SendCommand+0x50>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	fffee0c0 	.word	0xfffee0c0

0800bc50 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	b2db      	uxtb	r3, r3
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3314      	adds	r3, #20
 800bc78:	461a      	mov	r2, r3
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bcb6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bcbc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bcc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0

}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bcf6:	2310      	movs	r3, #16
 800bcf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bcfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd00:	2300      	movs	r3, #0
 800bd02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd0a:	f107 0308 	add.w	r3, r7, #8
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff ff73 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bd16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd1a:	2110      	movs	r1, #16
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fa5f 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800bd22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd24:	69fb      	ldr	r3, [r7, #28]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3720      	adds	r7, #32
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b088      	sub	sp, #32
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd3c:	2311      	movs	r3, #17
 800bd3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd46:	2300      	movs	r3, #0
 800bd48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd50:	f107 0308 	add.w	r3, r7, #8
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff ff50 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd60:	2111      	movs	r1, #17
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fa3c 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800bd68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd6a:	69fb      	ldr	r3, [r7, #28]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3720      	adds	r7, #32
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd82:	2312      	movs	r3, #18
 800bd84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd96:	f107 0308 	add.w	r3, r7, #8
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff ff2d 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bda2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bda6:	2112      	movs	r1, #18
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fa19 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800bdae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3720      	adds	r7, #32
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b088      	sub	sp, #32
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bdc8:	2318      	movs	r3, #24
 800bdca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bdda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bddc:	f107 0308 	add.w	r3, r7, #8
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff ff0a 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bde8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdec:	2118      	movs	r1, #24
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f9f6 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800bdf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdf6:	69fb      	ldr	r3, [r7, #28]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3720      	adds	r7, #32
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be0e:	2319      	movs	r3, #25
 800be10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be18:	2300      	movs	r3, #0
 800be1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be22:	f107 0308 	add.w	r3, r7, #8
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff fee7 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be32:	2119      	movs	r1, #25
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f9d3 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800be3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be3c:	69fb      	ldr	r3, [r7, #28]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3720      	adds	r7, #32
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
	...

0800be48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be50:	2300      	movs	r3, #0
 800be52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be54:	230c      	movs	r3, #12
 800be56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be66:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be80:	f107 0308 	add.w	r3, r7, #8
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff feb8 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800be8c:	4a0b      	ldr	r2, [pc, #44]	@ (800bebc <SDMMC_CmdStopTransfer+0x74>)
 800be8e:	210c      	movs	r1, #12
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f9a5 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800be96:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800beaa:	d101      	bne.n	800beb0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800beac:	2300      	movs	r3, #0
 800beae:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800beb0:	69fb      	ldr	r3, [r7, #28]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3720      	adds	r7, #32
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	05f5e100 	.word	0x05f5e100

0800bec0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bece:	2307      	movs	r3, #7
 800bed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bed8:	2300      	movs	r3, #0
 800beda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bedc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bee0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bee2:	f107 0308 	add.w	r3, r7, #8
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff fe87 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800beee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bef2:	2107      	movs	r1, #7
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f973 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800befa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800befc:	69fb      	ldr	r3, [r7, #28]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3720      	adds	r7, #32
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b088      	sub	sp, #32
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bf16:	2300      	movs	r3, #0
 800bf18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf24:	f107 0308 	add.w	r3, r7, #8
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fe66 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fb97 	bl	800c664 <SDMMC_GetCmdError>
 800bf36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf38:	69fb      	ldr	r3, [r7, #28]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b088      	sub	sp, #32
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf4a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bf4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf50:	2308      	movs	r3, #8
 800bf52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf64:	f107 0308 	add.w	r3, r7, #8
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff fe46 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fb29 	bl	800c5c8 <SDMMC_GetCmdResp7>
 800bf76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf78:	69fb      	ldr	r3, [r7, #28]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3720      	adds	r7, #32
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b088      	sub	sp, #32
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf90:	2337      	movs	r3, #55	@ 0x37
 800bf92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfa4:	f107 0308 	add.w	r3, r7, #8
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fe26 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bfb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfb4:	2137      	movs	r1, #55	@ 0x37
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f912 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800bfbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfbe:	69fb      	ldr	r3, [r7, #28]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3720      	adds	r7, #32
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfd6:	2329      	movs	r3, #41	@ 0x29
 800bfd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfea:	f107 0308 	add.w	r3, r7, #8
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff fe03 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fa2e 	bl	800c458 <SDMMC_GetCmdResp3>
 800bffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bffe:	69fb      	ldr	r3, [r7, #28]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3720      	adds	r7, #32
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c016:	2306      	movs	r3, #6
 800c018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c01a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c01e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c02a:	f107 0308 	add.w	r3, r7, #8
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff fde3 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c03a:	2106      	movs	r1, #6
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f8cf 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800c042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c044:	69fb      	ldr	r3, [r7, #28]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3720      	adds	r7, #32
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b088      	sub	sp, #32
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c05a:	2333      	movs	r3, #51	@ 0x33
 800c05c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c05e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c06c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c06e:	f107 0308 	add.w	r3, r7, #8
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7ff fdc1 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c07a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c07e:	2133      	movs	r1, #51	@ 0x33
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f8ad 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800c086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c088:	69fb      	ldr	r3, [r7, #28]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b088      	sub	sp, #32
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c0a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff fd9f 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f980 	bl	800c3c4 <SDMMC_GetCmdResp2>
 800c0c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0de:	2309      	movs	r3, #9
 800c0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0f2:	f107 0308 	add.w	r3, r7, #8
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff fd7f 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f960 	bl	800c3c4 <SDMMC_GetCmdResp2>
 800c104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c106:	69fb      	ldr	r3, [r7, #28]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3720      	adds	r7, #32
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c11e:	2303      	movs	r3, #3
 800c120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c128:	2300      	movs	r3, #0
 800c12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c12c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c132:	f107 0308 	add.w	r3, r7, #8
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff fd5f 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	2103      	movs	r1, #3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f9c8 	bl	800c4d8 <SDMMC_GetCmdResp6>
 800c148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c14a:	69fb      	ldr	r3, [r7, #28]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3720      	adds	r7, #32
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c162:	230d      	movs	r3, #13
 800c164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c176:	f107 0308 	add.w	r3, r7, #8
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff fd3d 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c182:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c186:	210d      	movs	r1, #13
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f829 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800c18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c190:	69fb      	ldr	r3, [r7, #28]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3720      	adds	r7, #32
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b088      	sub	sp, #32
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c1a6:	230d      	movs	r3, #13
 800c1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ba:	f107 0308 	add.w	r3, r7, #8
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7ff fd1b 	bl	800bbfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c1c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1ca:	210d      	movs	r1, #13
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f807 	bl	800c1e0 <SDMMC_GetCmdResp1>
 800c1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3720      	adds	r7, #32
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
	...

0800c1e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	607a      	str	r2, [r7, #4]
 800c1ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c1ee:	4b70      	ldr	r3, [pc, #448]	@ (800c3b0 <SDMMC_GetCmdResp1+0x1d0>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a70      	ldr	r2, [pc, #448]	@ (800c3b4 <SDMMC_GetCmdResp1+0x1d4>)
 800c1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f8:	0a5a      	lsrs	r2, r3, #9
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	1e5a      	subs	r2, r3, #1
 800c206:	61fa      	str	r2, [r7, #28]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d102      	bne.n	800c212 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c20c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c210:	e0c9      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c216:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c218:	69ba      	ldr	r2, [r7, #24]
 800c21a:	4b67      	ldr	r3, [pc, #412]	@ (800c3b8 <SDMMC_GetCmdResp1+0x1d8>)
 800c21c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0ef      	beq.n	800c202 <SDMMC_GetCmdResp1+0x22>
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1ea      	bne.n	800c202 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c230:	f003 0304 	and.w	r3, r3, #4
 800c234:	2b00      	cmp	r3, #0
 800c236:	d004      	beq.n	800c242 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2204      	movs	r2, #4
 800c23c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c23e:	2304      	movs	r3, #4
 800c240:	e0b1      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d004      	beq.n	800c258 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2201      	movs	r2, #1
 800c252:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c254:	2301      	movs	r3, #1
 800c256:	e0a6      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	4a58      	ldr	r2, [pc, #352]	@ (800c3bc <SDMMC_GetCmdResp1+0x1dc>)
 800c25c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff fcf6 	bl	800bc50 <SDMMC_GetCommandResponse>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	7afb      	ldrb	r3, [r7, #11]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d001      	beq.n	800c272 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c26e:	2301      	movs	r3, #1
 800c270:	e099      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c272:	2100      	movs	r1, #0
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7ff fcf8 	bl	800bc6a <SDMMC_GetResponse>
 800c27a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	4b50      	ldr	r3, [pc, #320]	@ (800c3c0 <SDMMC_GetCmdResp1+0x1e0>)
 800c280:	4013      	ands	r3, r2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c286:	2300      	movs	r3, #0
 800c288:	e08d      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	da02      	bge.n	800c296 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c290:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c294:	e087      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2a0:	2340      	movs	r3, #64	@ 0x40
 800c2a2:	e080      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2ae:	2380      	movs	r3, #128	@ 0x80
 800c2b0:	e079      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2c0:	e071      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2d0:	e069      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2e0:	e061      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2f0:	e059      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c300:	e051      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c30c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c310:	e049      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c31c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c320:	e041      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c32c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c330:	e039      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c33c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c340:	e031      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c34c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c350:	e029      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c35c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c360:	e021      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c36c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c370:	e019      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c37c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c380:	e011      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c38c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c390:	e009      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f003 0308 	and.w	r3, r3, #8
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c39c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c3a0:	e001      	b.n	800c3a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3720      	adds	r7, #32
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	24000000 	.word	0x24000000
 800c3b4:	10624dd3 	.word	0x10624dd3
 800c3b8:	00200045 	.word	0x00200045
 800c3bc:	002000c5 	.word	0x002000c5
 800c3c0:	fdffe008 	.word	0xfdffe008

0800c3c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3cc:	4b1f      	ldr	r3, [pc, #124]	@ (800c44c <SDMMC_GetCmdResp2+0x88>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a1f      	ldr	r2, [pc, #124]	@ (800c450 <SDMMC_GetCmdResp2+0x8c>)
 800c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d6:	0a5b      	lsrs	r3, r3, #9
 800c3d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3dc:	fb02 f303 	mul.w	r3, r2, r3
 800c3e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	1e5a      	subs	r2, r3, #1
 800c3e6:	60fa      	str	r2, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c3f0:	e026      	b.n	800c440 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0ef      	beq.n	800c3e2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1ea      	bne.n	800c3e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2204      	movs	r2, #4
 800c41c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c41e:	2304      	movs	r3, #4
 800c420:	e00e      	b.n	800c440 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c426:	f003 0301 	and.w	r3, r3, #1
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d004      	beq.n	800c438 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c434:	2301      	movs	r3, #1
 800c436:	e003      	b.n	800c440 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a06      	ldr	r2, [pc, #24]	@ (800c454 <SDMMC_GetCmdResp2+0x90>)
 800c43c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	24000000 	.word	0x24000000
 800c450:	10624dd3 	.word	0x10624dd3
 800c454:	002000c5 	.word	0x002000c5

0800c458 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c460:	4b1a      	ldr	r3, [pc, #104]	@ (800c4cc <SDMMC_GetCmdResp3+0x74>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a1a      	ldr	r2, [pc, #104]	@ (800c4d0 <SDMMC_GetCmdResp3+0x78>)
 800c466:	fba2 2303 	umull	r2, r3, r2, r3
 800c46a:	0a5b      	lsrs	r3, r3, #9
 800c46c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c470:	fb02 f303 	mul.w	r3, r2, r3
 800c474:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	1e5a      	subs	r2, r3, #1
 800c47a:	60fa      	str	r2, [r7, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c480:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c484:	e01b      	b.n	800c4be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0ef      	beq.n	800c476 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1ea      	bne.n	800c476 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d004      	beq.n	800c4b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2204      	movs	r2, #4
 800c4b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4b2:	2304      	movs	r3, #4
 800c4b4:	e003      	b.n	800c4be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a06      	ldr	r2, [pc, #24]	@ (800c4d4 <SDMMC_GetCmdResp3+0x7c>)
 800c4ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	24000000 	.word	0x24000000
 800c4d0:	10624dd3 	.word	0x10624dd3
 800c4d4:	002000c5 	.word	0x002000c5

0800c4d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4e6:	4b35      	ldr	r3, [pc, #212]	@ (800c5bc <SDMMC_GetCmdResp6+0xe4>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a35      	ldr	r2, [pc, #212]	@ (800c5c0 <SDMMC_GetCmdResp6+0xe8>)
 800c4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f0:	0a5b      	lsrs	r3, r3, #9
 800c4f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4f6:	fb02 f303 	mul.w	r3, r2, r3
 800c4fa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	1e5a      	subs	r2, r3, #1
 800c500:	61fa      	str	r2, [r7, #28]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c506:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c50a:	e052      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c510:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0ef      	beq.n	800c4fc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1ea      	bne.n	800c4fc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c52a:	f003 0304 	and.w	r3, r3, #4
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d004      	beq.n	800c53c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2204      	movs	r2, #4
 800c536:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c538:	2304      	movs	r3, #4
 800c53a:	e03a      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2201      	movs	r2, #1
 800c54c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c54e:	2301      	movs	r3, #1
 800c550:	e02f      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7ff fb7c 	bl	800bc50 <SDMMC_GetCommandResponse>
 800c558:	4603      	mov	r3, r0
 800c55a:	461a      	mov	r2, r3
 800c55c:	7afb      	ldrb	r3, [r7, #11]
 800c55e:	4293      	cmp	r3, r2
 800c560:	d001      	beq.n	800c566 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c562:	2301      	movs	r3, #1
 800c564:	e025      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	4a16      	ldr	r2, [pc, #88]	@ (800c5c4 <SDMMC_GetCmdResp6+0xec>)
 800c56a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c56c:	2100      	movs	r1, #0
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff fb7b 	bl	800bc6a <SDMMC_GetResponse>
 800c574:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	0c1b      	lsrs	r3, r3, #16
 800c584:	b29a      	uxth	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e011      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c59c:	e009      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5ac:	e001      	b.n	800c5b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3720      	adds	r7, #32
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	24000000 	.word	0x24000000
 800c5c0:	10624dd3 	.word	0x10624dd3
 800c5c4:	002000c5 	.word	0x002000c5

0800c5c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5d0:	4b22      	ldr	r3, [pc, #136]	@ (800c65c <SDMMC_GetCmdResp7+0x94>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a22      	ldr	r2, [pc, #136]	@ (800c660 <SDMMC_GetCmdResp7+0x98>)
 800c5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5da:	0a5b      	lsrs	r3, r3, #9
 800c5dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5e0:	fb02 f303 	mul.w	r3, r2, r3
 800c5e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	1e5a      	subs	r2, r3, #1
 800c5ea:	60fa      	str	r2, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c5f4:	e02c      	b.n	800c650 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c602:	2b00      	cmp	r3, #0
 800c604:	d0ef      	beq.n	800c5e6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1ea      	bne.n	800c5e6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2204      	movs	r2, #4
 800c620:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c622:	2304      	movs	r3, #4
 800c624:	e014      	b.n	800c650 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d004      	beq.n	800c63c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c638:	2301      	movs	r3, #1
 800c63a:	e009      	b.n	800c650 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2240      	movs	r2, #64	@ 0x40
 800c64c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c64e:	2300      	movs	r3, #0

}
 800c650:	4618      	mov	r0, r3
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	24000000 	.word	0x24000000
 800c660:	10624dd3 	.word	0x10624dd3

0800c664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c66c:	4b11      	ldr	r3, [pc, #68]	@ (800c6b4 <SDMMC_GetCmdError+0x50>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a11      	ldr	r2, [pc, #68]	@ (800c6b8 <SDMMC_GetCmdError+0x54>)
 800c672:	fba2 2303 	umull	r2, r3, r2, r3
 800c676:	0a5b      	lsrs	r3, r3, #9
 800c678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c67c:	fb02 f303 	mul.w	r3, r2, r3
 800c680:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	1e5a      	subs	r2, r3, #1
 800c686:	60fa      	str	r2, [r7, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d102      	bne.n	800c692 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c68c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c690:	e009      	b.n	800c6a6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f1      	beq.n	800c682 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a06      	ldr	r2, [pc, #24]	@ (800c6bc <SDMMC_GetCmdError+0x58>)
 800c6a2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	24000000 	.word	0x24000000
 800c6b8:	10624dd3 	.word	0x10624dd3
 800c6bc:	002000c5 	.word	0x002000c5

0800c6c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c6c4:	4904      	ldr	r1, [pc, #16]	@ (800c6d8 <MX_FATFS_Init+0x18>)
 800c6c6:	4805      	ldr	r0, [pc, #20]	@ (800c6dc <MX_FATFS_Init+0x1c>)
 800c6c8:	f002 fdca 	bl	800f260 <FATFS_LinkDriver>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4b03      	ldr	r3, [pc, #12]	@ (800c6e0 <MX_FATFS_Init+0x20>)
 800c6d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6d4:	bf00      	nop
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	24076ddc 	.word	0x24076ddc
 800c6dc:	0800f9ec 	.word	0x0800f9ec
 800c6e0:	24076dd8 	.word	0x24076dd8

0800c6e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c6e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c6fe:	f000 f885 	bl	800c80c <BSP_SD_IsDetected>
 800c702:	4603      	mov	r3, r0
 800c704:	2b01      	cmp	r3, #1
 800c706:	d001      	beq.n	800c70c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c708:	2302      	movs	r3, #2
 800c70a:	e012      	b.n	800c732 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c70c:	480b      	ldr	r0, [pc, #44]	@ (800c73c <BSP_SD_Init+0x48>)
 800c70e:	f7fc f8d1 	bl	80088b4 <HAL_SD_Init>
 800c712:	4603      	mov	r3, r0
 800c714:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d109      	bne.n	800c730 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c71c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c720:	4806      	ldr	r0, [pc, #24]	@ (800c73c <BSP_SD_Init+0x48>)
 800c722:	f7fc ff87 	bl	8009634 <HAL_SD_ConfigWideBusOperation>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c730:	79fb      	ldrb	r3, [r7, #7]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	24076c3c 	.word	0x24076c3c

0800c740 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	68f9      	ldr	r1, [r7, #12]
 800c756:	4806      	ldr	r0, [pc, #24]	@ (800c770 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c758:	f7fc f9cc 	bl	8008af4 <HAL_SD_ReadBlocks_DMA>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c766:	7dfb      	ldrb	r3, [r7, #23]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3718      	adds	r7, #24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	24076c3c 	.word	0x24076c3c

0800c774 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b086      	sub	sp, #24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	68f9      	ldr	r1, [r7, #12]
 800c78a:	4806      	ldr	r0, [pc, #24]	@ (800c7a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c78c:	f7fc fa5a 	bl	8008c44 <HAL_SD_WriteBlocks_DMA>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	24076c3c 	.word	0x24076c3c

0800c7a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c7ac:	4805      	ldr	r0, [pc, #20]	@ (800c7c4 <BSP_SD_GetCardState+0x1c>)
 800c7ae:	f7fd f853 	bl	8009858 <HAL_SD_GetCardState>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	bf14      	ite	ne
 800c7b8:	2301      	movne	r3, #1
 800c7ba:	2300      	moveq	r3, #0
 800c7bc:	b2db      	uxtb	r3, r3
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	24076c3c 	.word	0x24076c3c

0800c7c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	4803      	ldr	r0, [pc, #12]	@ (800c7e0 <BSP_SD_GetCardInfo+0x18>)
 800c7d4:	f7fc ff02 	bl	80095dc <HAL_SD_GetCardInfo>
}
 800c7d8:	bf00      	nop
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	24076c3c 	.word	0x24076c3c

0800c7e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c7ec:	f000 f9a0 	bl	800cb30 <BSP_SD_WriteCpltCallback>
}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c800:	f000 f9a2 	bl	800cb48 <BSP_SD_ReadCpltCallback>
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c812:	2301      	movs	r3, #1
 800c814:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c816:	f000 f80b 	bl	800c830 <BSP_PlatformIsDetected>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c820:	2300      	movs	r3, #0
 800c822:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	b2db      	uxtb	r3, r3
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c836:	2301      	movs	r3, #1
 800c838:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c83a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c83e:	4806      	ldr	r0, [pc, #24]	@ (800c858 <BSP_PlatformIsDetected+0x28>)
 800c840:	f7f6 fcfe 	bl	8003240 <HAL_GPIO_ReadPin>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c84a:	2300      	movs	r3, #0
 800c84c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c84e:	79fb      	ldrb	r3, [r7, #7]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	58022000 	.word	0x58022000

0800c85c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c864:	f7f5 fe14 	bl	8002490 <HAL_GetTick>
 800c868:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c86a:	e006      	b.n	800c87a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c86c:	f7ff ff9c 	bl	800c7a8 <BSP_SD_GetCardState>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c876:	2300      	movs	r3, #0
 800c878:	e009      	b.n	800c88e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c87a:	f7f5 fe09 	bl	8002490 <HAL_GetTick>
 800c87e:	4602      	mov	r2, r0
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	429a      	cmp	r2, r3
 800c888:	d8f0      	bhi.n	800c86c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c88a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d0 <SD_CheckStatus+0x38>)
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c8a8:	f7ff ff7e 	bl	800c7a8 <BSP_SD_GetCardState>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d107      	bne.n	800c8c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c8b2:	4b07      	ldr	r3, [pc, #28]	@ (800c8d0 <SD_CheckStatus+0x38>)
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	f023 0301 	bic.w	r3, r3, #1
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	4b04      	ldr	r3, [pc, #16]	@ (800c8d0 <SD_CheckStatus+0x38>)
 800c8c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c8c2:	4b03      	ldr	r3, [pc, #12]	@ (800c8d0 <SD_CheckStatus+0x38>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	b2db      	uxtb	r3, r3
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	24000019 	.word	0x24000019

0800c8d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	4603      	mov	r3, r0
 800c8dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c8de:	f7ff ff09 	bl	800c6f4 <BSP_SD_Init>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d107      	bne.n	800c8f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7ff ffd4 	bl	800c898 <SD_CheckStatus>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	4b04      	ldr	r3, [pc, #16]	@ (800c908 <SD_initialize+0x34>)
 800c8f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c8f8:	4b03      	ldr	r3, [pc, #12]	@ (800c908 <SD_initialize+0x34>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	b2db      	uxtb	r3, r3
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	24000019 	.word	0x24000019

0800c90c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c916:	79fb      	ldrb	r3, [r7, #7]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7ff ffbd 	bl	800c898 <SD_CheckStatus>
 800c91e:	4603      	mov	r3, r0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	607a      	str	r2, [r7, #4]
 800c932:	603b      	str	r3, [r7, #0]
 800c934:	4603      	mov	r3, r0
 800c936:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c93c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c940:	f7ff ff8c 	bl	800c85c <SD_CheckStatusWithTimeout>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	da01      	bge.n	800c94e <SD_read+0x26>
  {
    return res;
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	e03b      	b.n	800c9c6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	6879      	ldr	r1, [r7, #4]
 800c952:	68b8      	ldr	r0, [r7, #8]
 800c954:	f7ff fef4 	bl	800c740 <BSP_SD_ReadBlocks_DMA>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d132      	bne.n	800c9c4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c95e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9d0 <SD_read+0xa8>)
 800c960:	2200      	movs	r2, #0
 800c962:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c964:	f7f5 fd94 	bl	8002490 <HAL_GetTick>
 800c968:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c96a:	bf00      	nop
 800c96c:	4b18      	ldr	r3, [pc, #96]	@ (800c9d0 <SD_read+0xa8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d108      	bne.n	800c986 <SD_read+0x5e>
 800c974:	f7f5 fd8c 	bl	8002490 <HAL_GetTick>
 800c978:	4602      	mov	r2, r0
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c982:	4293      	cmp	r3, r2
 800c984:	d9f2      	bls.n	800c96c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c986:	4b12      	ldr	r3, [pc, #72]	@ (800c9d0 <SD_read+0xa8>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d102      	bne.n	800c994 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	75fb      	strb	r3, [r7, #23]
 800c992:	e017      	b.n	800c9c4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c994:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d0 <SD_read+0xa8>)
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c99a:	f7f5 fd79 	bl	8002490 <HAL_GetTick>
 800c99e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c9a0:	e007      	b.n	800c9b2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c9a2:	f7ff ff01 	bl	800c7a8 <BSP_SD_GetCardState>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <SD_read+0x8a>
          {
            res = RES_OK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c9b0:	e008      	b.n	800c9c4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c9b2:	f7f5 fd6d 	bl	8002490 <HAL_GetTick>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d9ee      	bls.n	800c9a2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3718      	adds	r7, #24
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	24076de4 	.word	0x24076de4

0800c9d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60b9      	str	r1, [r7, #8]
 800c9dc:	607a      	str	r2, [r7, #4]
 800c9de:	603b      	str	r3, [r7, #0]
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c9e8:	4b24      	ldr	r3, [pc, #144]	@ (800ca7c <SD_write+0xa8>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c9ee:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c9f2:	f7ff ff33 	bl	800c85c <SD_CheckStatusWithTimeout>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	da01      	bge.n	800ca00 <SD_write+0x2c>
  {
    return res;
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	e038      	b.n	800ca72 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	6879      	ldr	r1, [r7, #4]
 800ca04:	68b8      	ldr	r0, [r7, #8]
 800ca06:	f7ff feb5 	bl	800c774 <BSP_SD_WriteBlocks_DMA>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d12f      	bne.n	800ca70 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ca10:	f7f5 fd3e 	bl	8002490 <HAL_GetTick>
 800ca14:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ca16:	bf00      	nop
 800ca18:	4b18      	ldr	r3, [pc, #96]	@ (800ca7c <SD_write+0xa8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d108      	bne.n	800ca32 <SD_write+0x5e>
 800ca20:	f7f5 fd36 	bl	8002490 <HAL_GetTick>
 800ca24:	4602      	mov	r2, r0
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d9f2      	bls.n	800ca18 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ca32:	4b12      	ldr	r3, [pc, #72]	@ (800ca7c <SD_write+0xa8>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d102      	bne.n	800ca40 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	75fb      	strb	r3, [r7, #23]
 800ca3e:	e017      	b.n	800ca70 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ca40:	4b0e      	ldr	r3, [pc, #56]	@ (800ca7c <SD_write+0xa8>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ca46:	f7f5 fd23 	bl	8002490 <HAL_GetTick>
 800ca4a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ca4c:	e007      	b.n	800ca5e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ca4e:	f7ff feab 	bl	800c7a8 <BSP_SD_GetCardState>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <SD_write+0x8a>
          {
            res = RES_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	75fb      	strb	r3, [r7, #23]
            break;
 800ca5c:	e008      	b.n	800ca70 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ca5e:	f7f5 fd17 	bl	8002490 <HAL_GetTick>
 800ca62:	4602      	mov	r2, r0
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d9ee      	bls.n	800ca4e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3718      	adds	r7, #24
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	24076de0 	.word	0x24076de0

0800ca80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08c      	sub	sp, #48	@ 0x30
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	603a      	str	r2, [r7, #0]
 800ca8a:	71fb      	strb	r3, [r7, #7]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca96:	4b25      	ldr	r3, [pc, #148]	@ (800cb2c <SD_ioctl+0xac>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <SD_ioctl+0x28>
 800caa4:	2303      	movs	r3, #3
 800caa6:	e03c      	b.n	800cb22 <SD_ioctl+0xa2>

  switch (cmd)
 800caa8:	79bb      	ldrb	r3, [r7, #6]
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d834      	bhi.n	800cb18 <SD_ioctl+0x98>
 800caae:	a201      	add	r2, pc, #4	@ (adr r2, 800cab4 <SD_ioctl+0x34>)
 800cab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab4:	0800cac5 	.word	0x0800cac5
 800cab8:	0800cacd 	.word	0x0800cacd
 800cabc:	0800cae5 	.word	0x0800cae5
 800cac0:	0800caff 	.word	0x0800caff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800caca:	e028      	b.n	800cb1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cacc:	f107 0308 	add.w	r3, r7, #8
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fe79 	bl	800c7c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cad6:	6a3a      	ldr	r2, [r7, #32]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cae2:	e01c      	b.n	800cb1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cae4:	f107 0308 	add.w	r3, r7, #8
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff fe6d 	bl	800c7c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800caee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cafc:	e00f      	b.n	800cb1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cafe:	f107 0308 	add.w	r3, r7, #8
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff fe60 	bl	800c7c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0a:	0a5a      	lsrs	r2, r3, #9
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cb16:	e002      	b.n	800cb1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cb18:	2304      	movs	r3, #4
 800cb1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3730      	adds	r7, #48	@ 0x30
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	24000019 	.word	0x24000019

0800cb30 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cb30:	b480      	push	{r7}
 800cb32:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cb34:	4b03      	ldr	r3, [pc, #12]	@ (800cb44 <BSP_SD_WriteCpltCallback+0x14>)
 800cb36:	2201      	movs	r2, #1
 800cb38:	601a      	str	r2, [r3, #0]
}
 800cb3a:	bf00      	nop
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	24076de0 	.word	0x24076de0

0800cb48 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cb4c:	4b03      	ldr	r3, [pc, #12]	@ (800cb5c <BSP_SD_ReadCpltCallback+0x14>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
}
 800cb52:	bf00      	nop
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	24076de4 	.word	0x24076de4

0800cb60 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800cb60:	b480      	push	{r7}
 800cb62:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cb64:	bf00      	nop
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
	...

0800cb70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	4603      	mov	r3, r0
 800cb78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb7a:	79fb      	ldrb	r3, [r7, #7]
 800cb7c:	4a08      	ldr	r2, [pc, #32]	@ (800cba0 <disk_status+0x30>)
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4413      	add	r3, r2
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	79fa      	ldrb	r2, [r7, #7]
 800cb88:	4905      	ldr	r1, [pc, #20]	@ (800cba0 <disk_status+0x30>)
 800cb8a:	440a      	add	r2, r1
 800cb8c:	7a12      	ldrb	r2, [r2, #8]
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4798      	blx	r3
 800cb92:	4603      	mov	r3, r0
 800cb94:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	24076e10 	.word	0x24076e10

0800cba4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	4a0e      	ldr	r2, [pc, #56]	@ (800cbf0 <disk_initialize+0x4c>)
 800cbb6:	5cd3      	ldrb	r3, [r2, r3]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d114      	bne.n	800cbe6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf0 <disk_initialize+0x4c>)
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	79fa      	ldrb	r2, [r7, #7]
 800cbca:	4909      	ldr	r1, [pc, #36]	@ (800cbf0 <disk_initialize+0x4c>)
 800cbcc:	440a      	add	r2, r1
 800cbce:	7a12      	ldrb	r2, [r2, #8]
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d103      	bne.n	800cbe6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	4a03      	ldr	r2, [pc, #12]	@ (800cbf0 <disk_initialize+0x4c>)
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	24076e10 	.word	0x24076e10

0800cbf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cbf4:	b590      	push	{r4, r7, lr}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	4a0a      	ldr	r2, [pc, #40]	@ (800cc30 <disk_read+0x3c>)
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	689c      	ldr	r4, [r3, #8]
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4a07      	ldr	r2, [pc, #28]	@ (800cc30 <disk_read+0x3c>)
 800cc14:	4413      	add	r3, r2
 800cc16:	7a18      	ldrb	r0, [r3, #8]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	68b9      	ldr	r1, [r7, #8]
 800cc1e:	47a0      	blx	r4
 800cc20:	4603      	mov	r3, r0
 800cc22:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd90      	pop	{r4, r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	24076e10 	.word	0x24076e10

0800cc34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc34:	b590      	push	{r4, r7, lr}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60b9      	str	r1, [r7, #8]
 800cc3c:	607a      	str	r2, [r7, #4]
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	4a0a      	ldr	r2, [pc, #40]	@ (800cc70 <disk_write+0x3c>)
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	68dc      	ldr	r4, [r3, #12]
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	4a07      	ldr	r2, [pc, #28]	@ (800cc70 <disk_write+0x3c>)
 800cc54:	4413      	add	r3, r2
 800cc56:	7a18      	ldrb	r0, [r3, #8]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	68b9      	ldr	r1, [r7, #8]
 800cc5e:	47a0      	blx	r4
 800cc60:	4603      	mov	r3, r0
 800cc62:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd90      	pop	{r4, r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	24076e10 	.word	0x24076e10

0800cc74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	603a      	str	r2, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
 800cc80:	460b      	mov	r3, r1
 800cc82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	4a09      	ldr	r2, [pc, #36]	@ (800ccac <disk_ioctl+0x38>)
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	79fa      	ldrb	r2, [r7, #7]
 800cc92:	4906      	ldr	r1, [pc, #24]	@ (800ccac <disk_ioctl+0x38>)
 800cc94:	440a      	add	r2, r1
 800cc96:	7a10      	ldrb	r0, [r2, #8]
 800cc98:	79b9      	ldrb	r1, [r7, #6]
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	4798      	blx	r3
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73fb      	strb	r3, [r7, #15]
  return res;
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	24076e10 	.word	0x24076e10

0800ccb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ccc0:	89fb      	ldrh	r3, [r7, #14]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	b21b      	sxth	r3, r3
 800cccc:	4313      	orrs	r3, r2
 800ccce:	b21b      	sxth	r3, r3
 800ccd0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccd2:	89fb      	ldrh	r3, [r7, #14]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3303      	adds	r3, #3
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	021b      	lsls	r3, r3, #8
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	3202      	adds	r2, #2
 800ccf8:	7812      	ldrb	r2, [r2, #0]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	021b      	lsls	r3, r3, #8
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	3201      	adds	r2, #1
 800cd06:	7812      	ldrb	r2, [r2, #0]
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7812      	ldrb	r2, [r2, #0]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd18:	68fb      	ldr	r3, [r7, #12]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3714      	adds	r7, #20
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	887a      	ldrh	r2, [r7, #2]
 800cd3a:	b2d2      	uxtb	r2, r2
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	887b      	ldrh	r3, [r7, #2]
 800cd40:	0a1b      	lsrs	r3, r3, #8
 800cd42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	607a      	str	r2, [r7, #4]
 800cd4a:	887a      	ldrh	r2, [r7, #2]
 800cd4c:	b2d2      	uxtb	r2, r2
 800cd4e:	701a      	strb	r2, [r3, #0]
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	0a1b      	lsrs	r3, r3, #8
 800cd76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	607a      	str	r2, [r7, #4]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	b2d2      	uxtb	r2, r2
 800cd82:	701a      	strb	r2, [r3, #0]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	0a1b      	lsrs	r3, r3, #8
 800cd88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	683a      	ldr	r2, [r7, #0]
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	0a1b      	lsrs	r3, r3, #8
 800cd9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00d      	beq.n	800cdea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	1c53      	adds	r3, r2, #1
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	1c59      	adds	r1, r3, #1
 800cdd8:	6179      	str	r1, [r7, #20]
 800cdda:	7812      	ldrb	r2, [r2, #0]
 800cddc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	607b      	str	r3, [r7, #4]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1f1      	bne.n	800cdce <mem_cpy+0x1a>
	}
}
 800cdea:	bf00      	nop
 800cdec:	371c      	adds	r7, #28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cdf6:	b480      	push	{r7}
 800cdf8:	b087      	sub	sp, #28
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	617a      	str	r2, [r7, #20]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	607b      	str	r3, [r7, #4]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1f3      	bne.n	800ce06 <mem_set+0x10>
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	371c      	adds	r7, #28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce2c:	b480      	push	{r7}
 800ce2e:	b089      	sub	sp, #36	@ 0x24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	61fb      	str	r3, [r7, #28]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	61fa      	str	r2, [r7, #28]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	61ba      	str	r2, [r7, #24]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	1acb      	subs	r3, r1, r3
 800ce58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	607b      	str	r3, [r7, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <mem_cmp+0x40>
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d0eb      	beq.n	800ce44 <mem_cmp+0x18>

	return r;
 800ce6c:	697b      	ldr	r3, [r7, #20]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3724      	adds	r7, #36	@ 0x24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce7a:	b480      	push	{r7}
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce84:	e002      	b.n	800ce8c <chk_chr+0x12>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	607b      	str	r3, [r7, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d005      	beq.n	800cea0 <chk_chr+0x26>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d1f2      	bne.n	800ce86 <chk_chr+0xc>
	return *str;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	781b      	ldrb	r3, [r3, #0]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ceba:	2300      	movs	r3, #0
 800cebc:	60bb      	str	r3, [r7, #8]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	e029      	b.n	800cf18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cec4:	4a27      	ldr	r2, [pc, #156]	@ (800cf64 <chk_lock+0xb4>)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	011b      	lsls	r3, r3, #4
 800ceca:	4413      	add	r3, r2
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d01d      	beq.n	800cf0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ced2:	4a24      	ldr	r2, [pc, #144]	@ (800cf64 <chk_lock+0xb4>)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	4413      	add	r3, r2
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d116      	bne.n	800cf12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cee4:	4a1f      	ldr	r2, [pc, #124]	@ (800cf64 <chk_lock+0xb4>)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	011b      	lsls	r3, r3, #4
 800ceea:	4413      	add	r3, r2
 800ceec:	3304      	adds	r3, #4
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d10c      	bne.n	800cf12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cef8:	4a1a      	ldr	r2, [pc, #104]	@ (800cf64 <chk_lock+0xb4>)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	011b      	lsls	r3, r3, #4
 800cefe:	4413      	add	r3, r2
 800cf00:	3308      	adds	r3, #8
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d102      	bne.n	800cf12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf0c:	e007      	b.n	800cf1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3301      	adds	r3, #1
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d9d2      	bls.n	800cec4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d109      	bne.n	800cf38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d102      	bne.n	800cf30 <chk_lock+0x80>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d101      	bne.n	800cf34 <chk_lock+0x84>
 800cf30:	2300      	movs	r3, #0
 800cf32:	e010      	b.n	800cf56 <chk_lock+0xa6>
 800cf34:	2312      	movs	r3, #18
 800cf36:	e00e      	b.n	800cf56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d108      	bne.n	800cf50 <chk_lock+0xa0>
 800cf3e:	4a09      	ldr	r2, [pc, #36]	@ (800cf64 <chk_lock+0xb4>)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	011b      	lsls	r3, r3, #4
 800cf44:	4413      	add	r3, r2
 800cf46:	330c      	adds	r3, #12
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf4e:	d101      	bne.n	800cf54 <chk_lock+0xa4>
 800cf50:	2310      	movs	r3, #16
 800cf52:	e000      	b.n	800cf56 <chk_lock+0xa6>
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	24076df0 	.word	0x24076df0

0800cf68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	607b      	str	r3, [r7, #4]
 800cf72:	e002      	b.n	800cf7a <enq_lock+0x12>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3301      	adds	r3, #1
 800cf78:	607b      	str	r3, [r7, #4]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d806      	bhi.n	800cf8e <enq_lock+0x26>
 800cf80:	4a09      	ldr	r2, [pc, #36]	@ (800cfa8 <enq_lock+0x40>)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	011b      	lsls	r3, r3, #4
 800cf86:	4413      	add	r3, r2
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f2      	bne.n	800cf74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	bf14      	ite	ne
 800cf94:	2301      	movne	r3, #1
 800cf96:	2300      	moveq	r3, #0
 800cf98:	b2db      	uxtb	r3, r3
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	24076df0 	.word	0x24076df0

0800cfac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	e01f      	b.n	800cffc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfbc:	4a41      	ldr	r2, [pc, #260]	@ (800d0c4 <inc_lock+0x118>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	011b      	lsls	r3, r3, #4
 800cfc2:	4413      	add	r3, r2
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d113      	bne.n	800cff6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cfce:	4a3d      	ldr	r2, [pc, #244]	@ (800d0c4 <inc_lock+0x118>)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	011b      	lsls	r3, r3, #4
 800cfd4:	4413      	add	r3, r2
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d109      	bne.n	800cff6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cfe2:	4a38      	ldr	r2, [pc, #224]	@ (800d0c4 <inc_lock+0x118>)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	011b      	lsls	r3, r3, #4
 800cfe8:	4413      	add	r3, r2
 800cfea:	3308      	adds	r3, #8
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d006      	beq.n	800d004 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3301      	adds	r3, #1
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d9dc      	bls.n	800cfbc <inc_lock+0x10>
 800d002:	e000      	b.n	800d006 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d004:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d132      	bne.n	800d072 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d00c:	2300      	movs	r3, #0
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	e002      	b.n	800d018 <inc_lock+0x6c>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3301      	adds	r3, #1
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d806      	bhi.n	800d02c <inc_lock+0x80>
 800d01e:	4a29      	ldr	r2, [pc, #164]	@ (800d0c4 <inc_lock+0x118>)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	011b      	lsls	r3, r3, #4
 800d024:	4413      	add	r3, r2
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f2      	bne.n	800d012 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d101      	bne.n	800d036 <inc_lock+0x8a>
 800d032:	2300      	movs	r3, #0
 800d034:	e040      	b.n	800d0b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	4922      	ldr	r1, [pc, #136]	@ (800d0c4 <inc_lock+0x118>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	011b      	lsls	r3, r3, #4
 800d040:	440b      	add	r3, r1
 800d042:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	491e      	ldr	r1, [pc, #120]	@ (800d0c4 <inc_lock+0x118>)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	011b      	lsls	r3, r3, #4
 800d04e:	440b      	add	r3, r1
 800d050:	3304      	adds	r3, #4
 800d052:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	695a      	ldr	r2, [r3, #20]
 800d058:	491a      	ldr	r1, [pc, #104]	@ (800d0c4 <inc_lock+0x118>)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	011b      	lsls	r3, r3, #4
 800d05e:	440b      	add	r3, r1
 800d060:	3308      	adds	r3, #8
 800d062:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d064:	4a17      	ldr	r2, [pc, #92]	@ (800d0c4 <inc_lock+0x118>)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	4413      	add	r3, r2
 800d06c:	330c      	adds	r3, #12
 800d06e:	2200      	movs	r2, #0
 800d070:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d009      	beq.n	800d08c <inc_lock+0xe0>
 800d078:	4a12      	ldr	r2, [pc, #72]	@ (800d0c4 <inc_lock+0x118>)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	011b      	lsls	r3, r3, #4
 800d07e:	4413      	add	r3, r2
 800d080:	330c      	adds	r3, #12
 800d082:	881b      	ldrh	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <inc_lock+0xe0>
 800d088:	2300      	movs	r3, #0
 800d08a:	e015      	b.n	800d0b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d108      	bne.n	800d0a4 <inc_lock+0xf8>
 800d092:	4a0c      	ldr	r2, [pc, #48]	@ (800d0c4 <inc_lock+0x118>)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	330c      	adds	r3, #12
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	e001      	b.n	800d0a8 <inc_lock+0xfc>
 800d0a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d0a8:	4906      	ldr	r1, [pc, #24]	@ (800d0c4 <inc_lock+0x118>)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	011b      	lsls	r3, r3, #4
 800d0ae:	440b      	add	r3, r1
 800d0b0:	330c      	adds	r3, #12
 800d0b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3301      	adds	r3, #1
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr
 800d0c4:	24076df0 	.word	0x24076df0

0800d0c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	607b      	str	r3, [r7, #4]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d825      	bhi.n	800d128 <dec_lock+0x60>
		n = Files[i].ctr;
 800d0dc:	4a17      	ldr	r2, [pc, #92]	@ (800d13c <dec_lock+0x74>)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	011b      	lsls	r3, r3, #4
 800d0e2:	4413      	add	r3, r2
 800d0e4:	330c      	adds	r3, #12
 800d0e6:	881b      	ldrh	r3, [r3, #0]
 800d0e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d0ea:	89fb      	ldrh	r3, [r7, #14]
 800d0ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0f0:	d101      	bne.n	800d0f6 <dec_lock+0x2e>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d0f6:	89fb      	ldrh	r3, [r7, #14]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <dec_lock+0x3a>
 800d0fc:	89fb      	ldrh	r3, [r7, #14]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d102:	4a0e      	ldr	r2, [pc, #56]	@ (800d13c <dec_lock+0x74>)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	011b      	lsls	r3, r3, #4
 800d108:	4413      	add	r3, r2
 800d10a:	330c      	adds	r3, #12
 800d10c:	89fa      	ldrh	r2, [r7, #14]
 800d10e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d110:	89fb      	ldrh	r3, [r7, #14]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d105      	bne.n	800d122 <dec_lock+0x5a>
 800d116:	4a09      	ldr	r2, [pc, #36]	@ (800d13c <dec_lock+0x74>)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	4413      	add	r3, r2
 800d11e:	2200      	movs	r2, #0
 800d120:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	737b      	strb	r3, [r7, #13]
 800d126:	e001      	b.n	800d12c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d128:	2302      	movs	r3, #2
 800d12a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d12c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	24076df0 	.word	0x24076df0

0800d140 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d148:	2300      	movs	r3, #0
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	e010      	b.n	800d170 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d14e:	4a0d      	ldr	r2, [pc, #52]	@ (800d184 <clear_lock+0x44>)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	011b      	lsls	r3, r3, #4
 800d154:	4413      	add	r3, r2
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d105      	bne.n	800d16a <clear_lock+0x2a>
 800d15e:	4a09      	ldr	r2, [pc, #36]	@ (800d184 <clear_lock+0x44>)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	011b      	lsls	r3, r3, #4
 800d164:	4413      	add	r3, r2
 800d166:	2200      	movs	r2, #0
 800d168:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	3301      	adds	r3, #1
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d9eb      	bls.n	800d14e <clear_lock+0xe>
	}
}
 800d176:	bf00      	nop
 800d178:	bf00      	nop
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	24076df0 	.word	0x24076df0

0800d188 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	78db      	ldrb	r3, [r3, #3]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d034      	beq.n	800d206 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7858      	ldrb	r0, [r3, #1]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	f7ff fd40 	bl	800cc34 <disk_write>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	73fb      	strb	r3, [r7, #15]
 800d1be:	e022      	b.n	800d206 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	1ad2      	subs	r2, r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	699b      	ldr	r3, [r3, #24]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d217      	bcs.n	800d206 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	789b      	ldrb	r3, [r3, #2]
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	e010      	b.n	800d200 <sync_window+0x78>
					wsect += fs->fsize;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7858      	ldrb	r0, [r3, #1]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	697a      	ldr	r2, [r7, #20]
 800d1f6:	f7ff fd1d 	bl	800cc34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	2b01      	cmp	r3, #1
 800d204:	d8eb      	bhi.n	800d1de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d206:	7bfb      	ldrb	r3, [r7, #15]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	429a      	cmp	r2, r3
 800d226:	d01b      	beq.n	800d260 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff ffad 	bl	800d188 <sync_window>
 800d22e:	4603      	mov	r3, r0
 800d230:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d232:	7bfb      	ldrb	r3, [r7, #15]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d113      	bne.n	800d260 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	7858      	ldrb	r0, [r3, #1]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d242:	2301      	movs	r3, #1
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	f7ff fcd5 	bl	800cbf4 <disk_read>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d250:	f04f 33ff 	mov.w	r3, #4294967295
 800d254:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d256:	2301      	movs	r3, #1
 800d258:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff ff87 	bl	800d188 <sync_window>
 800d27a:	4603      	mov	r3, r0
 800d27c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d158      	bne.n	800d336 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b03      	cmp	r3, #3
 800d28a:	d148      	bne.n	800d31e <sync_fs+0xb2>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	791b      	ldrb	r3, [r3, #4]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d144      	bne.n	800d31e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3330      	adds	r3, #48	@ 0x30
 800d298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d29c:	2100      	movs	r1, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fda9 	bl	800cdf6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	3330      	adds	r3, #48	@ 0x30
 800d2a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d2ac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff fd38 	bl	800cd26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3330      	adds	r3, #48	@ 0x30
 800d2ba:	4921      	ldr	r1, [pc, #132]	@ (800d340 <sync_fs+0xd4>)
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fd4d 	bl	800cd5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3330      	adds	r3, #48	@ 0x30
 800d2c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d2ca:	491e      	ldr	r1, [pc, #120]	@ (800d344 <sync_fs+0xd8>)
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff fd45 	bl	800cd5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	3330      	adds	r3, #48	@ 0x30
 800d2d6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	f7ff fd3b 	bl	800cd5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3330      	adds	r3, #48	@ 0x30
 800d2ea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	f7ff fd31 	bl	800cd5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7858      	ldrb	r0, [r3, #1]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d312:	2301      	movs	r3, #1
 800d314:	f7ff fc8e 	bl	800cc34 <disk_write>
			fs->fsi_flag = 0;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	785b      	ldrb	r3, [r3, #1]
 800d322:	2200      	movs	r2, #0
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fca4 	bl	800cc74 <disk_ioctl>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <sync_fs+0xca>
 800d332:	2301      	movs	r3, #1
 800d334:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d336:	7bfb      	ldrb	r3, [r7, #15]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	41615252 	.word	0x41615252
 800d344:	61417272 	.word	0x61417272

0800d348 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	3b02      	subs	r3, #2
 800d356:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	695b      	ldr	r3, [r3, #20]
 800d35c:	3b02      	subs	r3, #2
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	429a      	cmp	r2, r3
 800d362:	d301      	bcc.n	800d368 <clust2sect+0x20>
 800d364:	2300      	movs	r3, #0
 800d366:	e008      	b.n	800d37a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	895b      	ldrh	r3, [r3, #10]
 800d36c:	461a      	mov	r2, r3
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	fb03 f202 	mul.w	r2, r3, r2
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d378:	4413      	add	r3, r2
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b086      	sub	sp, #24
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d904      	bls.n	800d3a6 <get_fat+0x20>
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d302      	bcc.n	800d3ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	617b      	str	r3, [r7, #20]
 800d3aa:	e08e      	b.n	800d4ca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d061      	beq.n	800d47e <get_fat+0xf8>
 800d3ba:	2b03      	cmp	r3, #3
 800d3bc:	dc7b      	bgt.n	800d4b6 <get_fat+0x130>
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d002      	beq.n	800d3c8 <get_fat+0x42>
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	d041      	beq.n	800d44a <get_fat+0xc4>
 800d3c6:	e076      	b.n	800d4b6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	085b      	lsrs	r3, r3, #1
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	6a1a      	ldr	r2, [r3, #32]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	0a5b      	lsrs	r3, r3, #9
 800d3de:	4413      	add	r3, r2
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	6938      	ldr	r0, [r7, #16]
 800d3e4:	f7ff ff14 	bl	800d210 <move_window>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d166      	bne.n	800d4bc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	60fa      	str	r2, [r7, #12]
 800d3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d400:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	6a1a      	ldr	r2, [r3, #32]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	0a5b      	lsrs	r3, r3, #9
 800d40a:	4413      	add	r3, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	6938      	ldr	r0, [r7, #16]
 800d410:	f7ff fefe 	bl	800d210 <move_window>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d152      	bne.n	800d4c0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	4413      	add	r3, r2
 800d424:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d428:	021b      	lsls	r3, r3, #8
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <get_fat+0xba>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	091b      	lsrs	r3, r3, #4
 800d43e:	e002      	b.n	800d446 <get_fat+0xc0>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d446:	617b      	str	r3, [r7, #20]
			break;
 800d448:	e03f      	b.n	800d4ca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	6a1a      	ldr	r2, [r3, #32]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	0a1b      	lsrs	r3, r3, #8
 800d452:	4413      	add	r3, r2
 800d454:	4619      	mov	r1, r3
 800d456:	6938      	ldr	r0, [r7, #16]
 800d458:	f7ff feda 	bl	800d210 <move_window>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d130      	bne.n	800d4c4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d470:	4413      	add	r3, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fc1c 	bl	800ccb0 <ld_word>
 800d478:	4603      	mov	r3, r0
 800d47a:	617b      	str	r3, [r7, #20]
			break;
 800d47c:	e025      	b.n	800d4ca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	6a1a      	ldr	r2, [r3, #32]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	09db      	lsrs	r3, r3, #7
 800d486:	4413      	add	r3, r2
 800d488:	4619      	mov	r1, r3
 800d48a:	6938      	ldr	r0, [r7, #16]
 800d48c:	f7ff fec0 	bl	800d210 <move_window>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d118      	bne.n	800d4c8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4a4:	4413      	add	r3, r2
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fc1a 	bl	800cce0 <ld_dword>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d4b2:	617b      	str	r3, [r7, #20]
			break;
 800d4b4:	e009      	b.n	800d4ca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	617b      	str	r3, [r7, #20]
 800d4ba:	e006      	b.n	800d4ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4bc:	bf00      	nop
 800d4be:	e004      	b.n	800d4ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4c0:	bf00      	nop
 800d4c2:	e002      	b.n	800d4ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4c4:	bf00      	nop
 800d4c6:	e000      	b.n	800d4ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4c8:	bf00      	nop
		}
	}

	return val;
 800d4ca:	697b      	ldr	r3, [r7, #20]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4d4:	b590      	push	{r4, r7, lr}
 800d4d6:	b089      	sub	sp, #36	@ 0x24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	f240 80d9 	bls.w	800d69e <put_fat+0x1ca>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	695b      	ldr	r3, [r3, #20]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	f080 80d3 	bcs.w	800d69e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b03      	cmp	r3, #3
 800d4fe:	f000 8096 	beq.w	800d62e <put_fat+0x15a>
 800d502:	2b03      	cmp	r3, #3
 800d504:	f300 80cb 	bgt.w	800d69e <put_fat+0x1ca>
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d002      	beq.n	800d512 <put_fat+0x3e>
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d06e      	beq.n	800d5ee <put_fat+0x11a>
 800d510:	e0c5      	b.n	800d69e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	61bb      	str	r3, [r7, #24]
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	085b      	lsrs	r3, r3, #1
 800d51a:	69ba      	ldr	r2, [r7, #24]
 800d51c:	4413      	add	r3, r2
 800d51e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6a1a      	ldr	r2, [r3, #32]
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	0a5b      	lsrs	r3, r3, #9
 800d528:	4413      	add	r3, r2
 800d52a:	4619      	mov	r1, r3
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7ff fe6f 	bl	800d210 <move_window>
 800d532:	4603      	mov	r3, r0
 800d534:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d536:	7ffb      	ldrb	r3, [r7, #31]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f040 80a9 	bne.w	800d690 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	1c59      	adds	r1, r3, #1
 800d548:	61b9      	str	r1, [r7, #24]
 800d54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54e:	4413      	add	r3, r2
 800d550:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00d      	beq.n	800d578 <put_fat+0xa4>
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	b25b      	sxtb	r3, r3
 800d562:	f003 030f 	and.w	r3, r3, #15
 800d566:	b25a      	sxtb	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	4313      	orrs	r3, r2
 800d572:	b25b      	sxtb	r3, r3
 800d574:	b2db      	uxtb	r3, r3
 800d576:	e001      	b.n	800d57c <put_fat+0xa8>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2201      	movs	r2, #1
 800d584:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6a1a      	ldr	r2, [r3, #32]
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	0a5b      	lsrs	r3, r3, #9
 800d58e:	4413      	add	r3, r2
 800d590:	4619      	mov	r1, r3
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7ff fe3c 	bl	800d210 <move_window>
 800d598:	4603      	mov	r3, r0
 800d59a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d59c:	7ffb      	ldrb	r3, [r7, #31]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d178      	bne.n	800d694 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ae:	4413      	add	r3, r2
 800d5b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <put_fat+0xf0>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	091b      	lsrs	r3, r3, #4
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	e00e      	b.n	800d5e2 <put_fat+0x10e>
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	b25b      	sxtb	r3, r3
 800d5ca:	f023 030f 	bic.w	r3, r3, #15
 800d5ce:	b25a      	sxtb	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	0a1b      	lsrs	r3, r3, #8
 800d5d4:	b25b      	sxtb	r3, r3
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	b25b      	sxtb	r3, r3
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	b25b      	sxtb	r3, r3
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	70da      	strb	r2, [r3, #3]
			break;
 800d5ec:	e057      	b.n	800d69e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6a1a      	ldr	r2, [r3, #32]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	0a1b      	lsrs	r3, r3, #8
 800d5f6:	4413      	add	r3, r2
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff fe08 	bl	800d210 <move_window>
 800d600:	4603      	mov	r3, r0
 800d602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d604:	7ffb      	ldrb	r3, [r7, #31]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d146      	bne.n	800d698 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d618:	4413      	add	r3, r2
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	b292      	uxth	r2, r2
 800d61e:	4611      	mov	r1, r2
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff fb80 	bl	800cd26 <st_word>
			fs->wflag = 1;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2201      	movs	r2, #1
 800d62a:	70da      	strb	r2, [r3, #3]
			break;
 800d62c:	e037      	b.n	800d69e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6a1a      	ldr	r2, [r3, #32]
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	09db      	lsrs	r3, r3, #7
 800d636:	4413      	add	r3, r2
 800d638:	4619      	mov	r1, r3
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7ff fde8 	bl	800d210 <move_window>
 800d640:	4603      	mov	r3, r0
 800d642:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d644:	7ffb      	ldrb	r3, [r7, #31]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d128      	bne.n	800d69c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d65e:	4413      	add	r3, r2
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fb3d 	bl	800cce0 <ld_dword>
 800d666:	4603      	mov	r3, r0
 800d668:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d66c:	4323      	orrs	r3, r4
 800d66e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d67e:	4413      	add	r3, r2
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff fb6a 	bl	800cd5c <st_dword>
			fs->wflag = 1;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2201      	movs	r2, #1
 800d68c:	70da      	strb	r2, [r3, #3]
			break;
 800d68e:	e006      	b.n	800d69e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d690:	bf00      	nop
 800d692:	e004      	b.n	800d69e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d694:	bf00      	nop
 800d696:	e002      	b.n	800d69e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d698:	bf00      	nop
 800d69a:	e000      	b.n	800d69e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d69c:	bf00      	nop
		}
	}
	return res;
 800d69e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3724      	adds	r7, #36	@ 0x24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd90      	pop	{r4, r7, pc}

0800d6a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d904      	bls.n	800d6ce <remove_chain+0x26>
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d301      	bcc.n	800d6d2 <remove_chain+0x2a>
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	e04b      	b.n	800d76a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00c      	beq.n	800d6f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	69b8      	ldr	r0, [r7, #24]
 800d6e0:	f7ff fef8 	bl	800d4d4 <put_fat>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d6e8:	7ffb      	ldrb	r3, [r7, #31]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <remove_chain+0x4a>
 800d6ee:	7ffb      	ldrb	r3, [r7, #31]
 800d6f0:	e03b      	b.n	800d76a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fe46 	bl	800d386 <get_fat>
 800d6fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d031      	beq.n	800d766 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d101      	bne.n	800d70c <remove_chain+0x64>
 800d708:	2302      	movs	r3, #2
 800d70a:	e02e      	b.n	800d76a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d101      	bne.n	800d718 <remove_chain+0x70>
 800d714:	2301      	movs	r3, #1
 800d716:	e028      	b.n	800d76a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d718:	2200      	movs	r2, #0
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	69b8      	ldr	r0, [r7, #24]
 800d71e:	f7ff fed9 	bl	800d4d4 <put_fat>
 800d722:	4603      	mov	r3, r0
 800d724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d726:	7ffb      	ldrb	r3, [r7, #31]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <remove_chain+0x88>
 800d72c:	7ffb      	ldrb	r3, [r7, #31]
 800d72e:	e01c      	b.n	800d76a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	691a      	ldr	r2, [r3, #16]
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	3b02      	subs	r3, #2
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d20b      	bcs.n	800d756 <remove_chain+0xae>
			fs->free_clst++;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	1c5a      	adds	r2, r3, #1
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	791b      	ldrb	r3, [r3, #4]
 800d74c:	f043 0301 	orr.w	r3, r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	429a      	cmp	r2, r3
 800d762:	d3c6      	bcc.n	800d6f2 <remove_chain+0x4a>
 800d764:	e000      	b.n	800d768 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d766:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b088      	sub	sp, #32
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10d      	bne.n	800d7a4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d004      	beq.n	800d79e <create_chain+0x2c>
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	69ba      	ldr	r2, [r7, #24]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d31b      	bcc.n	800d7d6 <create_chain+0x64>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	61bb      	str	r3, [r7, #24]
 800d7a2:	e018      	b.n	800d7d6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff fded 	bl	800d386 <get_fat>
 800d7ac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d801      	bhi.n	800d7b8 <create_chain+0x46>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e070      	b.n	800d89a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7be:	d101      	bne.n	800d7c4 <create_chain+0x52>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	e06a      	b.n	800d89a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d201      	bcs.n	800d7d2 <create_chain+0x60>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	e063      	b.n	800d89a <create_chain+0x128>
		scl = clst;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	69fa      	ldr	r2, [r7, #28]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d307      	bcc.n	800d7fa <create_chain+0x88>
				ncl = 2;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d7ee:	69fa      	ldr	r2, [r7, #28]
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d901      	bls.n	800d7fa <create_chain+0x88>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	e04f      	b.n	800d89a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d7fa:	69f9      	ldr	r1, [r7, #28]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7ff fdc2 	bl	800d386 <get_fat>
 800d802:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00e      	beq.n	800d828 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d003      	beq.n	800d818 <create_chain+0xa6>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d816:	d101      	bne.n	800d81c <create_chain+0xaa>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	e03e      	b.n	800d89a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d81c:	69fa      	ldr	r2, [r7, #28]
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	429a      	cmp	r2, r3
 800d822:	d1da      	bne.n	800d7da <create_chain+0x68>
 800d824:	2300      	movs	r3, #0
 800d826:	e038      	b.n	800d89a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d828:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d82a:	f04f 32ff 	mov.w	r2, #4294967295
 800d82e:	69f9      	ldr	r1, [r7, #28]
 800d830:	6938      	ldr	r0, [r7, #16]
 800d832:	f7ff fe4f 	bl	800d4d4 <put_fat>
 800d836:	4603      	mov	r3, r0
 800d838:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d109      	bne.n	800d854 <create_chain+0xe2>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d006      	beq.n	800d854 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d846:	69fa      	ldr	r2, [r7, #28]
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6938      	ldr	r0, [r7, #16]
 800d84c:	f7ff fe42 	bl	800d4d4 <put_fat>
 800d850:	4603      	mov	r3, r0
 800d852:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d116      	bne.n	800d888 <create_chain+0x116>
		fs->last_clst = ncl;
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	69fa      	ldr	r2, [r7, #28]
 800d85e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	691a      	ldr	r2, [r3, #16]
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	3b02      	subs	r3, #2
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d804      	bhi.n	800d878 <create_chain+0x106>
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	691b      	ldr	r3, [r3, #16]
 800d872:	1e5a      	subs	r2, r3, #1
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	791b      	ldrb	r3, [r3, #4]
 800d87c:	f043 0301 	orr.w	r3, r3, #1
 800d880:	b2da      	uxtb	r2, r3
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	711a      	strb	r2, [r3, #4]
 800d886:	e007      	b.n	800d898 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d888:	7dfb      	ldrb	r3, [r7, #23]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d102      	bne.n	800d894 <create_chain+0x122>
 800d88e:	f04f 33ff 	mov.w	r3, #4294967295
 800d892:	e000      	b.n	800d896 <create_chain+0x124>
 800d894:	2301      	movs	r3, #1
 800d896:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d898:	69fb      	ldr	r3, [r7, #28]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3720      	adds	r7, #32
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b087      	sub	sp, #28
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b6:	3304      	adds	r3, #4
 800d8b8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	0a5b      	lsrs	r3, r3, #9
 800d8be:	68fa      	ldr	r2, [r7, #12]
 800d8c0:	8952      	ldrh	r2, [r2, #10]
 800d8c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	1d1a      	adds	r2, r3, #4
 800d8cc:	613a      	str	r2, [r7, #16]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <clmt_clust+0x3a>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e010      	b.n	800d8fe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d307      	bcc.n	800d8f4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	617b      	str	r3, [r7, #20]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8f2:	e7e9      	b.n	800d8c8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d8f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	4413      	add	r3, r2
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	371c      	adds	r7, #28
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b086      	sub	sp, #24
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d920:	d204      	bcs.n	800d92c <dir_sdi+0x22>
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	f003 031f 	and.w	r3, r3, #31
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d92c:	2302      	movs	r3, #2
 800d92e:	e063      	b.n	800d9f8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <dir_sdi+0x46>
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b02      	cmp	r3, #2
 800d948:	d902      	bls.n	800d950 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d94e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10c      	bne.n	800d970 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	095b      	lsrs	r3, r3, #5
 800d95a:	693a      	ldr	r2, [r7, #16]
 800d95c:	8912      	ldrh	r2, [r2, #8]
 800d95e:	4293      	cmp	r3, r2
 800d960:	d301      	bcc.n	800d966 <dir_sdi+0x5c>
 800d962:	2302      	movs	r3, #2
 800d964:	e048      	b.n	800d9f8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	61da      	str	r2, [r3, #28]
 800d96e:	e029      	b.n	800d9c4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	895b      	ldrh	r3, [r3, #10]
 800d974:	025b      	lsls	r3, r3, #9
 800d976:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d978:	e019      	b.n	800d9ae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6979      	ldr	r1, [r7, #20]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7ff fd01 	bl	800d386 <get_fat>
 800d984:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98c:	d101      	bne.n	800d992 <dir_sdi+0x88>
 800d98e:	2301      	movs	r3, #1
 800d990:	e032      	b.n	800d9f8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d904      	bls.n	800d9a2 <dir_sdi+0x98>
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	697a      	ldr	r2, [r7, #20]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d301      	bcc.n	800d9a6 <dir_sdi+0x9c>
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	e028      	b.n	800d9f8 <dir_sdi+0xee>
			ofs -= csz;
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	1ad3      	subs	r3, r2, r3
 800d9ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d2e1      	bcs.n	800d97a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9b6:	6979      	ldr	r1, [r7, #20]
 800d9b8:	6938      	ldr	r0, [r7, #16]
 800d9ba:	f7ff fcc5 	bl	800d348 <clust2sect>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <dir_sdi+0xcc>
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	e010      	b.n	800d9f8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	69da      	ldr	r2, [r3, #28]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	0a5b      	lsrs	r3, r3, #9
 800d9de:	441a      	add	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f0:	441a      	add	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	3320      	adds	r3, #32
 800da16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <dir_next+0x28>
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da26:	d301      	bcc.n	800da2c <dir_next+0x2c>
 800da28:	2304      	movs	r3, #4
 800da2a:	e0aa      	b.n	800db82 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 8098 	bne.w	800db68 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	69db      	ldr	r3, [r3, #28]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10b      	bne.n	800da62 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	095b      	lsrs	r3, r3, #5
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	8912      	ldrh	r2, [r2, #8]
 800da52:	4293      	cmp	r3, r2
 800da54:	f0c0 8088 	bcc.w	800db68 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	61da      	str	r2, [r3, #28]
 800da5e:	2304      	movs	r3, #4
 800da60:	e08f      	b.n	800db82 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	0a5b      	lsrs	r3, r3, #9
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	8952      	ldrh	r2, [r2, #10]
 800da6a:	3a01      	subs	r2, #1
 800da6c:	4013      	ands	r3, r2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d17a      	bne.n	800db68 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	4619      	mov	r1, r3
 800da7a:	4610      	mov	r0, r2
 800da7c:	f7ff fc83 	bl	800d386 <get_fat>
 800da80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d801      	bhi.n	800da8c <dir_next+0x8c>
 800da88:	2302      	movs	r3, #2
 800da8a:	e07a      	b.n	800db82 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da92:	d101      	bne.n	800da98 <dir_next+0x98>
 800da94:	2301      	movs	r3, #1
 800da96:	e074      	b.n	800db82 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d358      	bcc.n	800db54 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d104      	bne.n	800dab2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	61da      	str	r2, [r3, #28]
 800daae:	2304      	movs	r3, #4
 800dab0:	e067      	b.n	800db82 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f7ff fe59 	bl	800d772 <create_chain>
 800dac0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <dir_next+0xcc>
 800dac8:	2307      	movs	r3, #7
 800daca:	e05a      	b.n	800db82 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d101      	bne.n	800dad6 <dir_next+0xd6>
 800dad2:	2302      	movs	r3, #2
 800dad4:	e055      	b.n	800db82 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dadc:	d101      	bne.n	800dae2 <dir_next+0xe2>
 800dade:	2301      	movs	r3, #1
 800dae0:	e04f      	b.n	800db82 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f7ff fb50 	bl	800d188 <sync_window>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <dir_next+0xf2>
 800daee:	2301      	movs	r3, #1
 800daf0:	e047      	b.n	800db82 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3330      	adds	r3, #48	@ 0x30
 800daf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dafa:	2100      	movs	r1, #0
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7ff f97a 	bl	800cdf6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db02:	2300      	movs	r3, #0
 800db04:	613b      	str	r3, [r7, #16]
 800db06:	6979      	ldr	r1, [r7, #20]
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff fc1d 	bl	800d348 <clust2sect>
 800db0e:	4602      	mov	r2, r0
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db14:	e012      	b.n	800db3c <dir_next+0x13c>
						fs->wflag = 1;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2201      	movs	r2, #1
 800db1a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7ff fb33 	bl	800d188 <sync_window>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <dir_next+0x12c>
 800db28:	2301      	movs	r3, #1
 800db2a:	e02a      	b.n	800db82 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	3301      	adds	r3, #1
 800db30:	613b      	str	r3, [r7, #16]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	895b      	ldrh	r3, [r3, #10]
 800db40:	461a      	mov	r2, r3
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	4293      	cmp	r3, r2
 800db46:	d3e6      	bcc.n	800db16 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	1ad2      	subs	r2, r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db5a:	6979      	ldr	r1, [r7, #20]
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f7ff fbf3 	bl	800d348 <clust2sect>
 800db62:	4602      	mov	r2, r0
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	68ba      	ldr	r2, [r7, #8]
 800db6c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db7a:	441a      	add	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b086      	sub	sp, #24
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800db9a:	2100      	movs	r1, #0
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff feb4 	bl	800d90a <dir_sdi>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d12b      	bne.n	800dc04 <dir_alloc+0x7a>
		n = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7ff fb2a 	bl	800d210 <move_window>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d11d      	bne.n	800dc02 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	2be5      	cmp	r3, #229	@ 0xe5
 800dbce:	d004      	beq.n	800dbda <dir_alloc+0x50>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a1b      	ldr	r3, [r3, #32]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d107      	bne.n	800dbea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	613b      	str	r3, [r7, #16]
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d102      	bne.n	800dbee <dir_alloc+0x64>
 800dbe8:	e00c      	b.n	800dc04 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dbea:	2300      	movs	r3, #0
 800dbec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dbee:	2101      	movs	r1, #1
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff ff05 	bl	800da00 <dir_next>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dbfa:	7dfb      	ldrb	r3, [r7, #23]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0d7      	beq.n	800dbb0 <dir_alloc+0x26>
 800dc00:	e000      	b.n	800dc04 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
 800dc06:	2b04      	cmp	r3, #4
 800dc08:	d101      	bne.n	800dc0e <dir_alloc+0x84>
 800dc0a:	2307      	movs	r3, #7
 800dc0c:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3718      	adds	r7, #24
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	331a      	adds	r3, #26
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff f842 	bl	800ccb0 <ld_word>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d109      	bne.n	800dc4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	3314      	adds	r3, #20
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff f837 	bl	800ccb0 <ld_word>
 800dc42:	4603      	mov	r3, r0
 800dc44:	041b      	lsls	r3, r3, #16
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	60f8      	str	r0, [r7, #12]
 800dc5e:	60b9      	str	r1, [r7, #8]
 800dc60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	331a      	adds	r3, #26
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	b292      	uxth	r2, r2
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff f85a 	bl	800cd26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b03      	cmp	r3, #3
 800dc78:	d109      	bne.n	800dc8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f103 0214 	add.w	r2, r3, #20
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	0c1b      	lsrs	r3, r3, #16
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	4619      	mov	r1, r3
 800dc88:	4610      	mov	r0, r2
 800dc8a:	f7ff f84c 	bl	800cd26 <st_word>
	}
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b086      	sub	sp, #24
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dca4:	2100      	movs	r1, #0
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff fe2f 	bl	800d90a <dir_sdi>
 800dcac:	4603      	mov	r3, r0
 800dcae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dcb0:	7dfb      	ldrb	r3, [r7, #23]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <dir_find+0x24>
 800dcb6:	7dfb      	ldrb	r3, [r7, #23]
 800dcb8:	e03e      	b.n	800dd38 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6938      	ldr	r0, [r7, #16]
 800dcc2:	f7ff faa5 	bl	800d210 <move_window>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dcca:	7dfb      	ldrb	r3, [r7, #23]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d12f      	bne.n	800dd30 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d102      	bne.n	800dce4 <dir_find+0x4e>
 800dcde:	2304      	movs	r3, #4
 800dce0:	75fb      	strb	r3, [r7, #23]
 800dce2:	e028      	b.n	800dd36 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6a1b      	ldr	r3, [r3, #32]
 800dce8:	330b      	adds	r3, #11
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	330b      	adds	r3, #11
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	f003 0308 	and.w	r3, r3, #8
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10a      	bne.n	800dd1c <dir_find+0x86>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a18      	ldr	r0, [r3, #32]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	3324      	adds	r3, #36	@ 0x24
 800dd0e:	220b      	movs	r2, #11
 800dd10:	4619      	mov	r1, r3
 800dd12:	f7ff f88b 	bl	800ce2c <mem_cmp>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00b      	beq.n	800dd34 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff fe6e 	bl	800da00 <dir_next>
 800dd24:	4603      	mov	r3, r0
 800dd26:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dd28:	7dfb      	ldrb	r3, [r7, #23]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d0c5      	beq.n	800dcba <dir_find+0x24>
 800dd2e:	e002      	b.n	800dd36 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dd30:	bf00      	nop
 800dd32:	e000      	b.n	800dd36 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd34:	bf00      	nop

	return res;
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dd4e:	2101      	movs	r1, #1
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff ff1a 	bl	800db8a <dir_alloc>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d11c      	bne.n	800dd9a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	4619      	mov	r1, r3
 800dd66:	68b8      	ldr	r0, [r7, #8]
 800dd68:	f7ff fa52 	bl	800d210 <move_window>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d111      	bne.n	800dd9a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1b      	ldr	r3, [r3, #32]
 800dd7a:	2220      	movs	r2, #32
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff f839 	bl	800cdf6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a18      	ldr	r0, [r3, #32]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3324      	adds	r3, #36	@ 0x24
 800dd8c:	220b      	movs	r2, #11
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f7ff f810 	bl	800cdb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2201      	movs	r2, #1
 800dd98:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	60fb      	str	r3, [r7, #12]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3324      	adds	r3, #36	@ 0x24
 800ddb8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ddba:	220b      	movs	r2, #11
 800ddbc:	2120      	movs	r1, #32
 800ddbe:	68b8      	ldr	r0, [r7, #8]
 800ddc0:	f7ff f819 	bl	800cdf6 <mem_set>
	si = i = 0; ni = 8;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	61fb      	str	r3, [r7, #28]
 800ddcc:	2308      	movs	r3, #8
 800ddce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	61fa      	str	r2, [r7, #28]
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	4413      	add	r3, r2
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ddde:	7efb      	ldrb	r3, [r7, #27]
 800dde0:	2b20      	cmp	r3, #32
 800dde2:	d94e      	bls.n	800de82 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dde4:	7efb      	ldrb	r3, [r7, #27]
 800dde6:	2b2f      	cmp	r3, #47	@ 0x2f
 800dde8:	d006      	beq.n	800ddf8 <create_name+0x54>
 800ddea:	7efb      	ldrb	r3, [r7, #27]
 800ddec:	2b5c      	cmp	r3, #92	@ 0x5c
 800ddee:	d110      	bne.n	800de12 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ddf0:	e002      	b.n	800ddf8 <create_name+0x54>
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	61fb      	str	r3, [r7, #28]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b2f      	cmp	r3, #47	@ 0x2f
 800de02:	d0f6      	beq.n	800ddf2 <create_name+0x4e>
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	4413      	add	r3, r2
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800de0e:	d0f0      	beq.n	800ddf2 <create_name+0x4e>
			break;
 800de10:	e038      	b.n	800de84 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de12:	7efb      	ldrb	r3, [r7, #27]
 800de14:	2b2e      	cmp	r3, #46	@ 0x2e
 800de16:	d003      	beq.n	800de20 <create_name+0x7c>
 800de18:	693a      	ldr	r2, [r7, #16]
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d30c      	bcc.n	800de3a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2b0b      	cmp	r3, #11
 800de24:	d002      	beq.n	800de2c <create_name+0x88>
 800de26:	7efb      	ldrb	r3, [r7, #27]
 800de28:	2b2e      	cmp	r3, #46	@ 0x2e
 800de2a:	d001      	beq.n	800de30 <create_name+0x8c>
 800de2c:	2306      	movs	r3, #6
 800de2e:	e044      	b.n	800deba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800de30:	2308      	movs	r3, #8
 800de32:	613b      	str	r3, [r7, #16]
 800de34:	230b      	movs	r3, #11
 800de36:	617b      	str	r3, [r7, #20]
			continue;
 800de38:	e022      	b.n	800de80 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800de3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da04      	bge.n	800de4c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800de42:	7efb      	ldrb	r3, [r7, #27]
 800de44:	3b80      	subs	r3, #128	@ 0x80
 800de46:	4a1f      	ldr	r2, [pc, #124]	@ (800dec4 <create_name+0x120>)
 800de48:	5cd3      	ldrb	r3, [r2, r3]
 800de4a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800de4c:	7efb      	ldrb	r3, [r7, #27]
 800de4e:	4619      	mov	r1, r3
 800de50:	481d      	ldr	r0, [pc, #116]	@ (800dec8 <create_name+0x124>)
 800de52:	f7ff f812 	bl	800ce7a <chk_chr>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <create_name+0xbc>
 800de5c:	2306      	movs	r3, #6
 800de5e:	e02c      	b.n	800deba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800de60:	7efb      	ldrb	r3, [r7, #27]
 800de62:	2b60      	cmp	r3, #96	@ 0x60
 800de64:	d905      	bls.n	800de72 <create_name+0xce>
 800de66:	7efb      	ldrb	r3, [r7, #27]
 800de68:	2b7a      	cmp	r3, #122	@ 0x7a
 800de6a:	d802      	bhi.n	800de72 <create_name+0xce>
 800de6c:	7efb      	ldrb	r3, [r7, #27]
 800de6e:	3b20      	subs	r3, #32
 800de70:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	1c5a      	adds	r2, r3, #1
 800de76:	613a      	str	r2, [r7, #16]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	4413      	add	r3, r2
 800de7c:	7efa      	ldrb	r2, [r7, #27]
 800de7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800de80:	e7a6      	b.n	800ddd0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	441a      	add	r2, r3
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <create_name+0xf4>
 800de94:	2306      	movs	r3, #6
 800de96:	e010      	b.n	800deba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2be5      	cmp	r3, #229	@ 0xe5
 800de9e:	d102      	bne.n	800dea6 <create_name+0x102>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2205      	movs	r2, #5
 800dea4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dea6:	7efb      	ldrb	r3, [r7, #27]
 800dea8:	2b20      	cmp	r3, #32
 800deaa:	d801      	bhi.n	800deb0 <create_name+0x10c>
 800deac:	2204      	movs	r2, #4
 800deae:	e000      	b.n	800deb2 <create_name+0x10e>
 800deb0:	2200      	movs	r2, #0
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	330b      	adds	r3, #11
 800deb6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800deb8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	0800fa00 	.word	0x0800fa00
 800dec8:	0800f710 	.word	0x0800f710

0800decc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dee0:	e002      	b.n	800dee8 <follow_path+0x1c>
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	603b      	str	r3, [r7, #0]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2b2f      	cmp	r3, #47	@ 0x2f
 800deee:	d0f8      	beq.n	800dee2 <follow_path+0x16>
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b5c      	cmp	r3, #92	@ 0x5c
 800def6:	d0f4      	beq.n	800dee2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	2200      	movs	r2, #0
 800defc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b1f      	cmp	r3, #31
 800df04:	d80a      	bhi.n	800df1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2280      	movs	r2, #128	@ 0x80
 800df0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800df0e:	2100      	movs	r1, #0
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff fcfa 	bl	800d90a <dir_sdi>
 800df16:	4603      	mov	r3, r0
 800df18:	75fb      	strb	r3, [r7, #23]
 800df1a:	e043      	b.n	800dfa4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df1c:	463b      	mov	r3, r7
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff ff3f 	bl	800dda4 <create_name>
 800df26:	4603      	mov	r3, r0
 800df28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df2a:	7dfb      	ldrb	r3, [r7, #23]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d134      	bne.n	800df9a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff feb0 	bl	800dc96 <dir_find>
 800df36:	4603      	mov	r3, r0
 800df38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800df40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00a      	beq.n	800df5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d127      	bne.n	800df9e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800df4e:	7afb      	ldrb	r3, [r7, #11]
 800df50:	f003 0304 	and.w	r3, r3, #4
 800df54:	2b00      	cmp	r3, #0
 800df56:	d122      	bne.n	800df9e <follow_path+0xd2>
 800df58:	2305      	movs	r3, #5
 800df5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800df5c:	e01f      	b.n	800df9e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df5e:	7afb      	ldrb	r3, [r7, #11]
 800df60:	f003 0304 	and.w	r3, r3, #4
 800df64:	2b00      	cmp	r3, #0
 800df66:	d11c      	bne.n	800dfa2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	799b      	ldrb	r3, [r3, #6]
 800df6c:	f003 0310 	and.w	r3, r3, #16
 800df70:	2b00      	cmp	r3, #0
 800df72:	d102      	bne.n	800df7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800df74:	2305      	movs	r3, #5
 800df76:	75fb      	strb	r3, [r7, #23]
 800df78:	e014      	b.n	800dfa4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df88:	4413      	add	r3, r2
 800df8a:	4619      	mov	r1, r3
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7ff fe43 	bl	800dc18 <ld_clust>
 800df92:	4602      	mov	r2, r0
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df98:	e7c0      	b.n	800df1c <follow_path+0x50>
			if (res != FR_OK) break;
 800df9a:	bf00      	nop
 800df9c:	e002      	b.n	800dfa4 <follow_path+0xd8>
				break;
 800df9e:	bf00      	nop
 800dfa0:	e000      	b.n	800dfa4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfa2:	bf00      	nop
			}
		}
	}

	return res;
 800dfa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dfae:	b480      	push	{r7}
 800dfb0:	b087      	sub	sp, #28
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d031      	beq.n	800e028 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	e002      	b.n	800dfd2 <get_ldnumber+0x24>
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b20      	cmp	r3, #32
 800dfd8:	d903      	bls.n	800dfe2 <get_ldnumber+0x34>
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b3a      	cmp	r3, #58	@ 0x3a
 800dfe0:	d1f4      	bne.n	800dfcc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	2b3a      	cmp	r3, #58	@ 0x3a
 800dfe8:	d11c      	bne.n	800e024 <get_ldnumber+0x76>
			tp = *path;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	60fa      	str	r2, [r7, #12]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	3b30      	subs	r3, #48	@ 0x30
 800dffa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b09      	cmp	r3, #9
 800e000:	d80e      	bhi.n	800e020 <get_ldnumber+0x72>
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	429a      	cmp	r2, r3
 800e008:	d10a      	bne.n	800e020 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d107      	bne.n	800e020 <get_ldnumber+0x72>
					vol = (int)i;
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	3301      	adds	r3, #1
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	697a      	ldr	r2, [r7, #20]
 800e01e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	e002      	b.n	800e02a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e024:	2300      	movs	r3, #0
 800e026:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e028:	693b      	ldr	r3, [r7, #16]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	371c      	adds	r7, #28
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
	...

0800e038 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	70da      	strb	r2, [r3, #3]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f04f 32ff 	mov.w	r2, #4294967295
 800e04e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff f8dc 	bl	800d210 <move_window>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <check_fs+0x2a>
 800e05e:	2304      	movs	r3, #4
 800e060:	e038      	b.n	800e0d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3330      	adds	r3, #48	@ 0x30
 800e066:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe fe20 	bl	800ccb0 <ld_word>
 800e070:	4603      	mov	r3, r0
 800e072:	461a      	mov	r2, r3
 800e074:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e078:	429a      	cmp	r2, r3
 800e07a:	d001      	beq.n	800e080 <check_fs+0x48>
 800e07c:	2303      	movs	r3, #3
 800e07e:	e029      	b.n	800e0d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e086:	2be9      	cmp	r3, #233	@ 0xe9
 800e088:	d009      	beq.n	800e09e <check_fs+0x66>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e090:	2beb      	cmp	r3, #235	@ 0xeb
 800e092:	d11e      	bne.n	800e0d2 <check_fs+0x9a>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e09a:	2b90      	cmp	r3, #144	@ 0x90
 800e09c:	d119      	bne.n	800e0d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	3330      	adds	r3, #48	@ 0x30
 800e0a2:	3336      	adds	r3, #54	@ 0x36
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fe fe1b 	bl	800cce0 <ld_dword>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e0dc <check_fs+0xa4>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d101      	bne.n	800e0ba <check_fs+0x82>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e00c      	b.n	800e0d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	3330      	adds	r3, #48	@ 0x30
 800e0be:	3352      	adds	r3, #82	@ 0x52
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fe fe0d 	bl	800cce0 <ld_dword>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	4a05      	ldr	r2, [pc, #20]	@ (800e0e0 <check_fs+0xa8>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d101      	bne.n	800e0d2 <check_fs+0x9a>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e000      	b.n	800e0d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e0d2:	2302      	movs	r3, #2
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	00544146 	.word	0x00544146
 800e0e0:	33544146 	.word	0x33544146

0800e0e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b096      	sub	sp, #88	@ 0x58
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f7ff ff58 	bl	800dfae <get_ldnumber>
 800e0fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e102:	2b00      	cmp	r3, #0
 800e104:	da01      	bge.n	800e10a <find_volume+0x26>
 800e106:	230b      	movs	r3, #11
 800e108:	e22d      	b.n	800e566 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e10a:	4aa1      	ldr	r2, [pc, #644]	@ (800e390 <find_volume+0x2ac>)
 800e10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e112:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e116:	2b00      	cmp	r3, #0
 800e118:	d101      	bne.n	800e11e <find_volume+0x3a>
 800e11a:	230c      	movs	r3, #12
 800e11c:	e223      	b.n	800e566 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e122:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	f023 0301 	bic.w	r3, r3, #1
 800e12a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d01a      	beq.n	800e16a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e136:	785b      	ldrb	r3, [r3, #1]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fe fd19 	bl	800cb70 <disk_status>
 800e13e:	4603      	mov	r3, r0
 800e140:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10c      	bne.n	800e16a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d007      	beq.n	800e166 <find_volume+0x82>
 800e156:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e15a:	f003 0304 	and.w	r3, r3, #4
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e162:	230a      	movs	r3, #10
 800e164:	e1ff      	b.n	800e566 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e166:	2300      	movs	r3, #0
 800e168:	e1fd      	b.n	800e566 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16c:	2200      	movs	r2, #0
 800e16e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e172:	b2da      	uxtb	r2, r3
 800e174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e176:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fe fd11 	bl	800cba4 <disk_initialize>
 800e182:	4603      	mov	r3, r0
 800e184:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e188:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e194:	2303      	movs	r3, #3
 800e196:	e1e6      	b.n	800e566 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e198:	79fb      	ldrb	r3, [r7, #7]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d007      	beq.n	800e1ae <find_volume+0xca>
 800e19e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1a2:	f003 0304 	and.w	r3, r3, #4
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e1aa:	230a      	movs	r3, #10
 800e1ac:	e1db      	b.n	800e566 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e1b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e1b6:	f7ff ff3f 	bl	800e038 <check_fs>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e1c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d149      	bne.n	800e25c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1cc:	e01e      	b.n	800e20c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1d6:	011b      	lsls	r3, r3, #4
 800e1d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e1dc:	4413      	add	r3, r2
 800e1de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d006      	beq.n	800e1f8 <find_volume+0x114>
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ec:	3308      	adds	r3, #8
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fd76 	bl	800cce0 <ld_dword>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	e000      	b.n	800e1fa <find_volume+0x116>
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	3358      	adds	r3, #88	@ 0x58
 800e200:	443b      	add	r3, r7
 800e202:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e208:	3301      	adds	r3, #1
 800e20a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e20c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d9dd      	bls.n	800e1ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e212:	2300      	movs	r3, #0
 800e214:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <find_volume+0x13e>
 800e21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e21e:	3b01      	subs	r3, #1
 800e220:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	3358      	adds	r3, #88	@ 0x58
 800e228:	443b      	add	r3, r7
 800e22a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e22e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e232:	2b00      	cmp	r3, #0
 800e234:	d005      	beq.n	800e242 <find_volume+0x15e>
 800e236:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e238:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e23a:	f7ff fefd 	bl	800e038 <check_fs>
 800e23e:	4603      	mov	r3, r0
 800e240:	e000      	b.n	800e244 <find_volume+0x160>
 800e242:	2303      	movs	r3, #3
 800e244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e248:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d905      	bls.n	800e25c <find_volume+0x178>
 800e250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e252:	3301      	adds	r3, #1
 800e254:	643b      	str	r3, [r7, #64]	@ 0x40
 800e256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e258:	2b03      	cmp	r3, #3
 800e25a:	d9e2      	bls.n	800e222 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e25c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e260:	2b04      	cmp	r3, #4
 800e262:	d101      	bne.n	800e268 <find_volume+0x184>
 800e264:	2301      	movs	r3, #1
 800e266:	e17e      	b.n	800e566 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e268:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d901      	bls.n	800e274 <find_volume+0x190>
 800e270:	230d      	movs	r3, #13
 800e272:	e178      	b.n	800e566 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e276:	3330      	adds	r3, #48	@ 0x30
 800e278:	330b      	adds	r3, #11
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe fd18 	bl	800ccb0 <ld_word>
 800e280:	4603      	mov	r3, r0
 800e282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e286:	d001      	beq.n	800e28c <find_volume+0x1a8>
 800e288:	230d      	movs	r3, #13
 800e28a:	e16c      	b.n	800e566 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28e:	3330      	adds	r3, #48	@ 0x30
 800e290:	3316      	adds	r3, #22
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe fd0c 	bl	800ccb0 <ld_word>
 800e298:	4603      	mov	r3, r0
 800e29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e29c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d106      	bne.n	800e2b0 <find_volume+0x1cc>
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a4:	3330      	adds	r3, #48	@ 0x30
 800e2a6:	3324      	adds	r3, #36	@ 0x24
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fe fd19 	bl	800cce0 <ld_dword>
 800e2ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e2b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c2:	789b      	ldrb	r3, [r3, #2]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d005      	beq.n	800e2d4 <find_volume+0x1f0>
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ca:	789b      	ldrb	r3, [r3, #2]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d001      	beq.n	800e2d4 <find_volume+0x1f0>
 800e2d0:	230d      	movs	r3, #13
 800e2d2:	e148      	b.n	800e566 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	789b      	ldrb	r3, [r3, #2]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2dc:	fb02 f303 	mul.w	r3, r2, r3
 800e2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f0:	895b      	ldrh	r3, [r3, #10]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d008      	beq.n	800e308 <find_volume+0x224>
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f8:	895b      	ldrh	r3, [r3, #10]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	895b      	ldrh	r3, [r3, #10]
 800e300:	3b01      	subs	r3, #1
 800e302:	4013      	ands	r3, r2
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <find_volume+0x228>
 800e308:	230d      	movs	r3, #13
 800e30a:	e12c      	b.n	800e566 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	3330      	adds	r3, #48	@ 0x30
 800e310:	3311      	adds	r3, #17
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe fccc 	bl	800ccb0 <ld_word>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e322:	891b      	ldrh	r3, [r3, #8]
 800e324:	f003 030f 	and.w	r3, r3, #15
 800e328:	b29b      	uxth	r3, r3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <find_volume+0x24e>
 800e32e:	230d      	movs	r3, #13
 800e330:	e119      	b.n	800e566 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e334:	3330      	adds	r3, #48	@ 0x30
 800e336:	3313      	adds	r3, #19
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fcb9 	bl	800ccb0 <ld_word>
 800e33e:	4603      	mov	r3, r0
 800e340:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e344:	2b00      	cmp	r3, #0
 800e346:	d106      	bne.n	800e356 <find_volume+0x272>
 800e348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34a:	3330      	adds	r3, #48	@ 0x30
 800e34c:	3320      	adds	r3, #32
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe fcc6 	bl	800cce0 <ld_dword>
 800e354:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e358:	3330      	adds	r3, #48	@ 0x30
 800e35a:	330e      	adds	r3, #14
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fe fca7 	bl	800ccb0 <ld_word>
 800e362:	4603      	mov	r3, r0
 800e364:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e366:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <find_volume+0x28c>
 800e36c:	230d      	movs	r3, #13
 800e36e:	e0fa      	b.n	800e566 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e370:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e374:	4413      	add	r3, r2
 800e376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e378:	8912      	ldrh	r2, [r2, #8]
 800e37a:	0912      	lsrs	r2, r2, #4
 800e37c:	b292      	uxth	r2, r2
 800e37e:	4413      	add	r3, r2
 800e380:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e386:	429a      	cmp	r2, r3
 800e388:	d204      	bcs.n	800e394 <find_volume+0x2b0>
 800e38a:	230d      	movs	r3, #13
 800e38c:	e0eb      	b.n	800e566 <find_volume+0x482>
 800e38e:	bf00      	nop
 800e390:	24076de8 	.word	0x24076de8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e398:	1ad3      	subs	r3, r2, r3
 800e39a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e39c:	8952      	ldrh	r2, [r2, #10]
 800e39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d101      	bne.n	800e3ae <find_volume+0x2ca>
 800e3aa:	230d      	movs	r3, #13
 800e3ac:	e0db      	b.n	800e566 <find_volume+0x482>
		fmt = FS_FAT32;
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d802      	bhi.n	800e3c4 <find_volume+0x2e0>
 800e3be:	2302      	movs	r3, #2
 800e3c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d802      	bhi.n	800e3d4 <find_volume+0x2f0>
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d6:	1c9a      	adds	r2, r3, #2
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e3e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3e6:	441a      	add	r2, r3
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e3ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f0:	441a      	add	r2, r3
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e3f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3fa:	2b03      	cmp	r3, #3
 800e3fc:	d11e      	bne.n	800e43c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e400:	3330      	adds	r3, #48	@ 0x30
 800e402:	332a      	adds	r3, #42	@ 0x2a
 800e404:	4618      	mov	r0, r3
 800e406:	f7fe fc53 	bl	800ccb0 <ld_word>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <find_volume+0x330>
 800e410:	230d      	movs	r3, #13
 800e412:	e0a8      	b.n	800e566 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e416:	891b      	ldrh	r3, [r3, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d001      	beq.n	800e420 <find_volume+0x33c>
 800e41c:	230d      	movs	r3, #13
 800e41e:	e0a2      	b.n	800e566 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e422:	3330      	adds	r3, #48	@ 0x30
 800e424:	332c      	adds	r3, #44	@ 0x2c
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fc5a 	bl	800cce0 <ld_dword>
 800e42c:	4602      	mov	r2, r0
 800e42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e430:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	647b      	str	r3, [r7, #68]	@ 0x44
 800e43a:	e01f      	b.n	800e47c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43e:	891b      	ldrh	r3, [r3, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <find_volume+0x364>
 800e444:	230d      	movs	r3, #13
 800e446:	e08e      	b.n	800e566 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44a:	6a1a      	ldr	r2, [r3, #32]
 800e44c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e44e:	441a      	add	r2, r3
 800e450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e452:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d103      	bne.n	800e464 <find_volume+0x380>
 800e45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	e00a      	b.n	800e47a <find_volume+0x396>
 800e464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e466:	695a      	ldr	r2, [r3, #20]
 800e468:	4613      	mov	r3, r2
 800e46a:	005b      	lsls	r3, r3, #1
 800e46c:	4413      	add	r3, r2
 800e46e:	085a      	lsrs	r2, r3, #1
 800e470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e472:	695b      	ldr	r3, [r3, #20]
 800e474:	f003 0301 	and.w	r3, r3, #1
 800e478:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e47a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47e:	699a      	ldr	r2, [r3, #24]
 800e480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e482:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e486:	0a5b      	lsrs	r3, r3, #9
 800e488:	429a      	cmp	r2, r3
 800e48a:	d201      	bcs.n	800e490 <find_volume+0x3ac>
 800e48c:	230d      	movs	r3, #13
 800e48e:	e06a      	b.n	800e566 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e492:	f04f 32ff 	mov.w	r2, #4294967295
 800e496:	611a      	str	r2, [r3, #16]
 800e498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49a:	691a      	ldr	r2, [r3, #16]
 800e49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a2:	2280      	movs	r2, #128	@ 0x80
 800e4a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e4a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4aa:	2b03      	cmp	r3, #3
 800e4ac:	d149      	bne.n	800e542 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b0:	3330      	adds	r3, #48	@ 0x30
 800e4b2:	3330      	adds	r3, #48	@ 0x30
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe fbfb 	bl	800ccb0 <ld_word>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d140      	bne.n	800e542 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e4c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4c8:	f7fe fea2 	bl	800d210 <move_window>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d137      	bne.n	800e542 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4da:	3330      	adds	r3, #48	@ 0x30
 800e4dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe fbe5 	bl	800ccb0 <ld_word>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d127      	bne.n	800e542 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f4:	3330      	adds	r3, #48	@ 0x30
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe fbf2 	bl	800cce0 <ld_dword>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	4a1c      	ldr	r2, [pc, #112]	@ (800e570 <find_volume+0x48c>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d11e      	bne.n	800e542 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e506:	3330      	adds	r3, #48	@ 0x30
 800e508:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fe fbe7 	bl	800cce0 <ld_dword>
 800e512:	4603      	mov	r3, r0
 800e514:	4a17      	ldr	r2, [pc, #92]	@ (800e574 <find_volume+0x490>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d113      	bne.n	800e542 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51c:	3330      	adds	r3, #48	@ 0x30
 800e51e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe fbdc 	bl	800cce0 <ld_dword>
 800e528:	4602      	mov	r2, r0
 800e52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	3330      	adds	r3, #48	@ 0x30
 800e532:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe fbd2 	bl	800cce0 <ld_dword>
 800e53c:	4602      	mov	r2, r0
 800e53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e540:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e544:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e548:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e54a:	4b0b      	ldr	r3, [pc, #44]	@ (800e578 <find_volume+0x494>)
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	3301      	adds	r3, #1
 800e550:	b29a      	uxth	r2, r3
 800e552:	4b09      	ldr	r3, [pc, #36]	@ (800e578 <find_volume+0x494>)
 800e554:	801a      	strh	r2, [r3, #0]
 800e556:	4b08      	ldr	r3, [pc, #32]	@ (800e578 <find_volume+0x494>)
 800e558:	881a      	ldrh	r2, [r3, #0]
 800e55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e55e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e560:	f7fe fdee 	bl	800d140 <clear_lock>
#endif
	return FR_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3758      	adds	r7, #88	@ 0x58
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	41615252 	.word	0x41615252
 800e574:	61417272 	.word	0x61417272
 800e578:	24076dec 	.word	0x24076dec

0800e57c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e586:	2309      	movs	r3, #9
 800e588:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d01c      	beq.n	800e5ca <validate+0x4e>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d018      	beq.n	800e5ca <validate+0x4e>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d013      	beq.n	800e5ca <validate+0x4e>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	889a      	ldrh	r2, [r3, #4]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	88db      	ldrh	r3, [r3, #6]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d10c      	bne.n	800e5ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fada 	bl	800cb70 <disk_status>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	f003 0301 	and.w	r3, r3, #1
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <validate+0x4e>
			res = FR_OK;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d102      	bne.n	800e5d6 <validate+0x5a>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	e000      	b.n	800e5d8 <validate+0x5c>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	6013      	str	r3, [r2, #0]
	return res;
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
	...

0800e5e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b088      	sub	sp, #32
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e5fa:	f107 0310 	add.w	r3, r7, #16
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7ff fcd5 	bl	800dfae <get_ldnumber>
 800e604:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da01      	bge.n	800e610 <f_mount+0x28>
 800e60c:	230b      	movs	r3, #11
 800e60e:	e02b      	b.n	800e668 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e610:	4a17      	ldr	r2, [pc, #92]	@ (800e670 <f_mount+0x88>)
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e618:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d005      	beq.n	800e62c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e620:	69b8      	ldr	r0, [r7, #24]
 800e622:	f7fe fd8d 	bl	800d140 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	2200      	movs	r2, #0
 800e62a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	490d      	ldr	r1, [pc, #52]	@ (800e670 <f_mount+0x88>)
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <f_mount+0x66>
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d001      	beq.n	800e652 <f_mount+0x6a>
 800e64e:	2300      	movs	r3, #0
 800e650:	e00a      	b.n	800e668 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e652:	f107 010c 	add.w	r1, r7, #12
 800e656:	f107 0308 	add.w	r3, r7, #8
 800e65a:	2200      	movs	r2, #0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7ff fd41 	bl	800e0e4 <find_volume>
 800e662:	4603      	mov	r3, r0
 800e664:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e666:	7dfb      	ldrb	r3, [r7, #23]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3720      	adds	r7, #32
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	24076de8 	.word	0x24076de8

0800e674 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b098      	sub	sp, #96	@ 0x60
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	4613      	mov	r3, r2
 800e680:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d101      	bne.n	800e68c <f_open+0x18>
 800e688:	2309      	movs	r3, #9
 800e68a:	e1a9      	b.n	800e9e0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e692:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e694:	79fa      	ldrb	r2, [r7, #7]
 800e696:	f107 0110 	add.w	r1, r7, #16
 800e69a:	f107 0308 	add.w	r3, r7, #8
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7ff fd20 	bl	800e0e4 <find_volume>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e6aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f040 818d 	bne.w	800e9ce <f_open+0x35a>
		dj.obj.fs = fs;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	f107 0314 	add.w	r3, r7, #20
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fc03 	bl	800decc <follow_path>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d118      	bne.n	800e706 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e6d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e6d8:	b25b      	sxtb	r3, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	da03      	bge.n	800e6e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e6de:	2306      	movs	r3, #6
 800e6e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e6e4:	e00f      	b.n	800e706 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	bf8c      	ite	hi
 800e6ec:	2301      	movhi	r3, #1
 800e6ee:	2300      	movls	r3, #0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	f107 0314 	add.w	r3, r7, #20
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe fbd8 	bl	800ceb0 <chk_lock>
 800e700:	4603      	mov	r3, r0
 800e702:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	f003 031c 	and.w	r3, r3, #28
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d07f      	beq.n	800e810 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e710:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e714:	2b00      	cmp	r3, #0
 800e716:	d017      	beq.n	800e748 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e718:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e71c:	2b04      	cmp	r3, #4
 800e71e:	d10e      	bne.n	800e73e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e720:	f7fe fc22 	bl	800cf68 <enq_lock>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d006      	beq.n	800e738 <f_open+0xc4>
 800e72a:	f107 0314 	add.w	r3, r7, #20
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fb06 	bl	800dd40 <dir_register>
 800e734:	4603      	mov	r3, r0
 800e736:	e000      	b.n	800e73a <f_open+0xc6>
 800e738:	2312      	movs	r3, #18
 800e73a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	f043 0308 	orr.w	r3, r3, #8
 800e744:	71fb      	strb	r3, [r7, #7]
 800e746:	e010      	b.n	800e76a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e748:	7ebb      	ldrb	r3, [r7, #26]
 800e74a:	f003 0311 	and.w	r3, r3, #17
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d003      	beq.n	800e75a <f_open+0xe6>
					res = FR_DENIED;
 800e752:	2307      	movs	r3, #7
 800e754:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e758:	e007      	b.n	800e76a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	f003 0304 	and.w	r3, r3, #4
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <f_open+0xf6>
 800e764:	2308      	movs	r3, #8
 800e766:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e76a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d168      	bne.n	800e844 <f_open+0x1d0>
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	f003 0308 	and.w	r3, r3, #8
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d063      	beq.n	800e844 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e77c:	f7fd ffb2 	bl	800c6e4 <get_fattime>
 800e780:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e784:	330e      	adds	r3, #14
 800e786:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe fae7 	bl	800cd5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e790:	3316      	adds	r3, #22
 800e792:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e794:	4618      	mov	r0, r3
 800e796:	f7fe fae1 	bl	800cd5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e79c:	330b      	adds	r3, #11
 800e79e:	2220      	movs	r2, #32
 800e7a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7ff fa35 	bl	800dc18 <ld_clust>
 800e7ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fa4d 	bl	800dc56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7be:	331c      	adds	r3, #28
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe faca 	bl	800cd5c <st_dword>
					fs->wflag = 1;
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e7ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d037      	beq.n	800e844 <f_open+0x1d0>
						dw = fs->winsect;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e7da:	f107 0314 	add.w	r3, r7, #20
 800e7de:	2200      	movs	r2, #0
 800e7e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe ff60 	bl	800d6a8 <remove_chain>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e7ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d126      	bne.n	800e844 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe fd08 	bl	800d210 <move_window>
 800e800:	4603      	mov	r3, r0
 800e802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e80a:	3a01      	subs	r2, #1
 800e80c:	60da      	str	r2, [r3, #12]
 800e80e:	e019      	b.n	800e844 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e810:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e814:	2b00      	cmp	r3, #0
 800e816:	d115      	bne.n	800e844 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e818:	7ebb      	ldrb	r3, [r7, #26]
 800e81a:	f003 0310 	and.w	r3, r3, #16
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d003      	beq.n	800e82a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e822:	2304      	movs	r3, #4
 800e824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e828:	e00c      	b.n	800e844 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e82a:	79fb      	ldrb	r3, [r7, #7]
 800e82c:	f003 0302 	and.w	r3, r3, #2
 800e830:	2b00      	cmp	r3, #0
 800e832:	d007      	beq.n	800e844 <f_open+0x1d0>
 800e834:	7ebb      	ldrb	r3, [r7, #26]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <f_open+0x1d0>
						res = FR_DENIED;
 800e83e:	2307      	movs	r3, #7
 800e840:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d126      	bne.n	800e89a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	f003 0308 	and.w	r3, r3, #8
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e85c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e86c:	79fb      	ldrb	r3, [r7, #7]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	bf8c      	ite	hi
 800e872:	2301      	movhi	r3, #1
 800e874:	2300      	movls	r3, #0
 800e876:	b2db      	uxtb	r3, r3
 800e878:	461a      	mov	r2, r3
 800e87a:	f107 0314 	add.w	r3, r7, #20
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7fe fb93 	bl	800cfac <inc_lock>
 800e886:	4602      	mov	r2, r0
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <f_open+0x226>
 800e894:	2302      	movs	r3, #2
 800e896:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e89a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f040 8095 	bne.w	800e9ce <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff f9b4 	bl	800dc18 <ld_clust>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b8:	331c      	adds	r3, #28
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe fa10 	bl	800cce0 <ld_dword>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	88da      	ldrh	r2, [r3, #6]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	79fa      	ldrb	r2, [r7, #7]
 800e8de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3330      	adds	r3, #48	@ 0x30
 800e8f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fe fa7a 	bl	800cdf6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	f003 0320 	and.w	r3, r3, #32
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d060      	beq.n	800e9ce <f_open+0x35a>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d05c      	beq.n	800e9ce <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	68da      	ldr	r2, [r3, #12]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	895b      	ldrh	r3, [r3, #10]
 800e920:	025b      	lsls	r3, r3, #9
 800e922:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e930:	e016      	b.n	800e960 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fd25 	bl	800d386 <get_fat>
 800e93c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e93e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e940:	2b01      	cmp	r3, #1
 800e942:	d802      	bhi.n	800e94a <f_open+0x2d6>
 800e944:	2302      	movs	r3, #2
 800e946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e94a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e950:	d102      	bne.n	800e958 <f_open+0x2e4>
 800e952:	2301      	movs	r3, #1
 800e954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e958:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e95a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e960:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e964:	2b00      	cmp	r3, #0
 800e966:	d103      	bne.n	800e970 <f_open+0x2fc>
 800e968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e96a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d8e0      	bhi.n	800e932 <f_open+0x2be>
				}
				fp->clust = clst;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e974:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e976:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d127      	bne.n	800e9ce <f_open+0x35a>
 800e97e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e984:	2b00      	cmp	r3, #0
 800e986:	d022      	beq.n	800e9ce <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fe fcdb 	bl	800d348 <clust2sect>
 800e992:	6478      	str	r0, [r7, #68]	@ 0x44
 800e994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e996:	2b00      	cmp	r3, #0
 800e998:	d103      	bne.n	800e9a2 <f_open+0x32e>
						res = FR_INT_ERR;
 800e99a:	2302      	movs	r3, #2
 800e99c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e9a0:	e015      	b.n	800e9ce <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a4:	0a5a      	lsrs	r2, r3, #9
 800e9a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9a8:	441a      	add	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	7858      	ldrb	r0, [r3, #1]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6a1a      	ldr	r2, [r3, #32]
 800e9bc:	2301      	movs	r3, #1
 800e9be:	f7fe f919 	bl	800cbf4 <disk_read>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <f_open+0x35a>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e9ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <f_open+0x368>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e9dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3760      	adds	r7, #96	@ 0x60
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08e      	sub	sp, #56	@ 0x38
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f107 0214 	add.w	r2, r7, #20
 800ea06:	4611      	mov	r1, r2
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff fdb7 	bl	800e57c <validate>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d107      	bne.n	800ea2c <f_read+0x44>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	7d5b      	ldrb	r3, [r3, #21]
 800ea20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ea24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <f_read+0x4a>
 800ea2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ea30:	e115      	b.n	800ec5e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	7d1b      	ldrb	r3, [r3, #20]
 800ea36:	f003 0301 	and.w	r3, r3, #1
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d101      	bne.n	800ea42 <f_read+0x5a>
 800ea3e:	2307      	movs	r3, #7
 800ea40:	e10d      	b.n	800ec5e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	68da      	ldr	r2, [r3, #12]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	6a3b      	ldr	r3, [r7, #32]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	f240 80fe 	bls.w	800ec54 <f_read+0x26c>
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea5c:	e0fa      	b.n	800ec54 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f040 80c6 	bne.w	800ebf8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	699b      	ldr	r3, [r3, #24]
 800ea70:	0a5b      	lsrs	r3, r3, #9
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	8952      	ldrh	r2, [r2, #10]
 800ea76:	3a01      	subs	r2, #1
 800ea78:	4013      	ands	r3, r2
 800ea7a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d12f      	bne.n	800eae2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d103      	bne.n	800ea92 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea90:	e013      	b.n	800eaba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d007      	beq.n	800eaaa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f7fe fefe 	bl	800d8a2 <clmt_clust>
 800eaa6:	6338      	str	r0, [r7, #48]	@ 0x30
 800eaa8:	e007      	b.n	800eaba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	69db      	ldr	r3, [r3, #28]
 800eab0:	4619      	mov	r1, r3
 800eab2:	4610      	mov	r0, r2
 800eab4:	f7fe fc67 	bl	800d386 <get_fat>
 800eab8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d804      	bhi.n	800eaca <f_read+0xe2>
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2202      	movs	r2, #2
 800eac4:	755a      	strb	r2, [r3, #21]
 800eac6:	2302      	movs	r3, #2
 800eac8:	e0c9      	b.n	800ec5e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead0:	d104      	bne.n	800eadc <f_read+0xf4>
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2201      	movs	r2, #1
 800ead6:	755a      	strb	r2, [r3, #21]
 800ead8:	2301      	movs	r3, #1
 800eada:	e0c0      	b.n	800ec5e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eae0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	69db      	ldr	r3, [r3, #28]
 800eae8:	4619      	mov	r1, r3
 800eaea:	4610      	mov	r0, r2
 800eaec:	f7fe fc2c 	bl	800d348 <clust2sect>
 800eaf0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d104      	bne.n	800eb02 <f_read+0x11a>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2202      	movs	r2, #2
 800eafc:	755a      	strb	r2, [r3, #21]
 800eafe:	2302      	movs	r3, #2
 800eb00:	e0ad      	b.n	800ec5e <f_read+0x276>
			sect += csect;
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	4413      	add	r3, r2
 800eb08:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	0a5b      	lsrs	r3, r3, #9
 800eb0e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d039      	beq.n	800eb8a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb16:	69fa      	ldr	r2, [r7, #28]
 800eb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1a:	4413      	add	r3, r2
 800eb1c:	697a      	ldr	r2, [r7, #20]
 800eb1e:	8952      	ldrh	r2, [r2, #10]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d905      	bls.n	800eb30 <f_read+0x148>
					cc = fs->csize - csect;
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	895b      	ldrh	r3, [r3, #10]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	7858      	ldrb	r0, [r3, #1]
 800eb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb36:	69ba      	ldr	r2, [r7, #24]
 800eb38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb3a:	f7fe f85b 	bl	800cbf4 <disk_read>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d004      	beq.n	800eb4e <f_read+0x166>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2201      	movs	r2, #1
 800eb48:	755a      	strb	r2, [r3, #21]
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e087      	b.n	800ec5e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	7d1b      	ldrb	r3, [r3, #20]
 800eb52:	b25b      	sxtb	r3, r3
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	da14      	bge.n	800eb82 <f_read+0x19a>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6a1a      	ldr	r2, [r3, #32]
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d90d      	bls.n	800eb82 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6a1a      	ldr	r2, [r3, #32]
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	025b      	lsls	r3, r3, #9
 800eb70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb72:	18d0      	adds	r0, r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3330      	adds	r3, #48	@ 0x30
 800eb78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	f7fe f919 	bl	800cdb4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb84:	025b      	lsls	r3, r3, #9
 800eb86:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800eb88:	e050      	b.n	800ec2c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d02e      	beq.n	800ebf2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	7d1b      	ldrb	r3, [r3, #20]
 800eb98:	b25b      	sxtb	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	da18      	bge.n	800ebd0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	7858      	ldrb	r0, [r3, #1]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6a1a      	ldr	r2, [r3, #32]
 800ebac:	2301      	movs	r3, #1
 800ebae:	f7fe f841 	bl	800cc34 <disk_write>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <f_read+0x1da>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	755a      	strb	r2, [r3, #21]
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e04d      	b.n	800ec5e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	7d1b      	ldrb	r3, [r3, #20]
 800ebc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	7858      	ldrb	r0, [r3, #1]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ebda:	2301      	movs	r3, #1
 800ebdc:	69ba      	ldr	r2, [r7, #24]
 800ebde:	f7fe f809 	bl	800cbf4 <disk_read>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <f_read+0x20a>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2201      	movs	r2, #1
 800ebec:	755a      	strb	r2, [r3, #21]
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e035      	b.n	800ec5e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	69ba      	ldr	r2, [r7, #24]
 800ebf6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec00:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ec04:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d901      	bls.n	800ec12 <f_read+0x22a>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	699b      	ldr	r3, [r3, #24]
 800ec1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec20:	4413      	add	r3, r2
 800ec22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec24:	4619      	mov	r1, r3
 800ec26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec28:	f7fe f8c4 	bl	800cdb4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec30:	4413      	add	r3, r2
 800ec32:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	699a      	ldr	r2, [r3, #24]
 800ec38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec3a:	441a      	add	r2, r3
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	619a      	str	r2, [r3, #24]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec46:	441a      	add	r2, r3
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	601a      	str	r2, [r3, #0]
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f47f af01 	bne.w	800ea5e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3738      	adds	r7, #56	@ 0x38
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b086      	sub	sp, #24
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f107 0208 	add.w	r2, r7, #8
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff fc80 	bl	800e57c <validate>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d168      	bne.n	800ed58 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	7d1b      	ldrb	r3, [r3, #20]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d062      	beq.n	800ed58 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	7d1b      	ldrb	r3, [r3, #20]
 800ec96:	b25b      	sxtb	r3, r3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	da15      	bge.n	800ecc8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	7858      	ldrb	r0, [r3, #1]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a1a      	ldr	r2, [r3, #32]
 800ecaa:	2301      	movs	r3, #1
 800ecac:	f7fd ffc2 	bl	800cc34 <disk_write>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <f_sync+0x54>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e04f      	b.n	800ed5a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	7d1b      	ldrb	r3, [r3, #20]
 800ecbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ecc8:	f7fd fd0c 	bl	800c6e4 <get_fattime>
 800eccc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	f7fe fa9a 	bl	800d210 <move_window>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ece0:	7dfb      	ldrb	r3, [r7, #23]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d138      	bne.n	800ed58 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	330b      	adds	r3, #11
 800ecf0:	781a      	ldrb	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	330b      	adds	r3, #11
 800ecf6:	f042 0220 	orr.w	r2, r2, #32
 800ecfa:	b2d2      	uxtb	r2, r2
 800ecfc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6818      	ldr	r0, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	461a      	mov	r2, r3
 800ed08:	68f9      	ldr	r1, [r7, #12]
 800ed0a:	f7fe ffa4 	bl	800dc56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f103 021c 	add.w	r2, r3, #28
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	4610      	mov	r0, r2
 800ed1c:	f7fe f81e 	bl	800cd5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	3316      	adds	r3, #22
 800ed24:	6939      	ldr	r1, [r7, #16]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe f818 	bl	800cd5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3312      	adds	r3, #18
 800ed30:	2100      	movs	r1, #0
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fd fff7 	bl	800cd26 <st_word>
					fs->wflag = 1;
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fe fa93 	bl	800d26c <sync_fs>
 800ed46:	4603      	mov	r3, r0
 800ed48:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	7d1b      	ldrb	r3, [r3, #20]
 800ed4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b084      	sub	sp, #16
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff ff7b 	bl	800ec66 <f_sync>
 800ed70:	4603      	mov	r3, r0
 800ed72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d118      	bne.n	800edac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f107 0208 	add.w	r2, r7, #8
 800ed80:	4611      	mov	r1, r2
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff fbfa 	bl	800e57c <validate>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10c      	bne.n	800edac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe f996 	bl	800d0c8 <dec_lock>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d102      	bne.n	800edac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800edac:	7bfb      	ldrb	r3, [r7, #15]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b090      	sub	sp, #64	@ 0x40
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
 800edbe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f107 0208 	add.w	r2, r7, #8
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff fbd7 	bl	800e57c <validate>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800edd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d103      	bne.n	800ede4 <f_lseek+0x2e>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	7d5b      	ldrb	r3, [r3, #21]
 800ede0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ede4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <f_lseek+0x3c>
 800edec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800edf0:	e1e6      	b.n	800f1c0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 80d1 	beq.w	800ef9e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee02:	d15a      	bne.n	800eeba <f_lseek+0x104>
			tbl = fp->cltbl;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee08:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0c:	1d1a      	adds	r2, r3, #4
 800ee0e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	2302      	movs	r3, #2
 800ee16:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d03a      	beq.n	800ee9a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ee24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee26:	613b      	str	r3, [r7, #16]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee2e:	3302      	adds	r3, #2
 800ee30:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ee32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee34:	60fb      	str	r3, [r7, #12]
 800ee36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee38:	3301      	adds	r3, #1
 800ee3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fe faa0 	bl	800d386 <get_fat>
 800ee46:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ee48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d804      	bhi.n	800ee58 <f_lseek+0xa2>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2202      	movs	r2, #2
 800ee52:	755a      	strb	r2, [r3, #21]
 800ee54:	2302      	movs	r3, #2
 800ee56:	e1b3      	b.n	800f1c0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5e:	d104      	bne.n	800ee6a <f_lseek+0xb4>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	755a      	strb	r2, [r3, #21]
 800ee66:	2301      	movs	r3, #1
 800ee68:	e1aa      	b.n	800f1c0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d0de      	beq.n	800ee32 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ee74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d809      	bhi.n	800ee90 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7e:	1d1a      	adds	r2, r3, #4
 800ee80:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee84:	601a      	str	r2, [r3, #0]
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	1d1a      	adds	r2, r3, #4
 800ee8a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee8c:	693a      	ldr	r2, [r7, #16]
 800ee8e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d3c4      	bcc.n	800ee24 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eea0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d803      	bhi.n	800eeb2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeac:	2200      	movs	r2, #0
 800eeae:	601a      	str	r2, [r3, #0]
 800eeb0:	e184      	b.n	800f1bc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eeb2:	2311      	movs	r3, #17
 800eeb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800eeb8:	e180      	b.n	800f1bc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	683a      	ldr	r2, [r7, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d902      	bls.n	800eeca <f_lseek+0x114>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 8172 	beq.w	800f1bc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	3b01      	subs	r3, #1
 800eedc:	4619      	mov	r1, r3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7fe fcdf 	bl	800d8a2 <clmt_clust>
 800eee4:	4602      	mov	r2, r0
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	69db      	ldr	r3, [r3, #28]
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	f7fe fa28 	bl	800d348 <clust2sect>
 800eef8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d104      	bne.n	800ef0a <f_lseek+0x154>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2202      	movs	r2, #2
 800ef04:	755a      	strb	r2, [r3, #21]
 800ef06:	2302      	movs	r3, #2
 800ef08:	e15a      	b.n	800f1c0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	0a5b      	lsrs	r3, r3, #9
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	8952      	ldrh	r2, [r2, #10]
 800ef14:	3a01      	subs	r2, #1
 800ef16:	4013      	ands	r3, r2
 800ef18:	69ba      	ldr	r2, [r7, #24]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f000 8148 	beq.w	800f1bc <f_lseek+0x406>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a1b      	ldr	r3, [r3, #32]
 800ef30:	69ba      	ldr	r2, [r7, #24]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	f000 8142 	beq.w	800f1bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
 800ef3c:	b25b      	sxtb	r3, r3
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	da18      	bge.n	800ef74 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	7858      	ldrb	r0, [r3, #1]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a1a      	ldr	r2, [r3, #32]
 800ef50:	2301      	movs	r3, #1
 800ef52:	f7fd fe6f 	bl	800cc34 <disk_write>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d004      	beq.n	800ef66 <f_lseek+0x1b0>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	755a      	strb	r2, [r3, #21]
 800ef62:	2301      	movs	r3, #1
 800ef64:	e12c      	b.n	800f1c0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	7d1b      	ldrb	r3, [r3, #20]
 800ef6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	7858      	ldrb	r0, [r3, #1]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef7e:	2301      	movs	r3, #1
 800ef80:	69ba      	ldr	r2, [r7, #24]
 800ef82:	f7fd fe37 	bl	800cbf4 <disk_read>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d004      	beq.n	800ef96 <f_lseek+0x1e0>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	755a      	strb	r2, [r3, #21]
 800ef92:	2301      	movs	r3, #1
 800ef94:	e114      	b.n	800f1c0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	69ba      	ldr	r2, [r7, #24]
 800ef9a:	621a      	str	r2, [r3, #32]
 800ef9c:	e10e      	b.n	800f1bc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d908      	bls.n	800efba <f_lseek+0x204>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	7d1b      	ldrb	r3, [r3, #20]
 800efac:	f003 0302 	and.w	r3, r3, #2
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d102      	bne.n	800efba <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	699b      	ldr	r3, [r3, #24]
 800efbe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800efc0:	2300      	movs	r3, #0
 800efc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efc8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 80a7 	beq.w	800f120 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	895b      	ldrh	r3, [r3, #10]
 800efd6:	025b      	lsls	r3, r3, #9
 800efd8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d01b      	beq.n	800f018 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	1e5a      	subs	r2, r3, #1
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	fbb2 f2f3 	udiv	r2, r2, r3
 800efea:	6a3b      	ldr	r3, [r7, #32]
 800efec:	1e59      	subs	r1, r3, #1
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d30f      	bcc.n	800f018 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800eff8:	6a3b      	ldr	r3, [r7, #32]
 800effa:	1e5a      	subs	r2, r3, #1
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	425b      	negs	r3, r3
 800f000:	401a      	ands	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	699b      	ldr	r3, [r3, #24]
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	69db      	ldr	r3, [r3, #28]
 800f014:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f016:	e022      	b.n	800f05e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f020:	2b00      	cmp	r3, #0
 800f022:	d119      	bne.n	800f058 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2100      	movs	r1, #0
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe fba2 	bl	800d772 <create_chain>
 800f02e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f032:	2b01      	cmp	r3, #1
 800f034:	d104      	bne.n	800f040 <f_lseek+0x28a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2202      	movs	r2, #2
 800f03a:	755a      	strb	r2, [r3, #21]
 800f03c:	2302      	movs	r3, #2
 800f03e:	e0bf      	b.n	800f1c0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f046:	d104      	bne.n	800f052 <f_lseek+0x29c>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	755a      	strb	r2, [r3, #21]
 800f04e:	2301      	movs	r3, #1
 800f050:	e0b6      	b.n	800f1c0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f056:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f05c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f060:	2b00      	cmp	r3, #0
 800f062:	d05d      	beq.n	800f120 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f064:	e03a      	b.n	800f0dc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	603b      	str	r3, [r7, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	699a      	ldr	r2, [r3, #24]
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	441a      	add	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	7d1b      	ldrb	r3, [r3, #20]
 800f07e:	f003 0302 	and.w	r3, r3, #2
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00b      	beq.n	800f09e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe fb71 	bl	800d772 <create_chain>
 800f090:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f094:	2b00      	cmp	r3, #0
 800f096:	d108      	bne.n	800f0aa <f_lseek+0x2f4>
							ofs = 0; break;
 800f098:	2300      	movs	r3, #0
 800f09a:	603b      	str	r3, [r7, #0]
 800f09c:	e022      	b.n	800f0e4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe f96f 	bl	800d386 <get_fat>
 800f0a8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b0:	d104      	bne.n	800f0bc <f_lseek+0x306>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	755a      	strb	r2, [r3, #21]
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e081      	b.n	800f1c0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d904      	bls.n	800f0cc <f_lseek+0x316>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	695b      	ldr	r3, [r3, #20]
 800f0c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d304      	bcc.n	800f0d6 <f_lseek+0x320>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2202      	movs	r2, #2
 800f0d0:	755a      	strb	r2, [r3, #21]
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	e074      	b.n	800f1c0 <f_lseek+0x40a>
					fp->clust = clst;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0da:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f0dc:	683a      	ldr	r2, [r7, #0]
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d8c0      	bhi.n	800f066 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	699a      	ldr	r2, [r3, #24]
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	441a      	add	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d012      	beq.n	800f120 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fe f922 	bl	800d348 <clust2sect>
 800f104:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d104      	bne.n	800f116 <f_lseek+0x360>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2202      	movs	r2, #2
 800f110:	755a      	strb	r2, [r3, #21]
 800f112:	2302      	movs	r3, #2
 800f114:	e054      	b.n	800f1c0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	0a5b      	lsrs	r3, r3, #9
 800f11a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f11c:	4413      	add	r3, r2
 800f11e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	699a      	ldr	r2, [r3, #24]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d90a      	bls.n	800f142 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	699a      	ldr	r2, [r3, #24]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	7d1b      	ldrb	r3, [r3, #20]
 800f138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d036      	beq.n	800f1bc <f_lseek+0x406>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f154:	429a      	cmp	r2, r3
 800f156:	d031      	beq.n	800f1bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	7d1b      	ldrb	r3, [r3, #20]
 800f15c:	b25b      	sxtb	r3, r3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	da18      	bge.n	800f194 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	7858      	ldrb	r0, [r3, #1]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a1a      	ldr	r2, [r3, #32]
 800f170:	2301      	movs	r3, #1
 800f172:	f7fd fd5f 	bl	800cc34 <disk_write>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <f_lseek+0x3d0>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	755a      	strb	r2, [r3, #21]
 800f182:	2301      	movs	r3, #1
 800f184:	e01c      	b.n	800f1c0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7d1b      	ldrb	r3, [r3, #20]
 800f18a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	7858      	ldrb	r0, [r3, #1]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f19e:	2301      	movs	r3, #1
 800f1a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1a2:	f7fd fd27 	bl	800cbf4 <disk_read>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d004      	beq.n	800f1b6 <f_lseek+0x400>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	755a      	strb	r2, [r3, #21]
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e004      	b.n	800f1c0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1ba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f1bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3740      	adds	r7, #64	@ 0x40
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b087      	sub	sp, #28
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1de:	4b1f      	ldr	r3, [pc, #124]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f1e0:	7a5b      	ldrb	r3, [r3, #9]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d131      	bne.n	800f24c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f1e8:	4b1c      	ldr	r3, [pc, #112]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f1ea:	7a5b      	ldrb	r3, [r3, #9]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f1f6:	4b19      	ldr	r3, [pc, #100]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f1f8:	7a5b      	ldrb	r3, [r3, #9]
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	4a17      	ldr	r2, [pc, #92]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f206:	4b15      	ldr	r3, [pc, #84]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f208:	7a5b      	ldrb	r3, [r3, #9]
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	461a      	mov	r2, r3
 800f20e:	4b13      	ldr	r3, [pc, #76]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f210:	4413      	add	r3, r2
 800f212:	79fa      	ldrb	r2, [r7, #7]
 800f214:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f216:	4b11      	ldr	r3, [pc, #68]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f218:	7a5b      	ldrb	r3, [r3, #9]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	1c5a      	adds	r2, r3, #1
 800f21e:	b2d1      	uxtb	r1, r2
 800f220:	4a0e      	ldr	r2, [pc, #56]	@ (800f25c <FATFS_LinkDriverEx+0x94>)
 800f222:	7251      	strb	r1, [r2, #9]
 800f224:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f226:	7dbb      	ldrb	r3, [r7, #22]
 800f228:	3330      	adds	r3, #48	@ 0x30
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	3301      	adds	r3, #1
 800f234:	223a      	movs	r2, #58	@ 0x3a
 800f236:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	3302      	adds	r3, #2
 800f23c:	222f      	movs	r2, #47	@ 0x2f
 800f23e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	3303      	adds	r3, #3
 800f244:	2200      	movs	r2, #0
 800f246:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	371c      	adds	r7, #28
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	24076e10 	.word	0x24076e10

0800f260 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f26a:	2200      	movs	r2, #0
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff ffaa 	bl	800f1c8 <FATFS_LinkDriverEx>
 800f274:	4603      	mov	r3, r0
}
 800f276:	4618      	mov	r0, r3
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
	...

0800f280 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800f286:	2300      	movs	r3, #0
 800f288:	607b      	str	r3, [r7, #4]
 800f28a:	e02e      	b.n	800f2ea <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3b80      	subs	r3, #128	@ 0x80
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800f29a:	fb02 f303 	mul.w	r3, r2, r3
 800f29e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f2a2:	141a      	asrs	r2, r3, #16
 800f2a4:	4916      	ldr	r1, [pc, #88]	@ (800f300 <JPEG_InitPostProcColorTables+0x80>)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800f2b2:	fb02 f303 	mul.w	r3, r2, r3
 800f2b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f2ba:	141a      	asrs	r2, r3, #16
 800f2bc:	4911      	ldr	r1, [pc, #68]	@ (800f304 <JPEG_InitPostProcColorTables+0x84>)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	4a10      	ldr	r2, [pc, #64]	@ (800f308 <JPEG_InitPostProcColorTables+0x88>)
 800f2c8:	fb03 f202 	mul.w	r2, r3, r2
 800f2cc:	490f      	ldr	r1, [pc, #60]	@ (800f30c <JPEG_InitPostProcColorTables+0x8c>)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	4a0e      	ldr	r2, [pc, #56]	@ (800f310 <JPEG_InitPostProcColorTables+0x90>)
 800f2d8:	fb03 f202 	mul.w	r2, r3, r2
 800f2dc:	490d      	ldr	r1, [pc, #52]	@ (800f314 <JPEG_InitPostProcColorTables+0x94>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	607b      	str	r3, [r7, #4]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2bff      	cmp	r3, #255	@ 0xff
 800f2ee:	ddcd      	ble.n	800f28c <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800f2f0:	bf00      	nop
 800f2f2:	bf00      	nop
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
 800f2fe:	bf00      	nop
 800f300:	24076e1c 	.word	0x24076e1c
 800f304:	2407721c 	.word	0x2407721c
 800f308:	ffffa498 	.word	0xffffa498
 800f30c:	2407761c 	.word	0x2407761c
 800f310:	ffffd3f4 	.word	0xffffd3f4
 800f314:	24077a1c 	.word	0x24077a1c

0800f318 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800f31c:	f000 f806 	bl	800f32c <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800f320:	f000 f888 	bl	800f434 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800f324:	f7ff ffac 	bl	800f280 <JPEG_InitPostProcColorTables>
#endif

}
 800f328:	bf00      	nop
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800f332:	2300      	movs	r3, #0
 800f334:	607b      	str	r3, [r7, #4]
 800f336:	e05a      	b.n	800f3ee <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800f33e:	fb02 f303 	mul.w	r3, r2, r3
 800f342:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f346:	141a      	asrs	r2, r3, #16
 800f348:	492e      	ldr	r1, [pc, #184]	@ (800f404 <JPEG_InitPreProcColorTables+0xd8>)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f249 6245 	movw	r2, #38469	@ 0x9645
 800f356:	fb02 f303 	mul.w	r3, r2, r3
 800f35a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f35e:	141a      	asrs	r2, r3, #16
 800f360:	4929      	ldr	r1, [pc, #164]	@ (800f408 <JPEG_InitPreProcColorTables+0xdc>)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800f36e:	fb02 f303 	mul.w	r3, r2, r3
 800f372:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f376:	141a      	asrs	r2, r3, #16
 800f378:	4924      	ldr	r1, [pc, #144]	@ (800f40c <JPEG_InitPreProcColorTables+0xe0>)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a23      	ldr	r2, [pc, #140]	@ (800f410 <JPEG_InitPreProcColorTables+0xe4>)
 800f384:	fb02 f303 	mul.w	r3, r2, r3
 800f388:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f38c:	141a      	asrs	r2, r3, #16
 800f38e:	4921      	ldr	r1, [pc, #132]	@ (800f414 <JPEG_InitPreProcColorTables+0xe8>)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a1f      	ldr	r2, [pc, #124]	@ (800f418 <JPEG_InitPreProcColorTables+0xec>)
 800f39a:	fb02 f303 	mul.w	r3, r2, r3
 800f39e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3a2:	141a      	asrs	r2, r3, #16
 800f3a4:	491d      	ldr	r1, [pc, #116]	@ (800f41c <JPEG_InitPreProcColorTables+0xf0>)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	03db      	lsls	r3, r3, #15
 800f3b2:	141a      	asrs	r2, r3, #16
 800f3b4:	491a      	ldr	r1, [pc, #104]	@ (800f420 <JPEG_InitPreProcColorTables+0xf4>)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a19      	ldr	r2, [pc, #100]	@ (800f424 <JPEG_InitPreProcColorTables+0xf8>)
 800f3c0:	fb02 f303 	mul.w	r3, r2, r3
 800f3c4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3c8:	141a      	asrs	r2, r3, #16
 800f3ca:	4917      	ldr	r1, [pc, #92]	@ (800f428 <JPEG_InitPreProcColorTables+0xfc>)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a15      	ldr	r2, [pc, #84]	@ (800f42c <JPEG_InitPreProcColorTables+0x100>)
 800f3d6:	fb02 f303 	mul.w	r3, r2, r3
 800f3da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3de:	141a      	asrs	r2, r3, #16
 800f3e0:	4913      	ldr	r1, [pc, #76]	@ (800f430 <JPEG_InitPreProcColorTables+0x104>)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	607b      	str	r3, [r7, #4]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2bff      	cmp	r3, #255	@ 0xff
 800f3f2:	dda1      	ble.n	800f338 <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800f3f4:	bf00      	nop
 800f3f6:	bf00      	nop
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	24077e1c 	.word	0x24077e1c
 800f408:	24078a1c 	.word	0x24078a1c
 800f40c:	2407961c 	.word	0x2407961c
 800f410:	ffffd4d1 	.word	0xffffd4d1
 800f414:	2407821c 	.word	0x2407821c
 800f418:	ffffab30 	.word	0xffffab30
 800f41c:	2407921c 	.word	0x2407921c
 800f420:	2407861c 	.word	0x2407861c
 800f424:	ffff94d1 	.word	0xffff94d1
 800f428:	24078e1c 	.word	0x24078e1c
 800f42c:	ffffeb30 	.word	0xffffeb30
 800f430:	24079a1c 	.word	0x24079a1c

0800f434 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800f43a:	2300      	movs	r3, #0
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	e036      	b.n	800f4ae <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800f440:	2300      	movs	r3, #0
 800f442:	60bb      	str	r3, [r7, #8]
 800f444:	e02d      	b.n	800f4a2 <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	00db      	lsls	r3, r3, #3
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	4413      	add	r3, r2
 800f44e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	2b07      	cmp	r3, #7
 800f454:	d906      	bls.n	800f464 <JPEG_Init_MCU_LUT+0x30>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2b07      	cmp	r3, #7
 800f45a:	d903      	bls.n	800f464 <JPEG_Init_MCU_LUT+0x30>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3378      	adds	r3, #120	@ 0x78
 800f460:	607b      	str	r3, [r7, #4]
 800f462:	e012      	b.n	800f48a <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	2b07      	cmp	r3, #7
 800f468:	d906      	bls.n	800f478 <JPEG_Init_MCU_LUT+0x44>
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2b07      	cmp	r3, #7
 800f46e:	d803      	bhi.n	800f478 <JPEG_Init_MCU_LUT+0x44>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3338      	adds	r3, #56	@ 0x38
 800f474:	607b      	str	r3, [r7, #4]
 800f476:	e008      	b.n	800f48a <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2b07      	cmp	r3, #7
 800f47c:	d805      	bhi.n	800f48a <JPEG_Init_MCU_LUT+0x56>
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b07      	cmp	r3, #7
 800f482:	d902      	bls.n	800f48a <JPEG_Init_MCU_LUT+0x56>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	3340      	adds	r3, #64	@ 0x40
 800f488:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	011a      	lsls	r2, r3, #4
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	4413      	add	r3, r2
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	b291      	uxth	r1, r2
 800f496:	4a62      	ldr	r2, [pc, #392]	@ (800f620 <JPEG_Init_MCU_LUT+0x1ec>)
 800f498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	60bb      	str	r3, [r7, #8]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2b0f      	cmp	r3, #15
 800f4a6:	d9ce      	bls.n	800f446 <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	60fb      	str	r3, [r7, #12]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b0f      	cmp	r3, #15
 800f4b2:	d9c5      	bls.n	800f440 <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	e072      	b.n	800f5a0 <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60bb      	str	r3, [r7, #8]
 800f4be:	e069      	b.n	800f594 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	011b      	lsls	r3, r3, #4
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	085b      	lsrs	r3, r3, #1
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	085b      	lsrs	r3, r3, #1
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	00db      	lsls	r3, r3, #3
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	4413      	add	r3, r2
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f4e2:	b299      	uxth	r1, r3
 800f4e4:	4a4f      	ldr	r2, [pc, #316]	@ (800f624 <JPEG_Init_MCU_LUT+0x1f0>)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	085b      	lsrs	r3, r3, #1
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	00db      	lsls	r3, r3, #3
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	4413      	add	r3, r2
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	3380      	adds	r3, #128	@ 0x80
 800f500:	b299      	uxth	r1, r3
 800f502:	4a49      	ldr	r2, [pc, #292]	@ (800f628 <JPEG_Init_MCU_LUT+0x1f4>)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	085b      	lsrs	r3, r3, #1
 800f50e:	b29a      	uxth	r2, r3
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	085b      	lsrs	r3, r3, #1
 800f514:	b29b      	uxth	r3, r3
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	b29b      	uxth	r3, r3
 800f51a:	4413      	add	r3, r2
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f522:	b299      	uxth	r1, r3
 800f524:	4a41      	ldr	r2, [pc, #260]	@ (800f62c <JPEG_Init_MCU_LUT+0x1f8>)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	085b      	lsrs	r3, r3, #1
 800f530:	b29a      	uxth	r2, r3
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	b29b      	uxth	r3, r3
 800f536:	00db      	lsls	r3, r3, #3
 800f538:	b29b      	uxth	r3, r3
 800f53a:	4413      	add	r3, r2
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	33c0      	adds	r3, #192	@ 0xc0
 800f540:	b299      	uxth	r1, r3
 800f542:	4a3b      	ldr	r2, [pc, #236]	@ (800f630 <JPEG_Init_MCU_LUT+0x1fc>)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	085b      	lsrs	r3, r3, #1
 800f54e:	b29a      	uxth	r2, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	085b      	lsrs	r3, r3, #1
 800f554:	b29b      	uxth	r3, r3
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	b29b      	uxth	r3, r3
 800f55a:	4413      	add	r3, r2
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f562:	b299      	uxth	r1, r3
 800f564:	4a33      	ldr	r2, [pc, #204]	@ (800f634 <JPEG_Init_MCU_LUT+0x200>)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	085b      	lsrs	r3, r3, #1
 800f570:	b29a      	uxth	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	085b      	lsrs	r3, r3, #1
 800f576:	b29b      	uxth	r3, r3
 800f578:	00db      	lsls	r3, r3, #3
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	4413      	add	r3, r2
 800f57e:	b29b      	uxth	r3, r3
 800f580:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f584:	b299      	uxth	r1, r3
 800f586:	4a2c      	ldr	r2, [pc, #176]	@ (800f638 <JPEG_Init_MCU_LUT+0x204>)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	3301      	adds	r3, #1
 800f592:	60bb      	str	r3, [r7, #8]
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b0f      	cmp	r3, #15
 800f598:	d992      	bls.n	800f4c0 <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3301      	adds	r3, #1
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b0f      	cmp	r3, #15
 800f5a4:	d989      	bls.n	800f4ba <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	60fb      	str	r3, [r7, #12]
 800f5aa:	e02e      	b.n	800f60a <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	60bb      	str	r3, [r7, #8]
 800f5b0:	e025      	b.n	800f5fe <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	b299      	uxth	r1, r3
 800f5c0:	4a1e      	ldr	r2, [pc, #120]	@ (800f63c <JPEG_Init_MCU_LUT+0x208>)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	3340      	adds	r3, #64	@ 0x40
 800f5ce:	b299      	uxth	r1, r3
 800f5d0:	4a1b      	ldr	r2, [pc, #108]	@ (800f640 <JPEG_Init_MCU_LUT+0x20c>)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	3380      	adds	r3, #128	@ 0x80
 800f5de:	b299      	uxth	r1, r3
 800f5e0:	4a18      	ldr	r2, [pc, #96]	@ (800f644 <JPEG_Init_MCU_LUT+0x210>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	33c0      	adds	r3, #192	@ 0xc0
 800f5ee:	b299      	uxth	r1, r3
 800f5f0:	4a15      	ldr	r2, [pc, #84]	@ (800f648 <JPEG_Init_MCU_LUT+0x214>)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	60bb      	str	r3, [r7, #8]
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	2b07      	cmp	r3, #7
 800f602:	d9d6      	bls.n	800f5b2 <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	3301      	adds	r3, #1
 800f608:	60fb      	str	r3, [r7, #12]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2b07      	cmp	r3, #7
 800f60e:	d9cd      	bls.n	800f5ac <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800f610:	bf00      	nop
 800f612:	bf00      	nop
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	24079e1c 	.word	0x24079e1c
 800f624:	2407a09c 	.word	0x2407a09c
 800f628:	2407a29c 	.word	0x2407a29c
 800f62c:	2407a51c 	.word	0x2407a51c
 800f630:	2407a71c 	.word	0x2407a71c
 800f634:	2407a99c 	.word	0x2407a99c
 800f638:	2407ab9c 	.word	0x2407ab9c
 800f63c:	2407a01c 	.word	0x2407a01c
 800f640:	2407a49c 	.word	0x2407a49c
 800f644:	2407a91c 	.word	0x2407a91c
 800f648:	2407ad9c 	.word	0x2407ad9c

0800f64c <memset>:
 800f64c:	4402      	add	r2, r0
 800f64e:	4603      	mov	r3, r0
 800f650:	4293      	cmp	r3, r2
 800f652:	d100      	bne.n	800f656 <memset+0xa>
 800f654:	4770      	bx	lr
 800f656:	f803 1b01 	strb.w	r1, [r3], #1
 800f65a:	e7f9      	b.n	800f650 <memset+0x4>

0800f65c <__libc_init_array>:
 800f65c:	b570      	push	{r4, r5, r6, lr}
 800f65e:	4d0d      	ldr	r5, [pc, #52]	@ (800f694 <__libc_init_array+0x38>)
 800f660:	4c0d      	ldr	r4, [pc, #52]	@ (800f698 <__libc_init_array+0x3c>)
 800f662:	1b64      	subs	r4, r4, r5
 800f664:	10a4      	asrs	r4, r4, #2
 800f666:	2600      	movs	r6, #0
 800f668:	42a6      	cmp	r6, r4
 800f66a:	d109      	bne.n	800f680 <__libc_init_array+0x24>
 800f66c:	4d0b      	ldr	r5, [pc, #44]	@ (800f69c <__libc_init_array+0x40>)
 800f66e:	4c0c      	ldr	r4, [pc, #48]	@ (800f6a0 <__libc_init_array+0x44>)
 800f670:	f000 f826 	bl	800f6c0 <_init>
 800f674:	1b64      	subs	r4, r4, r5
 800f676:	10a4      	asrs	r4, r4, #2
 800f678:	2600      	movs	r6, #0
 800f67a:	42a6      	cmp	r6, r4
 800f67c:	d105      	bne.n	800f68a <__libc_init_array+0x2e>
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
 800f680:	f855 3b04 	ldr.w	r3, [r5], #4
 800f684:	4798      	blx	r3
 800f686:	3601      	adds	r6, #1
 800f688:	e7ee      	b.n	800f668 <__libc_init_array+0xc>
 800f68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f68e:	4798      	blx	r3
 800f690:	3601      	adds	r6, #1
 800f692:	e7f2      	b.n	800f67a <__libc_init_array+0x1e>
 800f694:	0800fa88 	.word	0x0800fa88
 800f698:	0800fa88 	.word	0x0800fa88
 800f69c:	0800fa88 	.word	0x0800fa88
 800f6a0:	0800fa8c 	.word	0x0800fa8c

0800f6a4 <memcpy>:
 800f6a4:	440a      	add	r2, r1
 800f6a6:	4291      	cmp	r1, r2
 800f6a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6ac:	d100      	bne.n	800f6b0 <memcpy+0xc>
 800f6ae:	4770      	bx	lr
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6ba:	4291      	cmp	r1, r2
 800f6bc:	d1f9      	bne.n	800f6b2 <memcpy+0xe>
 800f6be:	bd10      	pop	{r4, pc}

0800f6c0 <_init>:
 800f6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c2:	bf00      	nop
 800f6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6c6:	bc08      	pop	{r3}
 800f6c8:	469e      	mov	lr, r3
 800f6ca:	4770      	bx	lr

0800f6cc <_fini>:
 800f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ce:	bf00      	nop
 800f6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6d2:	bc08      	pop	{r3}
 800f6d4:	469e      	mov	lr, r3
 800f6d6:	4770      	bx	lr
