
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f558  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800f7f0  0800f7f0  000107f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb98  0800fb98  00011014  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb98  0800fb98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fba0  0800fba0  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fba0  0800fba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fba4  0800fba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  0800fba8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004800  24000014  0800fbbc  00011014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004814  0800fbbc  00011814  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fae  00000000  00000000  00011042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004717  00000000  00000000  00034ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f6  00000000  00000000  0003b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004481c  00000000  00000000  0003c4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c04  00000000  00000000  00080d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a668e  00000000  00000000  000a9906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024ff94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be8  00000000  00000000  0024ffd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00256bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f7d8 	.word	0x0800f7d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800f7d8 	.word	0x0800f7d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3b04      	subs	r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e02a      	b.n	8000762 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d11f      	bne.n	800075c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d115      	bne.n	800075c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	3302      	adds	r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d10b      	bne.n	800075c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3303      	adds	r3, #3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3303      	adds	r3, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d101      	bne.n	800075c <__AVI_SearchID+0x68>
            return i;  
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	e007      	b.n	800076c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d8d0      	bhi.n	800070c <__AVI_SearchID+0x18>
  }
  return 0;    
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3303      	adds	r3, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	431a      	orrs	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3306      	adds	r3, #6
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3307      	adds	r3, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	4313      	orrs	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a1b      	ldr	r3, [r3, #32]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8bdb      	ldrh	r3, [r3, #30]
 80007e4:	f246 4263 	movw	r2, #25699	@ 0x6463
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d005      	beq.n	80007f8 <__AVI_GetStreamInfo+0x80>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8bdb      	ldrh	r3, [r3, #30]
 80007f0:	f247 7262 	movw	r2, #30562	@ 0x7762
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d101      	bne.n	80007fc <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80007fc:	230b      	movs	r3, #11
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <__AVI_Init+0x23c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d001      	beq.n	8000834 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 8000830:	2301      	movs	r3, #1
 8000832:	e170      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a84      	ldr	r2, [pc, #528]	@ (8000a4c <__AVI_Init+0x240>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d001      	beq.n	8000842 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800083e:	2302      	movs	r3, #2
 8000840:	e169      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	330c      	adds	r3, #12
 8000846:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <__AVI_Init+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d001      	beq.n	800085a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000856:	2303      	movs	r3, #3
 8000858:	e15d      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a54 <__AVI_Init+0x248>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d001      	beq.n	8000868 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000864:	2304      	movs	r3, #4
 8000866:	e156      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a78      	ldr	r2, [pc, #480]	@ (8000a58 <__AVI_Init+0x24c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d001      	beq.n	8000880 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800087c:	2305      	movs	r3, #5
 800087e:	e14a      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	3308      	adds	r3, #8
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80008a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <__AVI_Init+0x244>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d001      	beq.n	80008ae <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e133      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <__AVI_Init+0x250>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 80008b8:	2306      	movs	r3, #6
 80008ba:	e12c      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	330c      	adds	r3, #12
 80008c0:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a66      	ldr	r2, [pc, #408]	@ (8000a60 <__AVI_Init+0x254>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d001      	beq.n	80008d0 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 80008cc:	2307      	movs	r3, #7
 80008ce:	e122      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	@ (8000a64 <__AVI_Init+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <__AVI_Init+0x25c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d001      	beq.n	80008e8 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 80008e4:	230a      	movs	r3, #10
 80008e6:	e116      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <__AVI_Init+0x260>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80008ee:	4a60      	ldr	r2, [pc, #384]	@ (8000a70 <__AVI_Init+0x264>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	3314      	adds	r3, #20
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a5b      	ldr	r2, [pc, #364]	@ (8000a74 <__AVI_Init+0x268>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d001      	beq.n	800090e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800090a:	2308      	movs	r3, #8
 800090c:	e103      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3308      	adds	r3, #8
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <__AVI_Init+0x244>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d009      	beq.n	800094c <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	839a      	strh	r2, [r3, #28]
 800094a:	e0b7      	b.n	8000abc <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <__AVI_Init+0x250>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d001      	beq.n	800095a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000956:	2306      	movs	r3, #6
 8000958:	e0dd      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <__AVI_Init+0x254>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d001      	beq.n	800096e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800096a:	2307      	movs	r3, #7
 800096c:	e0d3      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <__AVI_Init+0x26c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d001      	beq.n	800097c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000978:	230a      	movs	r3, #10
 800097a:	e0cc      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	3314      	adds	r3, #20
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <__AVI_Init+0x268>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d001      	beq.n	8000996 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 8000992:	2308      	movs	r3, #8
 8000994:	e0bf      	b.n	8000b16 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	895a      	ldrh	r2, [r3, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	891a      	ldrh	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	839a      	strh	r2, [r3, #28]
 80009ae:	e085      	b.n	8000abc <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <__AVI_Init+0x26c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 8080 	bne.w	8000abc <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <__AVI_Init+0x270>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <__AVI_Init+0x274>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3314      	adds	r3, #20
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <__AVI_Init+0x268>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d001      	beq.n	80009e2 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 80009de:	2308      	movs	r3, #8
 80009e0:	e099      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	895a      	ldrh	r2, [r3, #10]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	891a      	ldrh	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	3308      	adds	r3, #8
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <__AVI_Init+0x244>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d001      	beq.n	8000a18 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 8000a14:	2303      	movs	r3, #3
 8000a16:	e07e      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <__AVI_Init+0x250>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d001      	beq.n	8000a26 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 8000a22:	2306      	movs	r3, #6
 8000a24:	e077      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <__AVI_Init+0x254>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d001      	beq.n	8000a3a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 8000a36:	2307      	movs	r3, #7
 8000a38:	e06d      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <__AVI_Init+0x258>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 8000a44:	230a      	movs	r3, #10
 8000a46:	e066      	b.n	8000b16 <__AVI_Init+0x30a>
 8000a48:	46464952 	.word	0x46464952
 8000a4c:	20495641 	.word	0x20495641
 8000a50:	5453494c 	.word	0x5453494c
 8000a54:	6c726468 	.word	0x6c726468
 8000a58:	68697661 	.word	0x68697661
 8000a5c:	6c727473 	.word	0x6c727473
 8000a60:	68727473 	.word	0x68727473
 8000a64:	73646976 	.word	0x73646976
 8000a68:	47504a4d 	.word	0x47504a4d
 8000a6c:	0800f7f0 	.word	0x0800f7f0
 8000a70:	0800f808 	.word	0x0800f808
 8000a74:	66727473 	.word	0x66727473
 8000a78:	73647561 	.word	0x73647561
 8000a7c:	0800f7f8 	.word	0x0800f7f8
 8000a80:	0800f800 	.word	0x0800f800
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	3314      	adds	r3, #20
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <__AVI_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d001      	beq.n	8000a9e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	e03b      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <__AVI_Init+0x318>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d001      	beq.n	8000aac <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	e034      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <__AVI_Init+0x31c>)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ac2:	f7ff fe17 	bl	80006f4 <__AVI_SearchID>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	e020      	b.n	8000b16 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d01a      	beq.n	8000b12 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000adc:	8afb      	ldrh	r3, [r7, #22]
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aee:	f7ff fe01 	bl	80006f4 <__AVI_SearchID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000afc:	230b      	movs	r3, #11
 8000afe:	e00a      	b.n	8000b16 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3304      	adds	r3, #4
 8000b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b06:	4413      	add	r3, r2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	@ 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	66727473 	.word	0x66727473
 8000b24:	47504a4d 	.word	0x47504a4d
 8000b28:	0800f810 	.word	0x0800f810

08000b2c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 8000b56:	2100      	movs	r1, #0
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f00e f9c6 	bl	800eeea <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f00d ffd7 	bl	800eb1c <f_read>
  if(readSize != VideoBufferSize)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d001      	beq.n	8000b7a <AVI_ParserInit+0x4e>
  {
    return 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e013      	b.n	8000ba2 <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe42 	bl	800080c <__AVI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <AVI_ParserInit+0x66>
  {
    return 1;    
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e007      	b.n	8000ba2 <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file)  
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  
  if(pavi->CurrentImage== 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d124      	bne.n	8000c0c <AVI_GetFrame+0x60>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f00e f990 	bl	800eeea <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f00d ffa0 	bl	800eb1c <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <AVI_GetFrame+0xe4>)
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__AVI_SearchID>
 8000bec:	60f8      	str	r0, [r7, #12]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdbc 	bl	8000778 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	330c      	adds	r3, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f00e f96f 	bl	800eeea <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8bdb      	ldrh	r3, [r3, #30]
 8000c18:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d115      	bne.n	8000c4c <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f103 0208 	add.w	r2, r3, #8
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f00d ff73 	bl	800eb1c <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fd98 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e01c      	b.n	8000c86 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8bdb      	ldrh	r3, [r3, #30]
 8000c50:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d115      	bne.n	8000c84 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f103 0208 	add.w	r2, r3, #8
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f00d ff57 	bl	800eb1c <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	4413      	add	r3, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fd7c 	bl	8000778 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 8000c80:	2302      	movs	r3, #2
 8000c82:	e000      	b.n	8000c86 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800f810 	.word	0x0800f810

08000c94 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000caa:	f002 fb69 	bl	8003380 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 8000cae:	e004      	b.n	8000cba <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <GC9A01_set_reset+0x30>)
 8000cb6:	f002 fb63 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58022400 	.word	0x58022400

08000cc8 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cde:	f002 fb4f 	bl	8003380 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000ce2:	e004      	b.n	8000cee <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <GC9A01_set_data_command+0x30>)
 8000cea:	f002 fb49 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58022400 	.word	0x58022400

08000cfc <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d12:	f002 fb35 	bl	8003380 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000d16:	e004      	b.n	8000d22 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <GC9A01_set_chip_select+0x30>)
 8000d1e:	f002 fb2f 	bl	8003380 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58022800 	.word	0x58022800

08000d30 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffc4 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ffdb 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa92 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffd3 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffad 	bl	8000cc8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffc4 	bl	8000cfc <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa7a 	bl	8001274 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ffbb 	bl	8000cfc <GC9A01_set_chip_select>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffde 	bl	8000d5e <GC9A01_write_data>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000db4:	202c      	movs	r0, #44	@ 0x2c
 8000db6:	f7ff ffbb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffce 	bl	8000d5e <GC9A01_write_data>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000dd4:	203c      	movs	r0, #60	@ 0x3c
 8000dd6:	f7ff ffab 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffbe 	bl	8000d5e <GC9A01_write_data>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <GC9A01_init>:

void GC9A01_init(void) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff84 	bl	8000cfc <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f001 fbdf 	bl	80025b8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ff4a 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(10);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 fbd9 	bl	80025b8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff ff44 	bl	8000c94 <GC9A01_set_reset>
    HAL_Delay(120);
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f001 fbd3 	bl	80025b8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000e12:	20ef      	movs	r0, #239	@ 0xef
 8000e14:	f7ff ff8c 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e18:	20eb      	movs	r0, #235	@ 0xeb
 8000e1a:	f7ff ff89 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f7ff ffb5 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000e24:	20fe      	movs	r0, #254	@ 0xfe
 8000e26:	f7ff ff83 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000e2a:	20ef      	movs	r0, #239	@ 0xef
 8000e2c:	f7ff ff80 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000e30:	20eb      	movs	r0, #235	@ 0xeb
 8000e32:	f7ff ff7d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ffa9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000e3c:	2084      	movs	r0, #132	@ 0x84
 8000e3e:	f7ff ff77 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e42:	2040      	movs	r0, #64	@ 0x40
 8000e44:	f7ff ffa3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000e48:	2085      	movs	r0, #133	@ 0x85
 8000e4a:	f7ff ff71 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	f7ff ff9d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000e54:	2086      	movs	r0, #134	@ 0x86
 8000e56:	f7ff ff6b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	f7ff ff97 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000e60:	2087      	movs	r0, #135	@ 0x87
 8000e62:	f7ff ff65 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000e66:	20ff      	movs	r0, #255	@ 0xff
 8000e68:	f7ff ff91 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000e6c:	2088      	movs	r0, #136	@ 0x88
 8000e6e:	f7ff ff5f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff8b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000e78:	2089      	movs	r0, #137	@ 0x89
 8000e7a:	f7ff ff59 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000e7e:	2021      	movs	r0, #33	@ 0x21
 8000e80:	f7ff ff85 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000e84:	208a      	movs	r0, #138	@ 0x8a
 8000e86:	f7ff ff53 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff7f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000e90:	208b      	movs	r0, #139	@ 0x8b
 8000e92:	f7ff ff4d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e96:	2080      	movs	r0, #128	@ 0x80
 8000e98:	f7ff ff79 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000e9c:	208c      	movs	r0, #140	@ 0x8c
 8000e9e:	f7ff ff47 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ff73 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000ea8:	208d      	movs	r0, #141	@ 0x8d
 8000eaa:	f7ff ff41 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff6d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000eb4:	208e      	movs	r0, #142	@ 0x8e
 8000eb6:	f7ff ff3b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000eba:	20ff      	movs	r0, #255	@ 0xff
 8000ebc:	f7ff ff67 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000ec0:	208f      	movs	r0, #143	@ 0x8f
 8000ec2:	f7ff ff35 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	f7ff ff61 	bl	8000d8e <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ecc:	20b6      	movs	r0, #182	@ 0xb6
 8000ece:	f7ff ff2f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff5b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff ff58 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000ede:	2036      	movs	r0, #54	@ 0x36
 8000ee0:	f7ff ff26 	bl	8000d30 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000ee4:	2048      	movs	r0, #72	@ 0x48
 8000ee6:	f7ff ff52 	bl	8000d8e <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000eea:	203a      	movs	r0, #58	@ 0x3a
 8000eec:	f7ff ff20 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f7ff ff4c 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000ef6:	2090      	movs	r0, #144	@ 0x90
 8000ef8:	f7ff ff1a 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff ff46 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f02:	2008      	movs	r0, #8
 8000f04:	f7ff ff43 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f08:	2008      	movs	r0, #8
 8000f0a:	f7ff ff40 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f7ff ff3d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000f14:	20bd      	movs	r0, #189	@ 0xbd
 8000f16:	f7ff ff0b 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f7ff ff37 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000f20:	20bc      	movs	r0, #188	@ 0xbc
 8000f22:	f7ff ff05 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ff31 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000f2c:	20ff      	movs	r0, #255	@ 0xff
 8000f2e:	f7ff feff 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f32:	2060      	movs	r0, #96	@ 0x60
 8000f34:	f7ff ff2b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff28 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff25 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000f44:	20c3      	movs	r0, #195	@ 0xc3
 8000f46:	f7ff fef3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f7ff ff1f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000f50:	20c4      	movs	r0, #196	@ 0xc4
 8000f52:	f7ff feed 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f56:	2013      	movs	r0, #19
 8000f58:	f7ff ff19 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000f5c:	20c9      	movs	r0, #201	@ 0xc9
 8000f5e:	f7ff fee7 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f62:	2022      	movs	r0, #34	@ 0x22
 8000f64:	f7ff ff13 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000f68:	20be      	movs	r0, #190	@ 0xbe
 8000f6a:	f7ff fee1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f7ff ff0d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000f74:	20e1      	movs	r0, #225	@ 0xe1
 8000f76:	f7ff fedb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff07 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000f80:	200e      	movs	r0, #14
 8000f82:	f7ff ff04 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000f86:	20df      	movs	r0, #223	@ 0xdf
 8000f88:	f7ff fed2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000f8c:	2021      	movs	r0, #33	@ 0x21
 8000f8e:	f7ff fefe 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fefb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fef8 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000f9e:	20f0      	movs	r0, #240	@ 0xf0
 8000fa0:	f7ff fec6 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f7ff fef2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000faa:	2009      	movs	r0, #9
 8000fac:	f7ff feef 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff feec 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff fee9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000fbc:	2026      	movs	r0, #38	@ 0x26
 8000fbe:	f7ff fee6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000fc2:	202a      	movs	r0, #42	@ 0x2a
 8000fc4:	f7ff fee3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000fc8:	20f1      	movs	r0, #241	@ 0xf1
 8000fca:	f7ff feb1 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000fce:	2043      	movs	r0, #67	@ 0x43
 8000fd0:	f7ff fedd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000fd4:	2070      	movs	r0, #112	@ 0x70
 8000fd6:	f7ff feda 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000fda:	2072      	movs	r0, #114	@ 0x72
 8000fdc:	f7ff fed7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000fe0:	2036      	movs	r0, #54	@ 0x36
 8000fe2:	f7ff fed4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000fe6:	2037      	movs	r0, #55	@ 0x37
 8000fe8:	f7ff fed1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000fec:	206f      	movs	r0, #111	@ 0x6f
 8000fee:	f7ff fece 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000ff2:	20f2      	movs	r0, #242	@ 0xf2
 8000ff4:	f7ff fe9c 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000ff8:	2045      	movs	r0, #69	@ 0x45
 8000ffa:	f7ff fec8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000ffe:	2009      	movs	r0, #9
 8001000:	f7ff fec5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff fec2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800100a:	2008      	movs	r0, #8
 800100c:	f7ff febf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8001010:	2026      	movs	r0, #38	@ 0x26
 8001012:	f7ff febc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8001016:	202a      	movs	r0, #42	@ 0x2a
 8001018:	f7ff feb9 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800101c:	20f3      	movs	r0, #243	@ 0xf3
 800101e:	f7ff fe87 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001022:	2043      	movs	r0, #67	@ 0x43
 8001024:	f7ff feb3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001028:	2070      	movs	r0, #112	@ 0x70
 800102a:	f7ff feb0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800102e:	2072      	movs	r0, #114	@ 0x72
 8001030:	f7ff fead 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8001034:	2036      	movs	r0, #54	@ 0x36
 8001036:	f7ff feaa 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fea7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8001040:	206f      	movs	r0, #111	@ 0x6f
 8001042:	f7ff fea4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8001046:	20ed      	movs	r0, #237	@ 0xed
 8001048:	f7ff fe72 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800104c:	201b      	movs	r0, #27
 800104e:	f7ff fe9e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fe9b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8001058:	20ae      	movs	r0, #174	@ 0xae
 800105a:	f7ff fe69 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800105e:	2077      	movs	r0, #119	@ 0x77
 8001060:	f7ff fe95 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8001064:	20cd      	movs	r0, #205	@ 0xcd
 8001066:	f7ff fe63 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800106a:	2063      	movs	r0, #99	@ 0x63
 800106c:	f7ff fe8f 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8001070:	2070      	movs	r0, #112	@ 0x70
 8001072:	f7ff fe5d 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fe89 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800107c:	2007      	movs	r0, #7
 800107e:	f7ff fe86 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff fe83 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8001088:	200e      	movs	r0, #14
 800108a:	f7ff fe80 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800108e:	200f      	movs	r0, #15
 8001090:	f7ff fe7d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fe7a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800109a:	2007      	movs	r0, #7
 800109c:	f7ff fe77 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe74 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fe71 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80010ac:	20e8      	movs	r0, #232	@ 0xe8
 80010ae:	f7ff fe3f 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80010b2:	2034      	movs	r0, #52	@ 0x34
 80010b4:	f7ff fe6b 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80010b8:	2062      	movs	r0, #98	@ 0x62
 80010ba:	f7ff fe39 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80010be:	2018      	movs	r0, #24
 80010c0:	f7ff fe65 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80010c4:	200d      	movs	r0, #13
 80010c6:	f7ff fe62 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ca:	2071      	movs	r0, #113	@ 0x71
 80010cc:	f7ff fe5f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 80010d0:	20ed      	movs	r0, #237	@ 0xed
 80010d2:	f7ff fe5c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010d6:	2070      	movs	r0, #112	@ 0x70
 80010d8:	f7ff fe59 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010dc:	2070      	movs	r0, #112	@ 0x70
 80010de:	f7ff fe56 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f7ff fe53 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f7ff fe50 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80010ee:	2071      	movs	r0, #113	@ 0x71
 80010f0:	f7ff fe4d 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 80010f4:	20ef      	movs	r0, #239	@ 0xef
 80010f6:	f7ff fe4a 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80010fa:	2070      	movs	r0, #112	@ 0x70
 80010fc:	f7ff fe47 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001100:	2070      	movs	r0, #112	@ 0x70
 8001102:	f7ff fe44 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8001106:	2063      	movs	r0, #99	@ 0x63
 8001108:	f7ff fe12 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800110c:	2018      	movs	r0, #24
 800110e:	f7ff fe3e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8001112:	2011      	movs	r0, #17
 8001114:	f7ff fe3b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8001118:	2071      	movs	r0, #113	@ 0x71
 800111a:	f7ff fe38 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800111e:	20f1      	movs	r0, #241	@ 0xf1
 8001120:	f7ff fe35 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001124:	2070      	movs	r0, #112	@ 0x70
 8001126:	f7ff fe32 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800112a:	2070      	movs	r0, #112	@ 0x70
 800112c:	f7ff fe2f 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8001130:	2018      	movs	r0, #24
 8001132:	f7ff fe2c 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8001136:	2013      	movs	r0, #19
 8001138:	f7ff fe29 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800113c:	2071      	movs	r0, #113	@ 0x71
 800113e:	f7ff fe26 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8001142:	20f3      	movs	r0, #243	@ 0xf3
 8001144:	f7ff fe23 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8001148:	2070      	movs	r0, #112	@ 0x70
 800114a:	f7ff fe20 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800114e:	2070      	movs	r0, #112	@ 0x70
 8001150:	f7ff fe1d 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f7ff fdeb 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800115a:	2028      	movs	r0, #40	@ 0x28
 800115c:	f7ff fe17 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8001160:	2029      	movs	r0, #41	@ 0x29
 8001162:	f7ff fe14 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001166:	20f1      	movs	r0, #241	@ 0xf1
 8001168:	f7ff fe11 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fe0e 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8001172:	20f1      	movs	r0, #241	@ 0xf1
 8001174:	f7ff fe0b 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe08 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800117e:	2007      	movs	r0, #7
 8001180:	f7ff fe05 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8001184:	2066      	movs	r0, #102	@ 0x66
 8001186:	f7ff fdd3 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800118a:	203c      	movs	r0, #60	@ 0x3c
 800118c:	f7ff fdff 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fdfc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8001196:	20cd      	movs	r0, #205	@ 0xcd
 8001198:	f7ff fdf9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800119c:	2067      	movs	r0, #103	@ 0x67
 800119e:	f7ff fdf6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a2:	2045      	movs	r0, #69	@ 0x45
 80011a4:	f7ff fdf3 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80011a8:	2045      	movs	r0, #69	@ 0x45
 80011aa:	f7ff fdf0 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fded 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fdea 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fde7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fde4 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80011c6:	2067      	movs	r0, #103	@ 0x67
 80011c8:	f7ff fdb2 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdde 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 80011d2:	203c      	movs	r0, #60	@ 0x3c
 80011d4:	f7ff fddb 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fdd8 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fdd5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fdd2 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fdcf 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 80011f0:	2054      	movs	r0, #84	@ 0x54
 80011f2:	f7ff fdcc 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff fdc9 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f7ff fdc6 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8001202:	2098      	movs	r0, #152	@ 0x98
 8001204:	f7ff fdc3 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8001208:	2074      	movs	r0, #116	@ 0x74
 800120a:	f7ff fd91 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff fdbd 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8001214:	2085      	movs	r0, #133	@ 0x85
 8001216:	f7ff fdba 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	f7ff fdb7 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdb4 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fdb1 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800122c:	204e      	movs	r0, #78	@ 0x4e
 800122e:	f7ff fdae 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fdab 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8001238:	2098      	movs	r0, #152	@ 0x98
 800123a:	f7ff fd79 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800123e:	203e      	movs	r0, #62	@ 0x3e
 8001240:	f7ff fda5 	bl	8000d8e <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fda2 	bl	8000d8e <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800124a:	2035      	movs	r0, #53	@ 0x35
 800124c:	f7ff fd70 	bl	8000d30 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001250:	2021      	movs	r0, #33	@ 0x21
 8001252:	f7ff fd6d 	bl	8000d30 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fd6a 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(120);
 800125c:	2078      	movs	r0, #120	@ 0x78
 800125e:	f001 f9ab 	bl	80025b8 <HAL_Delay>
    GC9A01_write_command(0x29);
 8001262:	2029      	movs	r0, #41	@ 0x29
 8001264:	f7ff fd64 	bl	8000d30 <GC9A01_write_command>
    HAL_Delay(20);
 8001268:	2014      	movs	r0, #20
 800126a:	f001 f9a5 	bl	80025b8 <HAL_Delay>
    
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <GC9A01_spi_tx+0x30>)
 800128a:	f009 f935 	bl	800a4f8 <HAL_SPI_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001294:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <GC9A01_spi_tx+0x34>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
		return;

}
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	240006b0 	.word	0x240006b0
 80012a8:	24000030 	.word	0x24000030

080012ac <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <JPEG_Decode_DMA+0x5c>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <JPEG_Decode_DMA+0x60>)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <JPEG_Decode_DMA+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 80012cc:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <JPEG_Decode_DMA+0x68>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <JPEG_Decode_DMA+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  //HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
  HAL_JPEG_Decode(hjpeg, (uint8_t *)JPEGSourceAddress, CHUNK_SIZE_IN, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT, HAL_MAX_DELAY);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <JPEG_Decode_DMA+0x5c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <JPEG_Decode_DMA+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f002 f9a1 	bl	800363e <HAL_JPEG_Decode>
  
  return 0;
 80012fc:	2300      	movs	r3, #0
  
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2400003c 	.word	0x2400003c
 800130c:	24000038 	.word	0x24000038
 8001310:	24000044 	.word	0x24000044
 8001314:	24000040 	.word	0x24000040
 8001318:	24000034 	.word	0x24000034

0800131c <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001348:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d218      	bcs.n	8001388 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 8001360:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001370:	d303      	bcc.n	800137a <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e008      	b.n	800138c <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_JPEG_GetDataCallback+0x74>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_JPEG_GetDataCallback+0x70>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e001      	b.n	800138c <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_JPEG_GetDataCallback+0x78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f002 fa32 	bl	80037fe <HAL_JPEG_ConfigInputBuffer>
  
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000044 	.word	0x24000044
 80013a8:	24000040 	.word	0x24000040
 80013ac:	2400003c 	.word	0x2400003c

080013b0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013c6:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f002 fa25 	bl	8003822 <HAL_JPEG_ConfigOutputBuffer>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24000038 	.word	0x24000038

080013e4 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	24000034 	.word	0x24000034

08001404 <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8001408:	f000 f9a4 	bl	8001754 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 800140c:	f00e f81e 	bl	800f44c <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8001410:	f7ff fceb 	bl	8000dea <GC9A01_init>

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <lcd_process>:


void lcd_process(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	//jpeg_demo();

	mjpeg_demo();
 800141c:	f000 f842 	bl	80014a4 <mjpeg_demo>

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e022      	b.n	800148e <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e016      	b.n	800147c <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d108      	bne.n	8001468 <lcd_draw+0x44>
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d104      	bne.n	8001468 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	6a38      	ldr	r0, [r7, #32]
 8001462:	f7ff fca2 	bl	8000daa <GC9A01_write>
 8001466:	e003      	b.n	8001470 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001468:	2102      	movs	r1, #2
 800146a:	6a38      	ldr	r0, [r7, #32]
 800146c:	f7ff fcad 	bl	8000dca <GC9A01_write_continue>

			}

			data += 2;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	3302      	adds	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	883a      	ldrh	r2, [r7, #0]
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbe2      	blt.n	800144e <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbd6      	blt.n	8001448 <lcd_draw+0x24>

		}

	}

}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <mjpeg_demo>:
uint32_t startTime = 0;

#ifdef MJPEG_ON

void mjpeg_demo(void)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	f5ad 2de0 	sub.w	sp, sp, #458752	@ 0x70000
 80014aa:	f2ad 6d24 	subw	sp, sp, #1572	@ 0x624
 80014ae:	af02      	add	r7, sp, #8

	uint8_t JPEG_OutputBuffer_0[MAX_BUFFER_SIZE]; 					// RAW buffer 0
	//uint8_t JPEG_OutputBuffer_1[MAX_BUFFER_SIZE]; 					// RAW buffer 1
	uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer

	uint32_t jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80014b0:	4b91      	ldr	r3, [pc, #580]	@ (80016f8 <mjpeg_demo+0x254>)
 80014b2:	f503 23e0 	add.w	r3, r3, #458752	@ 0x70000
 80014b6:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80014ba:	443b      	add	r3, r7
 80014bc:	4a8f      	ldr	r2, [pc, #572]	@ (80016fc <mjpeg_demo+0x258>)
 80014be:	443a      	add	r2, r7
 80014c0:	6013      	str	r3, [r2, #0]
	uint32_t FrameType = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001700 <mjpeg_demo+0x25c>)
 80014c6:	443a      	add	r2, r7
 80014c8:	6013      	str	r3, [r2, #0]

	// Open the MJPEG avi file with read access
    if(f_open(&file, FILE_NAME, FA_READ) == FR_OK)
 80014ca:	2201      	movs	r2, #1
 80014cc:	498d      	ldr	r1, [pc, #564]	@ (8001704 <mjpeg_demo+0x260>)
 80014ce:	488e      	ldr	r0, [pc, #568]	@ (8001708 <mjpeg_demo+0x264>)
 80014d0:	f00d f96a 	bl	800e7a8 <f_open>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 8107 	bne.w	80016ea <mjpeg_demo+0x246>
    {

    	isfirstFrame = 1; // First frame flag
 80014dc:	4b8b      	ldr	r3, [pc, #556]	@ (800170c <mjpeg_demo+0x268>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
    	FrameRate = 0;
 80014e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001710 <mjpeg_demo+0x26c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]

    	// Parse the AVI file Header
    	if(AVI_ParserInit(&AVI_Handel, &file, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 80014e8:	4a8a      	ldr	r2, [pc, #552]	@ (8001714 <mjpeg_demo+0x270>)
 80014ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001718 <mjpeg_demo+0x274>)
 80014ec:	4413      	add	r3, r2
 80014ee:	19da      	adds	r2, r3, r7
 80014f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	4b89      	ldr	r3, [pc, #548]	@ (800171c <mjpeg_demo+0x278>)
 80014f8:	f503 23e0 	add.w	r3, r3, #458752	@ 0x70000
 80014fc:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001500:	443b      	add	r3, r7
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8001508:	497f      	ldr	r1, [pc, #508]	@ (8001708 <mjpeg_demo+0x264>)
 800150a:	4885      	ldr	r0, [pc, #532]	@ (8001720 <mjpeg_demo+0x27c>)
 800150c:	f7ff fb0e 	bl	8000b2c <AVI_ParserInit>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <mjpeg_demo+0x76>
    		while(1);
 8001516:	bf00      	nop
 8001518:	e7fd      	b.n	8001516 <mjpeg_demo+0x72>

    	startTime = HAL_GetTick();
 800151a:	f001 f841 	bl	80025a0 <HAL_GetTick>
 800151e:	4603      	mov	r3, r0
 8001520:	4a80      	ldr	r2, [pc, #512]	@ (8001724 <mjpeg_demo+0x280>)
 8001522:	6013      	str	r3, [r2, #0]

    	do
    	{

    		FrameType = AVI_GetFrame(&AVI_Handel, &file);
 8001524:	4978      	ldr	r1, [pc, #480]	@ (8001708 <mjpeg_demo+0x264>)
 8001526:	487e      	ldr	r0, [pc, #504]	@ (8001720 <mjpeg_demo+0x27c>)
 8001528:	f7ff fb40 	bl	8000bac <AVI_GetFrame>
 800152c:	4b74      	ldr	r3, [pc, #464]	@ (8001700 <mjpeg_demo+0x25c>)
 800152e:	443b      	add	r3, r7
 8001530:	6018      	str	r0, [r3, #0]

    		if(FrameType == AVI_VIDEO_FRAME)
 8001532:	4b73      	ldr	r3, [pc, #460]	@ (8001700 <mjpeg_demo+0x25c>)
 8001534:	443b      	add	r3, r7
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 809b 	bne.w	8001674 <mjpeg_demo+0x1d0>
    		{

    			AVI_Handel.CurrentImage ++;
 800153e:	4b78      	ldr	r3, [pc, #480]	@ (8001720 <mjpeg_demo+0x27c>)
 8001540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001542:	3301      	adds	r3, #1
 8001544:	4a76      	ldr	r2, [pc, #472]	@ (8001720 <mjpeg_demo+0x27c>)
 8001546:	62d3      	str	r3, [r2, #44]	@ 0x2c

    			// Start decoding the current JPEG frame with DMA (Not Blocking ) Method
    			JPEG_Decode_DMA(&hjpeg,(uint32_t) MJPEG_VideoBuffer ,AVI_Handel.FrameSize, jpegOutDataAdreess );
 8001548:	4972      	ldr	r1, [pc, #456]	@ (8001714 <mjpeg_demo+0x270>)
 800154a:	4b73      	ldr	r3, [pc, #460]	@ (8001718 <mjpeg_demo+0x274>)
 800154c:	440b      	add	r3, r1
 800154e:	19d9      	adds	r1, r3, r7
 8001550:	4b73      	ldr	r3, [pc, #460]	@ (8001720 <mjpeg_demo+0x27c>)
 8001552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001554:	4b69      	ldr	r3, [pc, #420]	@ (80016fc <mjpeg_demo+0x258>)
 8001556:	443b      	add	r3, r7
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4873      	ldr	r0, [pc, #460]	@ (8001728 <mjpeg_demo+0x284>)
 800155c:	f7ff fea6 	bl	80012ac <JPEG_Decode_DMA>

    			// Wait till end of JPEG decoding
    			while(Jpeg_HWDecodingEnd == 0);
 8001560:	bf00      	nop
 8001562:	4b72      	ldr	r3, [pc, #456]	@ (800172c <mjpeg_demo+0x288>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0fb      	beq.n	8001562 <mjpeg_demo+0xbe>

    			if(isfirstFrame == 1)
 800156a:	4b68      	ldr	r3, [pc, #416]	@ (800170c <mjpeg_demo+0x268>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d111      	bne.n	8001596 <mjpeg_demo+0xf2>
    			{

    				// First time

    				isfirstFrame = 0;
 8001572:	4b66      	ldr	r3, [pc, #408]	@ (800170c <mjpeg_demo+0x268>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

    				// Get JPEG Info
    				HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8001578:	496d      	ldr	r1, [pc, #436]	@ (8001730 <mjpeg_demo+0x28c>)
 800157a:	486b      	ldr	r0, [pc, #428]	@ (8001728 <mjpeg_demo+0x284>)
 800157c:	f001 ffca 	bl	8003514 <HAL_JPEG_GetInfo>

    				// Initialize the DMA2D
    				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001580:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <mjpeg_demo+0x28c>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4a6a      	ldr	r2, [pc, #424]	@ (8001730 <mjpeg_demo+0x28c>)
 8001588:	6892      	ldr	r2, [r2, #8]
 800158a:	b291      	uxth	r1, r2
 800158c:	4a68      	ldr	r2, [pc, #416]	@ (8001730 <mjpeg_demo+0x28c>)
 800158e:	6852      	ldr	r2, [r2, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f963 	bl	800185c <DMA2D_Init>

    			}


    			// Copy the Decoded frame to the display frame buffer using the DMA2D
    			DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)DECODED_OutputBuffer, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001596:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <mjpeg_demo+0x258>)
 8001598:	443b      	add	r3, r7
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	4b64      	ldr	r3, [pc, #400]	@ (8001730 <mjpeg_demo+0x28c>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <mjpeg_demo+0x28c>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4962      	ldr	r1, [pc, #392]	@ (8001734 <mjpeg_demo+0x290>)
 80015aa:	f501 21e0 	add.w	r1, r1, #458752	@ 0x70000
 80015ae:	f501 61c3 	add.w	r1, r1, #1560	@ 0x618
 80015b2:	4439      	add	r1, r7
 80015b4:	f000 f9ce 	bl	8001954 <DMA2D_CopyBuffer>

    			// Change frame buffer
    			//jpegOutDataAdreess = (jpegOutDataAdreess == (uint32_t)JPEG_OutputBuffer_0) ? (uint32_t)JPEG_OutputBuffer_1 : (uint32_t)JPEG_OutputBuffer_0;
    			jpegOutDataAdreess = (uint32_t)JPEG_OutputBuffer_0;
 80015b8:	4b4f      	ldr	r3, [pc, #316]	@ (80016f8 <mjpeg_demo+0x254>)
 80015ba:	f503 23e0 	add.w	r3, r3, #458752	@ 0x70000
 80015be:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80015c2:	443b      	add	r3, r7
 80015c4:	4a4d      	ldr	r2, [pc, #308]	@ (80016fc <mjpeg_demo+0x258>)
 80015c6:	443a      	add	r2, r7
 80015c8:	6013      	str	r3, [r2, #0]

//
    		    uint16_t width = JPEG_Info.ImageWidth;
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <mjpeg_demo+0x28c>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001738 <mjpeg_demo+0x294>)
 80015d0:	443a      	add	r2, r7
 80015d2:	8013      	strh	r3, [r2, #0]
    			uint16_t height = JPEG_Info.ImageHeight;
 80015d4:	4b56      	ldr	r3, [pc, #344]	@ (8001730 <mjpeg_demo+0x28c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a58      	ldr	r2, [pc, #352]	@ (800173c <mjpeg_demo+0x298>)
 80015da:	443a      	add	r2, r7
 80015dc:	8013      	strh	r3, [r2, #0]

    		    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 80015de:	4b56      	ldr	r3, [pc, #344]	@ (8001738 <mjpeg_demo+0x294>)
 80015e0:	443b      	add	r3, r7
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da00      	bge.n	80015ee <mjpeg_demo+0x14a>
 80015ec:	3301      	adds	r3, #1
 80015ee:	105b      	asrs	r3, r3, #1
 80015f0:	4a53      	ldr	r2, [pc, #332]	@ (8001740 <mjpeg_demo+0x29c>)
 80015f2:	443a      	add	r2, r7
 80015f4:	8013      	strh	r3, [r2, #0]
    		    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 80015f6:	4b51      	ldr	r3, [pc, #324]	@ (800173c <mjpeg_demo+0x298>)
 80015f8:	443b      	add	r3, r7
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001600:	2b00      	cmp	r3, #0
 8001602:	da00      	bge.n	8001606 <mjpeg_demo+0x162>
 8001604:	3301      	adds	r3, #1
 8001606:	105b      	asrs	r3, r3, #1
 8001608:	4a4e      	ldr	r2, [pc, #312]	@ (8001744 <mjpeg_demo+0x2a0>)
 800160a:	443a      	add	r2, r7
 800160c:	8013      	strh	r3, [r2, #0]

    		    doubleFormat pOut;
    		    pOut.u8Arr = DECODED_OutputBuffer;
 800160e:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 8001612:	f2a3 6214 	subw	r2, r3, #1556	@ 0x614
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <mjpeg_demo+0x290>)
 8001618:	f503 23e0 	add.w	r3, r3, #458752	@ 0x70000
 800161c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001620:	443b      	add	r3, r7
 8001622:	6013      	str	r3, [r2, #0]

    		    depth24To16(&pOut, width*height, 3);
 8001624:	4b44      	ldr	r3, [pc, #272]	@ (8001738 <mjpeg_demo+0x294>)
 8001626:	443b      	add	r3, r7
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	4b44      	ldr	r3, [pc, #272]	@ (800173c <mjpeg_demo+0x298>)
 800162c:	443b      	add	r3, r7
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	fb12 f303 	smulbb	r3, r2, r3
 8001634:	b299      	uxth	r1, r3
 8001636:	4b44      	ldr	r3, [pc, #272]	@ (8001748 <mjpeg_demo+0x2a4>)
 8001638:	f503 23e0 	add.w	r3, r3, #458752	@ 0x70000
 800163c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001640:	443b      	add	r3, r7
 8001642:	2203      	movs	r2, #3
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f89b 	bl	8001780 <depth24To16>

    		    // Display the image
    		    lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 800164a:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 800164e:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a39      	ldr	r2, [pc, #228]	@ (800173c <mjpeg_demo+0x298>)
 8001656:	443a      	add	r2, r7
 8001658:	8814      	ldrh	r4, [r2, #0]
 800165a:	4a37      	ldr	r2, [pc, #220]	@ (8001738 <mjpeg_demo+0x294>)
 800165c:	443a      	add	r2, r7
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	4938      	ldr	r1, [pc, #224]	@ (8001744 <mjpeg_demo+0x2a0>)
 8001662:	4439      	add	r1, r7
 8001664:	8809      	ldrh	r1, [r1, #0]
 8001666:	4836      	ldr	r0, [pc, #216]	@ (8001740 <mjpeg_demo+0x29c>)
 8001668:	4438      	add	r0, r7
 800166a:	8800      	ldrh	r0, [r0, #0]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4623      	mov	r3, r4
 8001670:	f7ff fed8 	bl	8001424 <lcd_draw>
    		}

#ifdef USE_FRAMERATE_REGULATION

              // Regulate the frame rate to the video native frame rate by inserting delays
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 8001674:	f000 ff94 	bl	80025a0 <HAL_GetTick>
 8001678:	4603      	mov	r3, r0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <mjpeg_demo+0x280>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <mjpeg_demo+0x26c>)
 800168c:	701a      	strb	r2, [r3, #0]

              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <mjpeg_demo+0x26c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <mjpeg_demo+0x27c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2c      	ldr	r2, [pc, #176]	@ (800174c <mjpeg_demo+0x2a8>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001720 <mjpeg_demo+0x27c>)
 80016a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	4299      	cmp	r1, r3
 80016aa:	d20f      	bcs.n	80016cc <mjpeg_demo+0x228>
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 80016ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <mjpeg_demo+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a26      	ldr	r2, [pc, #152]	@ (800174c <mjpeg_demo+0x2a8>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <mjpeg_demo+0x27c>)
 80016ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <mjpeg_demo+0x26c>)
 80016c2:	7812      	ldrb	r2, [r2, #0]
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 ff76 	bl	80025b8 <HAL_Delay>

#endif /* USE_FRAMERATE_REGULATION */

    	}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <mjpeg_demo+0x27c>)
 80016ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <mjpeg_demo+0x27c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f4ff af25 	bcc.w	8001524 <mjpeg_demo+0x80>

    	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 80016da:	2132      	movs	r1, #50	@ 0x32
 80016dc:	481c      	ldr	r0, [pc, #112]	@ (8001750 <mjpeg_demo+0x2ac>)
 80016de:	f001 f93a 	bl	8002956 <HAL_DMA2D_PollForTransfer>


      f_close(&file);
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <mjpeg_demo+0x264>)
 80016e4:	f00d fbd7 	bl	800ee96 <f_close>

      while(1);

    }

}
 80016e8:	e000      	b.n	80016ec <mjpeg_demo+0x248>
      while(1);
 80016ea:	e7fe      	b.n	80016ea <mjpeg_demo+0x246>
}
 80016ec:	f507 27e0 	add.w	r7, r7, #458752	@ 0x70000
 80016f0:	f207 671c 	addw	r7, r7, #1564	@ 0x61c
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	fffb9cf0 	.word	0xfffb9cf0
 80016fc:	00070614 	.word	0x00070614
 8001700:	00070610 	.word	0x00070610
 8001704:	0800f818 	.word	0x0800f818
 8001708:	24000278 	.word	0x24000278
 800170c:	24000008 	.word	0x24000008
 8001710:	2400056c 	.word	0x2400056c
 8001714:	fffe7ff0 	.word	0xfffe7ff0
 8001718:	00070618 	.word	0x00070618
 800171c:	fffe3ff0 	.word	0xfffe3ff0
 8001720:	24000524 	.word	0x24000524
 8001724:	24000570 	.word	0x24000570
 8001728:	240005dc 	.word	0x240005dc
 800172c:	24000034 	.word	0x24000034
 8001730:	24000510 	.word	0x24000510
 8001734:	fff8f9f0 	.word	0xfff8f9f0
 8001738:	0007060e 	.word	0x0007060e
 800173c:	0007060c 	.word	0x0007060c
 8001740:	0007060a 	.word	0x0007060a
 8001744:	00070608 	.word	0x00070608
 8001748:	fff8f9ec 	.word	0xfff8f9ec
 800174c:	10624dd3 	.word	0x10624dd3
 8001750:	240004a8 	.word	0x240004a8

08001754 <sd_init>:


// SD

static void sd_init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8001758:	2201      	movs	r2, #1
 800175a:	4905      	ldr	r1, [pc, #20]	@ (8001770 <sd_init+0x1c>)
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <sd_init+0x20>)
 800175e:	f00c ffdd 	bl	800e71c <f_mount>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <sd_init+0x18>
    	sd_error_handler();
 8001768:	f000 f806 	bl	8001778 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800f824 	.word	0x0800f824
 8001774:	24000048 	.word	0x24000048

08001778 <sd_error_handler>:


static void sd_error_handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

	while(1);
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <sd_error_handler+0x4>

08001780 <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e054      	b.n	8001840 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	787a      	ldrb	r2, [r7, #1]
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	fb01 f202 	mul.w	r2, r1, r2
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	787b      	ldrb	r3, [r7, #1]
 80017ae:	68f9      	ldr	r1, [r7, #12]
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	68f9      	ldr	r1, [r7, #12]
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	3302      	adds	r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 80017d0:	7a7b      	ldrb	r3, [r7, #9]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <depth24To16+0xd8>)
 80017d8:	4013      	ands	r3, r2
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7abb      	ldrb	r3, [r7, #10]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b219      	sxth	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	b28a      	uxth	r2, r1
 8001804:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21a      	sxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	440b      	add	r3, r1
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	b29b      	uxth	r3, r3
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b219      	sxth	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	b28a      	uxth	r2, r1
 8001838:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	dba6      	blt.n	8001796 <depth24To16+0x16>

	}

}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	fffff800 	.word	0xfffff800

0800185c <DMA2D_Init>:
  * @param  xSize: image width
  * @param  ysize: image Height
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	603a      	str	r2, [r7, #0]
 8001866:	80fb      	strh	r3, [r7, #6]
 8001868:	460b      	mov	r3, r1
 800186a:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 800186c:	2302      	movs	r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]


  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10d      	bne.n	8001896 <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 800187a:	2302      	movs	r3, #2
 800187c:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d025      	beq.n	80018d8 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f1c3 0310 	rsb	r3, r3, #16
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	e020      	b.n	80018d8 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d014      	beq.n	80018d8 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f1c3 0308 	rsb	r3, r3, #8
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	e00f      	b.n	80018d8 <DMA2D_Init+0x7c>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d10c      	bne.n	80018d8 <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 80018be:	2301      	movs	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f1c3 0310 	rsb	r3, r3, #16
 80018d6:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <DMA2D_Init+0xf0>)
 80018da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018de:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <DMA2D_Init+0xf0>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b17      	ldr	r3, [pc, #92]	@ (800194c <DMA2D_Init+0xf0>)
 80018f0:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <DMA2D_Init+0xf0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <DMA2D_Init+0xf0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <DMA2D_Init+0xf0>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <DMA2D_Init+0xf0>)
 8001906:	2200      	movs	r2, #0
 8001908:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <DMA2D_Init+0xf0>)
 800190c:	22ff      	movs	r2, #255	@ 0xff
 800190e:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <DMA2D_Init+0xf0>)
 8001912:	220b      	movs	r2, #11
 8001914:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001916:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <DMA2D_Init+0xf0>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800191c:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <DMA2D_Init+0xf0>)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <DMA2D_Init+0xf0>)
 8001924:	2200      	movs	r2, #0
 8001926:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <DMA2D_Init+0xf0>)
 800192a:	2200      	movs	r2, #0
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 800192e:	4b07      	ldr	r3, [pc, #28]	@ (800194c <DMA2D_Init+0xf0>)
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <DMA2D_Init+0xf4>)
 8001932:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <DMA2D_Init+0xf0>)
 8001936:	f000 ff7f 	bl	8002838 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800193a:	2101      	movs	r1, #1
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <DMA2D_Init+0xf0>)
 800193e:	f001 fa03 	bl	8002d48 <HAL_DMA2D_ConfigLayer>

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240004a8 	.word	0x240004a8
 8001950:	52001000 	.word	0x52001000

08001954 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t xsize, uint16_t ysize)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	460b      	mov	r3, r1
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4613      	mov	r3, r2
 8001968:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]


  uint16_t x =  ( (LCD_WIDTH - xsize) / 2 );
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001974:	2b00      	cmp	r3, #0
 8001976:	da00      	bge.n	800197a <DMA2D_CopyBuffer+0x26>
 8001978:	3301      	adds	r3, #1
 800197a:	105b      	asrs	r3, r3, #1
 800197c:	827b      	strh	r3, [r7, #18]
  uint16_t y = ( (LCD_HEIGHT - ysize) / 2 );
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001984:	2b00      	cmp	r3, #0
 8001986:	da00      	bge.n	800198a <DMA2D_CopyBuffer+0x36>
 8001988:	3301      	adds	r3, #1
 800198a:	105b      	asrs	r3, r3, #1
 800198c:	823b      	strh	r3, [r7, #16]

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 800198e:	8a3a      	ldrh	r2, [r7, #16]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	461a      	mov	r2, r3
 800199a:	8a7b      	ldrh	r3, [r7, #18]
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4805      	ldr	r0, [pc, #20]	@ (80019cc <DMA2D_CopyBuffer+0x78>)
 80019b6:	f000 ffa3 	bl	8002900 <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80019ba:	2119      	movs	r1, #25
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <DMA2D_CopyBuffer+0x78>)
 80019be:	f000 ffca 	bl	8002956 <HAL_DMA2D_PollForTransfer>

}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	240004a8 	.word	0x240004a8

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80019d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019da:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80019dc:	bf00      	nop
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <main+0xb8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <main+0x24>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	1e5a      	subs	r2, r3, #1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	dcf4      	bgt.n	80019de <main+0xe>
  if ( timeout < 0 )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da01      	bge.n	80019fe <main+0x2e>
  {
  Error_Handler();
 80019fa:	f000 fad3 	bl	8001fa4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fe:	f000 fd49 	bl	8002494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a02:	f000 f843 	bl	8001a8c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a06:	f000 f8c5 	bl	8001b94 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <main+0xb8>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a10:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <main+0xb8>)
 8001a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <main+0xb8>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f001 fcc3 	bl	80033b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2000      	movs	r0, #0
 8001a32:	f001 fcd9 	bl	80033e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001a3c:	bf00      	nop
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <main+0xb8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d104      	bne.n	8001a54 <main+0x84>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	1e5a      	subs	r2, r3, #1
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dcf4      	bgt.n	8001a3e <main+0x6e>
if ( timeout < 0 )
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da01      	bge.n	8001a5e <main+0x8e>
{
Error_Handler();
 8001a5a:	f000 faa3 	bl	8001fa4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f000 f9db 	bl	8001e18 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001a62:	f000 f8c7 	bl	8001bf4 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8001a66:	f000 f913 	bl	8001c90 <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 8001a6a:	f000 f935 	bl	8001cd8 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001a6e:	f000 f987 	bl	8001d80 <MX_USART1_UART_Init>
  MX_JPEG_Init();
 8001a72:	f000 f8f9 	bl	8001c68 <MX_JPEG_Init>
  MX_FATFS_Init();
 8001a76:	f00a febd 	bl	800c7f4 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001a7a:	f00b f90b 	bl	800cc94 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001a7e:	f7ff fcc1 	bl	8001404 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8001a82:	f7ff fcc9 	bl	8001418 <lcd_process>
 8001a86:	e7fc      	b.n	8001a82 <main+0xb2>
 8001a88:	58024400 	.word	0x58024400

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b09c      	sub	sp, #112	@ 0x70
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a96:	224c      	movs	r2, #76	@ 0x4c
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00d fe70 	bl	800f780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00d fe6a 	bl	800f780 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001aac:	2004      	movs	r0, #4
 8001aae:	f003 f9b3 	bl	8004e18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <SystemClock_Config+0x100>)
 8001ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aba:	4a34      	ldr	r2, [pc, #208]	@ (8001b8c <SystemClock_Config+0x100>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001ac2:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <SystemClock_Config+0x100>)
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <SystemClock_Config+0x104>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8001b90 <SystemClock_Config+0x104>)
 8001ad2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <SystemClock_Config+0x104>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ae4:	bf00      	nop
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <SystemClock_Config+0x104>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af2:	d1f8      	bne.n	8001ae6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001af4:	230a      	movs	r3, #10
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001afc:	2340      	movs	r3, #64	@ 0x40
 8001afe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b00:	2301      	movs	r3, #1
 8001b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b04:	2302      	movs	r3, #2
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b10:	230c      	movs	r3, #12
 8001b12:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b20:	230c      	movs	r3, #12
 8001b22:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f9ca 	bl	8004ecc <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b3e:	f000 fa31 	bl	8001fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	233f      	movs	r3, #63	@ 0x3f
 8001b44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b46:	2303      	movs	r3, #3
 8001b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b52:	2340      	movs	r3, #64	@ 0x40
 8001b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b56:	2340      	movs	r3, #64	@ 0x40
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b60:	2340      	movs	r3, #64	@ 0x40
 8001b62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fe09 	bl	8005780 <HAL_RCC_ClockConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001b74:	f000 fa16 	bl	8001fa4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f003 ffb4 	bl	8005aec <HAL_RCC_MCOConfig>
}
 8001b84:	bf00      	nop
 8001b86:	3770      	adds	r7, #112	@ 0x70
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58000400 	.word	0x58000400
 8001b90:	58024800 	.word	0x58024800

08001b94 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0b2      	sub	sp, #200	@ 0xc8
 8001b98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	22c8      	movs	r2, #200	@ 0xc8
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d fded 	bl	800f780 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bc6:	23c0      	movs	r3, #192	@ 0xc0
 8001bc8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001bce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 f9c5 	bl	8005f6c <HAL_RCCEx_PeriphCLKConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001be8:	f000 f9dc 	bl	8001fa4 <Error_Handler>
  }
}
 8001bec:	bf00      	nop
 8001bee:	37c8      	adds	r7, #200	@ 0xc8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <MX_DMA2D_Init+0x70>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c3a:	4809      	ldr	r0, [pc, #36]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c3c:	f000 fdfc 	bl	8002838 <HAL_DMA2D_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c46:	f000 f9ad 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <MX_DMA2D_Init+0x6c>)
 8001c4e:	f001 f87b 	bl	8002d48 <HAL_DMA2D_ConfigLayer>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001c58:	f000 f9a4 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	24000574 	.word	0x24000574
 8001c64:	52001000 	.word	0x52001000

08001c68 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_JPEG_Init+0x20>)
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <MX_JPEG_Init+0x24>)
 8001c70:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <MX_JPEG_Init+0x20>)
 8001c74:	f001 fbcc 	bl	8003410 <HAL_JPEG_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001c7e:	f000 f991 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	240005dc 	.word	0x240005dc
 8001c8c:	52003000 	.word	0x52003000

08001c90 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <MX_SDMMC1_SD_Init+0x44>)
 8001c98:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001ca8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_SDMMC1_SD_Init+0x40>)
 8001cbc:	f006 fe94 	bl	80089e8 <HAL_SD_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001cc6:	f000 f96d 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24000634 	.word	0x24000634
 8001cd4:	52007000 	.word	0x52007000

08001cd8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001cdc:	4b26      	ldr	r3, [pc, #152]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001cde:	4a27      	ldr	r2, [pc, #156]	@ (8001d7c <MX_SPI5_Init+0xa4>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001ce4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d08:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d2e:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d64:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <MX_SPI5_Init+0xa0>)
 8001d66:	f008 faa3 	bl	800a2b0 <HAL_SPI_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001d70:	f000 f918 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	240006b0 	.word	0x240006b0
 8001d7c:	40015000 	.word	0x40015000

08001d80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <MX_USART1_UART_Init+0x94>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc8:	4811      	ldr	r0, [pc, #68]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001dca:	f008 fe6c 	bl	800aaa6 <HAL_UART_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f000 f8e6 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001ddc:	f009 fe75 	bl	800baca <HAL_UARTEx_SetTxFifoThreshold>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001de6:	f000 f8dd 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dea:	2100      	movs	r1, #0
 8001dec:	4808      	ldr	r0, [pc, #32]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001dee:	f009 feaa 	bl	800bb46 <HAL_UARTEx_SetRxFifoThreshold>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001df8:	f000 f8d4 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <MX_USART1_UART_Init+0x90>)
 8001dfe:	f009 fe2b 	bl	800ba58 <HAL_UARTEx_DisableFifoMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e08:	f000 f8cc 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	24000738 	.word	0x24000738
 8001e14:	40011000 	.word	0x40011000

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3e:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4c:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	4a4f      	ldr	r2, [pc, #316]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a47      	ldr	r2, [pc, #284]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e88:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a40      	ldr	r2, [pc, #256]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b3d      	ldr	r3, [pc, #244]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	4a38      	ldr	r2, [pc, #224]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb6:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ec4:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	4a31      	ldr	r2, [pc, #196]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001ecc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee8:	4a29      	ldr	r2, [pc, #164]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <MX_GPIO_Init+0x178>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2102      	movs	r1, #2
 8001f04:	4823      	ldr	r0, [pc, #140]	@ (8001f94 <MX_GPIO_Init+0x17c>)
 8001f06:	f001 fa3b 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2161      	movs	r1, #97	@ 0x61
 8001f0e:	4822      	ldr	r0, [pc, #136]	@ (8001f98 <MX_GPIO_Init+0x180>)
 8001f10:	f001 fa36 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	481c      	ldr	r0, [pc, #112]	@ (8001f9c <MX_GPIO_Init+0x184>)
 8001f2a:	f001 f861 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4815      	ldr	r0, [pc, #84]	@ (8001fa0 <MX_GPIO_Init+0x188>)
 8001f4c:	f001 f850 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <MX_GPIO_Init+0x17c>)
 8001f68:	f001 f842 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001f6c:	2361      	movs	r3, #97	@ 0x61
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_GPIO_Init+0x180>)
 8001f84:	f001 f834 	bl	8002ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	@ 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	58024400 	.word	0x58024400
 8001f94:	58022800 	.word	0x58022800
 8001f98:	58022400 	.word	0x58022400
 8001f9c:	58022000 	.word	0x58022000
 8001fa0:	58020000 	.word	0x58020000

08001fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa8:	b672      	cpsid	i
}
 8001faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <Error_Handler+0x8>

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_MspInit+0x30>)
 8001fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fbc:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x30>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_MspInit+0x30>)
 8001fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	58024400 	.word	0x58024400

08001fe4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800202c <HAL_DMA2D_MspInit+0x48>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d116      	bne.n	8002024 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_DMA2D_MspInit+0x4c>)
 8001ff8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <HAL_DMA2D_MspInit+0x4c>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_DMA2D_MspInit+0x4c>)
 8002008:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	205a      	movs	r0, #90	@ 0x5a
 800201a:	f000 fbd8 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800201e:	205a      	movs	r0, #90	@ 0x5a
 8002020:	f000 fbef 	bl	8002802 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	52001000 	.word	0x52001000
 8002030:	58024400 	.word	0x58024400

08002034 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0e      	ldr	r2, [pc, #56]	@ (800207c <HAL_JPEG_MspInit+0x48>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d116      	bne.n	8002074 <HAL_JPEG_MspInit+0x40>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_JPEG_MspInit+0x4c>)
 8002048:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800204c:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <HAL_JPEG_MspInit+0x4c>)
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_JPEG_MspInit+0x4c>)
 8002058:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2079      	movs	r0, #121	@ 0x79
 800206a:	f000 fbb0 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800206e:	2079      	movs	r0, #121	@ 0x79
 8002070:	f000 fbc7 	bl	8002802 <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	52003000 	.word	0x52003000
 8002080:	58024400 	.word	0x58024400

08002084 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0be      	sub	sp, #248	@ 0xf8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	22c8      	movs	r2, #200	@ 0xc8
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f00d fb6b 	bl	800f780 <memset>
  if(hsd->Instance==SDMMC1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a3c      	ldr	r2, [pc, #240]	@ (80021a0 <HAL_SD_MspInit+0x11c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d171      	bne.n	8002198 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 ff4f 	bl	8005f6c <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80020d4:	f7ff ff66 	bl	8001fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 80020da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020de:	4a31      	ldr	r2, [pc, #196]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020e8:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 80020ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	4b2b      	ldr	r3, [pc, #172]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fc:	4a29      	ldr	r2, [pc, #164]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002106:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002114:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211a:	4a22      	ldr	r2, [pc, #136]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_SD_MspInit+0x120>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8002132:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800214c:	230c      	movs	r3, #12
 800214e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002152:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002156:	4619      	mov	r1, r3
 8002158:	4813      	ldr	r0, [pc, #76]	@ (80021a8 <HAL_SD_MspInit+0x124>)
 800215a:	f000 ff49 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800215e:	2304      	movs	r3, #4
 8002160:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002176:	230c      	movs	r3, #12
 8002178:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002180:	4619      	mov	r1, r3
 8002182:	480a      	ldr	r0, [pc, #40]	@ (80021ac <HAL_SD_MspInit+0x128>)
 8002184:	f000 ff34 	bl	8002ff0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2031      	movs	r0, #49	@ 0x31
 800218e:	f000 fb1e 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002192:	2031      	movs	r0, #49	@ 0x31
 8002194:	f000 fb35 	bl	8002802 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002198:	bf00      	nop
 800219a:	37f8      	adds	r7, #248	@ 0xf8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	52007000 	.word	0x52007000
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58020800 	.word	0x58020800
 80021ac:	58020c00 	.word	0x58020c00

080021b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0be      	sub	sp, #248	@ 0xf8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	22c8      	movs	r2, #200	@ 0xc8
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00d fad5 	bl	800f780 <memset>
  if(hspi->Instance==SPI5)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a39      	ldr	r2, [pc, #228]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d16a      	bne.n	80022b6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80021e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 feb8 	bl	8005f6c <HAL_RCCEx_PeriphCLKConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002202:	f7ff fecf 	bl	8001fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002206:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800220c:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002212:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002216:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002224:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222a:	4a26      	ldr	r2, [pc, #152]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 800222c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002234:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002248:	4a1e      	ldr	r2, [pc, #120]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 800224a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002252:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8002260:	2301      	movs	r3, #1
 8002262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002278:	2305      	movs	r3, #5
 800227a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002282:	4619      	mov	r1, r3
 8002284:	4810      	ldr	r0, [pc, #64]	@ (80022c8 <HAL_SPI_MspInit+0x118>)
 8002286:	f000 feb3 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800228a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800228e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022a4:	2305      	movs	r3, #5
 80022a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022aa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022ae:	4619      	mov	r1, r3
 80022b0:	4806      	ldr	r0, [pc, #24]	@ (80022cc <HAL_SPI_MspInit+0x11c>)
 80022b2:	f000 fe9d 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80022b6:	bf00      	nop
 80022b8:	37f8      	adds	r7, #248	@ 0xf8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40015000 	.word	0x40015000
 80022c4:	58024400 	.word	0x58024400
 80022c8:	58022800 	.word	0x58022800
 80022cc:	58022400 	.word	0x58022400

080022d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0bc      	sub	sp, #240	@ 0xf0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	22c8      	movs	r2, #200	@ 0xc8
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00d fa45 	bl	800f780 <memset>
  if(huart->Instance==USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a27      	ldr	r2, [pc, #156]	@ (8002398 <HAL_UART_MspInit+0xc8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d146      	bne.n	800238e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002300:	f04f 0201 	mov.w	r2, #1
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fe28 	bl	8005f6c <HAL_RCCEx_PeriphCLKConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002322:	f7ff fe3f 	bl	8001fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_UART_MspInit+0xcc>)
 8002328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <HAL_UART_MspInit+0xcc>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002336:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_UART_MspInit+0xcc>)
 8002338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_UART_MspInit+0xcc>)
 8002346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234a:	4a14      	ldr	r2, [pc, #80]	@ (800239c <HAL_UART_MspInit+0xcc>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_UART_MspInit+0xcc>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002362:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237c:	2307      	movs	r3, #7
 800237e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <HAL_UART_MspInit+0xd0>)
 800238a:	f000 fe31 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800238e:	bf00      	nop
 8002390:	37f0      	adds	r7, #240	@ 0xf0
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40011000 	.word	0x40011000
 800239c:	58024400 	.word	0x58024400
 80023a0:	58020000 	.word	0x58020000

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <NMI_Handler+0x4>

080023ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <MemManage_Handler+0x4>

080023bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <UsageFault_Handler+0x4>

080023cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 f8bd 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002408:	4802      	ldr	r0, [pc, #8]	@ (8002414 <SDMMC1_IRQHandler+0x10>)
 800240a:	f006 fd5d 	bl	8008ec8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	24000634 	.word	0x24000634

08002418 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <DMA2D_IRQHandler+0x10>)
 800241e:	f000 fb83 	bl	8002b28 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24000574 	.word	0x24000574

0800242c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002430:	4802      	ldr	r0, [pc, #8]	@ (800243c <JPEG_IRQHandler+0x10>)
 8002432:	f001 fa12 	bl	800385a <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	240005dc 	.word	0x240005dc

08002440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002444:	f7fe f8c0 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	@ (800247c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	@ (8002480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	@ (800248c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246e:	f00d f98f 	bl	800f790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002472:	f7ff faad 	bl	80019d0 <main>
  bx  lr
 8002476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800247c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002480:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002484:	0800fba8 	.word	0x0800fba8
  ldr r2, =_sbss
 8002488:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800248c:	24004814 	.word	0x24004814

08002490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC3_IRQHandler>
	...

08002494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249a:	2003      	movs	r0, #3
 800249c:	f000 f98c 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a0:	f003 fb8e 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_Init+0x68>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	4913      	ldr	r1, [pc, #76]	@ (8002500 <HAL_Init+0x6c>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <HAL_Init+0x68>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002500 <HAL_Init+0x6c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_Init+0x70>)
 80024d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002508 <HAL_Init+0x74>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f814 	bl	800250c <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e002      	b.n	80024f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ee:	f7ff fd5f 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	58024400 	.word	0x58024400
 8002500:	0800f86c 	.word	0x0800f86c
 8002504:	24000004 	.word	0x24000004
 8002508:	24000000 	.word	0x24000000

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <HAL_InitTick+0x60>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e021      	b.n	8002564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002520:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <HAL_InitTick+0x64>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_InitTick+0x60>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f971 	bl	800281e <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d80a      	bhi.n	8002562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f000 f93b 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002558:	4a06      	ldr	r2, [pc, #24]	@ (8002574 <HAL_InitTick+0x68>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	24000010 	.word	0x24000010
 8002570:	24000000 	.word	0x24000000
 8002574:	2400000c 	.word	0x2400000c

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	24000010 	.word	0x24000010
 800259c:	240007cc 	.word	0x240007cc

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	240007cc 	.word	0x240007cc

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	24000010 	.word	0x24000010

08002600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetREVID+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0c1b      	lsrs	r3, r3, #16
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	5c001000 	.word	0x5c001000

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <__NVIC_SetPriorityGrouping+0x40>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	4313      	orrs	r3, r2
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <__NVIC_SetPriorityGrouping+0x40>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	05fa0000 	.word	0x05fa0000

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	@ (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	@ (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	@ (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff40 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff90 	bl	800270c <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5f 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff33 	bl	800267c <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa4 	bl	8002774 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e04f      	b.n	80028ea <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fbc0 	bl	8001fe4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_DMA2D_Init+0xbc>)
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6851      	ldr	r1, [r2, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	69d2      	ldr	r2, [r2, #28]
 800287e:	4311      	orrs	r1, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	430b      	orrs	r3, r1
 8002886:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <HAL_DMA2D_Init+0xc0>)
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6891      	ldr	r1, [r2, #8]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6992      	ldr	r2, [r2, #24]
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_DMA2D_Init+0xc4>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68d1      	ldr	r1, [r2, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	430b      	orrs	r3, r1
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	055b      	lsls	r3, r3, #21
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	fff8ffbf 	.word	0xfff8ffbf
 80028f8:	fffffef8 	.word	0xfffffef8
 80028fc:	ffff0000 	.word	0xffff0000

08002900 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_DMA2D_Start+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e018      	b.n	800294e <HAL_DMA2D_Start+0x4e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fab4 	bl	8002ea4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d056      	beq.n	8002a20 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002972:	f7ff fe15 	bl	80025a0 <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002978:	e04b      	b.n	8002a12 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2221      	movs	r2, #33	@ 0x21
 80029be:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2204      	movs	r2, #4
 80029c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0a5      	b.n	8002b20 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029da:	d01a      	beq.n	8002a12 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029dc:	f7ff fde0 	bl	80025a0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <HAL_DMA2D_PollForTransfer+0x9c>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e086      	b.n	8002b20 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ac      	beq.n	800297a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d061      	beq.n	8002b06 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a42:	f7ff fdad 	bl	80025a0 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a48:	e056      	b.n	8002af8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d02e      	beq.n	8002aba <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2229      	movs	r2, #41	@ 0x29
 8002aa4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e032      	b.n	8002b20 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d01a      	beq.n	8002af8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7ff fd6d 	bl	80025a0 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <HAL_DMA2D_PollForTransfer+0x182>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10f      	bne.n	8002af8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e013      	b.n	8002b20 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0a1      	beq.n	8002a4a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2212      	movs	r2, #18
 8002b0c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d026      	beq.n	8002b98 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d021      	beq.n	8002b98 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b62:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d026      	beq.n	8002bf0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d021      	beq.n	8002bf0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bba:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d026      	beq.n	8002c48 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d021      	beq.n	8002c48 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c12:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d013      	beq.n	8002c7a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2204      	movs	r2, #4
 8002c72:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f853 	bl	8002d20 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d024      	beq.n	8002cce <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01f      	beq.n	8002cce <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01f      	beq.n	8002d18 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01a      	beq.n	8002d18 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f80e 	bl	8002d34 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_DMA2D_ConfigLayer+0x24>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e092      	b.n	8002e92 <HAL_DMA2D_ConfigLayer+0x14a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	3328      	adds	r3, #40	@ 0x28
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002da0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002dac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <HAL_DMA2D_ConfigLayer+0x158>)
 8002dae:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b0a      	cmp	r3, #10
 8002db6:	d003      	beq.n	8002dc0 <HAL_DMA2D_ConfigLayer+0x78>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e005      	b.n	8002ddc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d120      	bne.n	8002e24 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	ea02 0103 	and.w	r1, r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b0a      	cmp	r3, #10
 8002e0a:	d003      	beq.n	8002e14 <HAL_DMA2D_ConfigLayer+0xcc>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d135      	bne.n	8002e80 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e22:	e02d      	b.n	8002e80 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b0b      	cmp	r3, #11
 8002e2a:	d109      	bne.n	8002e40 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	049b      	lsls	r3, r3, #18
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002e3e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	ea02 0103 	and.w	r1, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d003      	beq.n	8002e72 <HAL_DMA2D_ConfigLayer+0x12a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	d106      	bne.n	8002e80 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e7e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	ff33000f 	.word	0xff33000f

08002ea4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b08b      	sub	sp, #44	@ 0x2c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	041a      	lsls	r2, r3, #16
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002edc:	d174      	bne.n	8002fc8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ee4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002eec:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ef4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	e053      	b.n	8002fbe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d106      	bne.n	8002f2c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2a:	e048      	b.n	8002fbe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d111      	bne.n	8002f58 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	0cdb      	lsrs	r3, r3, #19
 8002f38:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	0a9b      	lsrs	r3, r3, #10
 8002f3e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	08db      	lsrs	r3, r3, #3
 8002f44:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	02db      	lsls	r3, r3, #11
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	e032      	b.n	8002fbe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d117      	bne.n	8002f90 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	0fdb      	lsrs	r3, r3, #31
 8002f64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	0cdb      	lsrs	r3, r3, #19
 8002f6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	0adb      	lsrs	r3, r3, #11
 8002f70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	431a      	orrs	r2, r3
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	03db      	lsls	r3, r3, #15
 8002f86:	4313      	orrs	r3, r2
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8e:	e016      	b.n	8002fbe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	0f1b      	lsrs	r3, r3, #28
 8002f94:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	0d1b      	lsrs	r3, r3, #20
 8002f9a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	0b1b      	lsrs	r3, r3, #12
 8002fa0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	011a      	lsls	r2, r3, #4
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002fc6:	e00d      	b.n	8002fe4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fd0:	d104      	bne.n	8002fdc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	e003      	b.n	8002fe4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	372c      	adds	r7, #44	@ 0x2c
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ffe:	4b89      	ldr	r3, [pc, #548]	@ (8003224 <HAL_GPIO_Init+0x234>)
 8003000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003002:	e194      	b.n	800332e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8186 	beq.w	8003328 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d005      	beq.n	8003034 <HAL_GPIO_Init+0x44>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d130      	bne.n	8003096 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306a:	2201      	movs	r2, #1
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0201 	and.w	r2, r3, #1
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d017      	beq.n	80030d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d123      	bne.n	8003126 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	69b9      	ldr	r1, [r7, #24]
 8003122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0203 	and.w	r2, r3, #3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80e0 	beq.w	8003328 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003168:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_GPIO_Init+0x238>)
 800316a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800316e:	4a2e      	ldr	r2, [pc, #184]	@ (8003228 <HAL_GPIO_Init+0x238>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003178:	4b2b      	ldr	r3, [pc, #172]	@ (8003228 <HAL_GPIO_Init+0x238>)
 800317a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003186:	4a29      	ldr	r2, [pc, #164]	@ (800322c <HAL_GPIO_Init+0x23c>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a20      	ldr	r2, [pc, #128]	@ (8003230 <HAL_GPIO_Init+0x240>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d052      	beq.n	8003258 <HAL_GPIO_Init+0x268>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003234 <HAL_GPIO_Init+0x244>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003238 <HAL_GPIO_Init+0x248>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x22a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_GPIO_Init+0x24c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x226>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <HAL_GPIO_Init+0x250>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x222>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <HAL_GPIO_Init+0x254>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <HAL_GPIO_Init+0x258>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x21a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <HAL_GPIO_Init+0x25c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x216>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <HAL_GPIO_Init+0x260>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <HAL_GPIO_Init+0x264>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x20e>
 80031fa:	2309      	movs	r3, #9
 80031fc:	e02d      	b.n	800325a <HAL_GPIO_Init+0x26a>
 80031fe:	230a      	movs	r3, #10
 8003200:	e02b      	b.n	800325a <HAL_GPIO_Init+0x26a>
 8003202:	2308      	movs	r3, #8
 8003204:	e029      	b.n	800325a <HAL_GPIO_Init+0x26a>
 8003206:	2307      	movs	r3, #7
 8003208:	e027      	b.n	800325a <HAL_GPIO_Init+0x26a>
 800320a:	2306      	movs	r3, #6
 800320c:	e025      	b.n	800325a <HAL_GPIO_Init+0x26a>
 800320e:	2305      	movs	r3, #5
 8003210:	e023      	b.n	800325a <HAL_GPIO_Init+0x26a>
 8003212:	2304      	movs	r3, #4
 8003214:	e021      	b.n	800325a <HAL_GPIO_Init+0x26a>
 8003216:	2303      	movs	r3, #3
 8003218:	e01f      	b.n	800325a <HAL_GPIO_Init+0x26a>
 800321a:	2302      	movs	r3, #2
 800321c:	e01d      	b.n	800325a <HAL_GPIO_Init+0x26a>
 800321e:	2301      	movs	r3, #1
 8003220:	e01b      	b.n	800325a <HAL_GPIO_Init+0x26a>
 8003222:	bf00      	nop
 8003224:	58000080 	.word	0x58000080
 8003228:	58024400 	.word	0x58024400
 800322c:	58000400 	.word	0x58000400
 8003230:	58020000 	.word	0x58020000
 8003234:	58020400 	.word	0x58020400
 8003238:	58020800 	.word	0x58020800
 800323c:	58020c00 	.word	0x58020c00
 8003240:	58021000 	.word	0x58021000
 8003244:	58021400 	.word	0x58021400
 8003248:	58021800 	.word	0x58021800
 800324c:	58021c00 	.word	0x58021c00
 8003250:	58022000 	.word	0x58022000
 8003254:	58022400 	.word	0x58022400
 8003258:	2300      	movs	r3, #0
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	f002 0203 	and.w	r2, r2, #3
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	4093      	lsls	r3, r2
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800326a:	4938      	ldr	r1, [pc, #224]	@ (800334c <HAL_GPIO_Init+0x35c>)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800329e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3301      	adds	r3, #1
 800332c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f ae63 	bne.w	8003004 <HAL_GPIO_Init+0x14>
  }
}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	3724      	adds	r7, #36	@ 0x24
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	58000400 	.word	0x58000400

08003350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e001      	b.n	8003372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800339c:	e003      	b.n	80033a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	041a      	lsls	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	619a      	str	r2, [r3, #24]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033bc:	4a08      	ldr	r2, [pc, #32]	@ (80033e0 <HAL_HSEM_FastTake+0x2c>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3320      	adds	r3, #32
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	4a07      	ldr	r2, [pc, #28]	@ (80033e4 <HAL_HSEM_FastTake+0x30>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	58026400 	.word	0x58026400
 80033e4:	80000300 	.word	0x80000300

080033e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80033f2:	4906      	ldr	r1, [pc, #24]	@ (800340c <HAL_HSEM_Release+0x24>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	58026400 	.word	0x58026400

08003410 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e070      	b.n	8003504 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fdfc 	bl	8002034 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a19      	ldr	r2, [pc, #100]	@ (800350c <HAL_JPEG_Init+0xfc>)
 80034a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a18      	ldr	r2, [pc, #96]	@ (8003510 <HAL_JPEG_Init+0x100>)
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fd01 	bl	8003ec4 <JPEG_Set_HuffEnc_Mem>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e018      	b.n	8003504 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	0800fa5c 	.word	0x0800fa5c
 8003510:	0800fa9c 	.word	0x0800fa9c

08003514 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_JPEG_GetInfo+0x16>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e083      	b.n	8003636 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d103      	bne.n	8003544 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2210      	movs	r2, #16
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e017      	b.n	8003574 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e00c      	b.n	8003574 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d103      	bne.n	8003570 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2230      	movs	r2, #48	@ 0x30
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e001      	b.n	8003574 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e060      	b.n	8003636 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	b29a      	uxth	r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	b29a      	uxth	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b10      	cmp	r3, #16
 8003596:	d003      	beq.n	80035a0 <HAL_JPEG_GetInfo+0x8c>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b30      	cmp	r3, #48	@ 0x30
 800359e:	d140      	bne.n	8003622 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d109      	bne.n	80035e4 <HAL_JPEG_GetInfo+0xd0>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_JPEG_GetInfo+0xd0>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2202      	movs	r2, #2
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	e01d      	b.n	8003620 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_JPEG_GetInfo+0xea>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_JPEG_GetInfo+0xea>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	e010      	b.n	8003620 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d109      	bne.n	8003618 <HAL_JPEG_GetInfo+0x104>
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_JPEG_GetInfo+0x104>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e003      	b.n	8003620 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800361e:	e003      	b.n	8003628 <HAL_JPEG_GetInfo+0x114>
 8003620:	e002      	b.n	8003628 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f001 fb6f 	bl	8004d0c <JPEG_GetQuality>
 800362e:	4602      	mov	r2, r0
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_JPEG_Decode+0x20>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_JPEG_Decode+0x20>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e071      	b.n	8003746 <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_JPEG_Decode+0x32>
 800366c:	2302      	movs	r3, #2
 800366e:	e06a      	b.n	8003746 <HAL_JPEG_Decode+0x108>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8003678:	f7fe ff92 	bl	80025a0 <HAL_GetTick>
 800367c:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d158      	bne.n	800373c <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2204      	movs	r2, #4
 800368e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f023 020f 	bic.w	r2, r3, #15
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	f043 0206 	orr.w	r2, r3, #6
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f023 0203 	bic.w	r2, r3, #3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fe76 	bl	80043c8 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80036dc:	e01e      	b.n	800371c <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d01a      	beq.n	800371c <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036e6:	f7fe ff5b 	bl	80025a0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <HAL_JPEG_Decode+0xbe>
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	f043 0208 	orr.w	r2, r3, #8
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e014      	b.n	8003746 <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fec7 	bl	80044b0 <JPEG_Process>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0da      	beq.n	80036de <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e004      	b.n	8003746 <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d116      	bne.n	8003796 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003776:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d033      	beq.n	80037f0 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
 8003794:	e02c      	b.n	80037f0 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d126      	bne.n	80037f0 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f043 0306 	orr.w	r3, r3, #6
 80037be:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80037dc:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3b03      	subs	r3, #3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d813      	bhi.n	8003898 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d103      	bne.n	8003884 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fe17 	bl	80044b0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8003882:	e00b      	b.n	800389c <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	2b0c      	cmp	r3, #12
 800388e:	d105      	bne.n	800389c <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 f8bc 	bl	8004a0e <JPEG_DMA_ContinueProcess>
      break;
 8003896:	e001      	b.n	800389c <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8003898:	bf00      	nop
 800389a:	e000      	b.n	800389e <HAL_JPEG_IRQHandler+0x44>
      break;
 800389c:	bf00      	nop
  }
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b08b      	sub	sp, #44	@ 0x2c
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e020      	b.n	8003900 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	4413      	add	r3, r2
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d2:	d90f      	bls.n	80038f4 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e055      	b.n	8003984 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	440b      	add	r3, r1
 80038e2:	3201      	adds	r2, #1
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]
      p++;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	3301      	adds	r3, #1
 80038ec:	623b      	str	r3, [r7, #32]
      i--;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	3b01      	subs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ee      	bne.n	80038d8 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b0f      	cmp	r3, #15
 8003904:	d9db      	bls.n	80038be <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
  p = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8003924:	e027      	b.n	8003976 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	601a      	str	r2, [r3, #0]
      p++;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	3301      	adds	r3, #1
 8003936:	623b      	str	r3, [r7, #32]
      code++;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3301      	adds	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4293      	cmp	r3, r2
 800394c:	d0eb      	beq.n	8003926 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b1f      	cmp	r3, #31
 8003952:	d901      	bls.n	8003958 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e015      	b.n	8003984 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8003958:	2201      	movs	r2, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	429a      	cmp	r2, r3
 8003964:	d301      	bcc.n	800396a <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00c      	b.n	8003984 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	61bb      	str	r3, [r7, #24]
    si++;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	4413      	add	r3, r2
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1dd      	bne.n	800393e <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	372c      	adds	r7, #44	@ 0x2c
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003996:	af00      	add	r7, sp, #0
 8003998:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800399c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039a0:	6018      	str	r0, [r3, #0]
 80039a2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039a6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80039aa:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80039ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039b0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	f107 020c 	add.w	r2, r7, #12
 80039be:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80039c2:	f7ff ff70 	bl	80038a6 <JPEG_Bits_To_SizeCodes>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80039cc:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80039d4:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80039d8:	e075      	b.n	8003ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80039e0:	e067      	b.n	8003ab2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80039e2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80039e6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80039f0:	4413      	add	r3, r2
 80039f2:	3310      	adds	r3, #16
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80039fa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8003a02:	23a0      	movs	r3, #160	@ 0xa0
 8003a04:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a08:	e021      	b.n	8003a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8003a0a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a10:	d103      	bne.n	8003a1a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8003a12:	23a1      	movs	r3, #161	@ 0xa1
 8003a14:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003a18:	e019      	b.n	8003a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8003a1a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8003a28:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8003a34:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	461a      	mov	r2, r3
 8003a42:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003a46:	4413      	add	r3, r2
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8003a4e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a52:	2ba1      	cmp	r3, #161	@ 0xa1
 8003a54:	d901      	bls.n	8003a5a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003a56:	2301      	movs	r3, #1
 8003a58:	e035      	b.n	8003ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003a5a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a5e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003a62:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003a66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a6a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a6e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003a80:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a84:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003a88:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003a8c:	4413      	add	r3, r2
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003a98:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003aa2:	4413      	add	r3, r2
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	701a      	strb	r2, [r3, #0]
      k++;
 8003aa8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003aac:	3301      	adds	r3, #1
 8003aae:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8003ab2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003ab6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d38e      	bcc.n	80039e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003adc:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003ae0:	6018      	str	r0, [r3, #0]
 8003ae2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003ae6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003aea:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003aec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003af0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003afa:	f107 0208 	add.w	r2, r7, #8
 8003afe:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8003b02:	f7ff fed0 	bl	80038a6 <JPEG_Bits_To_SizeCodes>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8003b0c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003b14:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003b18:	e048      	b.n	8003bac <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8003b20:	e03d      	b.n	8003b9e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8003b22:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b26:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b30:	4413      	add	r3, r2
 8003b32:	3310      	adds	r3, #16
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8003b3a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b3e:	2b0b      	cmp	r3, #11
 8003b40:	d901      	bls.n	8003b46 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8003b42:	2301      	movs	r3, #1
 8003b44:	e032      	b.n	8003bac <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8003b46:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b4a:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8003b4e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003b52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b56:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b5a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b64:	3302      	adds	r3, #2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8003b6c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b70:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003b74:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b78:	4413      	add	r3, r2
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b2d9      	uxtb	r1, r3
 8003b80:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b84:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003b8e:	4413      	add	r3, r2
 8003b90:	460a      	mov	r2, r1
 8003b92:	701a      	strb	r2, [r3, #0]
      k++;
 8003b94:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8003b9e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003ba2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3bb      	bcc.n	8003b22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b09a      	sub	sp, #104	@ 0x68
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d106      	bne.n	8003bde <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003bd8:	3318      	adds	r3, #24
 8003bda:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bdc:	e00f      	b.n	8003bfe <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf8:	e001      	b.n	8003bfe <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e059      	b.n	8003cb2 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d055      	beq.n	8003cb0 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f7ff ff60 	bl	8003ad0 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003c16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8003c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c22:	e046      	b.n	8003cb2 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8003c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c26:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c2a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c2e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c32:	3304      	adds	r3, #4
 8003c34:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8003c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c38:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003c3c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8003c3e:	230c      	movs	r3, #12
 8003c40:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8003c42:	e032      	b.n	8003caa <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8003c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c46:	3b01      	subs	r3, #1
 8003c48:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8003c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003c50:	f107 0214 	add.w	r2, r7, #20
 8003c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c62:	3302      	adds	r3, #2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	3368      	adds	r3, #104	@ 0x68
 8003c68:	443b      	add	r3, r7
 8003c6a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4313      	orrs	r3, r2
 8003c72:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8003c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c76:	3b01      	subs	r3, #1
 8003c78:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8003c7a:	f107 0214 	add.w	r2, r7, #20
 8003c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c80:	4413      	add	r3, r2
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3368      	adds	r3, #104	@ 0x68
 8003c92:	443b      	add	r3, r7
 8003c94:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca0:	041a      	lsls	r2, r3, #16
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003caa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d8c9      	bhi.n	8003c44 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3768      	adds	r7, #104	@ 0x68
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cc8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003ccc:	6018      	str	r0, [r3, #0]
 8003cce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cd2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003cd6:	6019      	str	r1, [r3, #0]
 8003cd8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003cdc:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003ce0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8003ce2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ce6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003cf6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d10c      	bne.n	8003d1a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003d00:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d04:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d10:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d14:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d18:	e01d      	b.n	8003d56 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003d1a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d1e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d2a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003d2e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d10c      	bne.n	8003d52 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8003d38:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d3c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003d48:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003d4c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003d50:	e001      	b.n	8003d56 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0a8      	b.n	8003ea8 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8003d56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d5a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a0 	beq.w	8003ea6 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8003d66:	f107 0214 	add.w	r2, r7, #20
 8003d6a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003d6e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003d72:	4611      	mov	r1, r2
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f7ff fe0b 	bl	8003990 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8003d80:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003d88:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003d8c:	e08c      	b.n	8003ea8 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8003d8e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003d92:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003d9c:	e00e      	b.n	8003dbc <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8003d9e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003da2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003da6:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003da8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dac:	3304      	adds	r3, #4
 8003dae:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003db2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003db6:	3301      	adds	r3, #1
 8003db8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003dbc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d9ec      	bls.n	8003d9e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003dc4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003dca:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003dcc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003dd6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dda:	4a37      	ldr	r2, [pc, #220]	@ (8003eb8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003ddc:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003dde:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003de2:	3304      	adds	r3, #4
 8003de4:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003de8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dec:	4a33      	ldr	r2, [pc, #204]	@ (8003ebc <JPEG_Set_HuffAC_Mem+0x200>)
 8003dee:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003df0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003df4:	3304      	adds	r3, #4
 8003df6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003dfa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003dfe:	4a30      	ldr	r2, [pc, #192]	@ (8003ec0 <JPEG_Set_HuffAC_Mem+0x204>)
 8003e00:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8003e02:	23a2      	movs	r3, #162	@ 0xa2
 8003e04:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003e08:	e049      	b.n	8003e9e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003e0a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003e14:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e18:	3b04      	subs	r3, #4
 8003e1a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e1e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e22:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e26:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e38:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003e3c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e40:	3328      	adds	r3, #40	@ 0x28
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8003e50:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e54:	3b01      	subs	r3, #1
 8003e56:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8003e5a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e5e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003e62:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e66:	4413      	add	r3, r2
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e70:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003e74:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003e78:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e7c:	3328      	adds	r3, #40	@ 0x28
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003e8c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003e96:	431a      	orrs	r2, r3
 8003e98:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003e9c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003e9e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d8b1      	bhi.n	8003e0a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0fd10fd0 	.word	0x0fd10fd0
 8003eb8:	0fd30fd2 	.word	0x0fd30fd2
 8003ebc:	0fd50fd4 	.word	0x0fd50fd4
 8003ec0:	0fd70fd6 	.word	0x0fd70fd6

08003ec4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f84d 	bl	8003f6c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003eda:	461a      	mov	r2, r3
 8003edc:	491f      	ldr	r1, [pc, #124]	@ (8003f5c <JPEG_Set_HuffEnc_Mem+0x98>)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff feec 	bl	8003cbc <JPEG_Set_HuffAC_Mem>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	e030      	b.n	8003f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003efa:	461a      	mov	r2, r3
 8003efc:	4918      	ldr	r1, [pc, #96]	@ (8003f60 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fedc 	bl	8003cbc <JPEG_Set_HuffAC_Mem>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	e020      	b.n	8003f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4911      	ldr	r1, [pc, #68]	@ (8003f64 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fe49 	bl	8003bb6 <JPEG_Set_HuffDC_Mem>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	e010      	b.n	8003f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	490a      	ldr	r1, [pc, #40]	@ (8003f68 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fe39 	bl	8003bb6 <JPEG_Set_HuffDC_Mem>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	e000      	b.n	8003f54 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	0800f8b4 	.word	0x0800f8b4
 8003f60:	0800f968 	.word	0x0800f968
 8003f64:	0800f87c 	.word	0x0800f87c
 8003f68:	0800f898 	.word	0x0800f898

08003f6c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b08b      	sub	sp, #44	@ 0x2c
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8003f74:	4b80      	ldr	r3, [pc, #512]	@ (8004178 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003f76:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8003f78:	4b80      	ldr	r3, [pc, #512]	@ (800417c <JPEG_Set_Huff_DHTMem+0x210>)
 8003f7a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8003f7c:	4b80      	ldr	r3, [pc, #512]	@ (8004180 <JPEG_Set_Huff_DHTMem+0x214>)
 8003f7e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8003f80:	4b80      	ldr	r3, [pc, #512]	@ (8004184 <JPEG_Set_Huff_DHTMem+0x218>)
 8003f82:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	623b      	str	r3, [r7, #32]
  index = 16;
 8003f90:	2310      	movs	r3, #16
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003f94:	e01d      	b.n	8003fd2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	5cd3      	ldrb	r3, [r2, r3]
 8003f9e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	3b02      	subs	r3, #2
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003faa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	3b03      	subs	r3, #3
 8003fb0:	6979      	ldr	r1, [r7, #20]
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003fb6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fba:	3a04      	subs	r2, #4
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003fc0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	601a      	str	r2, [r3, #0]
    address--;
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d8de      	bhi.n	8003f96 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	623b      	str	r3, [r7, #32]
  index = 12;
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003fe8:	e021      	b.n	800402e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	3b01      	subs	r3, #1
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	7c1b      	ldrb	r3, [r3, #16]
 8003ff4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	3b02      	subs	r3, #2
 8003ffa:	6979      	ldr	r1, [r7, #20]
 8003ffc:	440b      	add	r3, r1
 8003ffe:	7c1b      	ldrb	r3, [r3, #16]
 8004000:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004002:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	3b03      	subs	r3, #3
 8004008:	6979      	ldr	r1, [r7, #20]
 800400a:	440b      	add	r3, r1
 800400c:	7c1b      	ldrb	r3, [r3, #16]
 800400e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004010:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	3a04      	subs	r2, #4
 8004016:	6979      	ldr	r1, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800401c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	601a      	str	r2, [r3, #0]
    address--;
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	3b04      	subs	r3, #4
 8004026:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	3b04      	subs	r3, #4
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	2b03      	cmp	r3, #3
 8004032:	d8da      	bhi.n	8003fea <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800403c:	3328      	adds	r3, #40	@ 0x28
 800403e:	623b      	str	r3, [r7, #32]
  index = 16;
 8004040:	2310      	movs	r3, #16
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004044:	e01d      	b.n	8004082 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	3b01      	subs	r3, #1
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	5cd3      	ldrb	r3, [r2, r3]
 800404e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	3b02      	subs	r3, #2
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800405a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	3b03      	subs	r3, #3
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004066:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406a:	3a04      	subs	r2, #4
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004070:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	601a      	str	r2, [r3, #0]
    address--;
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	3b04      	subs	r3, #4
 800407a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	3b04      	subs	r3, #4
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	2b03      	cmp	r3, #3
 8004086:	d8de      	bhi.n	8004046 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004090:	33cc      	adds	r3, #204	@ 0xcc
 8004092:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b3b      	ldr	r3, [pc, #236]	@ (8004188 <JPEG_Set_Huff_DHTMem+0x21c>)
 800409a:	4013      	ands	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80040a4:	021a      	lsls	r2, r3, #8
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	3b04      	subs	r3, #4
 80040be:	623b      	str	r3, [r7, #32]
  index = 160;
 80040c0:	23a0      	movs	r3, #160	@ 0xa0
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80040c4:	e021      	b.n	800410a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	3b01      	subs	r3, #1
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	7c1b      	ldrb	r3, [r3, #16]
 80040d0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	3b02      	subs	r3, #2
 80040d6:	69f9      	ldr	r1, [r7, #28]
 80040d8:	440b      	add	r3, r1
 80040da:	7c1b      	ldrb	r3, [r3, #16]
 80040dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	3b03      	subs	r3, #3
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	440b      	add	r3, r1
 80040e8:	7c1b      	ldrb	r3, [r3, #16]
 80040ea:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80040ec:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80040ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f0:	3a04      	subs	r2, #4
 80040f2:	69f9      	ldr	r1, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80040f8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	601a      	str	r2, [r3, #0]
    address--;
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	3b04      	subs	r3, #4
 8004102:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	3b04      	subs	r3, #4
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	2b03      	cmp	r3, #3
 800410e:	d8da      	bhi.n	80040c6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004118:	33cc      	adds	r3, #204	@ 0xcc
 800411a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	061a      	lsls	r2, r3, #24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	431a      	orrs	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004146:	33dc      	adds	r3, #220	@ 0xdc
 8004148:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	7bdb      	ldrb	r3, [r3, #15]
 8004158:	021a      	lsls	r2, r3, #8
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	7b92      	ldrb	r2, [r2, #14]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	3b04      	subs	r3, #4
 8004170:	623b      	str	r3, [r7, #32]
  index = 12;
 8004172:	230c      	movs	r3, #12
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004176:	e027      	b.n	80041c8 <JPEG_Set_Huff_DHTMem+0x25c>
 8004178:	0800f8b4 	.word	0x0800f8b4
 800417c:	0800f968 	.word	0x0800f968
 8004180:	0800f87c 	.word	0x0800f87c
 8004184:	0800f898 	.word	0x0800f898
 8004188:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	3301      	adds	r3, #1
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	5cd3      	ldrb	r3, [r2, r3]
 8004194:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	440b      	add	r3, r1
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041a0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	3b01      	subs	r3, #1
 80041a6:	6939      	ldr	r1, [r7, #16]
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80041ac:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80041ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b0:	3a02      	subs	r2, #2
 80041b2:	6939      	ldr	r1, [r7, #16]
 80041b4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80041b6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	601a      	str	r2, [r3, #0]
    address--;
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	3b04      	subs	r3, #4
 80041c0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	3b04      	subs	r3, #4
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d8de      	bhi.n	800418c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80041d6:	33dc      	adds	r3, #220	@ 0xdc
 80041d8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	7c5b      	ldrb	r3, [r3, #17]
 80041e6:	061a      	lsls	r2, r3, #24
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	7c1b      	ldrb	r3, [r3, #16]
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004204:	33e8      	adds	r3, #232	@ 0xe8
 8004206:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <JPEG_Set_Huff_DHTMem+0x458>)
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	7edb      	ldrb	r3, [r3, #27]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	7e92      	ldrb	r2, [r2, #26]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	3b04      	subs	r3, #4
 800422e:	623b      	str	r3, [r7, #32]
  index = 8;
 8004230:	2308      	movs	r3, #8
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004234:	e021      	b.n	800427a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	7c1b      	ldrb	r3, [r3, #16]
 8004240:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	440b      	add	r3, r1
 8004248:	3310      	adds	r3, #16
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800424e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	3b01      	subs	r3, #1
 8004254:	6939      	ldr	r1, [r7, #16]
 8004256:	440b      	add	r3, r1
 8004258:	7c1b      	ldrb	r3, [r3, #16]
 800425a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800425c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800425e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004260:	3a02      	subs	r2, #2
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	440a      	add	r2, r1
 8004266:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004268:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	601a      	str	r2, [r3, #0]
    address--;
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	3b04      	subs	r3, #4
 8004272:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	3b04      	subs	r3, #4
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	2b03      	cmp	r3, #3
 800427e:	d8da      	bhi.n	8004236 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004288:	33e8      	adds	r3, #232	@ 0xe8
 800428a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	061a      	lsls	r2, r3, #24
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	431a      	orrs	r2, r3
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80042b6:	33f8      	adds	r3, #248	@ 0xf8
 80042b8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <JPEG_Set_Huff_DHTMem+0x458>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	7bdb      	ldrb	r3, [r3, #15]
 80042c8:	021a      	lsls	r2, r3, #8
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	7b92      	ldrb	r2, [r2, #14]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  *address = value;
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	3b04      	subs	r3, #4
 80042e0:	623b      	str	r3, [r7, #32]
  index = 12;
 80042e2:	230c      	movs	r3, #12
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80042e6:	e01d      	b.n	8004324 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	3301      	adds	r3, #1
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80042f2:	69b9      	ldr	r1, [r7, #24]
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	440b      	add	r3, r1
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80042fc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	3b01      	subs	r3, #1
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004308:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800430a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430c:	3a02      	subs	r2, #2
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004312:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	601a      	str	r2, [r3, #0]
    address--;
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	3b04      	subs	r3, #4
 800431c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	3b04      	subs	r3, #4
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	2b03      	cmp	r3, #3
 8004328:	d8de      	bhi.n	80042e8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004332:	33f8      	adds	r3, #248	@ 0xf8
 8004334:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	7c5b      	ldrb	r3, [r3, #17]
 8004342:	061a      	lsls	r2, r3, #24
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	431a      	orrs	r2, r3
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	7c1b      	ldrb	r3, [r3, #16]
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004360:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8004364:	623b      	str	r3, [r7, #32]
  index = 160;
 8004366:	23a0      	movs	r3, #160	@ 0xa0
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800436a:	e021      	b.n	80043b0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	3301      	adds	r3, #1
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4413      	add	r3, r2
 8004374:	7c1b      	ldrb	r3, [r3, #16]
 8004376:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	440b      	add	r3, r1
 800437e:	3310      	adds	r3, #16
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004384:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	3b01      	subs	r3, #1
 800438a:	69b9      	ldr	r1, [r7, #24]
 800438c:	440b      	add	r3, r1
 800438e:	7c1b      	ldrb	r3, [r3, #16]
 8004390:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004392:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	3a02      	subs	r2, #2
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	440a      	add	r2, r1
 800439c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800439e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	601a      	str	r2, [r3, #0]
    address--;
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	3b04      	subs	r3, #4
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d8da      	bhi.n	800436c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	372c      	adds	r7, #44	@ 0x2c
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	ffff0000 	.word	0xffff0000

080043c8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d108      	bne.n	80043fa <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0208 	orr.w	r2, r2, #8
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	e007      	b.n	800440a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0208 	bic.w	r2, r2, #8
 8004408:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b08      	cmp	r3, #8
 8004474:	d108      	bne.n	8004488 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8004486:	e00d      	b.n	80044a4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d107      	bne.n	80044a4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d125      	bne.n	8004510 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01e      	beq.n	8004510 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff f81b 	bl	8003514 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc ff16 	bl	800131c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d116      	bne.n	800454a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800452a:	2108      	movs	r1, #8
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f988 	bl	8004842 <JPEG_ReadInputData>
 8004532:	e00a      	b.n	800454a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8004542:	2101      	movs	r1, #1
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f97c 	bl	8004842 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004564:	2108      	movs	r1, #8
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f864 	bl	8004634 <JPEG_StoreOutputData>
 800456c:	e00a      	b.n	8004584 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800457c:	2101      	movs	r1, #1
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f858 	bl	8004634 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800458e:	2b20      	cmp	r3, #32
 8004590:	d14b      	bne.n	800462a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d107      	bne.n	80045be <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80045bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69d9      	ldr	r1, [r3, #28]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	461a      	mov	r2, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fc fee5 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d103      	bne.n	8004620 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fc fee3 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
 800461e:	e002      	b.n	8004626 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff f910 	bl	8003846 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	429a      	cmp	r2, r3
 800464e:	d34b      	bcc.n	80046e8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e031      	b.n	80046ba <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	4413      	add	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0a19      	lsrs	r1, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	3301      	adds	r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	b2ca      	uxtb	r2, r1
 8004680:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	0c19      	lsrs	r1, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	3302      	adds	r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	b2ca      	uxtb	r2, r1
 8004694:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	0e19      	lsrs	r1, r3, #24
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	3303      	adds	r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	b2ca      	uxtb	r2, r1
 80046a8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3301      	adds	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3c9      	bcc.n	8004656 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	429a      	cmp	r2, r3
 80046cc:	f040 80b5 	bne.w	800483a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69d9      	ldr	r1, [r3, #28]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	461a      	mov	r2, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fe68 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80046e6:	e0a8      	b.n	800483a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f240 80a2 	bls.w	800483a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e031      	b.n	800476e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	4413      	add	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	0a19      	lsrs	r1, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	3301      	adds	r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	b2ca      	uxtb	r2, r1
 8004734:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	0c19      	lsrs	r1, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	3302      	adds	r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	b2ca      	uxtb	r2, r1
 8004748:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0e19      	lsrs	r1, r3, #24
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	3303      	adds	r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	b2ca      	uxtb	r2, r1
 800475c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3c9      	bcc.n	800470a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	429a      	cmp	r2, r3
 8004780:	d10b      	bne.n	800479a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69d9      	ldr	r1, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	461a      	mov	r2, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fc fe0f 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004798:	e04f      	b.n	800483a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ac:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e015      	b.n	80047e0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	fa22 f103 	lsr.w	r1, r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	4413      	add	r3, r2
 80047cc:	b2ca      	uxtb	r2, r1
 80047ce:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3301      	adds	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d3e5      	bcc.n	80047b4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69d9      	ldr	r1, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	461a      	mov	r2, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fddc 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f1c3 0304 	rsb	r3, r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e013      	b.n	8004834 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	fa22 f103 	lsr.w	r1, r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	4413      	add	r3, r2
 8004820:	b2ca      	uxtb	r2, r1
 8004822:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3301      	adds	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d9e8      	bls.n	800480c <JPEG_StoreOutputData+0x1d8>
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b088      	sub	sp, #32
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <JPEG_ReadInputData+0x1c>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800485e:	2101      	movs	r1, #1
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fe ff74 	bl	800374e <HAL_JPEG_Pause>
 8004866:	e028      	b.n	80048ba <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	429a      	cmp	r2, r3
 8004872:	d906      	bls.n	8004882 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e01b      	b.n	80048ba <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	429a      	cmp	r2, r3
 800488c:	d115      	bne.n	80048ba <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7fc fd4d 	bl	8001334 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d905      	bls.n	80048ae <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	f023 0203 	bic.w	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 809f 	bne.w	8004a06 <JPEG_ReadInputData+0x1c4>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 809b 	beq.w	8004a06 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d335      	bcc.n	800494a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e02d      	b.n	8004940 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004904:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6999      	ldr	r1, [r3, #24]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3302      	adds	r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004916:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3303      	adds	r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800492c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	3301      	adds	r3, #1
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3cd      	bcc.n	80048e4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8004948:	e05d      	b.n	8004a06 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d035      	beq.n	80049bc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e02d      	b.n	80049b2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004976:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6999      	ldr	r1, [r3, #24]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3302      	adds	r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004988:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3303      	adds	r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800499e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	1d1a      	adds	r2, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3cd      	bcc.n	8004956 <JPEG_ReadInputData+0x114>
}
 80049ba:	e024      	b.n	8004a06 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e017      	b.n	80049f6 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4413      	add	r3, r2
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3e3      	bcc.n	80049c6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004a06:	bf00      	nop
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d125      	bne.n	8004a6e <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fe fd6c 	bl	8003514 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fc fc67 	bl	800131c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d039      	beq.n	8004af0 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004ab6:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d104      	bne.n	8004ad0 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f97c 	bl	8004dc8 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d105      	bne.n	8004aea <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f970 	bl	8004dc8 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8004ae8:	e002      	b.n	8004af0 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f804 	bl	8004af8 <JPEG_DMA_EndProcess>
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b10:	1ad2      	subs	r2, r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d10a      	bne.n	8004b38 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69d9      	ldr	r1, [r3, #28]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc fc3f 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d134      	bne.n	8004bb0 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69d9      	ldr	r1, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	461a      	mov	r2, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc fc29 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d103      	bne.n	8004ba8 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fc fc1f 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8004ba6:	e00c      	b.n	8004bc2 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fe fe4c 	bl	8003846 <HAL_JPEG_EncodeCpltCallback>
}
 8004bae:	e008      	b.n	8004bc2 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f804 	bl	8004bca <JPEG_DMA_PollResidualData>
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e04f      	b.n	8004c78 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d146      	bne.n	8004c72 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d03f      	beq.n	8004c72 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf8:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	4413      	add	r3, r2
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	0a19      	lsrs	r1, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	3301      	adds	r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	b2ca      	uxtb	r2, r1
 8004c1c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	0c19      	lsrs	r1, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	b2ca      	uxtb	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	0e19      	lsrs	r1, r3, #24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	3303      	adds	r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	b2ca      	uxtb	r2, r1
 8004c44:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d10a      	bne.n	8004c72 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	461a      	mov	r2, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fba2 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ac      	bne.n	8004bd8 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <JPEG_DMA_PollResidualData+0xd2>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d133      	bne.n	8004d04 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc fb76 	bl	80013b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd4:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d103      	bne.n	8004cfe <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fb74 	bl	80013e4 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8004cfc:	e002      	b.n	8004d04 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fe fda1 	bl	8003846 <HAL_JPEG_EncodeCpltCallback>
}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b08b      	sub	sp, #44	@ 0x2c
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3350      	adds	r3, #80	@ 0x50
 8004d1e:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d24:	e042      	b.n	8004dac <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e033      	b.n	8004d9a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d103      	bne.n	8004d4e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	3364      	adds	r3, #100	@ 0x64
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4c:	e022      	b.n	8004d94 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2264      	movs	r2, #100	@ 0x64
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d5a:	6a38      	ldr	r0, [r7, #32]
 8004d5c:	69f9      	ldr	r1, [r7, #28]
 8004d5e:	4401      	add	r1, r0
 8004d60:	4818      	ldr	r0, [pc, #96]	@ (8004dc4 <JPEG_GetQuality+0xb8>)
 8004d62:	5c41      	ldrb	r1, [r0, r1]
 8004d64:	440a      	add	r2, r1
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b64      	cmp	r3, #100	@ 0x64
 8004d72:	d807      	bhi.n	8004d84 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7e:	4413      	add	r3, r2
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d82:	e007      	b.n	8004d94 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d90:	4413      	add	r3, r2
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d9c8      	bls.n	8004d32 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	3304      	adds	r3, #4
 8004da4:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	3304      	adds	r3, #4
 8004daa:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2b3c      	cmp	r3, #60	@ 0x3c
 8004db0:	d9b9      	bls.n	8004d26 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	099b      	lsrs	r3, r3, #6
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	372c      	adds	r7, #44	@ 0x2c
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	0800fa1c 	.word	0x0800fa1c

08004dc8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e017      	b.n	8004e0a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d004      	beq.n	8004df0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2280      	movs	r2, #128	@ 0x80
 8004dea:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e00c      	b.n	8004e0a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e20:	4b29      	ldr	r3, [pc, #164]	@ (8004ec8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	2b06      	cmp	r3, #6
 8004e2a:	d00a      	beq.n	8004e42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e2c:	4b26      	ldr	r3, [pc, #152]	@ (8004ec8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e040      	b.n	8004ec0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e03e      	b.n	8004ec0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e42:	4b21      	ldr	r3, [pc, #132]	@ (8004ec8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004e4a:	491f      	ldr	r1, [pc, #124]	@ (8004ec8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e52:	f7fd fba5 	bl	80025a0 <HAL_GetTick>
 8004e56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e58:	e009      	b.n	8004e6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e5a:	f7fd fba1 	bl	80025a0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e68:	d901      	bls.n	8004e6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e028      	b.n	8004ec0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7a:	d1ee      	bne.n	8004e5a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b1e      	cmp	r3, #30
 8004e80:	d008      	beq.n	8004e94 <HAL_PWREx_ConfigSupply+0x7c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e86:	d005      	beq.n	8004e94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b1d      	cmp	r3, #29
 8004e8c:	d002      	beq.n	8004e94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b2d      	cmp	r3, #45	@ 0x2d
 8004e92:	d114      	bne.n	8004ebe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e94:	f7fd fb84 	bl	80025a0 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e9a:	e009      	b.n	8004eb0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e9c:	f7fd fb80 	bl	80025a0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eaa:	d901      	bls.n	8004eb0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004eb0:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebc:	d1ee      	bne.n	8004e9c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	58024800 	.word	0x58024800

08004ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	@ 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f000 bc48 	b.w	8005770 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8088 	beq.w	8004ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eee:	4b99      	ldr	r3, [pc, #612]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ef8:	4b96      	ldr	r3, [pc, #600]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d007      	beq.n	8004f14 <HAL_RCC_OscConfig+0x48>
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	2b18      	cmp	r3, #24
 8004f08:	d111      	bne.n	8004f2e <HAL_RCC_OscConfig+0x62>
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d10c      	bne.n	8004f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	4b8f      	ldr	r3, [pc, #572]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d06d      	beq.n	8004ffc <HAL_RCC_OscConfig+0x130>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d169      	bne.n	8004ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f000 bc21 	b.w	8005770 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x7a>
 8004f38:	4b86      	ldr	r3, [pc, #536]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a85      	ldr	r2, [pc, #532]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e02e      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x9c>
 8004f4e:	4b81      	ldr	r3, [pc, #516]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a80      	ldr	r2, [pc, #512]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b7e      	ldr	r3, [pc, #504]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7d      	ldr	r2, [pc, #500]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0xc0>
 8004f72:	4b78      	ldr	r3, [pc, #480]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a77      	ldr	r2, [pc, #476]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b75      	ldr	r3, [pc, #468]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a74      	ldr	r2, [pc, #464]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0xd8>
 8004f8c:	4b71      	ldr	r3, [pc, #452]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a70      	ldr	r2, [pc, #448]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b6e      	ldr	r3, [pc, #440]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd faf8 	bl	80025a0 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fd faf4 	bl	80025a0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	@ 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e3d4      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fc6:	4b63      	ldr	r3, [pc, #396]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xe8>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fd fae4 	bl	80025a0 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fd fae0 	bl	80025a0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	@ 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e3c0      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fee:	4b59      	ldr	r3, [pc, #356]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x110>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80ca 	beq.w	80051a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500c:	4b51      	ldr	r3, [pc, #324]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005014:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005016:	4b4f      	ldr	r3, [pc, #316]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_RCC_OscConfig+0x166>
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b18      	cmp	r3, #24
 8005026:	d156      	bne.n	80050d6 <HAL_RCC_OscConfig+0x20a>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d151      	bne.n	80050d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005032:	4b48      	ldr	r3, [pc, #288]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_RCC_OscConfig+0x17e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e392      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800504a:	4b42      	ldr	r3, [pc, #264]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 0219 	bic.w	r2, r3, #25
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	493f      	ldr	r1, [pc, #252]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd faa0 	bl	80025a0 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fd fa9c 	bl	80025a0 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e37c      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005076:	4b37      	ldr	r3, [pc, #220]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005082:	f7fd fabd 	bl	8002600 <HAL_GetREVID>
 8005086:	4603      	mov	r3, r0
 8005088:	f241 0203 	movw	r2, #4099	@ 0x1003
 800508c:	4293      	cmp	r3, r2
 800508e:	d817      	bhi.n	80050c0 <HAL_RCC_OscConfig+0x1f4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d108      	bne.n	80050aa <HAL_RCC_OscConfig+0x1de>
 8005098:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050a8:	e07a      	b.n	80051a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	031b      	lsls	r3, r3, #12
 80050b8:	4926      	ldr	r1, [pc, #152]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050be:	e06f      	b.n	80051a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c0:	4b24      	ldr	r3, [pc, #144]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	4921      	ldr	r1, [pc, #132]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050d4:	e064      	b.n	80051a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d047      	beq.n	800516e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050de:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 0219 	bic.w	r2, r3, #25
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	491a      	ldr	r1, [pc, #104]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd fa56 	bl	80025a0 <HAL_GetTick>
 80050f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f8:	f7fd fa52 	bl	80025a0 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e332      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800510a:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	f7fd fa73 	bl	8002600 <HAL_GetREVID>
 800511a:	4603      	mov	r3, r0
 800511c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005120:	4293      	cmp	r3, r2
 8005122:	d819      	bhi.n	8005158 <HAL_RCC_OscConfig+0x28c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	d108      	bne.n	800513e <HAL_RCC_OscConfig+0x272>
 800512c:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005134:	4a07      	ldr	r2, [pc, #28]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8005136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513a:	6053      	str	r3, [r2, #4]
 800513c:	e030      	b.n	80051a0 <HAL_RCC_OscConfig+0x2d4>
 800513e:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	031b      	lsls	r3, r3, #12
 800514c:	4901      	ldr	r1, [pc, #4]	@ (8005154 <HAL_RCC_OscConfig+0x288>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
 8005152:	e025      	b.n	80051a0 <HAL_RCC_OscConfig+0x2d4>
 8005154:	58024400 	.word	0x58024400
 8005158:	4b9a      	ldr	r3, [pc, #616]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	4997      	ldr	r1, [pc, #604]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
 800516c:	e018      	b.n	80051a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b95      	ldr	r3, [pc, #596]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a94      	ldr	r2, [pc, #592]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fd fa11 	bl	80025a0 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005182:	f7fd fa0d 	bl	80025a0 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e2ed      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005194:	4b8b      	ldr	r3, [pc, #556]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f0      	bne.n	8005182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a9 	beq.w	8005300 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ae:	4b85      	ldr	r3, [pc, #532]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051b8:	4b82      	ldr	r3, [pc, #520]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d007      	beq.n	80051d4 <HAL_RCC_OscConfig+0x308>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b18      	cmp	r3, #24
 80051c8:	d13a      	bne.n	8005240 <HAL_RCC_OscConfig+0x374>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d135      	bne.n	8005240 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051d4:	4b7b      	ldr	r3, [pc, #492]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_RCC_OscConfig+0x320>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2b80      	cmp	r3, #128	@ 0x80
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e2c1      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ec:	f7fd fa08 	bl	8002600 <HAL_GetREVID>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d817      	bhi.n	800522a <HAL_RCC_OscConfig+0x35e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d108      	bne.n	8005214 <HAL_RCC_OscConfig+0x348>
 8005202:	4b70      	ldr	r3, [pc, #448]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800520a:	4a6e      	ldr	r2, [pc, #440]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800520c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005210:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005212:	e075      	b.n	8005300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005214:	4b6b      	ldr	r3, [pc, #428]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	069b      	lsls	r3, r3, #26
 8005222:	4968      	ldr	r1, [pc, #416]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005228:	e06a      	b.n	8005300 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800522a:	4b66      	ldr	r3, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	4962      	ldr	r1, [pc, #392]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800523e:	e05f      	b.n	8005300 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d042      	beq.n	80052ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005248:	4b5e      	ldr	r3, [pc, #376]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5d      	ldr	r2, [pc, #372]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800524e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fd f9a4 	bl	80025a0 <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800525c:	f7fd f9a0 	bl	80025a0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e280      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800526e:	4b55      	ldr	r3, [pc, #340]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800527a:	f7fd f9c1 	bl	8002600 <HAL_GetREVID>
 800527e:	4603      	mov	r3, r0
 8005280:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005284:	4293      	cmp	r3, r2
 8005286:	d817      	bhi.n	80052b8 <HAL_RCC_OscConfig+0x3ec>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	2b20      	cmp	r3, #32
 800528e:	d108      	bne.n	80052a2 <HAL_RCC_OscConfig+0x3d6>
 8005290:	4b4c      	ldr	r3, [pc, #304]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005298:	4a4a      	ldr	r2, [pc, #296]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800529a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800529e:	6053      	str	r3, [r2, #4]
 80052a0:	e02e      	b.n	8005300 <HAL_RCC_OscConfig+0x434>
 80052a2:	4b48      	ldr	r3, [pc, #288]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	069b      	lsls	r3, r3, #26
 80052b0:	4944      	ldr	r1, [pc, #272]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
 80052b6:	e023      	b.n	8005300 <HAL_RCC_OscConfig+0x434>
 80052b8:	4b42      	ldr	r3, [pc, #264]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	493f      	ldr	r1, [pc, #252]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60cb      	str	r3, [r1, #12]
 80052cc:	e018      	b.n	8005300 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052ce:	4b3d      	ldr	r3, [pc, #244]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a3c      	ldr	r2, [pc, #240]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fd f961 	bl	80025a0 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052e2:	f7fd f95d 	bl	80025a0 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e23d      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052f4:	4b33      	ldr	r3, [pc, #204]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d036      	beq.n	800537a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005314:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005318:	4a2a      	ldr	r2, [pc, #168]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fd f93e 	bl	80025a0 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005328:	f7fd f93a 	bl	80025a0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e21a      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800533a:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800533c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x45c>
 8005346:	e018      	b.n	800537a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005348:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534c:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fd f924 	bl	80025a0 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535c:	f7fd f920 	bl	80025a0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e200      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800536e:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d039      	beq.n	80053fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01c      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a0c      	ldr	r2, [pc, #48]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 8005394:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005398:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800539a:	f7fd f901 	bl	80025a0 <HAL_GetTick>
 800539e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a2:	f7fd f8fd 	bl	80025a0 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e1dd      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053b4:	4b03      	ldr	r3, [pc, #12]	@ (80053c4 <HAL_RCC_OscConfig+0x4f8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x4d6>
 80053c0:	e01b      	b.n	80053fa <HAL_RCC_OscConfig+0x52e>
 80053c2:	bf00      	nop
 80053c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053c8:	4b9b      	ldr	r3, [pc, #620]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a9a      	ldr	r2, [pc, #616]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80053ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053d4:	f7fd f8e4 	bl	80025a0 <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053dc:	f7fd f8e0 	bl	80025a0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e1c0      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053ee:	4b92      	ldr	r3, [pc, #584]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8081 	beq.w	800550a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005408:	4b8c      	ldr	r3, [pc, #560]	@ (800563c <HAL_RCC_OscConfig+0x770>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a8b      	ldr	r2, [pc, #556]	@ (800563c <HAL_RCC_OscConfig+0x770>)
 800540e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005414:	f7fd f8c4 	bl	80025a0 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541c:	f7fd f8c0 	bl	80025a0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	@ 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e1a0      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542e:	4b83      	ldr	r3, [pc, #524]	@ (800563c <HAL_RCC_OscConfig+0x770>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x584>
 8005442:	4b7d      	ldr	r3, [pc, #500]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	4a7c      	ldr	r2, [pc, #496]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	6713      	str	r3, [r2, #112]	@ 0x70
 800544e:	e02d      	b.n	80054ac <HAL_RCC_OscConfig+0x5e0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10c      	bne.n	8005472 <HAL_RCC_OscConfig+0x5a6>
 8005458:	4b77      	ldr	r3, [pc, #476]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545c:	4a76      	ldr	r2, [pc, #472]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	6713      	str	r3, [r2, #112]	@ 0x70
 8005464:	4b74      	ldr	r3, [pc, #464]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005468:	4a73      	ldr	r2, [pc, #460]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800546a:	f023 0304 	bic.w	r3, r3, #4
 800546e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005470:	e01c      	b.n	80054ac <HAL_RCC_OscConfig+0x5e0>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b05      	cmp	r3, #5
 8005478:	d10c      	bne.n	8005494 <HAL_RCC_OscConfig+0x5c8>
 800547a:	4b6f      	ldr	r3, [pc, #444]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547e:	4a6e      	ldr	r2, [pc, #440]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005480:	f043 0304 	orr.w	r3, r3, #4
 8005484:	6713      	str	r3, [r2, #112]	@ 0x70
 8005486:	4b6c      	ldr	r3, [pc, #432]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	4a6b      	ldr	r2, [pc, #428]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	6713      	str	r3, [r2, #112]	@ 0x70
 8005492:	e00b      	b.n	80054ac <HAL_RCC_OscConfig+0x5e0>
 8005494:	4b68      	ldr	r3, [pc, #416]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005498:	4a67      	ldr	r2, [pc, #412]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a0:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80054a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a4:	4a64      	ldr	r2, [pc, #400]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80054a6:	f023 0304 	bic.w	r3, r3, #4
 80054aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d015      	beq.n	80054e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fd f874 	bl	80025a0 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054ba:	e00a      	b.n	80054d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054bc:	f7fd f870 	bl	80025a0 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e14e      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d2:	4b59      	ldr	r3, [pc, #356]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0ee      	beq.n	80054bc <HAL_RCC_OscConfig+0x5f0>
 80054de:	e014      	b.n	800550a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fd f85e 	bl	80025a0 <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054e6:	e00a      	b.n	80054fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e8:	f7fd f85a 	bl	80025a0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e138      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1ee      	bne.n	80054e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 812d 	beq.w	800576e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005514:	4b48      	ldr	r3, [pc, #288]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800551c:	2b18      	cmp	r3, #24
 800551e:	f000 80bd 	beq.w	800569c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	2b02      	cmp	r3, #2
 8005528:	f040 809e 	bne.w	8005668 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552c:	4b42      	ldr	r3, [pc, #264]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a41      	ldr	r2, [pc, #260]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fd f832 	bl	80025a0 <HAL_GetTick>
 800553c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005540:	f7fd f82e 	bl	80025a0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e10e      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005552:	4b39      	ldr	r3, [pc, #228]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800555e:	4b36      	ldr	r3, [pc, #216]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005562:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_RCC_OscConfig+0x774>)
 8005564:	4013      	ands	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800556e:	0112      	lsls	r2, r2, #4
 8005570:	430a      	orrs	r2, r1
 8005572:	4931      	ldr	r1, [pc, #196]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	628b      	str	r3, [r1, #40]	@ 0x28
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	3b01      	subs	r3, #1
 800557e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005586:	3b01      	subs	r3, #1
 8005588:	025b      	lsls	r3, r3, #9
 800558a:	b29b      	uxth	r3, r3
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	061b      	lsls	r3, r3, #24
 80055a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055a8:	4923      	ldr	r1, [pc, #140]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055ae:	4b22      	ldr	r3, [pc, #136]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	4a21      	ldr	r2, [pc, #132]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055be:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <HAL_RCC_OscConfig+0x778>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	491b      	ldr	r1, [pc, #108]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	f023 020c 	bic.w	r2, r3, #12
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	4917      	ldr	r1, [pc, #92]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055e0:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	f023 0202 	bic.w	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ec:	4912      	ldr	r1, [pc, #72]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055f2:	4b11      	ldr	r3, [pc, #68]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	4a10      	ldr	r2, [pc, #64]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	4a0d      	ldr	r2, [pc, #52]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005608:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800560a:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	4a0a      	ldr	r2, [pc, #40]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005616:	4b08      	ldr	r3, [pc, #32]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	4a07      	ldr	r2, [pc, #28]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005622:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a04      	ldr	r2, [pc, #16]	@ (8005638 <HAL_RCC_OscConfig+0x76c>)
 8005628:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800562c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562e:	f7fc ffb7 	bl	80025a0 <HAL_GetTick>
 8005632:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005634:	e011      	b.n	800565a <HAL_RCC_OscConfig+0x78e>
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
 800563c:	58024800 	.word	0x58024800
 8005640:	fffffc0c 	.word	0xfffffc0c
 8005644:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fc ffaa 	bl	80025a0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e08a      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800565a:	4b47      	ldr	r3, [pc, #284]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x77c>
 8005666:	e082      	b.n	800576e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005668:	4b43      	ldr	r3, [pc, #268]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a42      	ldr	r2, [pc, #264]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 800566e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc ff94 	bl	80025a0 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fc ff90 	bl	80025a0 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e070      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800568e:	4b3a      	ldr	r3, [pc, #232]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x7b0>
 800569a:	e068      	b.n	800576e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800569c:	4b36      	ldr	r3, [pc, #216]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056a2:	4b35      	ldr	r3, [pc, #212]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d031      	beq.n	8005714 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d12a      	bne.n	8005714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d122      	bne.n	8005714 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d11a      	bne.n	8005714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	0a5b      	lsrs	r3, r3, #9
 80056e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d111      	bne.n	8005714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d108      	bne.n	8005714 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	0e1b      	lsrs	r3, r3, #24
 8005706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e02b      	b.n	8005770 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005718:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005722:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d01f      	beq.n	800576e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800572e:	4b12      	ldr	r3, [pc, #72]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	4a11      	ldr	r2, [pc, #68]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800573a:	f7fc ff31 	bl	80025a0 <HAL_GetTick>
 800573e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005740:	bf00      	nop
 8005742:	f7fc ff2d 	bl	80025a0 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	4293      	cmp	r3, r2
 800574c:	d0f9      	beq.n	8005742 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800574e:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 8005750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005752:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <HAL_RCC_OscConfig+0x8b0>)
 8005754:	4013      	ands	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800575a:	00d2      	lsls	r2, r2, #3
 800575c:	4906      	ldr	r1, [pc, #24]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 800575e:	4313      	orrs	r3, r2
 8005760:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005762:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <HAL_RCC_OscConfig+0x8ac>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3730      	adds	r7, #48	@ 0x30
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	58024400 	.word	0x58024400
 800577c:	ffff0007 	.word	0xffff0007

08005780 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e19c      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005794:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d910      	bls.n	80057c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b87      	ldr	r3, [pc, #540]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 020f 	bic.w	r2, r3, #15
 80057aa:	4985      	ldr	r1, [pc, #532]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	4b83      	ldr	r3, [pc, #524]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e184      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d010      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	4b7b      	ldr	r3, [pc, #492]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057dc:	429a      	cmp	r2, r3
 80057de:	d908      	bls.n	80057f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057e0:	4b78      	ldr	r3, [pc, #480]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	4975      	ldr	r1, [pc, #468]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d010      	beq.n	8005820 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	4b70      	ldr	r3, [pc, #448]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800580a:	429a      	cmp	r2, r3
 800580c:	d908      	bls.n	8005820 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800580e:	4b6d      	ldr	r3, [pc, #436]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	496a      	ldr	r1, [pc, #424]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800581c:	4313      	orrs	r3, r2
 800581e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d010      	beq.n	800584e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	4b64      	ldr	r3, [pc, #400]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005838:	429a      	cmp	r2, r3
 800583a:	d908      	bls.n	800584e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800583c:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	495e      	ldr	r1, [pc, #376]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800584a:	4313      	orrs	r3, r2
 800584c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	4b59      	ldr	r3, [pc, #356]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005866:	429a      	cmp	r2, r3
 8005868:	d908      	bls.n	800587c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800586a:	4b56      	ldr	r3, [pc, #344]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4953      	ldr	r1, [pc, #332]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005878:	4313      	orrs	r3, r2
 800587a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	4b4d      	ldr	r3, [pc, #308]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	429a      	cmp	r2, r3
 8005896:	d908      	bls.n	80058aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f023 020f 	bic.w	r2, r3, #15
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4947      	ldr	r1, [pc, #284]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d055      	beq.n	8005962 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058b6:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4940      	ldr	r1, [pc, #256]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d0:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d121      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f6      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e8:	4b36      	ldr	r3, [pc, #216]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d115      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0ea      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005900:	4b30      	ldr	r3, [pc, #192]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0de      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005910:	4b2c      	ldr	r3, [pc, #176]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0d6      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005920:	4b28      	ldr	r3, [pc, #160]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f023 0207 	bic.w	r2, r3, #7
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4925      	ldr	r1, [pc, #148]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800592e:	4313      	orrs	r3, r2
 8005930:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fc fe35 	bl	80025a0 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005938:	e00a      	b.n	8005950 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593a:	f7fc fe31 	bl	80025a0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0be      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005950:	4b1c      	ldr	r3, [pc, #112]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	429a      	cmp	r2, r3
 8005960:	d1eb      	bne.n	800593a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	429a      	cmp	r2, r3
 800597c:	d208      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597e:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f023 020f 	bic.w	r2, r3, #15
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	490e      	ldr	r1, [pc, #56]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800598c:	4313      	orrs	r3, r2
 800598e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d214      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 020f 	bic.w	r2, r3, #15
 80059a6:	4906      	ldr	r1, [pc, #24]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d005      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e086      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
 80059c0:	52002000 	.word	0x52002000
 80059c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d208      	bcs.n	80059f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059e4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	4939      	ldr	r1, [pc, #228]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d208      	bcs.n	8005a24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a12:	4b31      	ldr	r3, [pc, #196]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	492e      	ldr	r1, [pc, #184]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	4b28      	ldr	r3, [pc, #160]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d208      	bcs.n	8005a52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a40:	4b25      	ldr	r3, [pc, #148]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	4922      	ldr	r1, [pc, #136]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d208      	bcs.n	8005a80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4917      	ldr	r1, [pc, #92]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a80:	f000 f89e 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	4912      	ldr	r1, [pc, #72]	@ (8005adc <HAL_RCC_ClockConfig+0x35c>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8005adc <HAL_RCC_ClockConfig+0x35c>)
 8005aa8:	5cd3      	ldrb	r3, [r2, r3]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <HAL_RCC_ClockConfig+0x360>)
 8005ab6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <HAL_RCC_ClockConfig+0x364>)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x368>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fc fd22 	bl	800250c <HAL_InitTick>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	58024400 	.word	0x58024400
 8005adc:	0800f86c 	.word	0x0800f86c
 8005ae0:	24000004 	.word	0x24000004
 8005ae4:	24000000 	.word	0x24000000
 8005ae8:	2400000c 	.word	0x2400000c

08005aec <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	@ 0x30
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d12a      	bne.n	8005b54 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005afe:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b04:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b0e:	4b29      	ldr	r3, [pc, #164]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b22:	2302      	movs	r3, #2
 8005b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b26:	2303      	movs	r3, #3
 8005b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b32:	f107 031c 	add.w	r3, r7, #28
 8005b36:	4619      	mov	r1, r3
 8005b38:	481f      	ldr	r0, [pc, #124]	@ (8005bb8 <HAL_RCC_MCOConfig+0xcc>)
 8005b3a:	f7fd fa59 	bl	8002ff0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	4919      	ldr	r1, [pc, #100]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005b52:	e02a      	b.n	8005baa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b54:	4b17      	ldr	r3, [pc, #92]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b5a:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b5c:	f043 0304 	orr.w	r3, r3, #4
 8005b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b64:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b84:	2300      	movs	r3, #0
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005b88:	f107 031c 	add.w	r3, r7, #28
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	480b      	ldr	r0, [pc, #44]	@ (8005bbc <HAL_RCC_MCOConfig+0xd0>)
 8005b90:	f7fd fa2e 	bl	8002ff0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005b94:	4b07      	ldr	r3, [pc, #28]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	01d9      	lsls	r1, r3, #7
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <HAL_RCC_MCOConfig+0xc8>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	610b      	str	r3, [r1, #16]
}
 8005baa:	bf00      	nop
 8005bac:	3730      	adds	r7, #48	@ 0x30
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	58020000 	.word	0x58020000
 8005bbc:	58020800 	.word	0x58020800

08005bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	@ 0x24
 8005bc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc6:	4bb3      	ldr	r3, [pc, #716]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bce:	2b18      	cmp	r3, #24
 8005bd0:	f200 8155 	bhi.w	8005e7e <HAL_RCC_GetSysClockFreq+0x2be>
 8005bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005e7f 	.word	0x08005e7f
 8005be4:	08005e7f 	.word	0x08005e7f
 8005be8:	08005e7f 	.word	0x08005e7f
 8005bec:	08005e7f 	.word	0x08005e7f
 8005bf0:	08005e7f 	.word	0x08005e7f
 8005bf4:	08005e7f 	.word	0x08005e7f
 8005bf8:	08005e7f 	.word	0x08005e7f
 8005bfc:	08005c67 	.word	0x08005c67
 8005c00:	08005e7f 	.word	0x08005e7f
 8005c04:	08005e7f 	.word	0x08005e7f
 8005c08:	08005e7f 	.word	0x08005e7f
 8005c0c:	08005e7f 	.word	0x08005e7f
 8005c10:	08005e7f 	.word	0x08005e7f
 8005c14:	08005e7f 	.word	0x08005e7f
 8005c18:	08005e7f 	.word	0x08005e7f
 8005c1c:	08005c6d 	.word	0x08005c6d
 8005c20:	08005e7f 	.word	0x08005e7f
 8005c24:	08005e7f 	.word	0x08005e7f
 8005c28:	08005e7f 	.word	0x08005e7f
 8005c2c:	08005e7f 	.word	0x08005e7f
 8005c30:	08005e7f 	.word	0x08005e7f
 8005c34:	08005e7f 	.word	0x08005e7f
 8005c38:	08005e7f 	.word	0x08005e7f
 8005c3c:	08005c73 	.word	0x08005c73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c40:	4b94      	ldr	r3, [pc, #592]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c4c:	4b91      	ldr	r3, [pc, #580]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	4a90      	ldr	r2, [pc, #576]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c5e:	e111      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c60:	4b8d      	ldr	r3, [pc, #564]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c62:	61bb      	str	r3, [r7, #24]
      break;
 8005c64:	e10e      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c66:	4b8d      	ldr	r3, [pc, #564]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c68:	61bb      	str	r3, [r7, #24]
      break;
 8005c6a:	e10b      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c6e:	61bb      	str	r3, [r7, #24]
      break;
 8005c70:	e108      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c72:	4b88      	ldr	r3, [pc, #544]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c7c:	4b85      	ldr	r3, [pc, #532]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c88:	4b82      	ldr	r3, [pc, #520]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c92:	4b80      	ldr	r3, [pc, #512]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80e1 	beq.w	8005e78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	f000 8083 	beq.w	8005dc4 <HAL_RCC_GetSysClockFreq+0x204>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	f200 80a1 	bhi.w	8005e08 <HAL_RCC_GetSysClockFreq+0x248>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x114>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d056      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cd2:	e099      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02d      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	08db      	lsrs	r3, r3, #3
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	4a6b      	ldr	r2, [pc, #428]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0a:	4b62      	ldr	r3, [pc, #392]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d3a:	e087      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b51      	ldr	r3, [pc, #324]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d7e:	e065      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b40      	ldr	r3, [pc, #256]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005da6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dc2:	e043      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005eb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e06:	e021      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005eac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e4c:	4b11      	ldr	r3, [pc, #68]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	0a5b      	lsrs	r3, r3, #9
 8005e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e56:	3301      	adds	r3, #1
 8005e58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e70:	ee17 3a90 	vmov	r3, s15
 8005e74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e76:	e005      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
      break;
 8005e7c:	e002      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e7e:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e80:	61bb      	str	r3, [r7, #24]
      break;
 8005e82:	bf00      	nop
  }

  return sysclockfreq;
 8005e84:	69bb      	ldr	r3, [r7, #24]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3724      	adds	r7, #36	@ 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	003d0900 	.word	0x003d0900
 8005ea0:	017d7840 	.word	0x017d7840
 8005ea4:	46000000 	.word	0x46000000
 8005ea8:	4c742400 	.word	0x4c742400
 8005eac:	4a742400 	.word	0x4a742400
 8005eb0:	4bbebc20 	.word	0x4bbebc20

08005eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005eba:	f7ff fe81 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4b10      	ldr	r3, [pc, #64]	@ (8005f04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	490f      	ldr	r1, [pc, #60]	@ (8005f08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ecc:	5ccb      	ldrb	r3, [r1, r3]
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	4a09      	ldr	r2, [pc, #36]	@ (8005f08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	fa22 f303 	lsr.w	r3, r2, r3
 8005eee:	4a07      	ldr	r2, [pc, #28]	@ (8005f0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005ef0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ef2:	4a07      	ldr	r2, [pc, #28]	@ (8005f10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ef8:	4b04      	ldr	r3, [pc, #16]	@ (8005f0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	58024400 	.word	0x58024400
 8005f08:	0800f86c 	.word	0x0800f86c
 8005f0c:	24000004 	.word	0x24000004
 8005f10:	24000000 	.word	0x24000000

08005f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f18:	f7ff ffcc 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4904      	ldr	r1, [pc, #16]	@ (8005f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	0800f86c 	.word	0x0800f86c

08005f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f44:	f7ff ffb6 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4904      	ldr	r1, [pc, #16]	@ (8005f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	58024400 	.word	0x58024400
 8005f68:	0800f86c 	.word	0x0800f86c

08005f6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b0cc      	sub	sp, #304	@ 0x130
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f90:	2500      	movs	r5, #0
 8005f92:	ea54 0305 	orrs.w	r3, r4, r5
 8005f96:	d049      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fa2:	d02f      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005fa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fa8:	d828      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fae:	d01a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fb4:	d822      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fbe:	d007      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fc0:	e01c      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc2:	4bb8      	ldr	r3, [pc, #736]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	4ab7      	ldr	r2, [pc, #732]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fce:	e01a      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f002 fba1 	bl	8008720 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fe4:	e00f      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fea:	3328      	adds	r3, #40	@ 0x28
 8005fec:	2102      	movs	r1, #2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f002 fc48 	bl	8008884 <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ffa:	e004      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006002:	e000      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006006:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800600e:	4ba5      	ldr	r3, [pc, #660]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006012:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800601a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601c:	4aa1      	ldr	r2, [pc, #644]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800601e:	430b      	orrs	r3, r1
 8006020:	6513      	str	r3, [r2, #80]	@ 0x50
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006028:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800602c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006038:	f04f 0900 	mov.w	r9, #0
 800603c:	ea58 0309 	orrs.w	r3, r8, r9
 8006040:	d047      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006048:	2b04      	cmp	r3, #4
 800604a:	d82a      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006069 	.word	0x08006069
 8006058:	08006077 	.word	0x08006077
 800605c:	0800608d 	.word	0x0800608d
 8006060:	080060ab 	.word	0x080060ab
 8006064:	080060ab 	.word	0x080060ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006068:	4b8e      	ldr	r3, [pc, #568]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	4a8d      	ldr	r2, [pc, #564]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800606e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006074:	e01a      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800607a:	3308      	adds	r3, #8
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f002 fb4e 	bl	8008720 <RCCEx_PLL2_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800608a:	e00f      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800608c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006090:	3328      	adds	r3, #40	@ 0x28
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f002 fbf5 	bl	8008884 <RCCEx_PLL3_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060a0:	e004      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060a8:	e000      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060b4:	4b7b      	ldr	r3, [pc, #492]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b8:	f023 0107 	bic.w	r1, r3, #7
 80060bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c2:	4a78      	ldr	r2, [pc, #480]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80060d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80060de:	f04f 0b00 	mov.w	fp, #0
 80060e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80060e6:	d04c      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80060e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f2:	d030      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80060f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f8:	d829      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80060fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80060fc:	d02d      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006100:	d825      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006102:	2b80      	cmp	r3, #128	@ 0x80
 8006104:	d018      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006106:	2b80      	cmp	r3, #128	@ 0x80
 8006108:	d821      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d007      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006112:	e01c      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006114:	4b63      	ldr	r3, [pc, #396]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	4a62      	ldr	r2, [pc, #392]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006120:	e01c      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006126:	3308      	adds	r3, #8
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f002 faf8 	bl	8008720 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006136:	e011      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613c:	3328      	adds	r3, #40	@ 0x28
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f002 fb9f 	bl	8008884 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800614c:	e006      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006154:	e002      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800615a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006164:	4b4f      	ldr	r3, [pc, #316]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006168:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800616c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006172:	4a4c      	ldr	r2, [pc, #304]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006174:	430b      	orrs	r3, r1
 8006176:	6513      	str	r3, [r2, #80]	@ 0x50
 8006178:	e003      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800617e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800618e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006192:	2300      	movs	r3, #0
 8006194:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006198:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800619c:	460b      	mov	r3, r1
 800619e:	4313      	orrs	r3, r2
 80061a0:	d053      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ae:	d035      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80061b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061b4:	d82e      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061ba:	d031      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80061bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061c0:	d828      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c6:	d01a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80061c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061cc:	d822      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80061d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061d6:	d007      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80061d8:	e01c      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061da:	4b32      	ldr	r3, [pc, #200]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	4a31      	ldr	r2, [pc, #196]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e6:	e01c      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ec:	3308      	adds	r3, #8
 80061ee:	2100      	movs	r1, #0
 80061f0:	4618      	mov	r0, r3
 80061f2:	f002 fa95 	bl	8008720 <RCCEx_PLL2_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061fc:	e011      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006202:	3328      	adds	r3, #40	@ 0x28
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f002 fb3c 	bl	8008884 <RCCEx_PLL3_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006212:	e006      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800621a:	e002      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006222:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10b      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800622a:	4b1e      	ldr	r3, [pc, #120]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800622c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006236:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800623a:	4a1a      	ldr	r2, [pc, #104]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623c:	430b      	orrs	r3, r1
 800623e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006240:	e003      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006242:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006246:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800624a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006256:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800625a:	2300      	movs	r3, #0
 800625c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006260:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d056      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006272:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006276:	d038      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006278:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800627c:	d831      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800627e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006282:	d034      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006284:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006288:	d82b      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800628a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800628e:	d01d      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006294:	d825      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d006      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800629a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80062a0:	e01f      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4ba2      	ldr	r3, [pc, #648]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	4aa1      	ldr	r2, [pc, #644]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b4:	e01c      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ba:	3308      	adds	r3, #8
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f002 fa2e 	bl	8008720 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062ca:	e011      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d0:	3328      	adds	r3, #40	@ 0x28
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f002 fad5 	bl	8008884 <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062f8:	4b8e      	ldr	r3, [pc, #568]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006304:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006308:	4a8a      	ldr	r2, [pc, #552]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6593      	str	r3, [r2, #88]	@ 0x58
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006314:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006324:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800632e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d03a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800633c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800633e:	2b30      	cmp	r3, #48	@ 0x30
 8006340:	d01f      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006342:	2b30      	cmp	r3, #48	@ 0x30
 8006344:	d819      	bhi.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006346:	2b20      	cmp	r3, #32
 8006348:	d00c      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800634a:	2b20      	cmp	r3, #32
 800634c:	d815      	bhi.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d019      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006352:	2b10      	cmp	r3, #16
 8006354:	d111      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006356:	4b77      	ldr	r3, [pc, #476]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	4a76      	ldr	r2, [pc, #472]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800635c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006362:	e011      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006368:	3308      	adds	r3, #8
 800636a:	2102      	movs	r1, #2
 800636c:	4618      	mov	r0, r3
 800636e:	f002 f9d7 	bl	8008720 <RCCEx_PLL2_Config>
 8006372:	4603      	mov	r3, r0
 8006374:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006378:	e006      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006382:	bf00      	nop
 8006384:	e000      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006388:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006390:	4b68      	ldr	r3, [pc, #416]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006394:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639e:	4a65      	ldr	r2, [pc, #404]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80063ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063be:	2300      	movs	r3, #0
 80063c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063c8:	460b      	mov	r3, r1
 80063ca:	4313      	orrs	r3, r2
 80063cc:	d051      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80063ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d8:	d035      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80063da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063de:	d82e      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063e4:	d031      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80063e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ea:	d828      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f0:	d01a      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80063f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f6:	d822      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006400:	d007      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006402:	e01c      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006404:	4b4b      	ldr	r3, [pc, #300]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	4a4a      	ldr	r2, [pc, #296]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800640a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800640e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006410:	e01c      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006416:	3308      	adds	r3, #8
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f002 f980 	bl	8008720 <RCCEx_PLL2_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006426:	e011      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800642c:	3328      	adds	r3, #40	@ 0x28
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f002 fa27 	bl	8008884 <RCCEx_PLL3_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800643c:	e006      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006444:	e002      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800644a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006454:	4b37      	ldr	r3, [pc, #220]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006458:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800645c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006462:	4a34      	ldr	r2, [pc, #208]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006464:	430b      	orrs	r3, r1
 8006466:	6513      	str	r3, [r2, #80]	@ 0x50
 8006468:	e003      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800646e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800647e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006488:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800648c:	460b      	mov	r3, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	d056      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800649c:	d033      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800649e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064a2:	d82c      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064a8:	d02f      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80064aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064ae:	d826      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b4:	d02b      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80064b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064ba:	d820      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c0:	d012      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80064c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c6:	d81a      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d022      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d0:	d115      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064d6:	3308      	adds	r3, #8
 80064d8:	2101      	movs	r1, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f002 f920 	bl	8008720 <RCCEx_PLL2_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064e6:	e015      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ec:	3328      	adds	r3, #40	@ 0x28
 80064ee:	2101      	movs	r1, #1
 80064f0:	4618      	mov	r0, r3
 80064f2:	f002 f9c7 	bl	8008884 <RCCEx_PLL3_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064fc:	e00a      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006504:	e006      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006506:	bf00      	nop
 8006508:	e004      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006514:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10d      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800651e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006520:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800652a:	4a02      	ldr	r2, [pc, #8]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800652c:	430b      	orrs	r3, r1
 800652e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006530:	e006      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800653c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800654c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006550:	2300      	movs	r3, #0
 8006552:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006556:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800655a:	460b      	mov	r3, r1
 800655c:	4313      	orrs	r3, r2
 800655e:	d055      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006560:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800656c:	d033      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800656e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006572:	d82c      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006578:	d02f      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657e:	d826      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006580:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006584:	d02b      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006586:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800658a:	d820      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800658c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006590:	d012      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006596:	d81a      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d022      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800659c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a0:	d115      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065a6:	3308      	adds	r3, #8
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f002 f8b8 	bl	8008720 <RCCEx_PLL2_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065b6:	e015      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065bc:	3328      	adds	r3, #40	@ 0x28
 80065be:	2101      	movs	r1, #1
 80065c0:	4618      	mov	r0, r3
 80065c2:	f002 f95f 	bl	8008884 <RCCEx_PLL3_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065cc:	e00a      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80065d4:	e006      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065d6:	bf00      	nop
 80065d8:	e004      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80065e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065ec:	4bb6      	ldr	r3, [pc, #728]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065fc:	4ab2      	ldr	r2, [pc, #712]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065fe:	430b      	orrs	r3, r1
 8006600:	6593      	str	r3, [r2, #88]	@ 0x58
 8006602:	e003      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006604:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006608:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800660c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006622:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d02a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800662c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006632:	2b00      	cmp	r3, #0
 8006634:	d011      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663a:	d10a      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800663c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006640:	3308      	adds	r3, #8
 8006642:	2101      	movs	r1, #1
 8006644:	4618      	mov	r0, r3
 8006646:	f002 f86b 	bl	8008720 <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8006650:	e004      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800665a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006664:	4b98      	ldr	r3, [pc, #608]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006668:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800666c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006672:	4a95      	ldr	r2, [pc, #596]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006674:	430b      	orrs	r3, r1
 8006676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800667e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800668e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006698:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d037      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ac:	d00e      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80066ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b2:	d816      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d018      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80066b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066bc:	d111      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066be:	4b82      	ldr	r3, [pc, #520]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4a81      	ldr	r2, [pc, #516]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066ca:	e00f      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066d0:	3308      	adds	r3, #8
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f002 f823 	bl	8008720 <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80066ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066f4:	4b74      	ldr	r3, [pc, #464]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006702:	4a71      	ldr	r2, [pc, #452]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6513      	str	r3, [r2, #80]	@ 0x50
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800670e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006712:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800671e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006728:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d03a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006738:	2b03      	cmp	r3, #3
 800673a:	d81d      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006781 	.word	0x08006781
 8006748:	08006755 	.word	0x08006755
 800674c:	08006763 	.word	0x08006763
 8006750:	08006781 	.word	0x08006781
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006754:	4b5c      	ldr	r3, [pc, #368]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	4a5b      	ldr	r2, [pc, #364]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800675a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800675e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006760:	e00f      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006766:	3308      	adds	r3, #8
 8006768:	2102      	movs	r1, #2
 800676a:	4618      	mov	r0, r3
 800676c:	f001 ffd8 	bl	8008720 <RCCEx_PLL2_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006776:	e004      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800677e:	e000      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006782:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800678a:	4b4f      	ldr	r3, [pc, #316]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800678c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800678e:	f023 0103 	bic.w	r1, r3, #3
 8006792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006798:	4a4b      	ldr	r2, [pc, #300]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800679a:	430b      	orrs	r3, r1
 800679c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800679e:	e003      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067b8:	2300      	movs	r3, #0
 80067ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067c2:	460b      	mov	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f000 80a0 	beq.w	800690a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ca:	4b40      	ldr	r3, [pc, #256]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a3f      	ldr	r2, [pc, #252]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d6:	f7fb fee3 	bl	80025a0 <HAL_GetTick>
 80067da:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067de:	e00b      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e0:	f7fb fede 	bl	80025a0 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b64      	cmp	r3, #100	@ 0x64
 80067ee:	d903      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067f6:	e005      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f8:	4b34      	ldr	r3, [pc, #208]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ed      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006804:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d17a      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800680c:	4b2e      	ldr	r3, [pc, #184]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800680e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006818:	4053      	eors	r3, r2
 800681a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681e:	2b00      	cmp	r3, #0
 8006820:	d015      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006822:	4b29      	ldr	r3, [pc, #164]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800682e:	4b26      	ldr	r3, [pc, #152]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006832:	4a25      	ldr	r2, [pc, #148]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006838:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800683a:	4b23      	ldr	r3, [pc, #140]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683e:	4a22      	ldr	r2, [pc, #136]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006844:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006846:	4a20      	ldr	r2, [pc, #128]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006848:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800684c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800684e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006852:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685a:	d118      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fb fea0 	bl	80025a0 <HAL_GetTick>
 8006860:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006864:	e00d      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fb fe9b 	bl	80025a0 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006876:	429a      	cmp	r2, r3
 8006878:	d903      	bls.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006880:	e005      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006882:	4b11      	ldr	r3, [pc, #68]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0eb      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800688e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006892:	2b00      	cmp	r3, #0
 8006894:	d130      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006896:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800689a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800689e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068a6:	d115      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068b8:	091a      	lsrs	r2, r3, #4
 80068ba:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80068bc:	4013      	ands	r3, r2
 80068be:	4a02      	ldr	r2, [pc, #8]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6113      	str	r3, [r2, #16]
 80068c4:	e00c      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
 80068cc:	58024800 	.word	0x58024800
 80068d0:	00ffffcf 	.word	0x00ffffcf
 80068d4:	4bd4      	ldr	r3, [pc, #848]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	4ad3      	ldr	r2, [pc, #844]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068de:	6113      	str	r3, [r2, #16]
 80068e0:	4bd1      	ldr	r3, [pc, #836]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f0:	4acd      	ldr	r2, [pc, #820]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80068f2:	430b      	orrs	r3, r1
 80068f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f6:	e008      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006900:	e003      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006906:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800690a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f002 0301 	and.w	r3, r2, #1
 8006916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800691a:	2300      	movs	r3, #0
 800691c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006920:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006924:	460b      	mov	r3, r1
 8006926:	4313      	orrs	r3, r2
 8006928:	f000 808b 	beq.w	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800692c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006934:	2b28      	cmp	r3, #40	@ 0x28
 8006936:	d86b      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006a19 	.word	0x08006a19
 8006944:	08006a11 	.word	0x08006a11
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	08006a11 	.word	0x08006a11
 8006960:	080069e5 	.word	0x080069e5
 8006964:	08006a11 	.word	0x08006a11
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	08006a11 	.word	0x08006a11
 8006980:	080069fb 	.word	0x080069fb
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a11 	.word	0x08006a11
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a19 	.word	0x08006a19
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	08006a11 	.word	0x08006a11
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a11 	.word	0x08006a11
 80069c8:	08006a11 	.word	0x08006a11
 80069cc:	08006a11 	.word	0x08006a11
 80069d0:	08006a11 	.word	0x08006a11
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a11 	.word	0x08006a11
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006a19 	.word	0x08006a19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069e8:	3308      	adds	r3, #8
 80069ea:	2101      	movs	r1, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fe97 	bl	8008720 <RCCEx_PLL2_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f8:	e00f      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069fe:	3328      	adds	r3, #40	@ 0x28
 8006a00:	2101      	movs	r1, #1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 ff3e 	bl	8008884 <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a22:	4b81      	ldr	r3, [pc, #516]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a32:	4a7d      	ldr	r2, [pc, #500]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f002 0302 	and.w	r3, r2, #2
 8006a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d042      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d825      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a74 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006ac1 	.word	0x08006ac1
 8006a78:	08006a8d 	.word	0x08006a8d
 8006a7c:	08006aa3 	.word	0x08006aa3
 8006a80:	08006ac1 	.word	0x08006ac1
 8006a84:	08006ac1 	.word	0x08006ac1
 8006a88:	08006ac1 	.word	0x08006ac1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a90:	3308      	adds	r3, #8
 8006a92:	2101      	movs	r1, #1
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fe43 	bl	8008720 <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006aa0:	e00f      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aa6:	3328      	adds	r3, #40	@ 0x28
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 feea 	bl	8008884 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aca:	4b57      	ldr	r3, [pc, #348]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ace:	f023 0107 	bic.w	r1, r3, #7
 8006ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ad8:	4a53      	ldr	r2, [pc, #332]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006ada:	430b      	orrs	r3, r1
 8006adc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ade:	e003      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ae4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f002 0304 	and.w	r3, r2, #4
 8006af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006af8:	2300      	movs	r3, #0
 8006afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006afe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	d044      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d825      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006b14:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b69 	.word	0x08006b69
 8006b20:	08006b35 	.word	0x08006b35
 8006b24:	08006b4b 	.word	0x08006b4b
 8006b28:	08006b69 	.word	0x08006b69
 8006b2c:	08006b69 	.word	0x08006b69
 8006b30:	08006b69 	.word	0x08006b69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b38:	3308      	adds	r3, #8
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 fdef 	bl	8008720 <RCCEx_PLL2_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b48:	e00f      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b4e:	3328      	adds	r3, #40	@ 0x28
 8006b50:	2101      	movs	r1, #1
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fe96 	bl	8008884 <RCCEx_PLL3_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b5e:	e004      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10b      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b72:	4b2d      	ldr	r3, [pc, #180]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b76:	f023 0107 	bic.w	r1, r3, #7
 8006b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b82:	4a29      	ldr	r2, [pc, #164]	@ (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b88:	e003      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f002 0320 	and.w	r3, r2, #32
 8006b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bac:	460b      	mov	r3, r1
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	d057      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bbe:	d035      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bc4:	d82c      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bca:	d031      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd0:	d826      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bd6:	d02d      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006bd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bdc:	d820      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be2:	d012      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be8:	d81a      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d024      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bf2:	d115      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 fd8f 	bl	8008720 <RCCEx_PLL2_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c08:	e017      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c0e:	3328      	adds	r3, #40	@ 0x28
 8006c10:	2102      	movs	r1, #2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 fe36 	bl	8008884 <RCCEx_PLL3_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c1e:	e00c      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006c26:	e008      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006c28:	58024400 	.word	0x58024400
        break;
 8006c2c:	bf00      	nop
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c42:	4bc2      	ldr	r3, [pc, #776]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c52:	4abe      	ldr	r2, [pc, #760]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c72:	2300      	movs	r3, #0
 8006c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d055      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c8e:	d033      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006c90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c94:	d82c      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9a:	d02f      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca0:	d826      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006ca2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca6:	d02b      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006ca8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cac:	d820      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb2:	d012      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb8:	d81a      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d022      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc2:	d115      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fd27 	bl	8008720 <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cd8:	e015      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cde:	3328      	adds	r3, #40	@ 0x28
 8006ce0:	2102      	movs	r1, #2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 fdce 	bl	8008884 <RCCEx_PLL3_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cee:	e00a      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006cf6:	e006      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006cf8:	bf00      	nop
 8006cfa:	e004      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006cfc:	bf00      	nop
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d1e:	4a8b      	ldr	r2, [pc, #556]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d24:	e003      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d44:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	d055      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d5a:	d033      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006d5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d60:	d82c      	bhi.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d66:	d02f      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d6c:	d826      	bhi.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d72:	d02b      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006d74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d78:	d820      	bhi.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d7e:	d012      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d84:	d81a      	bhi.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d022      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8e:	d115      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d94:	3308      	adds	r3, #8
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 fcc1 	bl	8008720 <RCCEx_PLL2_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006da4:	e015      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006daa:	3328      	adds	r3, #40	@ 0x28
 8006dac:	2102      	movs	r1, #2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fd68 	bl	8008884 <RCCEx_PLL3_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006dc2:	e006      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e004      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dc8:	bf00      	nop
 8006dca:	e002      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dcc:	bf00      	nop
 8006dce:	e000      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dda:	4b5c      	ldr	r3, [pc, #368]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006de6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dea:	4a58      	ldr	r2, [pc, #352]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df0:	e003      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006df6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f002 0308 	and.w	r3, r2, #8
 8006e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e10:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d01e      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e26:	d10c      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e2c:	3328      	adds	r3, #40	@ 0x28
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 fd27 	bl	8008884 <RCCEx_PLL3_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e42:	4b42      	ldr	r3, [pc, #264]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e52:	4a3e      	ldr	r2, [pc, #248]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 0310 	and.w	r3, r2, #16
 8006e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d01e      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e8a:	3328      	adds	r3, #40	@ 0x28
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fcf8 	bl	8008884 <RCCEx_PLL3_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eb0:	4a26      	ldr	r2, [pc, #152]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ec2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ecc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	d040      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006eda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee2:	d022      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee8:	d81b      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef2:	d00b      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006ef4:	e015      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fc0e 	bl	8008720 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f0a:	e00f      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f10:	3328      	adds	r3, #40	@ 0x28
 8006f12:	2102      	movs	r1, #2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fcb5 	bl	8008884 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10d      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f34:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f38:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f44:	4a01      	ldr	r2, [pc, #4]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f4a:	e005      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006f54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f66:	2300      	movs	r3, #0
 8006f68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d03b      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f80:	d01f      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006f82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f86:	d818      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006f8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f92:	d007      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006f94:	e011      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f96:	4b64      	ldr	r3, [pc, #400]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	4a63      	ldr	r2, [pc, #396]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fa2:	e00f      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fa8:	3328      	adds	r3, #40	@ 0x28
 8006faa:	2101      	movs	r1, #1
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fc69 	bl	8008884 <RCCEx_PLL3_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fb8:	e004      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fcc:	4b56      	ldr	r3, [pc, #344]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fdc:	4a52      	ldr	r2, [pc, #328]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fe2:	e003      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006fe8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006ff8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ffe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007002:	460b      	mov	r3, r1
 8007004:	4313      	orrs	r3, r2
 8007006:	d031      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007016:	d007      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007018:	e011      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701a:	4b43      	ldr	r3, [pc, #268]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	4a42      	ldr	r2, [pc, #264]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007026:	e00e      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800702c:	3308      	adds	r3, #8
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fb75 	bl	8008720 <RCCEx_PLL2_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800703c:	e003      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8007044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007046:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800704e:	4b36      	ldr	r3, [pc, #216]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800705a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705c:	4a32      	ldr	r2, [pc, #200]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800705e:	430b      	orrs	r3, r1
 8007060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007062:	e003      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007068:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800706c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800707a:	2300      	movs	r3, #0
 800707c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800707e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d00c      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800708c:	3328      	adds	r3, #40	@ 0x28
 800708e:	2102      	movs	r1, #2
 8007090:	4618      	mov	r0, r3
 8007092:	f001 fbf7 	bl	8008884 <RCCEx_PLL3_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80070b0:	2300      	movs	r3, #0
 80070b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80070b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070b8:	460b      	mov	r3, r1
 80070ba:	4313      	orrs	r3, r2
 80070bc:	d03a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80070c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ca:	d018      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80070cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070d0:	d811      	bhi.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80070d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d6:	d014      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80070d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070dc:	d80b      	bhi.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e6:	d106      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80070ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070f4:	e008      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80070fc:	e004      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80070fe:	bf00      	nop
 8007100:	e002      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8007106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10d      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007110:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007114:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800711c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007120:	4a01      	ldr	r2, [pc, #4]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8007122:	430b      	orrs	r3, r1
 8007124:	6553      	str	r3, [r2, #84]	@ 0x54
 8007126:	e005      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8007128:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007130:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007140:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007142:	2300      	movs	r3, #0
 8007144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007146:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007150:	4baa      	ldr	r3, [pc, #680]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007154:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800715c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800715e:	4aa7      	ldr	r2, [pc, #668]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007170:	653b      	str	r3, [r7, #80]	@ 0x50
 8007172:	2300      	movs	r3, #0
 8007174:	657b      	str	r3, [r7, #84]	@ 0x54
 8007176:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800717a:	460b      	mov	r3, r1
 800717c:	4313      	orrs	r3, r2
 800717e:	d00a      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007180:	4b9e      	ldr	r3, [pc, #632]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800718c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007190:	4a9a      	ldr	r2, [pc, #616]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8007192:	430b      	orrs	r3, r1
 8007194:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80071a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a4:	2300      	movs	r3, #0
 80071a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071ac:	460b      	mov	r3, r1
 80071ae:	4313      	orrs	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071b2:	4b92      	ldr	r3, [pc, #584]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c0:	4a8e      	ldr	r2, [pc, #568]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071c2:	430b      	orrs	r3, r1
 80071c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d4:	2300      	movs	r3, #0
 80071d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071dc:	460b      	mov	r3, r1
 80071de:	4313      	orrs	r3, r2
 80071e0:	d00e      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071e2:	4b86      	ldr	r3, [pc, #536]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4a85      	ldr	r2, [pc, #532]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071ec:	6113      	str	r3, [r2, #16]
 80071ee:	4b83      	ldr	r3, [pc, #524]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071f0:	6919      	ldr	r1, [r3, #16]
 80071f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071fa:	4a80      	ldr	r2, [pc, #512]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007212:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800721c:	4b77      	ldr	r3, [pc, #476]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800721e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007220:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722a:	4a74      	ldr	r2, [pc, #464]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800722c:	430b      	orrs	r3, r1
 800722e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800723c:	633b      	str	r3, [r7, #48]	@ 0x30
 800723e:	2300      	movs	r3, #0
 8007240:	637b      	str	r3, [r7, #52]	@ 0x34
 8007242:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	d00a      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800724c:	4b6b      	ldr	r3, [pc, #428]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800724e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007250:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725c:	4a67      	ldr	r2, [pc, #412]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800725e:	430b      	orrs	r3, r1
 8007260:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007262:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	2100      	movs	r1, #0
 800726c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007274:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007278:	460b      	mov	r3, r1
 800727a:	4313      	orrs	r3, r2
 800727c:	d011      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007282:	3308      	adds	r3, #8
 8007284:	2100      	movs	r1, #0
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fa4a 	bl	8008720 <RCCEx_PLL2_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8007292:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800729e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	2100      	movs	r1, #0
 80072ac:	6239      	str	r1, [r7, #32]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072b8:	460b      	mov	r3, r1
 80072ba:	4313      	orrs	r3, r2
 80072bc:	d011      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072c2:	3308      	adds	r3, #8
 80072c4:	2101      	movs	r1, #1
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fa2a 	bl	8008720 <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80072d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80072de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	2100      	movs	r1, #0
 80072ec:	61b9      	str	r1, [r7, #24]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072f8:	460b      	mov	r3, r1
 80072fa:	4313      	orrs	r3, r2
 80072fc:	d011      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007302:	3308      	adds	r3, #8
 8007304:	2102      	movs	r1, #2
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fa0a 	bl	8008720 <RCCEx_PLL2_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8007312:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800731e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	2100      	movs	r1, #0
 800732c:	6139      	str	r1, [r7, #16]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007338:	460b      	mov	r3, r1
 800733a:	4313      	orrs	r3, r2
 800733c:	d011      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800733e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007342:	3328      	adds	r3, #40	@ 0x28
 8007344:	2100      	movs	r1, #0
 8007346:	4618      	mov	r0, r3
 8007348:	f001 fa9c 	bl	8008884 <RCCEx_PLL3_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8007352:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800735e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	2100      	movs	r1, #0
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007378:	460b      	mov	r3, r1
 800737a:	4313      	orrs	r3, r2
 800737c:	d011      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800737e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007382:	3328      	adds	r3, #40	@ 0x28
 8007384:	2101      	movs	r1, #1
 8007386:	4618      	mov	r0, r3
 8007388:	f001 fa7c 	bl	8008884 <RCCEx_PLL3_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8007392:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800739e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	2100      	movs	r1, #0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073b8:	460b      	mov	r3, r1
 80073ba:	4313      	orrs	r3, r2
 80073bc:	d011      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073c2:	3328      	adds	r3, #40	@ 0x28
 80073c4:	2102      	movs	r1, #2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fa5c 	bl	8008884 <RCCEx_PLL3_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80073d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80073de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80073e2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e000      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80073f6:	46bd      	mov	sp, r7
 80073f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073fc:	58024400 	.word	0x58024400

08007400 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b090      	sub	sp, #64	@ 0x40
 8007404:	af00      	add	r7, sp, #0
 8007406:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800740a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007412:	430b      	orrs	r3, r1
 8007414:	f040 8094 	bne.w	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007418:	4b9e      	ldr	r3, [pc, #632]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800741a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	2b04      	cmp	r3, #4
 8007426:	f200 8087 	bhi.w	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800742a:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007445 	.word	0x08007445
 8007434:	0800746d 	.word	0x0800746d
 8007438:	08007495 	.word	0x08007495
 800743c:	08007531 	.word	0x08007531
 8007440:	080074bd 	.word	0x080074bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007444:	4b93      	ldr	r3, [pc, #588]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800744c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007450:	d108      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007456:	4618      	mov	r0, r3
 8007458:	f001 f810 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007460:	f000 bd45 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007468:	f000 bd41 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800746c:	4b89      	ldr	r3, [pc, #548]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007478:	d108      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800747a:	f107 0318 	add.w	r3, r7, #24
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fd54 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007488:	f000 bd31 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007490:	f000 bd2d 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007494:	4b7f      	ldr	r3, [pc, #508]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800749c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074a0:	d108      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a2:	f107 030c 	add.w	r3, r7, #12
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fe94 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074b0:	f000 bd1d 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b8:	f000 bd19 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074bc:	4b75      	ldr	r3, [pc, #468]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074c6:	4b73      	ldr	r3, [pc, #460]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d10c      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	08db      	lsrs	r3, r3, #3
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	4a6d      	ldr	r2, [pc, #436]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ea:	e01f      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ec:	4b69      	ldr	r3, [pc, #420]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074f8:	d106      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007500:	d102      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007502:	4b66      	ldr	r3, [pc, #408]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007506:	e011      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007508:	4b62      	ldr	r3, [pc, #392]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007514:	d106      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800751c:	d102      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800751e:	4b60      	ldr	r3, [pc, #384]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007522:	e003      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007528:	f000 bce1 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800752c:	f000 bcdf 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007530:	4b5c      	ldr	r3, [pc, #368]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007534:	f000 bcdb 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753c:	f000 bcd7 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007544:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007548:	430b      	orrs	r3, r1
 800754a:	f040 80ad 	bne.w	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800754e:	4b51      	ldr	r3, [pc, #324]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007552:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007556:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800755e:	d056      	beq.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007566:	f200 8090 	bhi.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	2bc0      	cmp	r3, #192	@ 0xc0
 800756e:	f000 8088 	beq.w	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	2bc0      	cmp	r3, #192	@ 0xc0
 8007576:	f200 8088 	bhi.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	2b80      	cmp	r3, #128	@ 0x80
 800757e:	d032      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	2b80      	cmp	r3, #128	@ 0x80
 8007584:	f200 8081 	bhi.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	2b40      	cmp	r3, #64	@ 0x40
 8007592:	d014      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007594:	e079      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007596:	4b3f      	ldr	r3, [pc, #252]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075a2:	d108      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 ff67 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b2:	f000 bc9c 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ba:	f000 bc98 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075be:	4b35      	ldr	r3, [pc, #212]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ca:	d108      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075cc:	f107 0318 	add.w	r3, r7, #24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fcab 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075da:	f000 bc88 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e2:	f000 bc84 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f2:	d108      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075f4:	f107 030c 	add.w	r3, r7, #12
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fdeb 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007602:	f000 bc74 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760a:	f000 bc70 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800760e:	4b21      	ldr	r3, [pc, #132]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007612:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007618:	4b1e      	ldr	r3, [pc, #120]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b04      	cmp	r3, #4
 8007622:	d10c      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800762a:	4b1a      	ldr	r3, [pc, #104]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	08db      	lsrs	r3, r3, #3
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	4a18      	ldr	r2, [pc, #96]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007636:	fa22 f303 	lsr.w	r3, r2, r3
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800763c:	e01f      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800763e:	4b15      	ldr	r3, [pc, #84]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800764a:	d106      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800764c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007652:	d102      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007654:	4b11      	ldr	r3, [pc, #68]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007658:	e011      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800765a:	4b0e      	ldr	r3, [pc, #56]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007666:	d106      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800766e:	d102      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007670:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007674:	e003      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800767a:	f000 bc38 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800767e:	f000 bc36 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007682:	4b08      	ldr	r3, [pc, #32]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007686:	f000 bc32 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768e:	f000 bc2e 	b.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007692:	bf00      	nop
 8007694:	58024400 	.word	0x58024400
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	017d7840 	.word	0x017d7840
 80076a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80076b0:	430b      	orrs	r3, r1
 80076b2:	f040 809c 	bne.w	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80076b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80076be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076c6:	d054      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ce:	f200 808b 	bhi.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076d8:	f000 8083 	beq.w	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076e2:	f200 8081 	bhi.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ec:	d02f      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f4:	d878      	bhi.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007702:	d012      	beq.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007704:	e070      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007706:	4b8a      	ldr	r3, [pc, #552]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800770e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007712:	d107      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007718:	4618      	mov	r0, r3
 800771a:	f000 feaf 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007722:	e3e4      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007728:	e3e1      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800772a:	4b81      	ldr	r3, [pc, #516]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007736:	d107      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007738:	f107 0318 	add.w	r3, r7, #24
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fbf5 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007746:	e3d2      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800774c:	e3cf      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800774e:	4b78      	ldr	r3, [pc, #480]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775a:	d107      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775c:	f107 030c 	add.w	r3, r7, #12
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fd37 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800776a:	e3c0      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007770:	e3bd      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007772:	4b6f      	ldr	r3, [pc, #444]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800777c:	4b6c      	ldr	r3, [pc, #432]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b04      	cmp	r3, #4
 8007786:	d10c      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800778e:	4b68      	ldr	r3, [pc, #416]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	08db      	lsrs	r3, r3, #3
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	4a66      	ldr	r2, [pc, #408]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800779a:	fa22 f303 	lsr.w	r3, r2, r3
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a0:	e01e      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077a2:	4b63      	ldr	r3, [pc, #396]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ae:	d106      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80077b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077b6:	d102      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077b8:	4b5f      	ldr	r3, [pc, #380]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077bc:	e010      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077be:	4b5c      	ldr	r3, [pc, #368]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ca:	d106      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d2:	d102      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077d4:	4b59      	ldr	r3, [pc, #356]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077d8:	e002      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077de:	e386      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077e0:	e385      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077e2:	4b57      	ldr	r3, [pc, #348]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e6:	e382      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ec:	e37f      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80077f6:	430b      	orrs	r3, r1
 80077f8:	f040 80a7 	bne.w	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007800:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007804:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800780c:	d055      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007814:	f200 8096 	bhi.w	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800781e:	f000 8084 	beq.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007828:	f200 808c 	bhi.w	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007832:	d030      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783a:	f200 8083 	bhi.w	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800784a:	d012      	beq.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800784c:	e07a      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800784e:	4b38      	ldr	r3, [pc, #224]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800785a:	d107      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800785c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fe0b 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786a:	e340      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007870:	e33d      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007872:	4b2f      	ldr	r3, [pc, #188]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800787a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787e:	d107      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007880:	f107 0318 	add.w	r3, r7, #24
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fb51 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788e:	e32e      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007894:	e32b      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007896:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800789e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a2:	d107      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a4:	f107 030c 	add.w	r3, r7, #12
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fc93 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b2:	e31c      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b8:	e319      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d10c      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078d6:	4b16      	ldr	r3, [pc, #88]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	08db      	lsrs	r3, r3, #3
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	4a14      	ldr	r2, [pc, #80]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078e2:	fa22 f303 	lsr.w	r3, r2, r3
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e8:	e01e      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ea:	4b11      	ldr	r3, [pc, #68]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f6:	d106      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078fe:	d102      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007900:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007904:	e010      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007906:	4b0a      	ldr	r3, [pc, #40]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007912:	d106      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800791a:	d102      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800791c:	4b07      	ldr	r3, [pc, #28]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007920:	e002      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007926:	e2e2      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007928:	e2e1      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800792a:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792e:	e2de      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007930:	58024400 	.word	0x58024400
 8007934:	03d09000 	.word	0x03d09000
 8007938:	003d0900 	.word	0x003d0900
 800793c:	017d7840 	.word	0x017d7840
 8007940:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007948:	e2d1      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800794a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007952:	430b      	orrs	r3, r1
 8007954:	f040 809c 	bne.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007958:	4b93      	ldr	r3, [pc, #588]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800795a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007960:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007968:	d054      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007970:	f200 808b 	bhi.w	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007976:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800797a:	f000 8083 	beq.w	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007984:	f200 8081 	bhi.w	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800798e:	d02f      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007996:	d878      	bhi.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a4:	d012      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80079a6:	e070      	b.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079a8:	4b7f      	ldr	r3, [pc, #508]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079b4:	d107      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fd5e 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c4:	e293      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ca:	e290      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079cc:	4b76      	ldr	r3, [pc, #472]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d8:	d107      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079da:	f107 0318 	add.w	r3, r7, #24
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 faa4 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e8:	e281      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ee:	e27e      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079f0:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079fc:	d107      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fbe6 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0c:	e26f      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a12:	e26c      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a14:	4b64      	ldr	r3, [pc, #400]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a1e:	4b62      	ldr	r3, [pc, #392]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d10c      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a30:	4b5d      	ldr	r3, [pc, #372]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	08db      	lsrs	r3, r3, #3
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a42:	e01e      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a44:	4b58      	ldr	r3, [pc, #352]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a50:	d106      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a58:	d102      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a5a:	4b55      	ldr	r3, [pc, #340]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5e:	e010      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a60:	4b51      	ldr	r3, [pc, #324]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a6c:	d106      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a74:	d102      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a76:	4b4f      	ldr	r3, [pc, #316]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7a:	e002      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a80:	e235      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a82:	e234      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a84:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a88:	e231      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8e:	e22e      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a94:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	f040 808f 	bne.w	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a9e:	4b42      	ldr	r3, [pc, #264]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007aae:	d06b      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ab6:	d874      	bhi.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007abe:	d056      	beq.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ac6:	d86c      	bhi.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ace:	d03b      	beq.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ad6:	d864      	bhi.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ade:	d021      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ae6:	d85c      	bhi.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af4:	d004      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007af6:	e054      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007af8:	f7fe fa0c 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 8007afc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007afe:	e1f6      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b00:	4b29      	ldr	r3, [pc, #164]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0e:	f107 0318 	add.w	r3, r7, #24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fa0a 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b1c:	e1e7      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b22:	e1e4      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b24:	4b20      	ldr	r3, [pc, #128]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b30:	d107      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fb4c 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b40:	e1d5      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b46:	e1d2      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b48:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d109      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b54:	4b14      	ldr	r3, [pc, #80]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	08db      	lsrs	r3, r3, #3
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	4a13      	ldr	r2, [pc, #76]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
 8007b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b66:	e1c2      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b6c:	e1bf      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b7a:	d102      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b80:	e1b5      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b86:	e1b2      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b88:	4b07      	ldr	r3, [pc, #28]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b94:	d102      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b96:	4b07      	ldr	r3, [pc, #28]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9a:	e1a8      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba0:	e1a5      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba6:	e1a2      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	03d09000 	.word	0x03d09000
 8007bb0:	003d0900 	.word	0x003d0900
 8007bb4:	017d7840 	.word	0x017d7840
 8007bb8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	d173      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007bc8:	4b9c      	ldr	r3, [pc, #624]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd8:	d02f      	beq.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be0:	d863      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bee:	d012      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bf0:	e05b      	b.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf2:	4b92      	ldr	r3, [pc, #584]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c00:	f107 0318 	add.w	r3, r7, #24
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 f991 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0e:	e16e      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c14:	e16b      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c16:	4b89      	ldr	r3, [pc, #548]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c22:	d107      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c24:	f107 030c 	add.w	r3, r7, #12
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fad3 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c32:	e15c      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e159      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c3a:	4b80      	ldr	r3, [pc, #512]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c44:	4b7d      	ldr	r3, [pc, #500]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d10c      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c56:	4b79      	ldr	r3, [pc, #484]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	08db      	lsrs	r3, r3, #3
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	4a77      	ldr	r2, [pc, #476]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c68:	e01e      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c6a:	4b74      	ldr	r3, [pc, #464]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c76:	d106      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c7e:	d102      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c80:	4b70      	ldr	r3, [pc, #448]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c84:	e010      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c86:	4b6d      	ldr	r3, [pc, #436]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c92:	d106      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c9a:	d102      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ca6:	e122      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ca8:	e121      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cae:	e11e      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	d133      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd2:	d012      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cd4:	e023      	b.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd6:	4b59      	ldr	r3, [pc, #356]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ce2:	d107      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fbc7 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf2:	e0fc      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf8:	e0f9      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfa:	4b50      	ldr	r3, [pc, #320]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d06:	d107      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d08:	f107 0318 	add.w	r3, r7, #24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f90d 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d16:	e0ea      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1c:	e0e7      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d22:	e0e4      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d28:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	f040 808d 	bne.w	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d32:	4b42      	ldr	r3, [pc, #264]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d36:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d42:	d06b      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d4a:	d874      	bhi.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d52:	d056      	beq.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5a:	d86c      	bhi.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d62:	d03b      	beq.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d6a:	d864      	bhi.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d72:	d021      	beq.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d7a:	d85c      	bhi.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d88:	d004      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d8a:	e054      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d8c:	f000 f8b8 	bl	8007f00 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d92:	e0ac      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d94:	4b29      	ldr	r3, [pc, #164]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007da0:	d107      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da2:	f107 0318 	add.w	r3, r7, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f8c0 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db0:	e09d      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db6:	e09a      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007db8:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc6:	f107 030c 	add.w	r3, r7, #12
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fa02 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd4:	e08b      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dda:	e088      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ddc:	4b17      	ldr	r3, [pc, #92]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d109      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007de8:	4b14      	ldr	r3, [pc, #80]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	08db      	lsrs	r3, r3, #3
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	4a13      	ldr	r2, [pc, #76]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dfa:	e078      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e00:	e075      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e02:	4b0e      	ldr	r3, [pc, #56]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0e:	d102      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e14:	e06b      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1a:	e068      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e1c:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e28:	d102      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e2a:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2e:	e05e      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e34:	e05b      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3a:	e058      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e3c:	58024400 	.word	0x58024400
 8007e40:	03d09000 	.word	0x03d09000
 8007e44:	003d0900 	.word	0x003d0900
 8007e48:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e50:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e54:	430b      	orrs	r3, r1
 8007e56:	d148      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e58:	4b27      	ldr	r3, [pc, #156]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e68:	d02a      	beq.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e70:	d838      	bhi.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e7e:	d00d      	beq.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e80:	e030      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e8e:	d102      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e90:	4b1a      	ldr	r3, [pc, #104]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e94:	e02b      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e9a:	e028      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e9c:	4b16      	ldr	r3, [pc, #88]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ea8:	d107      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fae4 	bl	800847c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb8:	e019      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ebe:	e016      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ecc:	d107      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ece:	f107 0318 	add.w	r3, r7, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f82a 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007edc:	e007      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee2:	e004      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee8:	e001      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3740      	adds	r7, #64	@ 0x40
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	017d7840 	.word	0x017d7840

08007f00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f04:	f7fd ffd6 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	4b06      	ldr	r3, [pc, #24]	@ (8007f24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	4904      	ldr	r1, [pc, #16]	@ (8007f28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f16:	5ccb      	ldrb	r3, [r1, r3]
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	58024400 	.word	0x58024400
 8007f28:	0800f86c 	.word	0x0800f86c

08007f2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b089      	sub	sp, #36	@ 0x24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f34:	4ba1      	ldr	r3, [pc, #644]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f3e:	4b9f      	ldr	r3, [pc, #636]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f42:	0b1b      	lsrs	r3, r3, #12
 8007f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f56:	4b99      	ldr	r3, [pc, #612]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5a:	08db      	lsrs	r3, r3, #3
 8007f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	fb02 f303 	mul.w	r3, r2, r3
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8111 	beq.w	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	f000 8083 	beq.w	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	f200 80a1 	bhi.w	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d056      	beq.n	8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f96:	e099      	b.n	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f98:	4b88      	ldr	r3, [pc, #544]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02d      	beq.n	8008000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa4:	4b85      	ldr	r3, [pc, #532]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	4a84      	ldr	r2, [pc, #528]	@ (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fce:	4b7b      	ldr	r3, [pc, #492]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ffe:	e087      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800800e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008012:	4b6a      	ldr	r3, [pc, #424]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008022:	ed97 6a03 	vldr	s12, [r7, #12]
 8008026:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008042:	e065      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b59      	ldr	r3, [pc, #356]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008086:	e043      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b48      	ldr	r3, [pc, #288]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ca:	e021      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b37      	ldr	r3, [pc, #220]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008110:	4b2a      	ldr	r3, [pc, #168]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008114:	0a5b      	lsrs	r3, r3, #9
 8008116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800812a:	edd7 6a07 	vldr	s13, [r7, #28]
 800812e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008136:	ee17 2a90 	vmov	r2, s15
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800813e:	4b1f      	ldr	r3, [pc, #124]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008158:	edd7 6a07 	vldr	s13, [r7, #28]
 800815c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008164:	ee17 2a90 	vmov	r2, s15
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800816c:	4b13      	ldr	r3, [pc, #76]	@ (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	0e1b      	lsrs	r3, r3, #24
 8008172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008186:	edd7 6a07 	vldr	s13, [r7, #28]
 800818a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008192:	ee17 2a90 	vmov	r2, s15
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800819a:	e008      	b.n	80081ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	609a      	str	r2, [r3, #8]
}
 80081ae:	bf00      	nop
 80081b0:	3724      	adds	r7, #36	@ 0x24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	46000000 	.word	0x46000000
 80081c8:	4c742400 	.word	0x4c742400
 80081cc:	4a742400 	.word	0x4a742400
 80081d0:	4bbebc20 	.word	0x4bbebc20

080081d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	@ 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081dc:	4ba1      	ldr	r3, [pc, #644]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081e6:	4b9f      	ldr	r3, [pc, #636]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	0d1b      	lsrs	r3, r3, #20
 80081ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081f2:	4b9c      	ldr	r3, [pc, #624]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081fe:	4b99      	ldr	r3, [pc, #612]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008202:	08db      	lsrs	r3, r3, #3
 8008204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8111 	beq.w	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b02      	cmp	r3, #2
 8008226:	f000 8083 	beq.w	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f200 80a1 	bhi.w	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d056      	beq.n	80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800823e:	e099      	b.n	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008240:	4b88      	ldr	r3, [pc, #544]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02d      	beq.n	80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800824c:	4b85      	ldr	r3, [pc, #532]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	08db      	lsrs	r3, r3, #3
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	4a84      	ldr	r2, [pc, #528]	@ (8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
 800825c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008276:	4b7b      	ldr	r3, [pc, #492]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008286:	ed97 6a03 	vldr	s12, [r7, #12]
 800828a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800828e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082a6:	e087      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b6a      	ldr	r3, [pc, #424]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ea:	e065      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b59      	ldr	r3, [pc, #356]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800832e:	e043      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b48      	ldr	r3, [pc, #288]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008372:	e021      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b37      	ldr	r3, [pc, #220]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083b8:	4b2a      	ldr	r3, [pc, #168]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083bc:	0a5b      	lsrs	r3, r3, #9
 80083be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083de:	ee17 2a90 	vmov	r2, s15
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008400:	edd7 6a07 	vldr	s13, [r7, #28]
 8008404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840c:	ee17 2a90 	vmov	r2, s15
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008414:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800842a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843a:	ee17 2a90 	vmov	r2, s15
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008442:	e008      	b.n	8008456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	609a      	str	r2, [r3, #8]
}
 8008456:	bf00      	nop
 8008458:	3724      	adds	r7, #36	@ 0x24
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	46000000 	.word	0x46000000
 8008470:	4c742400 	.word	0x4c742400
 8008474:	4a742400 	.word	0x4a742400
 8008478:	4bbebc20 	.word	0x4bbebc20

0800847c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	@ 0x24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008484:	4ba0      	ldr	r3, [pc, #640]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800848e:	4b9e      	ldr	r3, [pc, #632]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008492:	091b      	lsrs	r3, r3, #4
 8008494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008498:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800849a:	4b9b      	ldr	r3, [pc, #620]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084a4:	4b98      	ldr	r3, [pc, #608]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	fb02 f303 	mul.w	r3, r2, r3
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8111 	beq.w	80086ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	f000 8083 	beq.w	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	f200 80a1 	bhi.w	800861a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d056      	beq.n	8008592 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084e4:	e099      	b.n	800861a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e6:	4b88      	ldr	r3, [pc, #544]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d02d      	beq.n	800854e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f2:	4b85      	ldr	r3, [pc, #532]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	08db      	lsrs	r3, r3, #3
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	4a83      	ldr	r2, [pc, #524]	@ (800870c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008502:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	ee07 3a90 	vmov	s15, r3
 8008514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851c:	4b7a      	ldr	r3, [pc, #488]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800851e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008524:	ee07 3a90 	vmov	s15, r3
 8008528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008530:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008548:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800854c:	e087      	b.n	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008558:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800855c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008560:	4b69      	ldr	r3, [pc, #420]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008570:	ed97 6a03 	vldr	s12, [r7, #12]
 8008574:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008590:	e065      	b.n	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008718 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a4:	4b58      	ldr	r3, [pc, #352]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085d4:	e043      	b.n	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800871c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e8:	4b47      	ldr	r3, [pc, #284]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008618:	e021      	b.n	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862c:	4b36      	ldr	r3, [pc, #216]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008640:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800865c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800865e:	4b2a      	ldr	r3, [pc, #168]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008662:	0a5b      	lsrs	r3, r3, #9
 8008664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008670:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008678:	edd7 6a07 	vldr	s13, [r7, #28]
 800867c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008684:	ee17 2a90 	vmov	r2, s15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800868c:	4b1e      	ldr	r3, [pc, #120]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800868e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008690:	0c1b      	lsrs	r3, r3, #16
 8008692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b2:	ee17 2a90 	vmov	r2, s15
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086ba:	4b13      	ldr	r3, [pc, #76]	@ (8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086be:	0e1b      	lsrs	r3, r3, #24
 80086c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e0:	ee17 2a90 	vmov	r2, s15
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086e8:	e008      	b.n	80086fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	609a      	str	r2, [r3, #8]
}
 80086fc:	bf00      	nop
 80086fe:	3724      	adds	r7, #36	@ 0x24
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	58024400 	.word	0x58024400
 800870c:	03d09000 	.word	0x03d09000
 8008710:	46000000 	.word	0x46000000
 8008714:	4c742400 	.word	0x4c742400
 8008718:	4a742400 	.word	0x4a742400
 800871c:	4bbebc20 	.word	0x4bbebc20

08008720 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800872e:	4b53      	ldr	r3, [pc, #332]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b03      	cmp	r3, #3
 8008738:	d101      	bne.n	800873e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e099      	b.n	8008872 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800873e:	4b4f      	ldr	r3, [pc, #316]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4e      	ldr	r2, [pc, #312]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008744:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800874a:	f7f9 ff29 	bl	80025a0 <HAL_GetTick>
 800874e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008750:	e008      	b.n	8008764 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008752:	f7f9 ff25 	bl	80025a0 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e086      	b.n	8008872 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008764:	4b45      	ldr	r3, [pc, #276]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f0      	bne.n	8008752 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008770:	4b42      	ldr	r3, [pc, #264]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008774:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	031b      	lsls	r3, r3, #12
 800877e:	493f      	ldr	r1, [pc, #252]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	628b      	str	r3, [r1, #40]	@ 0x28
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	3b01      	subs	r3, #1
 800878a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	3b01      	subs	r3, #1
 8008794:	025b      	lsls	r3, r3, #9
 8008796:	b29b      	uxth	r3, r3
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	3b01      	subs	r3, #1
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087b4:	4931      	ldr	r1, [pc, #196]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087ba:	4b30      	ldr	r3, [pc, #192]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	492d      	ldr	r1, [pc, #180]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087cc:	4b2b      	ldr	r3, [pc, #172]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d0:	f023 0220 	bic.w	r2, r3, #32
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	4928      	ldr	r1, [pc, #160]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087de:	4b27      	ldr	r3, [pc, #156]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	4a26      	ldr	r2, [pc, #152]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087e4:	f023 0310 	bic.w	r3, r3, #16
 80087e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ea:	4b24      	ldr	r3, [pc, #144]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ee:	4b24      	ldr	r3, [pc, #144]	@ (8008880 <RCCEx_PLL2_Config+0x160>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	69d2      	ldr	r2, [r2, #28]
 80087f6:	00d2      	lsls	r2, r2, #3
 80087f8:	4920      	ldr	r1, [pc, #128]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087fe:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	4a1e      	ldr	r2, [pc, #120]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008804:	f043 0310 	orr.w	r3, r3, #16
 8008808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008810:	4b1a      	ldr	r3, [pc, #104]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008814:	4a19      	ldr	r2, [pc, #100]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800881a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800881c:	e00f      	b.n	800883e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d106      	bne.n	8008832 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008824:	4b15      	ldr	r3, [pc, #84]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008828:	4a14      	ldr	r2, [pc, #80]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 800882a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800882e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008830:	e005      	b.n	800883e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008832:	4b12      	ldr	r3, [pc, #72]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008836:	4a11      	ldr	r2, [pc, #68]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800883c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800883e:	4b0f      	ldr	r3, [pc, #60]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a0e      	ldr	r2, [pc, #56]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008844:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884a:	f7f9 fea9 	bl	80025a0 <HAL_GetTick>
 800884e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008850:	e008      	b.n	8008864 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008852:	f7f9 fea5 	bl	80025a0 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d901      	bls.n	8008864 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e006      	b.n	8008872 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008864:	4b05      	ldr	r3, [pc, #20]	@ (800887c <RCCEx_PLL2_Config+0x15c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0f0      	beq.n	8008852 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	58024400 	.word	0x58024400
 8008880:	ffff0007 	.word	0xffff0007

08008884 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008892:	4b53      	ldr	r3, [pc, #332]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	2b03      	cmp	r3, #3
 800889c:	d101      	bne.n	80088a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e099      	b.n	80089d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088a2:	4b4f      	ldr	r3, [pc, #316]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a4e      	ldr	r2, [pc, #312]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ae:	f7f9 fe77 	bl	80025a0 <HAL_GetTick>
 80088b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088b4:	e008      	b.n	80088c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088b6:	f7f9 fe73 	bl	80025a0 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e086      	b.n	80089d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088c8:	4b45      	ldr	r3, [pc, #276]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f0      	bne.n	80088b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088d4:	4b42      	ldr	r3, [pc, #264]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	051b      	lsls	r3, r3, #20
 80088e2:	493f      	ldr	r1, [pc, #252]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	025b      	lsls	r3, r3, #9
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	3b01      	subs	r3, #1
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	3b01      	subs	r3, #1
 8008912:	061b      	lsls	r3, r3, #24
 8008914:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008918:	4931      	ldr	r1, [pc, #196]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800891a:	4313      	orrs	r3, r2
 800891c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800891e:	4b30      	ldr	r3, [pc, #192]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008922:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	492d      	ldr	r1, [pc, #180]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008930:	4b2b      	ldr	r3, [pc, #172]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008934:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	4928      	ldr	r1, [pc, #160]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008942:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	4a26      	ldr	r2, [pc, #152]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800894c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800894e:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008952:	4b24      	ldr	r3, [pc, #144]	@ (80089e4 <RCCEx_PLL3_Config+0x160>)
 8008954:	4013      	ands	r3, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	69d2      	ldr	r2, [r2, #28]
 800895a:	00d2      	lsls	r2, r2, #3
 800895c:	4920      	ldr	r1, [pc, #128]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008962:	4b1f      	ldr	r3, [pc, #124]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	4a1e      	ldr	r2, [pc, #120]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800896c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d106      	bne.n	8008982 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008974:	4b1a      	ldr	r3, [pc, #104]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008978:	4a19      	ldr	r2, [pc, #100]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800897a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800897e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008980:	e00f      	b.n	80089a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d106      	bne.n	8008996 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008988:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	4a14      	ldr	r2, [pc, #80]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800898e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008994:	e005      	b.n	80089a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008996:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 8008998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899a:	4a11      	ldr	r2, [pc, #68]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 800899c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089a2:	4b0f      	ldr	r3, [pc, #60]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a0e      	ldr	r2, [pc, #56]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ae:	f7f9 fdf7 	bl	80025a0 <HAL_GetTick>
 80089b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089b4:	e008      	b.n	80089c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089b6:	f7f9 fdf3 	bl	80025a0 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e006      	b.n	80089d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <RCCEx_PLL3_Config+0x15c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	58024400 	.word	0x58024400
 80089e4:	ffff0007 	.word	0xffff0007

080089e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	@ 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e075      	b.n	8008ae6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d105      	bne.n	8008a12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7f9 fb39 	bl	8002084 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2204      	movs	r2, #4
 8008a16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f868 	bl	8008af0 <HAL_SD_InitCard>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e05d      	b.n	8008ae6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008a2a:	f107 0308 	add.w	r3, r7, #8
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fdaf 	bl	8009594 <HAL_SD_GetCardStatus>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e052      	b.n	8008ae6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a40:	7e3b      	ldrb	r3, [r7, #24]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a46:	7e7b      	ldrb	r3, [r7, #25]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d10a      	bne.n	8008a6a <HAL_SD_Init+0x82>
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <HAL_SD_Init+0x78>
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a66:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a68:	e00b      	b.n	8008a82 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d104      	bne.n	8008a7c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a78:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a7a:	e002      	b.n	8008a82 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fe6d 	bl	8009768 <HAL_SD_ConfigWideBusOperation>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e026      	b.n	8008ae6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008a98:	f7f9 fd82 	bl	80025a0 <HAL_GetTick>
 8008a9c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008a9e:	e011      	b.n	8008ac4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008aa0:	f7f9 fd7e 	bl	80025a0 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d109      	bne.n	8008ac4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ab6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e010      	b.n	8008ae6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 ff61 	bl	800998c <HAL_SD_GetCardState>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d1e7      	bne.n	8008aa0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3728      	adds	r7, #40	@ 0x28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008af0:	b590      	push	{r4, r7, lr}
 8008af2:	b08d      	sub	sp, #52	@ 0x34
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b08:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008b0c:	f04f 0100 	mov.w	r1, #0
 8008b10:	f7fe fc76 	bl	8007400 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b14:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b2a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e070      	b.n	8008c12 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	4a39      	ldr	r2, [pc, #228]	@ (8008c1c <HAL_SD_InitCard+0x12c>)
 8008b36:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3a:	091b      	lsrs	r3, r3, #4
 8008b3c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681c      	ldr	r4, [r3, #0]
 8008b42:	466a      	mov	r2, sp
 8008b44:	f107 0318 	add.w	r3, r7, #24
 8008b48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b50:	f107 030c 	add.w	r3, r7, #12
 8008b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b56:	4620      	mov	r0, r4
 8008b58:	f003 f882 	bl	800bc60 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f003 f8c5 	bl	800bcf0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b76:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008b7e:	4a28      	ldr	r2, [pc, #160]	@ (8008c20 <HAL_SD_InitCard+0x130>)
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b86:	3301      	adds	r3, #1
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7f9 fd15 	bl	80025b8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 ffea 	bl	8009b68 <SD_PowerON>
 8008b94:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e02e      	b.n	8008c12 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 ff09 	bl	80099cc <SD_InitCard>
 8008bba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e01b      	b.n	8008c12 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008be2:	4618      	mov	r0, r3
 8008be4:	f003 f91a 	bl	800be1c <SDMMC_CmdBlockLength>
 8008be8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00f      	beq.n	8008c10 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8008c24 <HAL_SD_InitCard+0x134>)
 8008bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	372c      	adds	r7, #44	@ 0x2c
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd90      	pop	{r4, r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	014f8b59 	.word	0x014f8b59
 8008c20:	00012110 	.word	0x00012110
 8008c24:	1fe00fff 	.word	0x1fe00fff

08008c28 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08c      	sub	sp, #48	@ 0x30
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d107      	bne.n	8008c50 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c44:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e08d      	b.n	8008d6c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	f040 8086 	bne.w	8008d6a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	441a      	add	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d907      	bls.n	8008c82 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c76:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e074      	b.n	8008d6c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2203      	movs	r2, #3
 8008c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	025a      	lsls	r2, r3, #9
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d002      	beq.n	8008cae <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008caa:	025b      	lsls	r3, r3, #9
 8008cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cae:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	025b      	lsls	r3, r3, #9
 8008cb8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cba:	2390      	movs	r3, #144	@ 0x90
 8008cbc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f107 0210 	add.w	r2, r7, #16
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 f875 	bl	800bdc4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ce8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d90a      	bls.n	8008d16 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2282      	movs	r2, #130	@ 0x82
 8008d04:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f003 f8cb 	bl	800bea8 <SDMMC_CmdReadMultiBlock>
 8008d12:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d14:	e009      	b.n	8008d2a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2281      	movs	r2, #129	@ 0x81
 8008d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d22:	4618      	mov	r0, r3
 8008d24:	f003 f89d 	bl	800be62 <SDMMC_CmdReadSingleBlock>
 8008d28:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a0f      	ldr	r2, [pc, #60]	@ (8008d74 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008d36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e00a      	b.n	8008d6c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008d64:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e000      	b.n	8008d6c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008d6a:	2302      	movs	r3, #2
  }
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3730      	adds	r7, #48	@ 0x30
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	1fe00fff 	.word	0x1fe00fff

08008d78 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08c      	sub	sp, #48	@ 0x30
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d107      	bne.n	8008da0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d94:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e08d      	b.n	8008ebc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f040 8086 	bne.w	8008eba <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d907      	bls.n	8008dd2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e074      	b.n	8008ebc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2200      	movs	r2, #0
 8008de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	025a      	lsls	r2, r3, #9
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d002      	beq.n	8008dfe <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	025b      	lsls	r3, r3, #9
 8008dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	025b      	lsls	r3, r3, #9
 8008e08:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e0a:	2390      	movs	r3, #144	@ 0x90
 8008e0c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f107 0210 	add.w	r2, r7, #16
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f002 ffcd 	bl	800bdc4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e38:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2201      	movs	r2, #1
 8008e48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d90a      	bls.n	8008e66 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	22a0      	movs	r2, #160	@ 0xa0
 8008e54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f003 f869 	bl	800bf34 <SDMMC_CmdWriteMultiBlock>
 8008e62:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e64:	e009      	b.n	8008e7a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2290      	movs	r2, #144	@ 0x90
 8008e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e72:	4618      	mov	r0, r3
 8008e74:	f003 f83b 	bl	800beee <SDMMC_CmdWriteSingleBlock>
 8008e78:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d012      	beq.n	8008ea6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008e86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e00a      	b.n	8008ebc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008eba:	2302      	movs	r3, #2
  }
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3730      	adds	r7, #48	@ 0x30
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	1fe00fff 	.word	0x1fe00fff

08008ec8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d008      	beq.n	8008ef6 <HAL_SD_IRQHandler+0x2e>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 f926 	bl	800a140 <SD_Read_IT>
 8008ef4:	e19a      	b.n	800922c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 80ac 	beq.w	800905e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b59      	ldr	r3, [pc, #356]	@ (8009080 <HAL_SD_IRQHandler+0x1b8>)
 8008f1c:	400b      	ands	r3, r1
 8008f1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f3e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d038      	beq.n	8008fbc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <HAL_SD_IRQHandler+0x96>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d011      	beq.n	8008f82 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f003 f80a 	bl	800bf7c <SDMMC_CmdStopTransfer>
 8008f68:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f95b 	bl	8009238 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a3f      	ldr	r2, [pc, #252]	@ (8009084 <HAL_SD_IRQHandler+0x1bc>)
 8008f88:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <HAL_SD_IRQHandler+0xe4>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f003 fcbd 	bl	800c92c <HAL_SD_RxCpltCallback>
 8008fb2:	e13b      	b.n	800922c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f003 fcaf 	bl	800c918 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fba:	e137      	b.n	800922c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 8132 	beq.w	800922c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <HAL_SD_IRQHandler+0x12c>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d011      	beq.n	8009018 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f002 ffbf 	bl	800bf7c <SDMMC_CmdStopTransfer>
 8008ffe:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	431a      	orrs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f910 	bl	8009238 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <HAL_SD_IRQHandler+0x172>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f003 fc6c 	bl	800c918 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d105      	bne.n	8009056 <HAL_SD_IRQHandler+0x18e>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80eb 	beq.w	800922c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f003 fc68 	bl	800c92c <HAL_SD_RxCpltCallback>
}
 800905c:	e0e6      	b.n	800922c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00d      	beq.n	8009088 <HAL_SD_IRQHandler+0x1c0>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f8a8 	bl	800a1cc <SD_Write_IT>
 800907c:	e0d6      	b.n	800922c <HAL_SD_IRQHandler+0x364>
 800907e:	bf00      	nop
 8009080:	ffff3ec5 	.word	0xffff3ec5
 8009084:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 809d 	beq.w	80091d2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d005      	beq.n	80090b2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090aa:	f043 0202 	orr.w	r2, r3, #2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b8:	f003 0308 	and.w	r3, r3, #8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c4:	f043 0208 	orr.w	r2, r3, #8
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090de:	f043 0220 	orr.w	r2, r3, #32
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f8:	f043 0210 	orr.w	r2, r3, #16
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a4b      	ldr	r2, [pc, #300]	@ (8009234 <HAL_SD_IRQHandler+0x36c>)
 8009106:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009116:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009126:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009136:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009146:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4618      	mov	r0, r3
 800914e:	f002 ff15 	bl	800bf7c <SDMMC_CmdStopTransfer>
 8009152:	4602      	mov	r2, r0
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800916c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009176:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f851 	bl	8009238 <HAL_SD_ErrorCallback>
}
 8009196:	e049      	b.n	800922c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d044      	beq.n	800922c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d040      	beq.n	800922c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80091b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2200      	movs	r2, #0
 80091c0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f834 	bl	8009238 <HAL_SD_ErrorCallback>
}
 80091d0:	e02c      	b.n	800922c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d025      	beq.n	800922c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10c      	bne.n	8009212 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 f84a 	bl	800a29c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009208:	e010      	b.n	800922c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 f832 	bl	800a274 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009210:	e00c      	b.n	800922c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 f833 	bl	800a288 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009222:	e003      	b.n	800922c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f81b 	bl	800a260 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800922a:	e7ff      	b.n	800922c <HAL_SD_IRQHandler+0x364>
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	18000f3a 	.word	0x18000f3a

08009238 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800925a:	0f9b      	lsrs	r3, r3, #30
 800925c:	b2da      	uxtb	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009266:	0e9b      	lsrs	r3, r3, #26
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	b2da      	uxtb	r2, r3
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009278:	0e1b      	lsrs	r3, r3, #24
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	b2da      	uxtb	r2, r3
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800928a:	0c1b      	lsrs	r3, r3, #16
 800928c:	b2da      	uxtb	r2, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	b2da      	uxtb	r2, r3
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ac:	0d1b      	lsrs	r3, r3, #20
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092b8:	0c1b      	lsrs	r3, r3, #16
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ca:	0bdb      	lsrs	r3, r3, #15
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092dc:	0b9b      	lsrs	r3, r3, #14
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ee:	0b5b      	lsrs	r3, r3, #13
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009300:	0b1b      	lsrs	r3, r3, #12
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	b2da      	uxtb	r2, r3
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2200      	movs	r2, #0
 8009312:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009318:	2b00      	cmp	r3, #0
 800931a:	d163      	bne.n	80093e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009320:	009a      	lsls	r2, r3, #2
 8009322:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009326:	4013      	ands	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800932c:	0f92      	lsrs	r2, r2, #30
 800932e:	431a      	orrs	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009338:	0edb      	lsrs	r3, r3, #27
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	b2da      	uxtb	r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800934a:	0e1b      	lsrs	r3, r3, #24
 800934c:	b2db      	uxtb	r3, r3
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	b2da      	uxtb	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800935c:	0d5b      	lsrs	r3, r3, #21
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	b2da      	uxtb	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800936e:	0c9b      	lsrs	r3, r3, #18
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	b2da      	uxtb	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009380:	0bdb      	lsrs	r3, r3, #15
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	b2da      	uxtb	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	7e1b      	ldrb	r3, [r3, #24]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	3302      	adds	r3, #2
 80093a4:	2201      	movs	r2, #1
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80093ae:	fb03 f202 	mul.w	r2, r3, r2
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	7a1b      	ldrb	r3, [r3, #8]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 030f 	and.w	r3, r3, #15
 80093c0:	2201      	movs	r2, #1
 80093c2:	409a      	lsls	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80093d0:	0a52      	lsrs	r2, r2, #9
 80093d2:	fb03 f202 	mul.w	r2, r3, r2
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80093e2:	e031      	b.n	8009448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d11d      	bne.n	8009428 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f0:	041b      	lsls	r3, r3, #16
 80093f2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	431a      	orrs	r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	3301      	adds	r3, #1
 8009408:	029a      	lsls	r2, r3, #10
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800941c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	655a      	str	r2, [r3, #84]	@ 0x54
 8009426:	e00f      	b.n	8009448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a58      	ldr	r2, [pc, #352]	@ (8009590 <HAL_SD_GetCardCSD+0x344>)
 800942e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009434:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e09d      	b.n	8009584 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800944c:	0b9b      	lsrs	r3, r3, #14
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	b2da      	uxtb	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800945e:	09db      	lsrs	r3, r3, #7
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009466:	b2da      	uxtb	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	b2da      	uxtb	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009480:	0fdb      	lsrs	r3, r3, #31
 8009482:	b2da      	uxtb	r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800948c:	0f5b      	lsrs	r3, r3, #29
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	b2da      	uxtb	r2, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800949e:	0e9b      	lsrs	r3, r3, #26
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b0:	0d9b      	lsrs	r3, r3, #22
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094c2:	0d5b      	lsrs	r3, r3, #21
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094de:	0c1b      	lsrs	r3, r3, #16
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094f2:	0bdb      	lsrs	r3, r3, #15
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009506:	0b9b      	lsrs	r3, r3, #14
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	b2da      	uxtb	r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800951a:	0b5b      	lsrs	r3, r3, #13
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800952e:	0b1b      	lsrs	r3, r3, #12
 8009530:	b2db      	uxtb	r3, r3
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	b2da      	uxtb	r2, r3
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009542:	0a9b      	lsrs	r3, r3, #10
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	b2da      	uxtb	r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	1fe00fff 	.word	0x1fe00fff

08009594 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b094      	sub	sp, #80	@ 0x50
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d101      	bne.n	80095b4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e0a7      	b.n	8009704 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095b4:	f107 0308 	add.w	r3, r7, #8
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb62 	bl	8009c84 <SD_SendSDStatus>
 80095c0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d011      	beq.n	80095ec <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a4f      	ldr	r2, [pc, #316]	@ (800970c <HAL_SD_GetCardStatus+0x178>)
 80095ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80095ea:	e070      	b.n	80096ce <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	099b      	lsrs	r3, r3, #6
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	095b      	lsrs	r3, r3, #5
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	b29b      	uxth	r3, r3
 8009612:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009616:	b29a      	uxth	r2, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	0e1b      	lsrs	r3, r3, #24
 800961c:	b29b      	uxth	r3, r3
 800961e:	4313      	orrs	r3, r2
 8009620:	b29a      	uxth	r2, r3
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	061a      	lsls	r2, r3, #24
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009632:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	0a1b      	lsrs	r3, r3, #8
 8009638:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800963c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	0e1b      	lsrs	r3, r3, #24
 8009642:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	0a1b      	lsrs	r3, r3, #8
 8009654:	b2da      	uxtb	r2, r3
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	0d1b      	lsrs	r3, r3, #20
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	b2da      	uxtb	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	b29b      	uxth	r3, r3
 8009670:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009674:	b29a      	uxth	r2, r3
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	b29b      	uxth	r3, r3
 800967a:	b2db      	uxtb	r3, r3
 800967c:	b29b      	uxth	r3, r3
 800967e:	4313      	orrs	r3, r2
 8009680:	b29a      	uxth	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	0a9b      	lsrs	r3, r3, #10
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009690:	b2da      	uxtb	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	0a1b      	lsrs	r3, r3, #8
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	091b      	lsrs	r3, r3, #4
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	0e1b      	lsrs	r3, r3, #24
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 fba0 	bl	800be1c <SDMMC_CmdBlockLength>
 80096dc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00d      	beq.n	8009700 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a08      	ldr	r2, [pc, #32]	@ (800970c <HAL_SD_GetCardStatus+0x178>)
 80096ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096f0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009700:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009704:	4618      	mov	r0, r3
 8009706:	3750      	adds	r7, #80	@ 0x50
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	1fe00fff 	.word	0x1fe00fff

08009710 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009768:	b590      	push	{r4, r7, lr}
 800976a:	b08d      	sub	sp, #52	@ 0x34
 800976c:	af02      	add	r7, sp, #8
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2203      	movs	r2, #3
 800977c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009784:	2b03      	cmp	r3, #3
 8009786:	d02e      	beq.n	80097e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800978e:	d106      	bne.n	800979e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009794:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	635a      	str	r2, [r3, #52]	@ 0x34
 800979c:	e029      	b.n	80097f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a4:	d10a      	bne.n	80097bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fb64 	bl	8009e74 <SD_WideBus_Enable>
 80097ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80097ba:	e01a      	b.n	80097f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fba1 	bl	8009f0a <SD_WideBus_Disable>
 80097c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80097d6:	e00c      	b.n	80097f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80097e4:	e005      	b.n	80097f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a5f      	ldr	r2, [pc, #380]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009800:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009808:	e096      	b.n	8009938 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800980a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800980e:	f04f 0100 	mov.w	r1, #0
 8009812:	f7fd fdf5 	bl	8007400 <HAL_RCCEx_GetPeriphCLKFreq>
 8009816:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8083 	beq.w	8009926 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4950      	ldr	r1, [pc, #320]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x218>)
 800983e:	fba1 1303 	umull	r1, r3, r1, r3
 8009842:	0e1b      	lsrs	r3, r3, #24
 8009844:	429a      	cmp	r2, r3
 8009846:	d303      	bcc.n	8009850 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e05a      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009858:	d103      	bne.n	8009862 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	61bb      	str	r3, [r7, #24]
 8009860:	e051      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800986a:	d126      	bne.n	80098ba <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10e      	bne.n	8009892 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	4a43      	ldr	r2, [pc, #268]	@ (8009984 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d906      	bls.n	800988a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	4a40      	ldr	r2, [pc, #256]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009880:	fba2 2303 	umull	r2, r3, r2, r3
 8009884:	0e5b      	lsrs	r3, r3, #25
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	e03d      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e039      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	fbb2 f3f3 	udiv	r3, r2, r3
 800989e:	4a39      	ldr	r2, [pc, #228]	@ (8009984 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d906      	bls.n	80098b2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4a36      	ldr	r2, [pc, #216]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098a8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ac:	0e5b      	lsrs	r3, r3, #25
 80098ae:	61bb      	str	r3, [r7, #24]
 80098b0:	e029      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	e025      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10e      	bne.n	80098e0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	4a30      	ldr	r2, [pc, #192]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d906      	bls.n	80098d8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098ce:	fba2 2303 	umull	r2, r3, r2, r3
 80098d2:	0e1b      	lsrs	r3, r3, #24
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	e016      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e012      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ec:	4a26      	ldr	r2, [pc, #152]	@ (8009988 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d906      	bls.n	8009900 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4a22      	ldr	r2, [pc, #136]	@ (8009980 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098f6:	fba2 2303 	umull	r2, r3, r2, r3
 80098fa:	0e1b      	lsrs	r3, r3, #24
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e002      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	466a      	mov	r2, sp
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009914:	e882 0003 	stmia.w	r2, {r0, r1}
 8009918:	f107 0308 	add.w	r3, r7, #8
 800991c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800991e:	4620      	mov	r0, r4
 8009920:	f002 f99e 	bl	800bc60 <SDMMC_Init>
 8009924:	e008      	b.n	8009938 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800992a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009940:	4618      	mov	r0, r3
 8009942:	f002 fa6b 	bl	800be1c <SDMMC_CmdBlockLength>
 8009946:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00c      	beq.n	8009968 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a0a      	ldr	r2, [pc, #40]	@ (800997c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009954:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	431a      	orrs	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009974:	4618      	mov	r0, r3
 8009976:	372c      	adds	r7, #44	@ 0x2c
 8009978:	46bd      	mov	sp, r7
 800997a:	bd90      	pop	{r4, r7, pc}
 800997c:	1fe00fff 	.word	0x1fe00fff
 8009980:	55e63b89 	.word	0x55e63b89
 8009984:	02faf080 	.word	0x02faf080
 8009988:	017d7840 	.word	0x017d7840

0800998c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009998:	f107 030c 	add.w	r3, r7, #12
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fa40 	bl	8009e24 <SD_SendStatus>
 80099a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	431a      	orrs	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	0a5b      	lsrs	r3, r3, #9
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099c2:	693b      	ldr	r3, [r7, #16]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b090      	sub	sp, #64	@ 0x40
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80099d8:	f7f8 fde2 	bl	80025a0 <HAL_GetTick>
 80099dc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 f995 	bl	800bd12 <SDMMC_GetPowerState>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80099f2:	e0b5      	b.n	8009b60 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d02e      	beq.n	8009a5a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f002 fbe0 	bl	800c1c6 <SDMMC_CmdSendCID>
 8009a06:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <SD_InitCard+0x46>
    {
      return errorstate;
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a10:	e0a6      	b.n	8009b60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f002 f9c0 	bl	800bd9e <SDMMC_GetResponse>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2104      	movs	r1, #4
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f002 f9b7 	bl	800bd9e <SDMMC_GetResponse>
 8009a30:	4602      	mov	r2, r0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2108      	movs	r1, #8
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f002 f9ae 	bl	800bd9e <SDMMC_GetResponse>
 8009a42:	4602      	mov	r2, r0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	210c      	movs	r1, #12
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f002 f9a5 	bl	800bd9e <SDMMC_GetResponse>
 8009a54:	4602      	mov	r2, r0
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d01d      	beq.n	8009a9e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a62:	e019      	b.n	8009a98 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f107 020a 	add.w	r2, r7, #10
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f002 fbe8 	bl	800c244 <SDMMC_CmdSetRelAdd>
 8009a74:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	e06f      	b.n	8009b60 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009a80:	f7f8 fd8e 	bl	80025a0 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d902      	bls.n	8009a98 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009a92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a96:	e063      	b.n	8009b60 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009a98:	897b      	ldrh	r3, [r7, #10]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0e2      	beq.n	8009a64 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d036      	beq.n	8009b14 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009aa6:	897b      	ldrh	r3, [r7, #10]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab6:	041b      	lsls	r3, r3, #16
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f002 fba2 	bl	800c204 <SDMMC_CmdSendCSD>
 8009ac0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_InitCard+0x100>
    {
      return errorstate;
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	e049      	b.n	8009b60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f002 f963 	bl	800bd9e <SDMMC_GetResponse>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f002 f95a 	bl	800bd9e <SDMMC_GetResponse>
 8009aea:	4602      	mov	r2, r0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2108      	movs	r1, #8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 f951 	bl	800bd9e <SDMMC_GetResponse>
 8009afc:	4602      	mov	r2, r0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	210c      	movs	r1, #12
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f002 f948 	bl	800bd9e <SDMMC_GetResponse>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2104      	movs	r1, #4
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f002 f93f 	bl	800bd9e <SDMMC_GetResponse>
 8009b20:	4603      	mov	r3, r0
 8009b22:	0d1a      	lsrs	r2, r3, #20
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fb8c 	bl	800924c <HAL_SD_GetCardCSD>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b3e:	e00f      	b.n	8009b60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b48:	041b      	lsls	r3, r3, #16
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f002 fa51 	bl	800bff4 <SDMMC_CmdSelDesel>
 8009b52:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <SD_InitCard+0x192>
  {
    return errorstate;
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	e000      	b.n	8009b60 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3740      	adds	r7, #64	@ 0x40
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f002 fa5a 	bl	800c03a <SDMMC_CmdGoIdleState>
 8009b86:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	e072      	b.n	8009c78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 fa6d 	bl	800c076 <SDMMC_CmdOperCond>
 8009b9c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ba4:	d10d      	bne.n	8009bc2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f002 fa42 	bl	800c03a <SDMMC_CmdGoIdleState>
 8009bb6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	e05a      	b.n	8009c78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d137      	bne.n	8009c40 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f002 fa6d 	bl	800c0b6 <SDMMC_CmdAppCommand>
 8009bdc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d02d      	beq.n	8009c40 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009be4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009be8:	e046      	b.n	8009c78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2100      	movs	r1, #0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 fa60 	bl	800c0b6 <SDMMC_CmdAppCommand>
 8009bf6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	e03a      	b.n	8009c78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	491e      	ldr	r1, [pc, #120]	@ (8009c80 <SD_PowerON+0x118>)
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f002 fa77 	bl	800c0fc <SDMMC_CmdAppOperCommand>
 8009c0e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c16:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c1a:	e02d      	b.n	8009c78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2100      	movs	r1, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f002 f8bb 	bl	800bd9e <SDMMC_GetResponse>
 8009c28:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	0fdb      	lsrs	r3, r3, #31
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <SD_PowerON+0xce>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <SD_PowerON+0xd0>
 8009c36:	2300      	movs	r3, #0
 8009c38:	613b      	str	r3, [r7, #16]

    count++;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d802      	bhi.n	8009c50 <SD_PowerON+0xe8>
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0cc      	beq.n	8009bea <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d902      	bls.n	8009c60 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c5e:	e00b      	b.n	8009c78 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	c1100000 	.word	0xc1100000

08009c84 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08c      	sub	sp, #48	@ 0x30
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c8e:	f7f8 fc87 	bl	80025a0 <HAL_GetTick>
 8009c92:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f002 f87d 	bl	800bd9e <SDMMC_GetResponse>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009caa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cae:	d102      	bne.n	8009cb6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cb4:	e0b0      	b.n	8009e18 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2140      	movs	r1, #64	@ 0x40
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 f8ad 	bl	800be1c <SDMMC_CmdBlockLength>
 8009cc2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	e0a0      	b.n	8009e18 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cde:	041b      	lsls	r3, r3, #16
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f002 f9e7 	bl	800c0b6 <SDMMC_CmdAppCommand>
 8009ce8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	e08d      	b.n	8009e18 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009d00:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d02:	2340      	movs	r3, #64	@ 0x40
 8009d04:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d06:	2360      	movs	r3, #96	@ 0x60
 8009d08:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d12:	2301      	movs	r3, #1
 8009d14:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f107 0208 	add.w	r2, r7, #8
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 f84f 	bl	800bdc4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f002 facf 	bl	800c2ce <SDMMC_CmdStatusRegister>
 8009d30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d02b      	beq.n	8009d90 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	e069      	b.n	8009e18 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d013      	beq.n	8009d7a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d52:	2300      	movs	r3, #0
 8009d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d56:	e00d      	b.n	8009d74 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 ffa9 	bl	800bcb4 <SDMMC_ReadFIFO>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	601a      	str	r2, [r3, #0]
        pData++;
 8009d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d70:	3301      	adds	r3, #1
 8009d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d76:	2b07      	cmp	r3, #7
 8009d78:	d9ee      	bls.n	8009d58 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d7a:	f7f8 fc11 	bl	80025a0 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d88:	d102      	bne.n	8009d90 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d8e:	e043      	b.n	8009e18 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d96:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0d2      	beq.n	8009d44 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009dac:	2308      	movs	r3, #8
 8009dae:	e033      	b.n	8009e18 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e02a      	b.n	8009e18 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d017      	beq.n	8009e00 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	e021      	b.n	8009e18 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 ff6b 	bl	800bcb4 <SDMMC_ReadFIFO>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	601a      	str	r2, [r3, #0]
    pData++;
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	3304      	adds	r3, #4
 8009de8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dea:	f7f8 fbd9 	bl	80025a0 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df8:	d102      	bne.n	8009e00 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dfa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dfe:	e00b      	b.n	8009e18 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e2      	bne.n	8009dd4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a03      	ldr	r2, [pc, #12]	@ (8009e20 <SD_SendSDStatus+0x19c>)
 8009e14:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3730      	adds	r7, #48	@ 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	18000f3a 	.word	0x18000f3a

08009e24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e38:	e018      	b.n	8009e6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f002 fa1e 	bl	800c288 <SDMMC_CmdSendStatus>
 8009e4c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	e009      	b.n	8009e6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 ff9d 	bl	800bd9e <SDMMC_GetResponse>
 8009e64:	4602      	mov	r2, r0
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	2300      	movs	r3, #0
 8009e82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 ff87 	bl	800bd9e <SDMMC_GetResponse>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e9a:	d102      	bne.n	8009ea2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ea0:	e02f      	b.n	8009f02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ea2:	f107 030c 	add.w	r3, r7, #12
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f879 	bl	8009fa0 <SD_FindSCR>
 8009eae:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	e023      	b.n	8009f02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01c      	beq.n	8009efe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ecc:	041b      	lsls	r3, r3, #16
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	f002 f8f0 	bl	800c0b6 <SDMMC_CmdAppCommand>
 8009ed6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	e00f      	b.n	8009f02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2102      	movs	r1, #2
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 f927 	bl	800c13c <SDMMC_CmdBusWidth>
 8009eee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	e003      	b.n	8009f02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e001      	b.n	8009f02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009efe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	2300      	movs	r3, #0
 8009f18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 ff3c 	bl	800bd9e <SDMMC_GetResponse>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f30:	d102      	bne.n	8009f38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f36:	e02f      	b.n	8009f98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f82e 	bl	8009fa0 <SD_FindSCR>
 8009f44:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	e023      	b.n	8009f98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d01c      	beq.n	8009f94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f002 f8a5 	bl	800c0b6 <SDMMC_CmdAppCommand>
 8009f6c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	e00f      	b.n	8009f98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f002 f8dc 	bl	800c13c <SDMMC_CmdBusWidth>
 8009f84:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	e003      	b.n	8009f98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e001      	b.n	8009f98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f94:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08e      	sub	sp, #56	@ 0x38
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009faa:	f7f8 faf9 	bl	80025a0 <HAL_GetTick>
 8009fae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60bb      	str	r3, [r7, #8]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2108      	movs	r1, #8
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 ff28 	bl	800be1c <SDMMC_CmdBlockLength>
 8009fcc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	e0ad      	b.n	800a134 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe0:	041b      	lsls	r3, r3, #16
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f002 f866 	bl	800c0b6 <SDMMC_CmdAppCommand>
 8009fea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	e09e      	b.n	800a134 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a000:	2330      	movs	r3, #48	@ 0x30
 800a002:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a004:	2302      	movs	r3, #2
 800a006:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a008:	2300      	movs	r3, #0
 800a00a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a00c:	2301      	movs	r3, #1
 800a00e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f107 0210 	add.w	r2, r7, #16
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fed2 	bl	800bdc4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4618      	mov	r0, r3
 800a026:	f002 f8ac 	bl	800c182 <SDMMC_CmdSendSCR>
 800a02a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d027      	beq.n	800a082 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a034:	e07e      	b.n	800a134 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d113      	bne.n	800a06c <SD_FindSCR+0xcc>
 800a044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a046:	2b00      	cmp	r3, #0
 800a048:	d110      	bne.n	800a06c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fe30 	bl	800bcb4 <SDMMC_ReadFIFO>
 800a054:	4603      	mov	r3, r0
 800a056:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fe29 	bl	800bcb4 <SDMMC_ReadFIFO>
 800a062:	4603      	mov	r3, r0
 800a064:	60fb      	str	r3, [r7, #12]
      index++;
 800a066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a068:	3301      	adds	r3, #1
 800a06a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a06c:	f7f8 fa98 	bl	80025a0 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07a:	d102      	bne.n	800a082 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a07c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a080:	e058      	b.n	800a134 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a088:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a08c:	4013      	ands	r3, r2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0d1      	beq.n	800a036 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2208      	movs	r2, #8
 800a0a6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	e043      	b.n	800a134 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e036      	b.n	800a134 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a0dc:	2320      	movs	r3, #32
 800a0de:	e029      	b.n	800a134 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a15      	ldr	r2, [pc, #84]	@ (800a13c <SD_FindSCR+0x19c>)
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	061a      	lsls	r2, r3, #24
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	0a1b      	lsrs	r3, r3, #8
 800a0fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	0e1b      	lsrs	r3, r3, #24
 800a104:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a108:	601a      	str	r2, [r3, #0]
    scr++;
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	3304      	adds	r3, #4
 800a10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	061a      	lsls	r2, r3, #24
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	021b      	lsls	r3, r3, #8
 800a118:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a11c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	0a1b      	lsrs	r3, r3, #8
 800a122:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a126:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	0e1b      	lsrs	r3, r3, #24
 800a12c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a130:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3738      	adds	r7, #56	@ 0x38
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	18000f3a 	.word	0x18000f3a

0800a140 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a152:	2b1f      	cmp	r3, #31
 800a154:	d936      	bls.n	800a1c4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	e027      	b.n	800a1ac <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4618      	mov	r0, r3
 800a162:	f001 fda7 	bl	800bcb4 <SDMMC_ReadFIFO>
 800a166:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3301      	adds	r3, #1
 800a174:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	3301      	adds	r3, #1
 800a184:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	3301      	adds	r3, #1
 800a194:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	0e1b      	lsrs	r3, r3, #24
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	d9d4      	bls.n	800a15c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	f1a3 0220 	sub.w	r2, r3, #32
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a1c4:	bf00      	nop
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	2b1f      	cmp	r3, #31
 800a1e0:	d93a      	bls.n	800a258 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	e02b      	b.n	800a240 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	021a      	lsls	r2, r3, #8
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	3301      	adds	r3, #1
 800a204:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	041a      	lsls	r2, r3, #16
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	3301      	adds	r3, #1
 800a216:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	061a      	lsls	r2, r3, #24
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	3301      	adds	r3, #1
 800a228:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f107 020c 	add.w	r2, r7, #12
 800a232:	4611      	mov	r1, r2
 800a234:	4618      	mov	r0, r3
 800a236:	f001 fd4a 	bl	800bcce <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	3301      	adds	r3, #1
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	2b07      	cmp	r3, #7
 800a244:	d9d0      	bls.n	800a1e8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	f1a3 0220 	sub.w	r2, r3, #32
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	621a      	str	r2, [r3, #32]
  }
}
 800a258:	bf00      	nop
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e10f      	b.n	800a4e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a87      	ldr	r2, [pc, #540]	@ (800a4ec <HAL_SPI_Init+0x23c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d00f      	beq.n	800a2f2 <HAL_SPI_Init+0x42>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a86      	ldr	r2, [pc, #536]	@ (800a4f0 <HAL_SPI_Init+0x240>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00a      	beq.n	800a2f2 <HAL_SPI_Init+0x42>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a84      	ldr	r2, [pc, #528]	@ (800a4f4 <HAL_SPI_Init+0x244>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d005      	beq.n	800a2f2 <HAL_SPI_Init+0x42>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b0f      	cmp	r3, #15
 800a2ec:	d901      	bls.n	800a2f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e0f7      	b.n	800a4e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fbbc 	bl	800aa70 <SPI_GetPacketSize>
 800a2f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a7b      	ldr	r2, [pc, #492]	@ (800a4ec <HAL_SPI_Init+0x23c>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d00c      	beq.n	800a31e <HAL_SPI_Init+0x6e>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a79      	ldr	r2, [pc, #484]	@ (800a4f0 <HAL_SPI_Init+0x240>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d007      	beq.n	800a31e <HAL_SPI_Init+0x6e>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a78      	ldr	r2, [pc, #480]	@ (800a4f4 <HAL_SPI_Init+0x244>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d002      	beq.n	800a31e <HAL_SPI_Init+0x6e>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b08      	cmp	r3, #8
 800a31c:	d811      	bhi.n	800a342 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a322:	4a72      	ldr	r2, [pc, #456]	@ (800a4ec <HAL_SPI_Init+0x23c>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d009      	beq.n	800a33c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a70      	ldr	r2, [pc, #448]	@ (800a4f0 <HAL_SPI_Init+0x240>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d004      	beq.n	800a33c <HAL_SPI_Init+0x8c>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a6f      	ldr	r2, [pc, #444]	@ (800a4f4 <HAL_SPI_Init+0x244>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d104      	bne.n	800a346 <HAL_SPI_Init+0x96>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b10      	cmp	r3, #16
 800a340:	d901      	bls.n	800a346 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e0cd      	b.n	800a4e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7f7 ff28 	bl	80021b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0201 	bic.w	r2, r2, #1
 800a376:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a382:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a38c:	d119      	bne.n	800a3c2 <HAL_SPI_Init+0x112>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a396:	d103      	bne.n	800a3a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d008      	beq.n	800a3b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10c      	bne.n	800a3c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3b0:	d107      	bne.n	800a3c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00f      	beq.n	800a3ee <HAL_SPI_Init+0x13e>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b06      	cmp	r3, #6
 800a3d4:	d90b      	bls.n	800a3ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	e007      	b.n	800a3fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a3fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69da      	ldr	r2, [r3, #28]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a406:	431a      	orrs	r2, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a410:	ea42 0103 	orr.w	r1, r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68da      	ldr	r2, [r3, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a428:	431a      	orrs	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42e:	431a      	orrs	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	431a      	orrs	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	431a      	orrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a45e:	ea42 0103 	orr.w	r1, r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d113      	bne.n	800a49e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a488:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a49c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0201 	bic.w	r2, r2, #1
 800a4ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	40013000 	.word	0x40013000
 800a4f0:	40003800 	.word	0x40003800
 800a4f4:	40003c00 	.word	0x40003c00

0800a4f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af02      	add	r7, sp, #8
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3320      	adds	r3, #32
 800a50e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a510:	f7f8 f846 	bl	80025a0 <HAL_GetTick>
 800a514:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d001      	beq.n	800a526 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a522:	2302      	movs	r3, #2
 800a524:	e1d1      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <HAL_SPI_Transmit+0x3a>
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e1c9      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_SPI_Transmit+0x4c>
 800a540:	2302      	movs	r3, #2
 800a542:	e1c2      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2203      	movs	r2, #3
 800a550:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a59c:	d108      	bne.n	800a5b0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e009      	b.n	800a5c4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a5c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	4b96      	ldr	r3, [pc, #600]	@ (800a824 <HAL_SPI_Transmit+0x32c>)
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	88f9      	ldrh	r1, [r7, #6]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5f0:	d107      	bne.n	800a602 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b0f      	cmp	r3, #15
 800a608:	d947      	bls.n	800a69a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a60a:	e03f      	b.n	800a68c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b02      	cmp	r3, #2
 800a618:	d114      	bne.n	800a644 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a636:	b29b      	uxth	r3, r3
 800a638:	3b01      	subs	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a642:	e023      	b.n	800a68c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a644:	f7f7 ffac 	bl	80025a0 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d803      	bhi.n	800a65c <HAL_SPI_Transmit+0x164>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d102      	bne.n	800a662 <HAL_SPI_Transmit+0x16a>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d114      	bne.n	800a68c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f936 	bl	800a8d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a66e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e11e      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a692:	b29b      	uxth	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1b9      	bne.n	800a60c <HAL_SPI_Transmit+0x114>
 800a698:	e0f1      	b.n	800a87e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	2b07      	cmp	r3, #7
 800a6a0:	f240 80e6 	bls.w	800a870 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6a4:	e05d      	b.n	800a762 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	f003 0302 	and.w	r3, r3, #2
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d132      	bne.n	800a71a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d918      	bls.n	800a6f2 <HAL_SPI_Transmit+0x1fa>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d014      	beq.n	800a6f2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6812      	ldr	r2, [r2, #0]
 800a6d2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	3b02      	subs	r3, #2
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a6f0:	e037      	b.n	800a762 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6f6:	881a      	ldrh	r2, [r3, #0]
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a700:	1c9a      	adds	r2, r3, #2
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	3b01      	subs	r3, #1
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a718:	e023      	b.n	800a762 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a71a:	f7f7 ff41 	bl	80025a0 <HAL_GetTick>
 800a71e:	4602      	mov	r2, r0
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	429a      	cmp	r2, r3
 800a728:	d803      	bhi.n	800a732 <HAL_SPI_Transmit+0x23a>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a730:	d102      	bne.n	800a738 <HAL_SPI_Transmit+0x240>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d114      	bne.n	800a762 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f8cb 	bl	800a8d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a744:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e0b3      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a768:	b29b      	uxth	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d19b      	bne.n	800a6a6 <HAL_SPI_Transmit+0x1ae>
 800a76e:	e086      	b.n	800a87e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d154      	bne.n	800a828 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a784:	b29b      	uxth	r3, r3
 800a786:	2b03      	cmp	r3, #3
 800a788:	d918      	bls.n	800a7bc <HAL_SPI_Transmit+0x2c4>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a78e:	2b40      	cmp	r3, #64	@ 0x40
 800a790:	d914      	bls.n	800a7bc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7a2:	1d1a      	adds	r2, r3, #4
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3b04      	subs	r3, #4
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7ba:	e059      	b.n	800a870 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d917      	bls.n	800a7f8 <HAL_SPI_Transmit+0x300>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d013      	beq.n	800a7f8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7d4:	881a      	ldrh	r2, [r3, #0]
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7de:	1c9a      	adds	r2, r3, #2
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	3b02      	subs	r3, #2
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7f6:	e03b      	b.n	800a870 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3320      	adds	r3, #32
 800a802:	7812      	ldrb	r2, [r2, #0]
 800a804:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a822:	e025      	b.n	800a870 <HAL_SPI_Transmit+0x378>
 800a824:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a828:	f7f7 feba 	bl	80025a0 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	429a      	cmp	r2, r3
 800a836:	d803      	bhi.n	800a840 <HAL_SPI_Transmit+0x348>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83e:	d102      	bne.n	800a846 <HAL_SPI_Transmit+0x34e>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d114      	bne.n	800a870 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 f844 	bl	800a8d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a852:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e02c      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a876:	b29b      	uxth	r3, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f47f af79 	bne.w	800a770 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2200      	movs	r2, #0
 800a886:	2108      	movs	r1, #8
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 f8c3 	bl	800aa14 <SPI_WaitOnFlagUntilTimeout>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d007      	beq.n	800a8a4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a89a:	f043 0220 	orr.w	r2, r3, #32
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f815 	bl	800a8d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e000      	b.n	800a8ca <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop

0800a8d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f042 0208 	orr.w	r2, r2, #8
 800a8f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0210 	orr.w	r2, r2, #16
 800a902:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6919      	ldr	r1, [r3, #16]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	4b3c      	ldr	r3, [pc, #240]	@ (800aa10 <SPI_CloseTransfer+0x13c>)
 800a920:	400b      	ands	r3, r1
 800a922:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a932:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d014      	beq.n	800a96a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00f      	beq.n	800a96a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a950:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f042 0220 	orr.w	r2, r2, #32
 800a968:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b03      	cmp	r3, #3
 800a974:	d014      	beq.n	800a9a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00f      	beq.n	800a9a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a986:	f043 0204 	orr.w	r2, r3, #4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	699a      	ldr	r2, [r3, #24]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a99e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00f      	beq.n	800a9ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9b0:	f043 0201 	orr.w	r2, r3, #1
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	699a      	ldr	r2, [r3, #24]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00f      	beq.n	800a9f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9da:	f043 0208 	orr.w	r2, r3, #8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa04:	bf00      	nop
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	fffffc90 	.word	0xfffffc90

0800aa14 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	603b      	str	r3, [r7, #0]
 800aa20:	4613      	mov	r3, r2
 800aa22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa24:	e010      	b.n	800aa48 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa26:	f7f7 fdbb 	bl	80025a0 <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	683a      	ldr	r2, [r7, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d803      	bhi.n	800aa3e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3c:	d102      	bne.n	800aa44 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e00f      	b.n	800aa68 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	695a      	ldr	r2, [r3, #20]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	4013      	ands	r3, r2
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	bf0c      	ite	eq
 800aa58:	2301      	moveq	r3, #1
 800aa5a:	2300      	movne	r3, #0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	461a      	mov	r2, r3
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d0df      	beq.n	800aa26 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7c:	095b      	lsrs	r3, r3, #5
 800aa7e:	3301      	adds	r3, #1
 800aa80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	3301      	adds	r3, #1
 800aa88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	3307      	adds	r3, #7
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e042      	b.n	800ab3e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7f7 fc00 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2224      	movs	r2, #36	@ 0x24
 800aad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0201 	bic.w	r2, r2, #1
 800aae6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fd91 	bl	800b618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f826 	bl	800ab48 <UART_SetConfig>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d101      	bne.n	800ab06 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e01b      	b.n	800ab3e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 0201 	orr.w	r2, r2, #1
 800ab34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fe10 	bl	800b75c <UART_CheckIdleState>
 800ab3c:	4603      	mov	r3, r0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab4c:	b092      	sub	sp, #72	@ 0x48
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	431a      	orrs	r2, r3
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4bbe      	ldr	r3, [pc, #760]	@ (800ae70 <UART_SetConfig+0x328>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab80:	430b      	orrs	r3, r1
 800ab82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4ab3      	ldr	r2, [pc, #716]	@ (800ae74 <UART_SetConfig+0x32c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d004      	beq.n	800abb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abb0:	4313      	orrs	r3, r2
 800abb2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	4baf      	ldr	r3, [pc, #700]	@ (800ae78 <UART_SetConfig+0x330>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	6812      	ldr	r2, [r2, #0]
 800abc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abc4:	430b      	orrs	r3, r1
 800abc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abce:	f023 010f 	bic.w	r1, r3, #15
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4aa6      	ldr	r2, [pc, #664]	@ (800ae7c <UART_SetConfig+0x334>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d177      	bne.n	800acd8 <UART_SetConfig+0x190>
 800abe8:	4ba5      	ldr	r3, [pc, #660]	@ (800ae80 <UART_SetConfig+0x338>)
 800abea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abf0:	2b28      	cmp	r3, #40	@ 0x28
 800abf2:	d86d      	bhi.n	800acd0 <UART_SetConfig+0x188>
 800abf4:	a201      	add	r2, pc, #4	@ (adr r2, 800abfc <UART_SetConfig+0xb4>)
 800abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfa:	bf00      	nop
 800abfc:	0800aca1 	.word	0x0800aca1
 800ac00:	0800acd1 	.word	0x0800acd1
 800ac04:	0800acd1 	.word	0x0800acd1
 800ac08:	0800acd1 	.word	0x0800acd1
 800ac0c:	0800acd1 	.word	0x0800acd1
 800ac10:	0800acd1 	.word	0x0800acd1
 800ac14:	0800acd1 	.word	0x0800acd1
 800ac18:	0800acd1 	.word	0x0800acd1
 800ac1c:	0800aca9 	.word	0x0800aca9
 800ac20:	0800acd1 	.word	0x0800acd1
 800ac24:	0800acd1 	.word	0x0800acd1
 800ac28:	0800acd1 	.word	0x0800acd1
 800ac2c:	0800acd1 	.word	0x0800acd1
 800ac30:	0800acd1 	.word	0x0800acd1
 800ac34:	0800acd1 	.word	0x0800acd1
 800ac38:	0800acd1 	.word	0x0800acd1
 800ac3c:	0800acb1 	.word	0x0800acb1
 800ac40:	0800acd1 	.word	0x0800acd1
 800ac44:	0800acd1 	.word	0x0800acd1
 800ac48:	0800acd1 	.word	0x0800acd1
 800ac4c:	0800acd1 	.word	0x0800acd1
 800ac50:	0800acd1 	.word	0x0800acd1
 800ac54:	0800acd1 	.word	0x0800acd1
 800ac58:	0800acd1 	.word	0x0800acd1
 800ac5c:	0800acb9 	.word	0x0800acb9
 800ac60:	0800acd1 	.word	0x0800acd1
 800ac64:	0800acd1 	.word	0x0800acd1
 800ac68:	0800acd1 	.word	0x0800acd1
 800ac6c:	0800acd1 	.word	0x0800acd1
 800ac70:	0800acd1 	.word	0x0800acd1
 800ac74:	0800acd1 	.word	0x0800acd1
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800acc1 	.word	0x0800acc1
 800ac80:	0800acd1 	.word	0x0800acd1
 800ac84:	0800acd1 	.word	0x0800acd1
 800ac88:	0800acd1 	.word	0x0800acd1
 800ac8c:	0800acd1 	.word	0x0800acd1
 800ac90:	0800acd1 	.word	0x0800acd1
 800ac94:	0800acd1 	.word	0x0800acd1
 800ac98:	0800acd1 	.word	0x0800acd1
 800ac9c:	0800acc9 	.word	0x0800acc9
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e222      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e21e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e21a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e216      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acc0:	2320      	movs	r3, #32
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e212      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acc8:	2340      	movs	r3, #64	@ 0x40
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e20e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acd0:	2380      	movs	r3, #128	@ 0x80
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e20a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a69      	ldr	r2, [pc, #420]	@ (800ae84 <UART_SetConfig+0x33c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d130      	bne.n	800ad44 <UART_SetConfig+0x1fc>
 800ace2:	4b67      	ldr	r3, [pc, #412]	@ (800ae80 <UART_SetConfig+0x338>)
 800ace4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	2b05      	cmp	r3, #5
 800acec:	d826      	bhi.n	800ad3c <UART_SetConfig+0x1f4>
 800acee:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <UART_SetConfig+0x1ac>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad0d 	.word	0x0800ad0d
 800acf8:	0800ad15 	.word	0x0800ad15
 800acfc:	0800ad1d 	.word	0x0800ad1d
 800ad00:	0800ad25 	.word	0x0800ad25
 800ad04:	0800ad2d 	.word	0x0800ad2d
 800ad08:	0800ad35 	.word	0x0800ad35
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e1ec      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad14:	2304      	movs	r3, #4
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e1e8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e1e4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad24:	2310      	movs	r3, #16
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e1e0      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad2c:	2320      	movs	r3, #32
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e1dc      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad34:	2340      	movs	r3, #64	@ 0x40
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e1d8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad3c:	2380      	movs	r3, #128	@ 0x80
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e1d4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a4f      	ldr	r2, [pc, #316]	@ (800ae88 <UART_SetConfig+0x340>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d130      	bne.n	800adb0 <UART_SetConfig+0x268>
 800ad4e:	4b4c      	ldr	r3, [pc, #304]	@ (800ae80 <UART_SetConfig+0x338>)
 800ad50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad52:	f003 0307 	and.w	r3, r3, #7
 800ad56:	2b05      	cmp	r3, #5
 800ad58:	d826      	bhi.n	800ada8 <UART_SetConfig+0x260>
 800ad5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad60 <UART_SetConfig+0x218>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad79 	.word	0x0800ad79
 800ad64:	0800ad81 	.word	0x0800ad81
 800ad68:	0800ad89 	.word	0x0800ad89
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800ad99 	.word	0x0800ad99
 800ad74:	0800ada1 	.word	0x0800ada1
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e1b6      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad80:	2304      	movs	r3, #4
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e1b2      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad88:	2308      	movs	r3, #8
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e1ae      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad90:	2310      	movs	r3, #16
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e1aa      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e1a6      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ada0:	2340      	movs	r3, #64	@ 0x40
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e1a2      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ada8:	2380      	movs	r3, #128	@ 0x80
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e19e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a35      	ldr	r2, [pc, #212]	@ (800ae8c <UART_SetConfig+0x344>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d130      	bne.n	800ae1c <UART_SetConfig+0x2d4>
 800adba:	4b31      	ldr	r3, [pc, #196]	@ (800ae80 <UART_SetConfig+0x338>)
 800adbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	2b05      	cmp	r3, #5
 800adc4:	d826      	bhi.n	800ae14 <UART_SetConfig+0x2cc>
 800adc6:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <UART_SetConfig+0x284>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800ade5 	.word	0x0800ade5
 800add0:	0800aded 	.word	0x0800aded
 800add4:	0800adf5 	.word	0x0800adf5
 800add8:	0800adfd 	.word	0x0800adfd
 800addc:	0800ae05 	.word	0x0800ae05
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adea:	e180      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e17c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e178      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e174      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae04:	2320      	movs	r3, #32
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e170      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae0c:	2340      	movs	r3, #64	@ 0x40
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e16c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae14:	2380      	movs	r3, #128	@ 0x80
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e168      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a1b      	ldr	r2, [pc, #108]	@ (800ae90 <UART_SetConfig+0x348>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d142      	bne.n	800aeac <UART_SetConfig+0x364>
 800ae26:	4b16      	ldr	r3, [pc, #88]	@ (800ae80 <UART_SetConfig+0x338>)
 800ae28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d838      	bhi.n	800aea4 <UART_SetConfig+0x35c>
 800ae32:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0x2f0>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae59 	.word	0x0800ae59
 800ae40:	0800ae61 	.word	0x0800ae61
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae95 	.word	0x0800ae95
 800ae4c:	0800ae9d 	.word	0x0800ae9d
 800ae50:	2300      	movs	r3, #0
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e14a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae58:	2304      	movs	r3, #4
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e146      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae60:	2308      	movs	r3, #8
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e142      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e13e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae70:	cfff69f3 	.word	0xcfff69f3
 800ae74:	58000c00 	.word	0x58000c00
 800ae78:	11fff4ff 	.word	0x11fff4ff
 800ae7c:	40011000 	.word	0x40011000
 800ae80:	58024400 	.word	0x58024400
 800ae84:	40004400 	.word	0x40004400
 800ae88:	40004800 	.word	0x40004800
 800ae8c:	40004c00 	.word	0x40004c00
 800ae90:	40005000 	.word	0x40005000
 800ae94:	2320      	movs	r3, #32
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9a:	e128      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800ae9c:	2340      	movs	r3, #64	@ 0x40
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea2:	e124      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aea4:	2380      	movs	r3, #128	@ 0x80
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e120      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4acb      	ldr	r2, [pc, #812]	@ (800b1e0 <UART_SetConfig+0x698>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d176      	bne.n	800afa4 <UART_SetConfig+0x45c>
 800aeb6:	4bcb      	ldr	r3, [pc, #812]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aebe:	2b28      	cmp	r3, #40	@ 0x28
 800aec0:	d86c      	bhi.n	800af9c <UART_SetConfig+0x454>
 800aec2:	a201      	add	r2, pc, #4	@ (adr r2, 800aec8 <UART_SetConfig+0x380>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800af6d 	.word	0x0800af6d
 800aecc:	0800af9d 	.word	0x0800af9d
 800aed0:	0800af9d 	.word	0x0800af9d
 800aed4:	0800af9d 	.word	0x0800af9d
 800aed8:	0800af9d 	.word	0x0800af9d
 800aedc:	0800af9d 	.word	0x0800af9d
 800aee0:	0800af9d 	.word	0x0800af9d
 800aee4:	0800af9d 	.word	0x0800af9d
 800aee8:	0800af75 	.word	0x0800af75
 800aeec:	0800af9d 	.word	0x0800af9d
 800aef0:	0800af9d 	.word	0x0800af9d
 800aef4:	0800af9d 	.word	0x0800af9d
 800aef8:	0800af9d 	.word	0x0800af9d
 800aefc:	0800af9d 	.word	0x0800af9d
 800af00:	0800af9d 	.word	0x0800af9d
 800af04:	0800af9d 	.word	0x0800af9d
 800af08:	0800af7d 	.word	0x0800af7d
 800af0c:	0800af9d 	.word	0x0800af9d
 800af10:	0800af9d 	.word	0x0800af9d
 800af14:	0800af9d 	.word	0x0800af9d
 800af18:	0800af9d 	.word	0x0800af9d
 800af1c:	0800af9d 	.word	0x0800af9d
 800af20:	0800af9d 	.word	0x0800af9d
 800af24:	0800af9d 	.word	0x0800af9d
 800af28:	0800af85 	.word	0x0800af85
 800af2c:	0800af9d 	.word	0x0800af9d
 800af30:	0800af9d 	.word	0x0800af9d
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af9d 	.word	0x0800af9d
 800af3c:	0800af9d 	.word	0x0800af9d
 800af40:	0800af9d 	.word	0x0800af9d
 800af44:	0800af9d 	.word	0x0800af9d
 800af48:	0800af8d 	.word	0x0800af8d
 800af4c:	0800af9d 	.word	0x0800af9d
 800af50:	0800af9d 	.word	0x0800af9d
 800af54:	0800af9d 	.word	0x0800af9d
 800af58:	0800af9d 	.word	0x0800af9d
 800af5c:	0800af9d 	.word	0x0800af9d
 800af60:	0800af9d 	.word	0x0800af9d
 800af64:	0800af9d 	.word	0x0800af9d
 800af68:	0800af95 	.word	0x0800af95
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af72:	e0bc      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af74:	2304      	movs	r3, #4
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7a:	e0b8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af7c:	2308      	movs	r3, #8
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af82:	e0b4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af84:	2310      	movs	r3, #16
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e0b0      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af8c:	2320      	movs	r3, #32
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af92:	e0ac      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af94:	2340      	movs	r3, #64	@ 0x40
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e0a8      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800af9c:	2380      	movs	r3, #128	@ 0x80
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e0a4      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a8f      	ldr	r2, [pc, #572]	@ (800b1e8 <UART_SetConfig+0x6a0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d130      	bne.n	800b010 <UART_SetConfig+0x4c8>
 800afae:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800afb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	d826      	bhi.n	800b008 <UART_SetConfig+0x4c0>
 800afba:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <UART_SetConfig+0x478>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd9 	.word	0x0800afd9
 800afc4:	0800afe1 	.word	0x0800afe1
 800afc8:	0800afe9 	.word	0x0800afe9
 800afcc:	0800aff1 	.word	0x0800aff1
 800afd0:	0800aff9 	.word	0x0800aff9
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afde:	e086      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800afe0:	2304      	movs	r3, #4
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e082      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800afe8:	2308      	movs	r3, #8
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e07e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aff0:	2310      	movs	r3, #16
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e07a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800aff8:	2320      	movs	r3, #32
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e076      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b000:	2340      	movs	r3, #64	@ 0x40
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e072      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b008:	2380      	movs	r3, #128	@ 0x80
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e06e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a75      	ldr	r2, [pc, #468]	@ (800b1ec <UART_SetConfig+0x6a4>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d130      	bne.n	800b07c <UART_SetConfig+0x534>
 800b01a:	4b72      	ldr	r3, [pc, #456]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	2b05      	cmp	r3, #5
 800b024:	d826      	bhi.n	800b074 <UART_SetConfig+0x52c>
 800b026:	a201      	add	r2, pc, #4	@ (adr r2, 800b02c <UART_SetConfig+0x4e4>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b04d 	.word	0x0800b04d
 800b034:	0800b055 	.word	0x0800b055
 800b038:	0800b05d 	.word	0x0800b05d
 800b03c:	0800b065 	.word	0x0800b065
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	2300      	movs	r3, #0
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04a:	e050      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b052:	e04c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05a:	e048      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b062:	e044      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b064:	2320      	movs	r3, #32
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e040      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b06c:	2340      	movs	r3, #64	@ 0x40
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e03c      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b074:	2380      	movs	r3, #128	@ 0x80
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07a:	e038      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a5b      	ldr	r2, [pc, #364]	@ (800b1f0 <UART_SetConfig+0x6a8>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d130      	bne.n	800b0e8 <UART_SetConfig+0x5a0>
 800b086:	4b57      	ldr	r3, [pc, #348]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d826      	bhi.n	800b0e0 <UART_SetConfig+0x598>
 800b092:	a201      	add	r2, pc, #4	@ (adr r2, 800b098 <UART_SetConfig+0x550>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b9 	.word	0x0800b0b9
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0d1 	.word	0x0800b0d1
 800b0ac:	0800b0d9 	.word	0x0800b0d9
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b6:	e01a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e016      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e012      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e00e      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e00a      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0d8:	2340      	movs	r3, #64	@ 0x40
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e006      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0e0:	2380      	movs	r3, #128	@ 0x80
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e002      	b.n	800b0ee <UART_SetConfig+0x5a6>
 800b0e8:	2380      	movs	r3, #128	@ 0x80
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1f0 <UART_SetConfig+0x6a8>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	f040 80f8 	bne.w	800b2ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	dc46      	bgt.n	800b190 <UART_SetConfig+0x648>
 800b102:	2b02      	cmp	r3, #2
 800b104:	f2c0 8082 	blt.w	800b20c <UART_SetConfig+0x6c4>
 800b108:	3b02      	subs	r3, #2
 800b10a:	2b1e      	cmp	r3, #30
 800b10c:	d87e      	bhi.n	800b20c <UART_SetConfig+0x6c4>
 800b10e:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <UART_SetConfig+0x5cc>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b197 	.word	0x0800b197
 800b118:	0800b20d 	.word	0x0800b20d
 800b11c:	0800b19f 	.word	0x0800b19f
 800b120:	0800b20d 	.word	0x0800b20d
 800b124:	0800b20d 	.word	0x0800b20d
 800b128:	0800b20d 	.word	0x0800b20d
 800b12c:	0800b1af 	.word	0x0800b1af
 800b130:	0800b20d 	.word	0x0800b20d
 800b134:	0800b20d 	.word	0x0800b20d
 800b138:	0800b20d 	.word	0x0800b20d
 800b13c:	0800b20d 	.word	0x0800b20d
 800b140:	0800b20d 	.word	0x0800b20d
 800b144:	0800b20d 	.word	0x0800b20d
 800b148:	0800b20d 	.word	0x0800b20d
 800b14c:	0800b1bf 	.word	0x0800b1bf
 800b150:	0800b20d 	.word	0x0800b20d
 800b154:	0800b20d 	.word	0x0800b20d
 800b158:	0800b20d 	.word	0x0800b20d
 800b15c:	0800b20d 	.word	0x0800b20d
 800b160:	0800b20d 	.word	0x0800b20d
 800b164:	0800b20d 	.word	0x0800b20d
 800b168:	0800b20d 	.word	0x0800b20d
 800b16c:	0800b20d 	.word	0x0800b20d
 800b170:	0800b20d 	.word	0x0800b20d
 800b174:	0800b20d 	.word	0x0800b20d
 800b178:	0800b20d 	.word	0x0800b20d
 800b17c:	0800b20d 	.word	0x0800b20d
 800b180:	0800b20d 	.word	0x0800b20d
 800b184:	0800b20d 	.word	0x0800b20d
 800b188:	0800b20d 	.word	0x0800b20d
 800b18c:	0800b1ff 	.word	0x0800b1ff
 800b190:	2b40      	cmp	r3, #64	@ 0x40
 800b192:	d037      	beq.n	800b204 <UART_SetConfig+0x6bc>
 800b194:	e03a      	b.n	800b20c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b196:	f7fc feb3 	bl	8007f00 <HAL_RCCEx_GetD3PCLK1Freq>
 800b19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b19c:	e03c      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fc fec2 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ac:	e034      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ae:	f107 0318 	add.w	r3, r7, #24
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fd f80e 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1bc:	e02c      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1be:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d016      	beq.n	800b1f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1ca:	4b06      	ldr	r3, [pc, #24]	@ (800b1e4 <UART_SetConfig+0x69c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	08db      	lsrs	r3, r3, #3
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	4a07      	ldr	r2, [pc, #28]	@ (800b1f4 <UART_SetConfig+0x6ac>)
 800b1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1dc:	e01c      	b.n	800b218 <UART_SetConfig+0x6d0>
 800b1de:	bf00      	nop
 800b1e0:	40011400 	.word	0x40011400
 800b1e4:	58024400 	.word	0x58024400
 800b1e8:	40007800 	.word	0x40007800
 800b1ec:	40007c00 	.word	0x40007c00
 800b1f0:	58000c00 	.word	0x58000c00
 800b1f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b1f8:	4b9d      	ldr	r3, [pc, #628]	@ (800b470 <UART_SetConfig+0x928>)
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fc:	e00c      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1fe:	4b9d      	ldr	r3, [pc, #628]	@ (800b474 <UART_SetConfig+0x92c>)
 800b200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b202:	e009      	b.n	800b218 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20a:	e005      	b.n	800b218 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b216:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 81de 	beq.w	800b5dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b224:	4a94      	ldr	r2, [pc, #592]	@ (800b478 <UART_SetConfig+0x930>)
 800b226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b232:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	4613      	mov	r3, r2
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	4413      	add	r3, r2
 800b23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b240:	429a      	cmp	r2, r3
 800b242:	d305      	bcc.n	800b250 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b24a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b256:	e1c1      	b.n	800b5dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2200      	movs	r2, #0
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	60fa      	str	r2, [r7, #12]
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b264:	4a84      	ldr	r2, [pc, #528]	@ (800b478 <UART_SetConfig+0x930>)
 800b266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	2200      	movs	r2, #0
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b27a:	f7f5 f82d 	bl	80002d8 <__aeabi_uldivmod>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4610      	mov	r0, r2
 800b284:	4619      	mov	r1, r3
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	f04f 0300 	mov.w	r3, #0
 800b28e:	020b      	lsls	r3, r1, #8
 800b290:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b294:	0202      	lsls	r2, r0, #8
 800b296:	6979      	ldr	r1, [r7, #20]
 800b298:	6849      	ldr	r1, [r1, #4]
 800b29a:	0849      	lsrs	r1, r1, #1
 800b29c:	2000      	movs	r0, #0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	eb12 0804 	adds.w	r8, r2, r4
 800b2a6:	eb43 0905 	adc.w	r9, r3, r5
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	469a      	mov	sl, r3
 800b2b2:	4693      	mov	fp, r2
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	f7f5 f80c 	bl	80002d8 <__aeabi_uldivmod>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ce:	d308      	bcc.n	800b2e2 <UART_SetConfig+0x79a>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2d6:	d204      	bcs.n	800b2e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2de:	60da      	str	r2, [r3, #12]
 800b2e0:	e17c      	b.n	800b5dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2e8:	e178      	b.n	800b5dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2f2:	f040 80c5 	bne.w	800b480 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b2f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	dc48      	bgt.n	800b390 <UART_SetConfig+0x848>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	db7b      	blt.n	800b3fa <UART_SetConfig+0x8b2>
 800b302:	2b20      	cmp	r3, #32
 800b304:	d879      	bhi.n	800b3fa <UART_SetConfig+0x8b2>
 800b306:	a201      	add	r2, pc, #4	@ (adr r2, 800b30c <UART_SetConfig+0x7c4>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b397 	.word	0x0800b397
 800b310:	0800b39f 	.word	0x0800b39f
 800b314:	0800b3fb 	.word	0x0800b3fb
 800b318:	0800b3fb 	.word	0x0800b3fb
 800b31c:	0800b3a7 	.word	0x0800b3a7
 800b320:	0800b3fb 	.word	0x0800b3fb
 800b324:	0800b3fb 	.word	0x0800b3fb
 800b328:	0800b3fb 	.word	0x0800b3fb
 800b32c:	0800b3b7 	.word	0x0800b3b7
 800b330:	0800b3fb 	.word	0x0800b3fb
 800b334:	0800b3fb 	.word	0x0800b3fb
 800b338:	0800b3fb 	.word	0x0800b3fb
 800b33c:	0800b3fb 	.word	0x0800b3fb
 800b340:	0800b3fb 	.word	0x0800b3fb
 800b344:	0800b3fb 	.word	0x0800b3fb
 800b348:	0800b3fb 	.word	0x0800b3fb
 800b34c:	0800b3c7 	.word	0x0800b3c7
 800b350:	0800b3fb 	.word	0x0800b3fb
 800b354:	0800b3fb 	.word	0x0800b3fb
 800b358:	0800b3fb 	.word	0x0800b3fb
 800b35c:	0800b3fb 	.word	0x0800b3fb
 800b360:	0800b3fb 	.word	0x0800b3fb
 800b364:	0800b3fb 	.word	0x0800b3fb
 800b368:	0800b3fb 	.word	0x0800b3fb
 800b36c:	0800b3fb 	.word	0x0800b3fb
 800b370:	0800b3fb 	.word	0x0800b3fb
 800b374:	0800b3fb 	.word	0x0800b3fb
 800b378:	0800b3fb 	.word	0x0800b3fb
 800b37c:	0800b3fb 	.word	0x0800b3fb
 800b380:	0800b3fb 	.word	0x0800b3fb
 800b384:	0800b3fb 	.word	0x0800b3fb
 800b388:	0800b3fb 	.word	0x0800b3fb
 800b38c:	0800b3ed 	.word	0x0800b3ed
 800b390:	2b40      	cmp	r3, #64	@ 0x40
 800b392:	d02e      	beq.n	800b3f2 <UART_SetConfig+0x8aa>
 800b394:	e031      	b.n	800b3fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b396:	f7fa fdbd 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 800b39a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b39c:	e033      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b39e:	f7fa fdcf 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
 800b3a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3a4:	e02f      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fc fdbe 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b4:	e027      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3b6:	f107 0318 	add.w	r3, r7, #24
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fc ff0a 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c4:	e01f      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b47c <UART_SetConfig+0x934>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b47c <UART_SetConfig+0x934>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	08db      	lsrs	r3, r3, #3
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	4a24      	ldr	r2, [pc, #144]	@ (800b470 <UART_SetConfig+0x928>)
 800b3de:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3e4:	e00f      	b.n	800b406 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3e6:	4b22      	ldr	r3, [pc, #136]	@ (800b470 <UART_SetConfig+0x928>)
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ea:	e00c      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3ec:	4b21      	ldr	r3, [pc, #132]	@ (800b474 <UART_SetConfig+0x92c>)
 800b3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f0:	e009      	b.n	800b406 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f8:	e005      	b.n	800b406 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 80e7 	beq.w	800b5dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b412:	4a19      	ldr	r2, [pc, #100]	@ (800b478 <UART_SetConfig+0x930>)
 800b414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b418:	461a      	mov	r2, r3
 800b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b420:	005a      	lsls	r2, r3, #1
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	085b      	lsrs	r3, r3, #1
 800b428:	441a      	add	r2, r3
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b432:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d916      	bls.n	800b468 <UART_SetConfig+0x920>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b440:	d212      	bcs.n	800b468 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	b29b      	uxth	r3, r3
 800b446:	f023 030f 	bic.w	r3, r3, #15
 800b44a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	085b      	lsrs	r3, r3, #1
 800b450:	b29b      	uxth	r3, r3
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	b29a      	uxth	r2, r3
 800b458:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b45a:	4313      	orrs	r3, r2
 800b45c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	e0b9      	b.n	800b5dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b46e:	e0b5      	b.n	800b5dc <UART_SetConfig+0xa94>
 800b470:	03d09000 	.word	0x03d09000
 800b474:	003d0900 	.word	0x003d0900
 800b478:	0800fadc 	.word	0x0800fadc
 800b47c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b480:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b484:	2b20      	cmp	r3, #32
 800b486:	dc49      	bgt.n	800b51c <UART_SetConfig+0x9d4>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	db7c      	blt.n	800b586 <UART_SetConfig+0xa3e>
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	d87a      	bhi.n	800b586 <UART_SetConfig+0xa3e>
 800b490:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <UART_SetConfig+0x950>)
 800b492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b496:	bf00      	nop
 800b498:	0800b523 	.word	0x0800b523
 800b49c:	0800b52b 	.word	0x0800b52b
 800b4a0:	0800b587 	.word	0x0800b587
 800b4a4:	0800b587 	.word	0x0800b587
 800b4a8:	0800b533 	.word	0x0800b533
 800b4ac:	0800b587 	.word	0x0800b587
 800b4b0:	0800b587 	.word	0x0800b587
 800b4b4:	0800b587 	.word	0x0800b587
 800b4b8:	0800b543 	.word	0x0800b543
 800b4bc:	0800b587 	.word	0x0800b587
 800b4c0:	0800b587 	.word	0x0800b587
 800b4c4:	0800b587 	.word	0x0800b587
 800b4c8:	0800b587 	.word	0x0800b587
 800b4cc:	0800b587 	.word	0x0800b587
 800b4d0:	0800b587 	.word	0x0800b587
 800b4d4:	0800b587 	.word	0x0800b587
 800b4d8:	0800b553 	.word	0x0800b553
 800b4dc:	0800b587 	.word	0x0800b587
 800b4e0:	0800b587 	.word	0x0800b587
 800b4e4:	0800b587 	.word	0x0800b587
 800b4e8:	0800b587 	.word	0x0800b587
 800b4ec:	0800b587 	.word	0x0800b587
 800b4f0:	0800b587 	.word	0x0800b587
 800b4f4:	0800b587 	.word	0x0800b587
 800b4f8:	0800b587 	.word	0x0800b587
 800b4fc:	0800b587 	.word	0x0800b587
 800b500:	0800b587 	.word	0x0800b587
 800b504:	0800b587 	.word	0x0800b587
 800b508:	0800b587 	.word	0x0800b587
 800b50c:	0800b587 	.word	0x0800b587
 800b510:	0800b587 	.word	0x0800b587
 800b514:	0800b587 	.word	0x0800b587
 800b518:	0800b579 	.word	0x0800b579
 800b51c:	2b40      	cmp	r3, #64	@ 0x40
 800b51e:	d02e      	beq.n	800b57e <UART_SetConfig+0xa36>
 800b520:	e031      	b.n	800b586 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b522:	f7fa fcf7 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 800b526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b528:	e033      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b52a:	f7fa fd09 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
 800b52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b530:	e02f      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b536:	4618      	mov	r0, r3
 800b538:	f7fc fcf8 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b540:	e027      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b542:	f107 0318 	add.w	r3, r7, #24
 800b546:	4618      	mov	r0, r3
 800b548:	f7fc fe44 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b550:	e01f      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b552:	4b2d      	ldr	r3, [pc, #180]	@ (800b608 <UART_SetConfig+0xac0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 0320 	and.w	r3, r3, #32
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d009      	beq.n	800b572 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b55e:	4b2a      	ldr	r3, [pc, #168]	@ (800b608 <UART_SetConfig+0xac0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	08db      	lsrs	r3, r3, #3
 800b564:	f003 0303 	and.w	r3, r3, #3
 800b568:	4a28      	ldr	r2, [pc, #160]	@ (800b60c <UART_SetConfig+0xac4>)
 800b56a:	fa22 f303 	lsr.w	r3, r2, r3
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b570:	e00f      	b.n	800b592 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b572:	4b26      	ldr	r3, [pc, #152]	@ (800b60c <UART_SetConfig+0xac4>)
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b576:	e00c      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b578:	4b25      	ldr	r3, [pc, #148]	@ (800b610 <UART_SetConfig+0xac8>)
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57c:	e009      	b.n	800b592 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b584:	e005      	b.n	800b592 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b590:	bf00      	nop
    }

    if (pclk != 0U)
 800b592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b594:	2b00      	cmp	r3, #0
 800b596:	d021      	beq.n	800b5dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59c:	4a1d      	ldr	r2, [pc, #116]	@ (800b614 <UART_SetConfig+0xacc>)
 800b59e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	085b      	lsrs	r3, r3, #1
 800b5b0:	441a      	add	r2, r3
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	2b0f      	cmp	r3, #15
 800b5c0:	d909      	bls.n	800b5d6 <UART_SetConfig+0xa8e>
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5c8:	d205      	bcs.n	800b5d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	60da      	str	r2, [r3, #12]
 800b5d4:	e002      	b.n	800b5dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3748      	adds	r7, #72	@ 0x48
 800b600:	46bd      	mov	sp, r7
 800b602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b606:	bf00      	nop
 800b608:	58024400 	.word	0x58024400
 800b60c:	03d09000 	.word	0x03d09000
 800b610:	003d0900 	.word	0x003d0900
 800b614:	0800fadc 	.word	0x0800fadc

0800b618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b624:	f003 0308 	and.w	r3, r3, #8
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68a:	f003 0304 	and.w	r3, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00a      	beq.n	800b6a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	430a      	orrs	r2, r1
 800b6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ac:	f003 0310 	and.w	r3, r3, #16
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01a      	beq.n	800b72e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b716:	d10a      	bne.n	800b72e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	605a      	str	r2, [r3, #4]
  }
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b098      	sub	sp, #96	@ 0x60
 800b760:	af02      	add	r7, sp, #8
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b76c:	f7f6 ff18 	bl	80025a0 <HAL_GetTick>
 800b770:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0308 	and.w	r3, r3, #8
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d12f      	bne.n	800b7e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b788:	2200      	movs	r2, #0
 800b78a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f88e 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d022      	beq.n	800b7e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a2:	e853 3f00 	ldrex	r3, [r3]
 800b7a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7c0:	e841 2300 	strex	r3, r2, [r1]
 800b7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e6      	bne.n	800b79a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e063      	b.n	800b8a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 0304 	and.w	r3, r3, #4
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d149      	bne.n	800b882 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f857 	bl	800b8b0 <UART_WaitOnFlagUntilTimeout>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d03c      	beq.n	800b882 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	623b      	str	r3, [r7, #32]
   return(result);
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b81c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b826:	633b      	str	r3, [r7, #48]	@ 0x30
 800b828:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b82c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e6      	bne.n	800b808 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3308      	adds	r3, #8
 800b840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	e853 3f00 	ldrex	r3, [r3]
 800b848:	60fb      	str	r3, [r7, #12]
   return(result);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b85a:	61fa      	str	r2, [r7, #28]
 800b85c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85e:	69b9      	ldr	r1, [r7, #24]
 800b860:	69fa      	ldr	r2, [r7, #28]
 800b862:	e841 2300 	strex	r3, r2, [r1]
 800b866:	617b      	str	r3, [r7, #20]
   return(result);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1e5      	bne.n	800b83a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2220      	movs	r2, #32
 800b872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e012      	b.n	800b8a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2220      	movs	r2, #32
 800b886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3758      	adds	r7, #88	@ 0x58
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c0:	e04f      	b.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c8:	d04b      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ca:	f7f6 fe69 	bl	80025a0 <HAL_GetTick>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d302      	bcc.n	800b8e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e04e      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d037      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b80      	cmp	r3, #128	@ 0x80
 800b8f6:	d034      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b40      	cmp	r3, #64	@ 0x40
 800b8fc:	d031      	beq.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	f003 0308 	and.w	r3, r3, #8
 800b908:	2b08      	cmp	r3, #8
 800b90a:	d110      	bne.n	800b92e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2208      	movs	r2, #8
 800b912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f839 	bl	800b98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2208      	movs	r2, #8
 800b91e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e029      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69db      	ldr	r3, [r3, #28]
 800b934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b93c:	d111      	bne.n	800b962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 f81f 	bl	800b98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2220      	movs	r2, #32
 800b952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b95e:	2303      	movs	r3, #3
 800b960:	e00f      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69da      	ldr	r2, [r3, #28]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4013      	ands	r3, r2
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	429a      	cmp	r2, r3
 800b970:	bf0c      	ite	eq
 800b972:	2301      	moveq	r3, #1
 800b974:	2300      	movne	r3, #0
 800b976:	b2db      	uxtb	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d0a0      	beq.n	800b8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b095      	sub	sp, #84	@ 0x54
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e6      	bne.n	800b994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba54 <UART_EndRxTransfer+0xc8>)
 800b9da:	4013      	ands	r3, r2
 800b9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e5      	bne.n	800b9c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d118      	bne.n	800ba34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f023 0310 	bic.w	r3, r3, #16
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	6979      	ldr	r1, [r7, #20]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e6      	bne.n	800ba02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba48:	bf00      	nop
 800ba4a:	3754      	adds	r7, #84	@ 0x54
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	effffffe 	.word	0xeffffffe

0800ba58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d101      	bne.n	800ba6e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e027      	b.n	800babe <HAL_UARTEx_DisableFifoMode+0x66>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2224      	movs	r2, #36	@ 0x24
 800ba7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 0201 	bic.w	r2, r2, #1
 800ba94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2220      	movs	r2, #32
 800bab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bada:	2b01      	cmp	r3, #1
 800badc:	d101      	bne.n	800bae2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bade:	2302      	movs	r3, #2
 800bae0:	e02d      	b.n	800bb3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2224      	movs	r2, #36	@ 0x24
 800baee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f022 0201 	bic.w	r2, r2, #1
 800bb08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	430a      	orrs	r2, r1
 800bb1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f850 	bl	800bbc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e02d      	b.n	800bbba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2224      	movs	r2, #36	@ 0x24
 800bb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f022 0201 	bic.w	r2, r2, #1
 800bb84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	430a      	orrs	r2, r1
 800bb98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f812 	bl	800bbc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2220      	movs	r2, #32
 800bbac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d108      	bne.n	800bbe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbe4:	e031      	b.n	800bc4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbe6:	2310      	movs	r3, #16
 800bbe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbea:	2310      	movs	r3, #16
 800bbec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	0e5b      	lsrs	r3, r3, #25
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	f003 0307 	and.w	r3, r3, #7
 800bbfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	0f5b      	lsrs	r3, r3, #29
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 0307 	and.w	r3, r3, #7
 800bc0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	7b3a      	ldrb	r2, [r7, #12]
 800bc12:	4911      	ldr	r1, [pc, #68]	@ (800bc58 <UARTEx_SetNbDataToProcess+0x94>)
 800bc14:	5c8a      	ldrb	r2, [r1, r2]
 800bc16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc1a:	7b3a      	ldrb	r2, [r7, #12]
 800bc1c:	490f      	ldr	r1, [pc, #60]	@ (800bc5c <UARTEx_SetNbDataToProcess+0x98>)
 800bc1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc20:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
 800bc2e:	7b7a      	ldrb	r2, [r7, #13]
 800bc30:	4909      	ldr	r1, [pc, #36]	@ (800bc58 <UARTEx_SetNbDataToProcess+0x94>)
 800bc32:	5c8a      	ldrb	r2, [r1, r2]
 800bc34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc38:	7b7a      	ldrb	r2, [r7, #13]
 800bc3a:	4908      	ldr	r1, [pc, #32]	@ (800bc5c <UARTEx_SetNbDataToProcess+0x98>)
 800bc3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	0800faf4 	.word	0x0800faf4
 800bc5c:	0800fafc 	.word	0x0800fafc

0800bc60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc60:	b084      	sub	sp, #16
 800bc62:	b480      	push	{r7}
 800bc64:	b085      	sub	sp, #20
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	f107 001c 	add.w	r0, r7, #28
 800bc6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bc76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bc78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bc7a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800bc7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800bc82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800bc86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	4b07      	ldr	r3, [pc, #28]	@ (800bcb0 <SDMMC_Init+0x50>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	b004      	add	sp, #16
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	ffc02c00 	.word	0xffc02c00

0800bcb4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f043 0203 	orr.w	r2, r3, #3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b083      	sub	sp, #12
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0303 	and.w	r3, r3, #3
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bd54:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bd5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68da      	ldr	r2, [r3, #12]
 800bd66:	4b06      	ldr	r3, [pc, #24]	@ (800bd80 <SDMMC_SendCommand+0x50>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	431a      	orrs	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	fffee0c0 	.word	0xfffee0c0

0800bd84 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	b2db      	uxtb	r3, r3
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3314      	adds	r3, #20
 800bdac:	461a      	mov	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bdea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bdf0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bdf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	431a      	orrs	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800be0e:	2300      	movs	r3, #0

}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be2a:	2310      	movs	r3, #16
 800be2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be3e:	f107 0308 	add.w	r3, r7, #8
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7ff ff73 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800be4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be4e:	2110      	movs	r1, #16
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fa5f 	bl	800c314 <SDMMC_GetCmdResp1>
 800be56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be58:	69fb      	ldr	r3, [r7, #28]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3720      	adds	r7, #32
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b088      	sub	sp, #32
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be70:	2311      	movs	r3, #17
 800be72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be7a:	2300      	movs	r3, #0
 800be7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be84:	f107 0308 	add.w	r3, r7, #8
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff ff50 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be94:	2111      	movs	r1, #17
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa3c 	bl	800c314 <SDMMC_GetCmdResp1>
 800be9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be9e:	69fb      	ldr	r3, [r7, #28]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800beb6:	2312      	movs	r3, #18
 800beb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff ff2d 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beda:	2112      	movs	r1, #18
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa19 	bl	800c314 <SDMMC_GetCmdResp1>
 800bee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee4:	69fb      	ldr	r3, [r7, #28]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3720      	adds	r7, #32
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b088      	sub	sp, #32
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800befc:	2318      	movs	r3, #24
 800befe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf10:	f107 0308 	add.w	r3, r7, #8
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff ff0a 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf20:	2118      	movs	r1, #24
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f9f6 	bl	800c314 <SDMMC_GetCmdResp1>
 800bf28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf2a:	69fb      	ldr	r3, [r7, #28]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf42:	2319      	movs	r3, #25
 800bf44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf56:	f107 0308 	add.w	r3, r7, #8
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff fee7 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf66:	2119      	movs	r1, #25
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f9d3 	bl	800c314 <SDMMC_GetCmdResp1>
 800bf6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf70:	69fb      	ldr	r3, [r7, #28]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf84:	2300      	movs	r3, #0
 800bf86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf88:	230c      	movs	r3, #12
 800bf8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf9a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb4:	f107 0308 	add.w	r3, r7, #8
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff feb8 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bfc0:	4a0b      	ldr	r2, [pc, #44]	@ (800bff0 <SDMMC_CmdStopTransfer+0x74>)
 800bfc2:	210c      	movs	r1, #12
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f9a5 	bl	800c314 <SDMMC_GetCmdResp1>
 800bfca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfde:	d101      	bne.n	800bfe4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bfe4:	69fb      	ldr	r3, [r7, #28]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3720      	adds	r7, #32
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	05f5e100 	.word	0x05f5e100

0800bff4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c002:	2307      	movs	r3, #7
 800c004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c014:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fe87 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c022:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c026:	2107      	movs	r1, #7
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f973 	bl	800c314 <SDMMC_GetCmdResp1>
 800c02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c030:	69fb      	ldr	r3, [r7, #28]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b088      	sub	sp, #32
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c04e:	2300      	movs	r3, #0
 800c050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c058:	f107 0308 	add.w	r3, r7, #8
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff fe66 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fb97 	bl	800c798 <SDMMC_GetCmdError>
 800c06a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c06c:	69fb      	ldr	r3, [r7, #28]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b088      	sub	sp, #32
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c07e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c082:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c084:	2308      	movs	r3, #8
 800c086:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c08e:	2300      	movs	r3, #0
 800c090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c098:	f107 0308 	add.w	r3, r7, #8
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7ff fe46 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fb29 	bl	800c6fc <SDMMC_GetCmdResp7>
 800c0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b088      	sub	sp, #32
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c0c4:	2337      	movs	r3, #55	@ 0x37
 800c0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0d8:	f107 0308 	add.w	r3, r7, #8
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff fe26 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c0e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0e8:	2137      	movs	r1, #55	@ 0x37
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f912 	bl	800c314 <SDMMC_GetCmdResp1>
 800c0f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3720      	adds	r7, #32
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c10a:	2329      	movs	r3, #41	@ 0x29
 800c10c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c10e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c11c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c11e:	f107 0308 	add.w	r3, r7, #8
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7ff fe03 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fa2e 	bl	800c58c <SDMMC_GetCmdResp3>
 800c130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c132:	69fb      	ldr	r3, [r7, #28]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c14a:	2306      	movs	r3, #6
 800c14c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c14e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c154:	2300      	movs	r3, #0
 800c156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c15c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c15e:	f107 0308 	add.w	r3, r7, #8
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff fde3 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c16a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c16e:	2106      	movs	r1, #6
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f8cf 	bl	800c314 <SDMMC_GetCmdResp1>
 800c176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c178:	69fb      	ldr	r3, [r7, #28]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b088      	sub	sp, #32
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c18e:	2333      	movs	r3, #51	@ 0x33
 800c190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c192:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c19c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1a2:	f107 0308 	add.w	r3, r7, #8
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff fdc1 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1b2:	2133      	movs	r1, #51	@ 0x33
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 f8ad 	bl	800c314 <SDMMC_GetCmdResp1>
 800c1ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b088      	sub	sp, #32
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c1da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1e6:	f107 0308 	add.w	r3, r7, #8
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff fd9f 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f980 	bl	800c4f8 <SDMMC_GetCmdResp2>
 800c1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3720      	adds	r7, #32
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c212:	2309      	movs	r3, #9
 800c214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c216:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c21a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c21c:	2300      	movs	r3, #0
 800c21e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c226:	f107 0308 	add.w	r3, r7, #8
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fd7f 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f960 	bl	800c4f8 <SDMMC_GetCmdResp2>
 800c238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c23a:	69fb      	ldr	r3, [r7, #28]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3720      	adds	r7, #32
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c24e:	2300      	movs	r3, #0
 800c250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c252:	2303      	movs	r3, #3
 800c254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c25c:	2300      	movs	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c266:	f107 0308 	add.w	r3, r7, #8
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff fd5f 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	2103      	movs	r1, #3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f9c8 	bl	800c60c <SDMMC_GetCmdResp6>
 800c27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c27e:	69fb      	ldr	r3, [r7, #28]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c296:	230d      	movs	r3, #13
 800c298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c29a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2aa:	f107 0308 	add.w	r3, r7, #8
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff fd3d 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2ba:	210d      	movs	r1, #13
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f829 	bl	800c314 <SDMMC_GetCmdResp1>
 800c2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b088      	sub	sp, #32
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c2da:	230d      	movs	r3, #13
 800c2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ee:	f107 0308 	add.w	r3, r7, #8
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff fd1b 	bl	800bd30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c2fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2fe:	210d      	movs	r1, #13
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f807 	bl	800c314 <SDMMC_GetCmdResp1>
 800c306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c308:	69fb      	ldr	r3, [r7, #28]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	460b      	mov	r3, r1
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c322:	4b70      	ldr	r3, [pc, #448]	@ (800c4e4 <SDMMC_GetCmdResp1+0x1d0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a70      	ldr	r2, [pc, #448]	@ (800c4e8 <SDMMC_GetCmdResp1+0x1d4>)
 800c328:	fba2 2303 	umull	r2, r3, r2, r3
 800c32c:	0a5a      	lsrs	r2, r3, #9
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	fb02 f303 	mul.w	r3, r2, r3
 800c334:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	1e5a      	subs	r2, r3, #1
 800c33a:	61fa      	str	r2, [r7, #28]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c344:	e0c9      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c34a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	4b67      	ldr	r3, [pc, #412]	@ (800c4ec <SDMMC_GetCmdResp1+0x1d8>)
 800c350:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0ef      	beq.n	800c336 <SDMMC_GetCmdResp1+0x22>
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1ea      	bne.n	800c336 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d004      	beq.n	800c376 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2204      	movs	r2, #4
 800c370:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c372:	2304      	movs	r3, #4
 800c374:	e0b1      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d004      	beq.n	800c38c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2201      	movs	r2, #1
 800c386:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c388:	2301      	movs	r3, #1
 800c38a:	e0a6      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4a58      	ldr	r2, [pc, #352]	@ (800c4f0 <SDMMC_GetCmdResp1+0x1dc>)
 800c390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff fcf6 	bl	800bd84 <SDMMC_GetCommandResponse>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	7afb      	ldrb	r3, [r7, #11]
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d001      	beq.n	800c3a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e099      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7ff fcf8 	bl	800bd9e <SDMMC_GetResponse>
 800c3ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	4b50      	ldr	r3, [pc, #320]	@ (800c4f4 <SDMMC_GetCmdResp1+0x1e0>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e08d      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	da02      	bge.n	800c3ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c3c8:	e087      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3d4:	2340      	movs	r3, #64	@ 0x40
 800c3d6:	e080      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3e2:	2380      	movs	r3, #128	@ 0x80
 800c3e4:	e079      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3f4:	e071      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c404:	e069      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c414:	e061      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c420:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c424:	e059      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c434:	e051      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c444:	e049      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c450:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c454:	e041      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c464:	e039      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c474:	e031      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c480:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c484:	e029      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c490:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c494:	e021      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c4a4:	e019      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c4b4:	e011      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c4c4:	e009      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	f003 0308 	and.w	r3, r3, #8
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c4d4:	e001      	b.n	800c4da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	24000000 	.word	0x24000000
 800c4e8:	10624dd3 	.word	0x10624dd3
 800c4ec:	00200045 	.word	0x00200045
 800c4f0:	002000c5 	.word	0x002000c5
 800c4f4:	fdffe008 	.word	0xfdffe008

0800c4f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c500:	4b1f      	ldr	r3, [pc, #124]	@ (800c580 <SDMMC_GetCmdResp2+0x88>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1f      	ldr	r2, [pc, #124]	@ (800c584 <SDMMC_GetCmdResp2+0x8c>)
 800c506:	fba2 2303 	umull	r2, r3, r2, r3
 800c50a:	0a5b      	lsrs	r3, r3, #9
 800c50c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c510:	fb02 f303 	mul.w	r3, r2, r3
 800c514:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	1e5a      	subs	r2, r3, #1
 800c51a:	60fa      	str	r2, [r7, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c520:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c524:	e026      	b.n	800c574 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c52a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c532:	2b00      	cmp	r3, #0
 800c534:	d0ef      	beq.n	800c516 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1ea      	bne.n	800c516 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2204      	movs	r2, #4
 800c550:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c552:	2304      	movs	r3, #4
 800c554:	e00e      	b.n	800c574 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d004      	beq.n	800c56c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2201      	movs	r2, #1
 800c566:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c568:	2301      	movs	r3, #1
 800c56a:	e003      	b.n	800c574 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a06      	ldr	r2, [pc, #24]	@ (800c588 <SDMMC_GetCmdResp2+0x90>)
 800c570:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	24000000 	.word	0x24000000
 800c584:	10624dd3 	.word	0x10624dd3
 800c588:	002000c5 	.word	0x002000c5

0800c58c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c594:	4b1a      	ldr	r3, [pc, #104]	@ (800c600 <SDMMC_GetCmdResp3+0x74>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a1a      	ldr	r2, [pc, #104]	@ (800c604 <SDMMC_GetCmdResp3+0x78>)
 800c59a:	fba2 2303 	umull	r2, r3, r2, r3
 800c59e:	0a5b      	lsrs	r3, r3, #9
 800c5a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5a4:	fb02 f303 	mul.w	r3, r2, r3
 800c5a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	1e5a      	subs	r2, r3, #1
 800c5ae:	60fa      	str	r2, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c5b8:	e01b      	b.n	800c5f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d0ef      	beq.n	800c5aa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1ea      	bne.n	800c5aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d004      	beq.n	800c5ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5e6:	2304      	movs	r3, #4
 800c5e8:	e003      	b.n	800c5f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a06      	ldr	r2, [pc, #24]	@ (800c608 <SDMMC_GetCmdResp3+0x7c>)
 800c5ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	24000000 	.word	0x24000000
 800c604:	10624dd3 	.word	0x10624dd3
 800c608:	002000c5 	.word	0x002000c5

0800c60c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	460b      	mov	r3, r1
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c61a:	4b35      	ldr	r3, [pc, #212]	@ (800c6f0 <SDMMC_GetCmdResp6+0xe4>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a35      	ldr	r2, [pc, #212]	@ (800c6f4 <SDMMC_GetCmdResp6+0xe8>)
 800c620:	fba2 2303 	umull	r2, r3, r2, r3
 800c624:	0a5b      	lsrs	r3, r3, #9
 800c626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c62a:	fb02 f303 	mul.w	r3, r2, r3
 800c62e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	1e5a      	subs	r2, r3, #1
 800c634:	61fa      	str	r2, [r7, #28]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d102      	bne.n	800c640 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c63a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c63e:	e052      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c644:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0ef      	beq.n	800c630 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1ea      	bne.n	800c630 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65e:	f003 0304 	and.w	r3, r3, #4
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2204      	movs	r2, #4
 800c66a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c66c:	2304      	movs	r3, #4
 800c66e:	e03a      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2201      	movs	r2, #1
 800c680:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c682:	2301      	movs	r3, #1
 800c684:	e02f      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f7ff fb7c 	bl	800bd84 <SDMMC_GetCommandResponse>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	4293      	cmp	r3, r2
 800c694:	d001      	beq.n	800c69a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c696:	2301      	movs	r3, #1
 800c698:	e025      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4a16      	ldr	r2, [pc, #88]	@ (800c6f8 <SDMMC_GetCmdResp6+0xec>)
 800c69e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f7ff fb7b 	bl	800bd9e <SDMMC_GetResponse>
 800c6a8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d106      	bne.n	800c6c2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	0c1b      	lsrs	r3, r3, #16
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e011      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c6d0:	e009      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6e0:	e001      	b.n	800c6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3720      	adds	r7, #32
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	24000000 	.word	0x24000000
 800c6f4:	10624dd3 	.word	0x10624dd3
 800c6f8:	002000c5 	.word	0x002000c5

0800c6fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c704:	4b22      	ldr	r3, [pc, #136]	@ (800c790 <SDMMC_GetCmdResp7+0x94>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a22      	ldr	r2, [pc, #136]	@ (800c794 <SDMMC_GetCmdResp7+0x98>)
 800c70a:	fba2 2303 	umull	r2, r3, r2, r3
 800c70e:	0a5b      	lsrs	r3, r3, #9
 800c710:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c714:	fb02 f303 	mul.w	r3, r2, r3
 800c718:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	1e5a      	subs	r2, r3, #1
 800c71e:	60fa      	str	r2, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d102      	bne.n	800c72a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c728:	e02c      	b.n	800c784 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c72e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c736:	2b00      	cmp	r3, #0
 800c738:	d0ef      	beq.n	800c71a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1ea      	bne.n	800c71a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c748:	f003 0304 	and.w	r3, r3, #4
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2204      	movs	r2, #4
 800c754:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c756:	2304      	movs	r3, #4
 800c758:	e014      	b.n	800c784 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	d004      	beq.n	800c770 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2201      	movs	r2, #1
 800c76a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e009      	b.n	800c784 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2240      	movs	r2, #64	@ 0x40
 800c780:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c782:	2300      	movs	r3, #0

}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	24000000 	.word	0x24000000
 800c794:	10624dd3 	.word	0x10624dd3

0800c798 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c7a0:	4b11      	ldr	r3, [pc, #68]	@ (800c7e8 <SDMMC_GetCmdError+0x50>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a11      	ldr	r2, [pc, #68]	@ (800c7ec <SDMMC_GetCmdError+0x54>)
 800c7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7aa:	0a5b      	lsrs	r3, r3, #9
 800c7ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7b0:	fb02 f303 	mul.w	r3, r2, r3
 800c7b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	1e5a      	subs	r2, r3, #1
 800c7ba:	60fa      	str	r2, [r7, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d102      	bne.n	800c7c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7c4:	e009      	b.n	800c7da <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0f1      	beq.n	800c7b6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a06      	ldr	r2, [pc, #24]	@ (800c7f0 <SDMMC_GetCmdError+0x58>)
 800c7d6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	24000000 	.word	0x24000000
 800c7ec:	10624dd3 	.word	0x10624dd3
 800c7f0:	002000c5 	.word	0x002000c5

0800c7f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c7f8:	4904      	ldr	r1, [pc, #16]	@ (800c80c <MX_FATFS_Init+0x18>)
 800c7fa:	4805      	ldr	r0, [pc, #20]	@ (800c810 <MX_FATFS_Init+0x1c>)
 800c7fc:	f002 fdca 	bl	800f394 <FATFS_LinkDriver>
 800c800:	4603      	mov	r3, r0
 800c802:	461a      	mov	r2, r3
 800c804:	4b03      	ldr	r3, [pc, #12]	@ (800c814 <MX_FATFS_Init+0x20>)
 800c806:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c808:	bf00      	nop
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	240007d4 	.word	0x240007d4
 800c810:	0800fb04 	.word	0x0800fb04
 800c814:	240007d0 	.word	0x240007d0

0800c818 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c818:	b480      	push	{r7}
 800c81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c81c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c81e:	4618      	mov	r0, r3
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c832:	f000 f885 	bl	800c940 <BSP_SD_IsDetected>
 800c836:	4603      	mov	r3, r0
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d001      	beq.n	800c840 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c83c:	2302      	movs	r3, #2
 800c83e:	e012      	b.n	800c866 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c840:	480b      	ldr	r0, [pc, #44]	@ (800c870 <BSP_SD_Init+0x48>)
 800c842:	f7fc f8d1 	bl	80089e8 <HAL_SD_Init>
 800c846:	4603      	mov	r3, r0
 800c848:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c84a:	79fb      	ldrb	r3, [r7, #7]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d109      	bne.n	800c864 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c850:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c854:	4806      	ldr	r0, [pc, #24]	@ (800c870 <BSP_SD_Init+0x48>)
 800c856:	f7fc ff87 	bl	8009768 <HAL_SD_ConfigWideBusOperation>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c864:	79fb      	ldrb	r3, [r7, #7]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	24000634 	.word	0x24000634

0800c874 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	68f9      	ldr	r1, [r7, #12]
 800c88a:	4806      	ldr	r0, [pc, #24]	@ (800c8a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c88c:	f7fc f9cc 	bl	8008c28 <HAL_SD_ReadBlocks_DMA>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	24000634 	.word	0x24000634

0800c8a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	4806      	ldr	r0, [pc, #24]	@ (800c8d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c8c0:	f7fc fa5a 	bl	8008d78 <HAL_SD_WriteBlocks_DMA>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	24000634 	.word	0x24000634

0800c8dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c8e0:	4805      	ldr	r0, [pc, #20]	@ (800c8f8 <BSP_SD_GetCardState+0x1c>)
 800c8e2:	f7fd f853 	bl	800998c <HAL_SD_GetCardState>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	bf14      	ite	ne
 800c8ec:	2301      	movne	r3, #1
 800c8ee:	2300      	moveq	r3, #0
 800c8f0:	b2db      	uxtb	r3, r3
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	24000634 	.word	0x24000634

0800c8fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	4803      	ldr	r0, [pc, #12]	@ (800c914 <BSP_SD_GetCardInfo+0x18>)
 800c908:	f7fc ff02 	bl	8009710 <HAL_SD_GetCardInfo>
}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	24000634 	.word	0x24000634

0800c918 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c920:	f000 f9a0 	bl	800cc64 <BSP_SD_WriteCpltCallback>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c934:	f000 f9a2 	bl	800cc7c <BSP_SD_ReadCpltCallback>
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c946:	2301      	movs	r3, #1
 800c948:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c94a:	f000 f80b 	bl	800c964 <BSP_PlatformIsDetected>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c954:	2300      	movs	r3, #0
 800c956:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	b2db      	uxtb	r3, r3
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c96a:	2301      	movs	r3, #1
 800c96c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c96e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c972:	4806      	ldr	r0, [pc, #24]	@ (800c98c <BSP_PlatformIsDetected+0x28>)
 800c974:	f7f6 fcec 	bl	8003350 <HAL_GPIO_ReadPin>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c97e:	2300      	movs	r3, #0
 800c980:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c982:	79fb      	ldrb	r3, [r7, #7]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	58022000 	.word	0x58022000

0800c990 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c998:	f7f5 fe02 	bl	80025a0 <HAL_GetTick>
 800c99c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c99e:	e006      	b.n	800c9ae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c9a0:	f7ff ff9c 	bl	800c8dc <BSP_SD_GetCardState>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e009      	b.n	800c9c2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c9ae:	f7f5 fdf7 	bl	80025a0 <HAL_GetTick>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d8f0      	bhi.n	800c9a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c9be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <SD_CheckStatus+0x38>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c9dc:	f7ff ff7e 	bl	800c8dc <BSP_SD_GetCardState>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d107      	bne.n	800c9f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c9e6:	4b07      	ldr	r3, [pc, #28]	@ (800ca04 <SD_CheckStatus+0x38>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	f023 0301 	bic.w	r3, r3, #1
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	4b04      	ldr	r3, [pc, #16]	@ (800ca04 <SD_CheckStatus+0x38>)
 800c9f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9f6:	4b03      	ldr	r3, [pc, #12]	@ (800ca04 <SD_CheckStatus+0x38>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b2db      	uxtb	r3, r3
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	24000011 	.word	0x24000011

0800ca08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca12:	f7ff ff09 	bl	800c828 <BSP_SD_Init>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d107      	bne.n	800ca2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff ffd4 	bl	800c9cc <SD_CheckStatus>
 800ca24:	4603      	mov	r3, r0
 800ca26:	461a      	mov	r2, r3
 800ca28:	4b04      	ldr	r3, [pc, #16]	@ (800ca3c <SD_initialize+0x34>)
 800ca2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ca2c:	4b03      	ldr	r3, [pc, #12]	@ (800ca3c <SD_initialize+0x34>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b2db      	uxtb	r3, r3
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	24000011 	.word	0x24000011

0800ca40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7ff ffbd 	bl	800c9cc <SD_CheckStatus>
 800ca52:	4603      	mov	r3, r0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca70:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ca74:	f7ff ff8c 	bl	800c990 <SD_CheckStatusWithTimeout>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	da01      	bge.n	800ca82 <SD_read+0x26>
  {
    return res;
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	e03b      	b.n	800cafa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	6879      	ldr	r1, [r7, #4]
 800ca86:	68b8      	ldr	r0, [r7, #8]
 800ca88:	f7ff fef4 	bl	800c874 <BSP_SD_ReadBlocks_DMA>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d132      	bne.n	800caf8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ca92:	4b1c      	ldr	r3, [pc, #112]	@ (800cb04 <SD_read+0xa8>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ca98:	f7f5 fd82 	bl	80025a0 <HAL_GetTick>
 800ca9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ca9e:	bf00      	nop
 800caa0:	4b18      	ldr	r3, [pc, #96]	@ (800cb04 <SD_read+0xa8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d108      	bne.n	800caba <SD_read+0x5e>
 800caa8:	f7f5 fd7a 	bl	80025a0 <HAL_GetTick>
 800caac:	4602      	mov	r2, r0
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d9f2      	bls.n	800caa0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800caba:	4b12      	ldr	r3, [pc, #72]	@ (800cb04 <SD_read+0xa8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d102      	bne.n	800cac8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	75fb      	strb	r3, [r7, #23]
 800cac6:	e017      	b.n	800caf8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800cac8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb04 <SD_read+0xa8>)
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cace:	f7f5 fd67 	bl	80025a0 <HAL_GetTick>
 800cad2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cad4:	e007      	b.n	800cae6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cad6:	f7ff ff01 	bl	800c8dc <BSP_SD_GetCardState>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d102      	bne.n	800cae6 <SD_read+0x8a>
          {
            res = RES_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cae4:	e008      	b.n	800caf8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cae6:	f7f5 fd5b 	bl	80025a0 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d9ee      	bls.n	800cad6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	240007dc 	.word	0x240007dc

0800cb08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	4603      	mov	r3, r0
 800cb16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800cb1c:	4b24      	ldr	r3, [pc, #144]	@ (800cbb0 <SD_write+0xa8>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb22:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cb26:	f7ff ff33 	bl	800c990 <SD_CheckStatusWithTimeout>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da01      	bge.n	800cb34 <SD_write+0x2c>
  {
    return res;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	e038      	b.n	800cba6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	6879      	ldr	r1, [r7, #4]
 800cb38:	68b8      	ldr	r0, [r7, #8]
 800cb3a:	f7ff feb5 	bl	800c8a8 <BSP_SD_WriteBlocks_DMA>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d12f      	bne.n	800cba4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cb44:	f7f5 fd2c 	bl	80025a0 <HAL_GetTick>
 800cb48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cb4a:	bf00      	nop
 800cb4c:	4b18      	ldr	r3, [pc, #96]	@ (800cbb0 <SD_write+0xa8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d108      	bne.n	800cb66 <SD_write+0x5e>
 800cb54:	f7f5 fd24 	bl	80025a0 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d9f2      	bls.n	800cb4c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800cb66:	4b12      	ldr	r3, [pc, #72]	@ (800cbb0 <SD_write+0xa8>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	75fb      	strb	r3, [r7, #23]
 800cb72:	e017      	b.n	800cba4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800cb74:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb0 <SD_write+0xa8>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cb7a:	f7f5 fd11 	bl	80025a0 <HAL_GetTick>
 800cb7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb80:	e007      	b.n	800cb92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb82:	f7ff feab 	bl	800c8dc <BSP_SD_GetCardState>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <SD_write+0x8a>
          {
            res = RES_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	75fb      	strb	r3, [r7, #23]
            break;
 800cb90:	e008      	b.n	800cba4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb92:	f7f5 fd05 	bl	80025a0 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d9ee      	bls.n	800cb82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	240007d8 	.word	0x240007d8

0800cbb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08c      	sub	sp, #48	@ 0x30
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	603a      	str	r2, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbca:	4b25      	ldr	r3, [pc, #148]	@ (800cc60 <SD_ioctl+0xac>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d001      	beq.n	800cbdc <SD_ioctl+0x28>
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e03c      	b.n	800cc56 <SD_ioctl+0xa2>

  switch (cmd)
 800cbdc:	79bb      	ldrb	r3, [r7, #6]
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d834      	bhi.n	800cc4c <SD_ioctl+0x98>
 800cbe2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe8 <SD_ioctl+0x34>)
 800cbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe8:	0800cbf9 	.word	0x0800cbf9
 800cbec:	0800cc01 	.word	0x0800cc01
 800cbf0:	0800cc19 	.word	0x0800cc19
 800cbf4:	0800cc33 	.word	0x0800cc33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cbfe:	e028      	b.n	800cc52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc00:	f107 0308 	add.w	r3, r7, #8
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fe79 	bl	800c8fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc0a:	6a3a      	ldr	r2, [r7, #32]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc16:	e01c      	b.n	800cc52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc18:	f107 0308 	add.w	r3, r7, #8
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fe6d 	bl	800c8fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc30:	e00f      	b.n	800cc52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fe60 	bl	800c8fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	0a5a      	lsrs	r2, r3, #9
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cc4a:	e002      	b.n	800cc52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc4c:	2304      	movs	r3, #4
 800cc4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cc52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3730      	adds	r7, #48	@ 0x30
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	24000011 	.word	0x24000011

0800cc64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cc64:	b480      	push	{r7}
 800cc66:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cc68:	4b03      	ldr	r3, [pc, #12]	@ (800cc78 <BSP_SD_WriteCpltCallback+0x14>)
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	601a      	str	r2, [r3, #0]
}
 800cc6e:	bf00      	nop
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	240007d8 	.word	0x240007d8

0800cc7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cc80:	4b03      	ldr	r3, [pc, #12]	@ (800cc90 <BSP_SD_ReadCpltCallback+0x14>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	601a      	str	r2, [r3, #0]
}
 800cc86:	bf00      	nop
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr
 800cc90:	240007dc 	.word	0x240007dc

0800cc94 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800cc94:	b480      	push	{r7}
 800cc96:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cc98:	bf00      	nop
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
	...

0800cca4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	4a08      	ldr	r2, [pc, #32]	@ (800ccd4 <disk_status+0x30>)
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	79fa      	ldrb	r2, [r7, #7]
 800ccbc:	4905      	ldr	r1, [pc, #20]	@ (800ccd4 <disk_status+0x30>)
 800ccbe:	440a      	add	r2, r1
 800ccc0:	7a12      	ldrb	r2, [r2, #8]
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	4798      	blx	r3
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	24000808 	.word	0x24000808

0800ccd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cce6:	79fb      	ldrb	r3, [r7, #7]
 800cce8:	4a0e      	ldr	r2, [pc, #56]	@ (800cd24 <disk_initialize+0x4c>)
 800ccea:	5cd3      	ldrb	r3, [r2, r3]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d114      	bne.n	800cd1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd24 <disk_initialize+0x4c>)
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	79fa      	ldrb	r2, [r7, #7]
 800ccfe:	4909      	ldr	r1, [pc, #36]	@ (800cd24 <disk_initialize+0x4c>)
 800cd00:	440a      	add	r2, r1
 800cd02:	7a12      	ldrb	r2, [r2, #8]
 800cd04:	4610      	mov	r0, r2
 800cd06:	4798      	blx	r3
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d103      	bne.n	800cd1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	4a03      	ldr	r2, [pc, #12]	@ (800cd24 <disk_initialize+0x4c>)
 800cd16:	2101      	movs	r1, #1
 800cd18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	24000808 	.word	0x24000808

0800cd28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	607a      	str	r2, [r7, #4]
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	4a0a      	ldr	r2, [pc, #40]	@ (800cd64 <disk_read+0x3c>)
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	689c      	ldr	r4, [r3, #8]
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	4a07      	ldr	r2, [pc, #28]	@ (800cd64 <disk_read+0x3c>)
 800cd48:	4413      	add	r3, r2
 800cd4a:	7a18      	ldrb	r0, [r3, #8]
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	68b9      	ldr	r1, [r7, #8]
 800cd52:	47a0      	blx	r4
 800cd54:	4603      	mov	r3, r0
 800cd56:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	371c      	adds	r7, #28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd90      	pop	{r4, r7, pc}
 800cd62:	bf00      	nop
 800cd64:	24000808 	.word	0x24000808

0800cd68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd68:	b590      	push	{r4, r7, lr}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60b9      	str	r1, [r7, #8]
 800cd70:	607a      	str	r2, [r7, #4]
 800cd72:	603b      	str	r3, [r7, #0]
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	4a0a      	ldr	r2, [pc, #40]	@ (800cda4 <disk_write+0x3c>)
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	68dc      	ldr	r4, [r3, #12]
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	4a07      	ldr	r2, [pc, #28]	@ (800cda4 <disk_write+0x3c>)
 800cd88:	4413      	add	r3, r2
 800cd8a:	7a18      	ldrb	r0, [r3, #8]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	68b9      	ldr	r1, [r7, #8]
 800cd92:	47a0      	blx	r4
 800cd94:	4603      	mov	r3, r0
 800cd96:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	371c      	adds	r7, #28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd90      	pop	{r4, r7, pc}
 800cda2:	bf00      	nop
 800cda4:	24000808 	.word	0x24000808

0800cda8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	603a      	str	r2, [r7, #0]
 800cdb2:	71fb      	strb	r3, [r7, #7]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cdb8:	79fb      	ldrb	r3, [r7, #7]
 800cdba:	4a09      	ldr	r2, [pc, #36]	@ (800cde0 <disk_ioctl+0x38>)
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	79fa      	ldrb	r2, [r7, #7]
 800cdc6:	4906      	ldr	r1, [pc, #24]	@ (800cde0 <disk_ioctl+0x38>)
 800cdc8:	440a      	add	r2, r1
 800cdca:	7a10      	ldrb	r0, [r2, #8]
 800cdcc:	79b9      	ldrb	r1, [r7, #6]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4798      	blx	r3
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	73fb      	strb	r3, [r7, #15]
  return res;
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	24000808 	.word	0x24000808

0800cde4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cdf4:	89fb      	ldrh	r3, [r7, #14]
 800cdf6:	021b      	lsls	r3, r3, #8
 800cdf8:	b21a      	sxth	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b21b      	sxth	r3, r3
 800ce00:	4313      	orrs	r3, r2
 800ce02:	b21b      	sxth	r3, r3
 800ce04:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ce06:	89fb      	ldrh	r3, [r7, #14]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	3303      	adds	r3, #3
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	021b      	lsls	r3, r3, #8
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	3202      	adds	r2, #2
 800ce2c:	7812      	ldrb	r2, [r2, #0]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	021b      	lsls	r3, r3, #8
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	3201      	adds	r2, #1
 800ce3a:	7812      	ldrb	r2, [r2, #0]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	7812      	ldrb	r2, [r2, #0]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b083      	sub	sp, #12
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	1c5a      	adds	r2, r3, #1
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	887a      	ldrh	r2, [r7, #2]
 800ce6e:	b2d2      	uxtb	r2, r2
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	887b      	ldrh	r3, [r7, #2]
 800ce74:	0a1b      	lsrs	r3, r3, #8
 800ce76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	607a      	str	r2, [r7, #4]
 800ce7e:	887a      	ldrh	r2, [r7, #2]
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	701a      	strb	r2, [r3, #0]
}
 800ce84:	bf00      	nop
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	1c5a      	adds	r2, r3, #1
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	b2d2      	uxtb	r2, r2
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	0a1b      	lsrs	r3, r3, #8
 800ceaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	1c5a      	adds	r2, r3, #1
 800ceb0:	607a      	str	r2, [r7, #4]
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	b2d2      	uxtb	r2, r2
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	0a1b      	lsrs	r3, r3, #8
 800cebc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	0a1b      	lsrs	r3, r3, #8
 800cece:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	607a      	str	r2, [r7, #4]
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	b2d2      	uxtb	r2, r2
 800ceda:	701a      	strb	r2, [r3, #0]
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00d      	beq.n	800cf1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cf02:	693a      	ldr	r2, [r7, #16]
 800cf04:	1c53      	adds	r3, r2, #1
 800cf06:	613b      	str	r3, [r7, #16]
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	1c59      	adds	r1, r3, #1
 800cf0c:	6179      	str	r1, [r7, #20]
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	607b      	str	r3, [r7, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1f1      	bne.n	800cf02 <mem_cpy+0x1a>
	}
}
 800cf1e:	bf00      	nop
 800cf20:	371c      	adds	r7, #28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cf2a:	b480      	push	{r7}
 800cf2c:	b087      	sub	sp, #28
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	60f8      	str	r0, [r7, #12]
 800cf32:	60b9      	str	r1, [r7, #8]
 800cf34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	617a      	str	r2, [r7, #20]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	b2d2      	uxtb	r2, r2
 800cf44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	607b      	str	r3, [r7, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1f3      	bne.n	800cf3a <mem_set+0x10>
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	371c      	adds	r7, #28
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf60:	b480      	push	{r7}
 800cf62:	b089      	sub	sp, #36	@ 0x24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	61fb      	str	r3, [r7, #28]
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	61fa      	str	r2, [r7, #28]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	4619      	mov	r1, r3
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	1c5a      	adds	r2, r3, #1
 800cf86:	61ba      	str	r2, [r7, #24]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	1acb      	subs	r3, r1, r3
 800cf8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	607b      	str	r3, [r7, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <mem_cmp+0x40>
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0eb      	beq.n	800cf78 <mem_cmp+0x18>

	return r;
 800cfa0:	697b      	ldr	r3, [r7, #20]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3724      	adds	r7, #36	@ 0x24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cfae:	b480      	push	{r7}
 800cfb0:	b083      	sub	sp, #12
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cfb8:	e002      	b.n	800cfc0 <chk_chr+0x12>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	607b      	str	r3, [r7, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d005      	beq.n	800cfd4 <chk_chr+0x26>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d1f2      	bne.n	800cfba <chk_chr+0xc>
	return *str;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cfee:	2300      	movs	r3, #0
 800cff0:	60bb      	str	r3, [r7, #8]
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	60fb      	str	r3, [r7, #12]
 800cff6:	e029      	b.n	800d04c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cff8:	4a27      	ldr	r2, [pc, #156]	@ (800d098 <chk_lock+0xb4>)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	011b      	lsls	r3, r3, #4
 800cffe:	4413      	add	r3, r2
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d01d      	beq.n	800d042 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d006:	4a24      	ldr	r2, [pc, #144]	@ (800d098 <chk_lock+0xb4>)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	011b      	lsls	r3, r3, #4
 800d00c:	4413      	add	r3, r2
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	429a      	cmp	r2, r3
 800d016:	d116      	bne.n	800d046 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d018:	4a1f      	ldr	r2, [pc, #124]	@ (800d098 <chk_lock+0xb4>)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	011b      	lsls	r3, r3, #4
 800d01e:	4413      	add	r3, r2
 800d020:	3304      	adds	r3, #4
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d028:	429a      	cmp	r2, r3
 800d02a:	d10c      	bne.n	800d046 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d02c:	4a1a      	ldr	r2, [pc, #104]	@ (800d098 <chk_lock+0xb4>)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	4413      	add	r3, r2
 800d034:	3308      	adds	r3, #8
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d102      	bne.n	800d046 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d040:	e007      	b.n	800d052 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d042:	2301      	movs	r3, #1
 800d044:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3301      	adds	r3, #1
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d9d2      	bls.n	800cff8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d109      	bne.n	800d06c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d102      	bne.n	800d064 <chk_lock+0x80>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b02      	cmp	r3, #2
 800d062:	d101      	bne.n	800d068 <chk_lock+0x84>
 800d064:	2300      	movs	r3, #0
 800d066:	e010      	b.n	800d08a <chk_lock+0xa6>
 800d068:	2312      	movs	r3, #18
 800d06a:	e00e      	b.n	800d08a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d108      	bne.n	800d084 <chk_lock+0xa0>
 800d072:	4a09      	ldr	r2, [pc, #36]	@ (800d098 <chk_lock+0xb4>)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	011b      	lsls	r3, r3, #4
 800d078:	4413      	add	r3, r2
 800d07a:	330c      	adds	r3, #12
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d082:	d101      	bne.n	800d088 <chk_lock+0xa4>
 800d084:	2310      	movs	r3, #16
 800d086:	e000      	b.n	800d08a <chk_lock+0xa6>
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	240007e8 	.word	0x240007e8

0800d09c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	607b      	str	r3, [r7, #4]
 800d0a6:	e002      	b.n	800d0ae <enq_lock+0x12>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	607b      	str	r3, [r7, #4]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d806      	bhi.n	800d0c2 <enq_lock+0x26>
 800d0b4:	4a09      	ldr	r2, [pc, #36]	@ (800d0dc <enq_lock+0x40>)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	4413      	add	r3, r2
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1f2      	bne.n	800d0a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	bf14      	ite	ne
 800d0c8:	2301      	movne	r3, #1
 800d0ca:	2300      	moveq	r3, #0
 800d0cc:	b2db      	uxtb	r3, r3
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	240007e8 	.word	0x240007e8

0800d0e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e01f      	b.n	800d130 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d0f0:	4a41      	ldr	r2, [pc, #260]	@ (800d1f8 <inc_lock+0x118>)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	011b      	lsls	r3, r3, #4
 800d0f6:	4413      	add	r3, r2
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d113      	bne.n	800d12a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d102:	4a3d      	ldr	r2, [pc, #244]	@ (800d1f8 <inc_lock+0x118>)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	011b      	lsls	r3, r3, #4
 800d108:	4413      	add	r3, r2
 800d10a:	3304      	adds	r3, #4
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d112:	429a      	cmp	r2, r3
 800d114:	d109      	bne.n	800d12a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d116:	4a38      	ldr	r2, [pc, #224]	@ (800d1f8 <inc_lock+0x118>)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	4413      	add	r3, r2
 800d11e:	3308      	adds	r3, #8
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d126:	429a      	cmp	r2, r3
 800d128:	d006      	beq.n	800d138 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3301      	adds	r3, #1
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d9dc      	bls.n	800d0f0 <inc_lock+0x10>
 800d136:	e000      	b.n	800d13a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d138:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d132      	bne.n	800d1a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
 800d144:	e002      	b.n	800d14c <inc_lock+0x6c>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3301      	adds	r3, #1
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d806      	bhi.n	800d160 <inc_lock+0x80>
 800d152:	4a29      	ldr	r2, [pc, #164]	@ (800d1f8 <inc_lock+0x118>)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	4413      	add	r3, r2
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f2      	bne.n	800d146 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d101      	bne.n	800d16a <inc_lock+0x8a>
 800d166:	2300      	movs	r3, #0
 800d168:	e040      	b.n	800d1ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4922      	ldr	r1, [pc, #136]	@ (800d1f8 <inc_lock+0x118>)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	011b      	lsls	r3, r3, #4
 800d174:	440b      	add	r3, r1
 800d176:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	491e      	ldr	r1, [pc, #120]	@ (800d1f8 <inc_lock+0x118>)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	011b      	lsls	r3, r3, #4
 800d182:	440b      	add	r3, r1
 800d184:	3304      	adds	r3, #4
 800d186:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	695a      	ldr	r2, [r3, #20]
 800d18c:	491a      	ldr	r1, [pc, #104]	@ (800d1f8 <inc_lock+0x118>)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	011b      	lsls	r3, r3, #4
 800d192:	440b      	add	r3, r1
 800d194:	3308      	adds	r3, #8
 800d196:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d198:	4a17      	ldr	r2, [pc, #92]	@ (800d1f8 <inc_lock+0x118>)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	4413      	add	r3, r2
 800d1a0:	330c      	adds	r3, #12
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <inc_lock+0xe0>
 800d1ac:	4a12      	ldr	r2, [pc, #72]	@ (800d1f8 <inc_lock+0x118>)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	011b      	lsls	r3, r3, #4
 800d1b2:	4413      	add	r3, r2
 800d1b4:	330c      	adds	r3, #12
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d001      	beq.n	800d1c0 <inc_lock+0xe0>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e015      	b.n	800d1ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d108      	bne.n	800d1d8 <inc_lock+0xf8>
 800d1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f8 <inc_lock+0x118>)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	011b      	lsls	r3, r3, #4
 800d1cc:	4413      	add	r3, r2
 800d1ce:	330c      	adds	r3, #12
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	e001      	b.n	800d1dc <inc_lock+0xfc>
 800d1d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1dc:	4906      	ldr	r1, [pc, #24]	@ (800d1f8 <inc_lock+0x118>)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	011b      	lsls	r3, r3, #4
 800d1e2:	440b      	add	r3, r1
 800d1e4:	330c      	adds	r3, #12
 800d1e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	3301      	adds	r3, #1
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	240007e8 	.word	0x240007e8

0800d1fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	3b01      	subs	r3, #1
 800d208:	607b      	str	r3, [r7, #4]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d825      	bhi.n	800d25c <dec_lock+0x60>
		n = Files[i].ctr;
 800d210:	4a17      	ldr	r2, [pc, #92]	@ (800d270 <dec_lock+0x74>)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	011b      	lsls	r3, r3, #4
 800d216:	4413      	add	r3, r2
 800d218:	330c      	adds	r3, #12
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d21e:	89fb      	ldrh	r3, [r7, #14]
 800d220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d224:	d101      	bne.n	800d22a <dec_lock+0x2e>
 800d226:	2300      	movs	r3, #0
 800d228:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d22a:	89fb      	ldrh	r3, [r7, #14]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <dec_lock+0x3a>
 800d230:	89fb      	ldrh	r3, [r7, #14]
 800d232:	3b01      	subs	r3, #1
 800d234:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d236:	4a0e      	ldr	r2, [pc, #56]	@ (800d270 <dec_lock+0x74>)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	4413      	add	r3, r2
 800d23e:	330c      	adds	r3, #12
 800d240:	89fa      	ldrh	r2, [r7, #14]
 800d242:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d244:	89fb      	ldrh	r3, [r7, #14]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d105      	bne.n	800d256 <dec_lock+0x5a>
 800d24a:	4a09      	ldr	r2, [pc, #36]	@ (800d270 <dec_lock+0x74>)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	4413      	add	r3, r2
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	737b      	strb	r3, [r7, #13]
 800d25a:	e001      	b.n	800d260 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d25c:	2302      	movs	r3, #2
 800d25e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d260:	7b7b      	ldrb	r3, [r7, #13]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	240007e8 	.word	0x240007e8

0800d274 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d27c:	2300      	movs	r3, #0
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	e010      	b.n	800d2a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d282:	4a0d      	ldr	r2, [pc, #52]	@ (800d2b8 <clear_lock+0x44>)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	011b      	lsls	r3, r3, #4
 800d288:	4413      	add	r3, r2
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d105      	bne.n	800d29e <clear_lock+0x2a>
 800d292:	4a09      	ldr	r2, [pc, #36]	@ (800d2b8 <clear_lock+0x44>)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	011b      	lsls	r3, r3, #4
 800d298:	4413      	add	r3, r2
 800d29a:	2200      	movs	r2, #0
 800d29c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d9eb      	bls.n	800d282 <clear_lock+0xe>
	}
}
 800d2aa:	bf00      	nop
 800d2ac:	bf00      	nop
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	240007e8 	.word	0x240007e8

0800d2bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	78db      	ldrb	r3, [r3, #3]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d034      	beq.n	800d33a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7858      	ldrb	r0, [r3, #1]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	f7ff fd40 	bl	800cd68 <disk_write>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d002      	beq.n	800d2f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	73fb      	strb	r3, [r7, #15]
 800d2f2:	e022      	b.n	800d33a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a1b      	ldr	r3, [r3, #32]
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	1ad2      	subs	r2, r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	429a      	cmp	r2, r3
 800d308:	d217      	bcs.n	800d33a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	789b      	ldrb	r3, [r3, #2]
 800d30e:	613b      	str	r3, [r7, #16]
 800d310:	e010      	b.n	800d334 <sync_window+0x78>
					wsect += fs->fsize;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	4413      	add	r3, r2
 800d31a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	7858      	ldrb	r0, [r3, #1]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d326:	2301      	movs	r3, #1
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	f7ff fd1d 	bl	800cd68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	3b01      	subs	r3, #1
 800d332:	613b      	str	r3, [r7, #16]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d8eb      	bhi.n	800d312 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d34e:	2300      	movs	r3, #0
 800d350:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d01b      	beq.n	800d394 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff ffad 	bl	800d2bc <sync_window>
 800d362:	4603      	mov	r3, r0
 800d364:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d366:	7bfb      	ldrb	r3, [r7, #15]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d113      	bne.n	800d394 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	7858      	ldrb	r0, [r3, #1]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d376:	2301      	movs	r3, #1
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	f7ff fcd5 	bl	800cd28 <disk_read>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d004      	beq.n	800d38e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d384:	f04f 33ff 	mov.w	r3, #4294967295
 800d388:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d394:	7bfb      	ldrb	r3, [r7, #15]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
	...

0800d3a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff ff87 	bl	800d2bc <sync_window>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d158      	bne.n	800d46a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d148      	bne.n	800d452 <sync_fs+0xb2>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	791b      	ldrb	r3, [r3, #4]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d144      	bne.n	800d452 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3330      	adds	r3, #48	@ 0x30
 800d3cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7ff fda9 	bl	800cf2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3330      	adds	r3, #48	@ 0x30
 800d3dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d3e0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fd38 	bl	800ce5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3330      	adds	r3, #48	@ 0x30
 800d3ee:	4921      	ldr	r1, [pc, #132]	@ (800d474 <sync_fs+0xd4>)
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff fd4d 	bl	800ce90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3330      	adds	r3, #48	@ 0x30
 800d3fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d3fe:	491e      	ldr	r1, [pc, #120]	@ (800d478 <sync_fs+0xd8>)
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff fd45 	bl	800ce90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3330      	adds	r3, #48	@ 0x30
 800d40a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	4619      	mov	r1, r3
 800d414:	4610      	mov	r0, r2
 800d416:	f7ff fd3b 	bl	800ce90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3330      	adds	r3, #48	@ 0x30
 800d41e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7ff fd31 	bl	800ce90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	1c5a      	adds	r2, r3, #1
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7858      	ldrb	r0, [r3, #1]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d446:	2301      	movs	r3, #1
 800d448:	f7ff fc8e 	bl	800cd68 <disk_write>
			fs->fsi_flag = 0;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	785b      	ldrb	r3, [r3, #1]
 800d456:	2200      	movs	r2, #0
 800d458:	2100      	movs	r1, #0
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fca4 	bl	800cda8 <disk_ioctl>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <sync_fs+0xca>
 800d466:	2301      	movs	r3, #1
 800d468:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	41615252 	.word	0x41615252
 800d478:	61417272 	.word	0x61417272

0800d47c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	3b02      	subs	r3, #2
 800d48a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	695b      	ldr	r3, [r3, #20]
 800d490:	3b02      	subs	r3, #2
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	429a      	cmp	r2, r3
 800d496:	d301      	bcc.n	800d49c <clust2sect+0x20>
 800d498:	2300      	movs	r3, #0
 800d49a:	e008      	b.n	800d4ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	895b      	ldrh	r3, [r3, #10]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	fb03 f202 	mul.w	r2, r3, r2
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ac:	4413      	add	r3, r2
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr

0800d4ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b086      	sub	sp, #24
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d904      	bls.n	800d4da <get_fat+0x20>
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	695b      	ldr	r3, [r3, #20]
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d302      	bcc.n	800d4e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d4da:	2301      	movs	r3, #1
 800d4dc:	617b      	str	r3, [r7, #20]
 800d4de:	e08e      	b.n	800d5fe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	d061      	beq.n	800d5b2 <get_fat+0xf8>
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	dc7b      	bgt.n	800d5ea <get_fat+0x130>
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d002      	beq.n	800d4fc <get_fat+0x42>
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d041      	beq.n	800d57e <get_fat+0xc4>
 800d4fa:	e076      	b.n	800d5ea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	085b      	lsrs	r3, r3, #1
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	4413      	add	r3, r2
 800d508:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6a1a      	ldr	r2, [r3, #32]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	0a5b      	lsrs	r3, r3, #9
 800d512:	4413      	add	r3, r2
 800d514:	4619      	mov	r1, r3
 800d516:	6938      	ldr	r0, [r7, #16]
 800d518:	f7ff ff14 	bl	800d344 <move_window>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d166      	bne.n	800d5f0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	60fa      	str	r2, [r7, #12]
 800d528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52c:	693a      	ldr	r2, [r7, #16]
 800d52e:	4413      	add	r3, r2
 800d530:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d534:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6a1a      	ldr	r2, [r3, #32]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	0a5b      	lsrs	r3, r3, #9
 800d53e:	4413      	add	r3, r2
 800d540:	4619      	mov	r1, r3
 800d542:	6938      	ldr	r0, [r7, #16]
 800d544:	f7ff fefe 	bl	800d344 <move_window>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d152      	bne.n	800d5f4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	4413      	add	r3, r2
 800d558:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d55c:	021b      	lsls	r3, r3, #8
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	4313      	orrs	r3, r2
 800d562:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d002      	beq.n	800d574 <get_fat+0xba>
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	091b      	lsrs	r3, r3, #4
 800d572:	e002      	b.n	800d57a <get_fat+0xc0>
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d57a:	617b      	str	r3, [r7, #20]
			break;
 800d57c:	e03f      	b.n	800d5fe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	6a1a      	ldr	r2, [r3, #32]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	0a1b      	lsrs	r3, r3, #8
 800d586:	4413      	add	r3, r2
 800d588:	4619      	mov	r1, r3
 800d58a:	6938      	ldr	r0, [r7, #16]
 800d58c:	f7ff feda 	bl	800d344 <move_window>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d130      	bne.n	800d5f8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d5a4:	4413      	add	r3, r2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7ff fc1c 	bl	800cde4 <ld_word>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	617b      	str	r3, [r7, #20]
			break;
 800d5b0:	e025      	b.n	800d5fe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	6a1a      	ldr	r2, [r3, #32]
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	09db      	lsrs	r3, r3, #7
 800d5ba:	4413      	add	r3, r2
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6938      	ldr	r0, [r7, #16]
 800d5c0:	f7ff fec0 	bl	800d344 <move_window>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d118      	bne.n	800d5fc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d5d8:	4413      	add	r3, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7ff fc1a 	bl	800ce14 <ld_dword>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d5e6:	617b      	str	r3, [r7, #20]
			break;
 800d5e8:	e009      	b.n	800d5fe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	e006      	b.n	800d5fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5f0:	bf00      	nop
 800d5f2:	e004      	b.n	800d5fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5f4:	bf00      	nop
 800d5f6:	e002      	b.n	800d5fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d5f8:	bf00      	nop
 800d5fa:	e000      	b.n	800d5fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5fc:	bf00      	nop
		}
	}

	return val;
 800d5fe:	697b      	ldr	r3, [r7, #20]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d608:	b590      	push	{r4, r7, lr}
 800d60a:	b089      	sub	sp, #36	@ 0x24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d614:	2302      	movs	r3, #2
 800d616:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	f240 80d9 	bls.w	800d7d2 <put_fat+0x1ca>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	429a      	cmp	r2, r3
 800d628:	f080 80d3 	bcs.w	800d7d2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b03      	cmp	r3, #3
 800d632:	f000 8096 	beq.w	800d762 <put_fat+0x15a>
 800d636:	2b03      	cmp	r3, #3
 800d638:	f300 80cb 	bgt.w	800d7d2 <put_fat+0x1ca>
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d002      	beq.n	800d646 <put_fat+0x3e>
 800d640:	2b02      	cmp	r3, #2
 800d642:	d06e      	beq.n	800d722 <put_fat+0x11a>
 800d644:	e0c5      	b.n	800d7d2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	61bb      	str	r3, [r7, #24]
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	085b      	lsrs	r3, r3, #1
 800d64e:	69ba      	ldr	r2, [r7, #24]
 800d650:	4413      	add	r3, r2
 800d652:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a1a      	ldr	r2, [r3, #32]
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	0a5b      	lsrs	r3, r3, #9
 800d65c:	4413      	add	r3, r2
 800d65e:	4619      	mov	r1, r3
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f7ff fe6f 	bl	800d344 <move_window>
 800d666:	4603      	mov	r3, r0
 800d668:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d66a:	7ffb      	ldrb	r3, [r7, #31]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f040 80a9 	bne.w	800d7c4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	1c59      	adds	r1, r3, #1
 800d67c:	61b9      	str	r1, [r7, #24]
 800d67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d682:	4413      	add	r3, r2
 800d684:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00d      	beq.n	800d6ac <put_fat+0xa4>
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	b25b      	sxtb	r3, r3
 800d696:	f003 030f 	and.w	r3, r3, #15
 800d69a:	b25a      	sxtb	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	011b      	lsls	r3, r3, #4
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	e001      	b.n	800d6b0 <put_fat+0xa8>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6a1a      	ldr	r2, [r3, #32]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	0a5b      	lsrs	r3, r3, #9
 800d6c2:	4413      	add	r3, r2
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff fe3c 	bl	800d344 <move_window>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6d0:	7ffb      	ldrb	r3, [r7, #31]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d178      	bne.n	800d7c8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e2:	4413      	add	r3, r2
 800d6e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d003      	beq.n	800d6f8 <put_fat+0xf0>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	091b      	lsrs	r3, r3, #4
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	e00e      	b.n	800d716 <put_fat+0x10e>
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	b25b      	sxtb	r3, r3
 800d6fe:	f023 030f 	bic.w	r3, r3, #15
 800d702:	b25a      	sxtb	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	0a1b      	lsrs	r3, r3, #8
 800d708:	b25b      	sxtb	r3, r3
 800d70a:	f003 030f 	and.w	r3, r3, #15
 800d70e:	b25b      	sxtb	r3, r3
 800d710:	4313      	orrs	r3, r2
 800d712:	b25b      	sxtb	r3, r3
 800d714:	b2db      	uxtb	r3, r3
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2201      	movs	r2, #1
 800d71e:	70da      	strb	r2, [r3, #3]
			break;
 800d720:	e057      	b.n	800d7d2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6a1a      	ldr	r2, [r3, #32]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	0a1b      	lsrs	r3, r3, #8
 800d72a:	4413      	add	r3, r2
 800d72c:	4619      	mov	r1, r3
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff fe08 	bl	800d344 <move_window>
 800d734:	4603      	mov	r3, r0
 800d736:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d738:	7ffb      	ldrb	r3, [r7, #31]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d146      	bne.n	800d7cc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d74c:	4413      	add	r3, r2
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	b292      	uxth	r2, r2
 800d752:	4611      	mov	r1, r2
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff fb80 	bl	800ce5a <st_word>
			fs->wflag = 1;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2201      	movs	r2, #1
 800d75e:	70da      	strb	r2, [r3, #3]
			break;
 800d760:	e037      	b.n	800d7d2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6a1a      	ldr	r2, [r3, #32]
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	09db      	lsrs	r3, r3, #7
 800d76a:	4413      	add	r3, r2
 800d76c:	4619      	mov	r1, r3
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f7ff fde8 	bl	800d344 <move_window>
 800d774:	4603      	mov	r3, r0
 800d776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d778:	7ffb      	ldrb	r3, [r7, #31]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d128      	bne.n	800d7d0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d792:	4413      	add	r3, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff fb3d 	bl	800ce14 <ld_dword>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d7a0:	4323      	orrs	r3, r4
 800d7a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d7b2:	4413      	add	r3, r2
 800d7b4:	6879      	ldr	r1, [r7, #4]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7ff fb6a 	bl	800ce90 <st_dword>
			fs->wflag = 1;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	70da      	strb	r2, [r3, #3]
			break;
 800d7c2:	e006      	b.n	800d7d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7c4:	bf00      	nop
 800d7c6:	e004      	b.n	800d7d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7c8:	bf00      	nop
 800d7ca:	e002      	b.n	800d7d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7cc:	bf00      	nop
 800d7ce:	e000      	b.n	800d7d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7d0:	bf00      	nop
		}
	}
	return res;
 800d7d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3724      	adds	r7, #36	@ 0x24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd90      	pop	{r4, r7, pc}

0800d7dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d904      	bls.n	800d802 <remove_chain+0x26>
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d301      	bcc.n	800d806 <remove_chain+0x2a>
 800d802:	2302      	movs	r3, #2
 800d804:	e04b      	b.n	800d89e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00c      	beq.n	800d826 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d80c:	f04f 32ff 	mov.w	r2, #4294967295
 800d810:	6879      	ldr	r1, [r7, #4]
 800d812:	69b8      	ldr	r0, [r7, #24]
 800d814:	f7ff fef8 	bl	800d608 <put_fat>
 800d818:	4603      	mov	r3, r0
 800d81a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d81c:	7ffb      	ldrb	r3, [r7, #31]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <remove_chain+0x4a>
 800d822:	7ffb      	ldrb	r3, [r7, #31]
 800d824:	e03b      	b.n	800d89e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f7ff fe46 	bl	800d4ba <get_fat>
 800d82e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d031      	beq.n	800d89a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d101      	bne.n	800d840 <remove_chain+0x64>
 800d83c:	2302      	movs	r3, #2
 800d83e:	e02e      	b.n	800d89e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d101      	bne.n	800d84c <remove_chain+0x70>
 800d848:	2301      	movs	r3, #1
 800d84a:	e028      	b.n	800d89e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d84c:	2200      	movs	r2, #0
 800d84e:	68b9      	ldr	r1, [r7, #8]
 800d850:	69b8      	ldr	r0, [r7, #24]
 800d852:	f7ff fed9 	bl	800d608 <put_fat>
 800d856:	4603      	mov	r3, r0
 800d858:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d85a:	7ffb      	ldrb	r3, [r7, #31]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <remove_chain+0x88>
 800d860:	7ffb      	ldrb	r3, [r7, #31]
 800d862:	e01c      	b.n	800d89e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	691a      	ldr	r2, [r3, #16]
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	3b02      	subs	r3, #2
 800d86e:	429a      	cmp	r2, r3
 800d870:	d20b      	bcs.n	800d88a <remove_chain+0xae>
			fs->free_clst++;
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	791b      	ldrb	r3, [r3, #4]
 800d880:	f043 0301 	orr.w	r3, r3, #1
 800d884:	b2da      	uxtb	r2, r3
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	429a      	cmp	r2, r3
 800d896:	d3c6      	bcc.n	800d826 <remove_chain+0x4a>
 800d898:	e000      	b.n	800d89c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d89a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3720      	adds	r7, #32
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b088      	sub	sp, #32
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10d      	bne.n	800d8d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <create_chain+0x2c>
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	69ba      	ldr	r2, [r7, #24]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d31b      	bcc.n	800d90a <create_chain+0x64>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	61bb      	str	r3, [r7, #24]
 800d8d6:	e018      	b.n	800d90a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d8d8:	6839      	ldr	r1, [r7, #0]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff fded 	bl	800d4ba <get_fat>
 800d8e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d801      	bhi.n	800d8ec <create_chain+0x46>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e070      	b.n	800d9ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f2:	d101      	bne.n	800d8f8 <create_chain+0x52>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	e06a      	b.n	800d9ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d201      	bcs.n	800d906 <create_chain+0x60>
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	e063      	b.n	800d9ce <create_chain+0x128>
		scl = clst;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	3301      	adds	r3, #1
 800d912:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	695b      	ldr	r3, [r3, #20]
 800d918:	69fa      	ldr	r2, [r7, #28]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d307      	bcc.n	800d92e <create_chain+0x88>
				ncl = 2;
 800d91e:	2302      	movs	r3, #2
 800d920:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d922:	69fa      	ldr	r2, [r7, #28]
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	429a      	cmp	r2, r3
 800d928:	d901      	bls.n	800d92e <create_chain+0x88>
 800d92a:	2300      	movs	r3, #0
 800d92c:	e04f      	b.n	800d9ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d92e:	69f9      	ldr	r1, [r7, #28]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff fdc2 	bl	800d4ba <get_fat>
 800d936:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00e      	beq.n	800d95c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d003      	beq.n	800d94c <create_chain+0xa6>
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94a:	d101      	bne.n	800d950 <create_chain+0xaa>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	e03e      	b.n	800d9ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d950:	69fa      	ldr	r2, [r7, #28]
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	429a      	cmp	r2, r3
 800d956:	d1da      	bne.n	800d90e <create_chain+0x68>
 800d958:	2300      	movs	r3, #0
 800d95a:	e038      	b.n	800d9ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d95c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d95e:	f04f 32ff 	mov.w	r2, #4294967295
 800d962:	69f9      	ldr	r1, [r7, #28]
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f7ff fe4f 	bl	800d608 <put_fat>
 800d96a:	4603      	mov	r3, r0
 800d96c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d96e:	7dfb      	ldrb	r3, [r7, #23]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d109      	bne.n	800d988 <create_chain+0xe2>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d006      	beq.n	800d988 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d97a:	69fa      	ldr	r2, [r7, #28]
 800d97c:	6839      	ldr	r1, [r7, #0]
 800d97e:	6938      	ldr	r0, [r7, #16]
 800d980:	f7ff fe42 	bl	800d608 <put_fat>
 800d984:	4603      	mov	r3, r0
 800d986:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d988:	7dfb      	ldrb	r3, [r7, #23]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d116      	bne.n	800d9bc <create_chain+0x116>
		fs->last_clst = ncl;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	69fa      	ldr	r2, [r7, #28]
 800d992:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	691a      	ldr	r2, [r3, #16]
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	3b02      	subs	r3, #2
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d804      	bhi.n	800d9ac <create_chain+0x106>
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	1e5a      	subs	r2, r3, #1
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	791b      	ldrb	r3, [r3, #4]
 800d9b0:	f043 0301 	orr.w	r3, r3, #1
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	711a      	strb	r2, [r3, #4]
 800d9ba:	e007      	b.n	800d9cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d102      	bne.n	800d9c8 <create_chain+0x122>
 800d9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c6:	e000      	b.n	800d9ca <create_chain+0x124>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d9cc:	69fb      	ldr	r3, [r7, #28]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3720      	adds	r7, #32
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b087      	sub	sp, #28
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
 800d9de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	0a5b      	lsrs	r3, r3, #9
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	8952      	ldrh	r2, [r2, #10]
 800d9f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	1d1a      	adds	r2, r3, #4
 800da00:	613a      	str	r2, [r7, #16]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <clmt_clust+0x3a>
 800da0c:	2300      	movs	r3, #0
 800da0e:	e010      	b.n	800da32 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	429a      	cmp	r2, r3
 800da16:	d307      	bcc.n	800da28 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800da18:	697a      	ldr	r2, [r7, #20]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	3304      	adds	r3, #4
 800da24:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da26:	e7e9      	b.n	800d9fc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800da28:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	4413      	add	r3, r2
}
 800da32:	4618      	mov	r0, r3
 800da34:	371c      	adds	r7, #28
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b086      	sub	sp, #24
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da54:	d204      	bcs.n	800da60 <dir_sdi+0x22>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	f003 031f 	and.w	r3, r3, #31
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <dir_sdi+0x26>
		return FR_INT_ERR;
 800da60:	2302      	movs	r3, #2
 800da62:	e063      	b.n	800db2c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <dir_sdi+0x46>
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d902      	bls.n	800da84 <dir_sdi+0x46>
		clst = fs->dirbase;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da82:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10c      	bne.n	800daa4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	095b      	lsrs	r3, r3, #5
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	8912      	ldrh	r2, [r2, #8]
 800da92:	4293      	cmp	r3, r2
 800da94:	d301      	bcc.n	800da9a <dir_sdi+0x5c>
 800da96:	2302      	movs	r3, #2
 800da98:	e048      	b.n	800db2c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	61da      	str	r2, [r3, #28]
 800daa2:	e029      	b.n	800daf8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	895b      	ldrh	r3, [r3, #10]
 800daa8:	025b      	lsls	r3, r3, #9
 800daaa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800daac:	e019      	b.n	800dae2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6979      	ldr	r1, [r7, #20]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff fd01 	bl	800d4ba <get_fat>
 800dab8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac0:	d101      	bne.n	800dac6 <dir_sdi+0x88>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e032      	b.n	800db2c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d904      	bls.n	800dad6 <dir_sdi+0x98>
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d301      	bcc.n	800dada <dir_sdi+0x9c>
 800dad6:	2302      	movs	r3, #2
 800dad8:	e028      	b.n	800db2c <dir_sdi+0xee>
			ofs -= csz;
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d2e1      	bcs.n	800daae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800daea:	6979      	ldr	r1, [r7, #20]
 800daec:	6938      	ldr	r0, [r7, #16]
 800daee:	f7ff fcc5 	bl	800d47c <clust2sect>
 800daf2:	4602      	mov	r2, r0
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	69db      	ldr	r3, [r3, #28]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d101      	bne.n	800db0a <dir_sdi+0xcc>
 800db06:	2302      	movs	r3, #2
 800db08:	e010      	b.n	800db2c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	69da      	ldr	r2, [r3, #28]
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	0a5b      	lsrs	r3, r3, #9
 800db12:	441a      	add	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db24:	441a      	add	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	3320      	adds	r3, #32
 800db4a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <dir_next+0x28>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db5a:	d301      	bcc.n	800db60 <dir_next+0x2c>
 800db5c:	2304      	movs	r3, #4
 800db5e:	e0aa      	b.n	800dcb6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db66:	2b00      	cmp	r3, #0
 800db68:	f040 8098 	bne.w	800dc9c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	69db      	ldr	r3, [r3, #28]
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	699b      	ldr	r3, [r3, #24]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d10b      	bne.n	800db96 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	095b      	lsrs	r3, r3, #5
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	8912      	ldrh	r2, [r2, #8]
 800db86:	4293      	cmp	r3, r2
 800db88:	f0c0 8088 	bcc.w	800dc9c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	61da      	str	r2, [r3, #28]
 800db92:	2304      	movs	r3, #4
 800db94:	e08f      	b.n	800dcb6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	0a5b      	lsrs	r3, r3, #9
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	8952      	ldrh	r2, [r2, #10]
 800db9e:	3a01      	subs	r2, #1
 800dba0:	4013      	ands	r3, r2
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d17a      	bne.n	800dc9c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	4619      	mov	r1, r3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	f7ff fc83 	bl	800d4ba <get_fat>
 800dbb4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d801      	bhi.n	800dbc0 <dir_next+0x8c>
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	e07a      	b.n	800dcb6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc6:	d101      	bne.n	800dbcc <dir_next+0x98>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e074      	b.n	800dcb6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	697a      	ldr	r2, [r7, #20]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d358      	bcc.n	800dc88 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d104      	bne.n	800dbe6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	61da      	str	r2, [r3, #28]
 800dbe2:	2304      	movs	r3, #4
 800dbe4:	e067      	b.n	800dcb6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	4619      	mov	r1, r3
 800dbee:	4610      	mov	r0, r2
 800dbf0:	f7ff fe59 	bl	800d8a6 <create_chain>
 800dbf4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d101      	bne.n	800dc00 <dir_next+0xcc>
 800dbfc:	2307      	movs	r3, #7
 800dbfe:	e05a      	b.n	800dcb6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d101      	bne.n	800dc0a <dir_next+0xd6>
 800dc06:	2302      	movs	r3, #2
 800dc08:	e055      	b.n	800dcb6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc10:	d101      	bne.n	800dc16 <dir_next+0xe2>
 800dc12:	2301      	movs	r3, #1
 800dc14:	e04f      	b.n	800dcb6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7ff fb50 	bl	800d2bc <sync_window>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d001      	beq.n	800dc26 <dir_next+0xf2>
 800dc22:	2301      	movs	r3, #1
 800dc24:	e047      	b.n	800dcb6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3330      	adds	r3, #48	@ 0x30
 800dc2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc2e:	2100      	movs	r1, #0
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7ff f97a 	bl	800cf2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc36:	2300      	movs	r3, #0
 800dc38:	613b      	str	r3, [r7, #16]
 800dc3a:	6979      	ldr	r1, [r7, #20]
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f7ff fc1d 	bl	800d47c <clust2sect>
 800dc42:	4602      	mov	r2, r0
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dc48:	e012      	b.n	800dc70 <dir_next+0x13c>
						fs->wflag = 1;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff fb33 	bl	800d2bc <sync_window>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <dir_next+0x12c>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e02a      	b.n	800dcb6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3301      	adds	r3, #1
 800dc64:	613b      	str	r3, [r7, #16]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	461a      	mov	r2, r3
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d3e6      	bcc.n	800dc4a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	1ad2      	subs	r2, r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dc8e:	6979      	ldr	r1, [r7, #20]
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f7ff fbf3 	bl	800d47c <clust2sect>
 800dc96:	4602      	mov	r2, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcae:	441a      	add	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b086      	sub	sp, #24
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dcce:	2100      	movs	r1, #0
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff feb4 	bl	800da3e <dir_sdi>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dcda:	7dfb      	ldrb	r3, [r7, #23]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d12b      	bne.n	800dd38 <dir_alloc+0x7a>
		n = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	69db      	ldr	r3, [r3, #28]
 800dce8:	4619      	mov	r1, r3
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f7ff fb2a 	bl	800d344 <move_window>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d11d      	bne.n	800dd36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	2be5      	cmp	r3, #229	@ 0xe5
 800dd02:	d004      	beq.n	800dd0e <dir_alloc+0x50>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a1b      	ldr	r3, [r3, #32]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d107      	bne.n	800dd1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	3301      	adds	r3, #1
 800dd12:	613b      	str	r3, [r7, #16]
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d102      	bne.n	800dd22 <dir_alloc+0x64>
 800dd1c:	e00c      	b.n	800dd38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dd1e:	2300      	movs	r3, #0
 800dd20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dd22:	2101      	movs	r1, #1
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff ff05 	bl	800db34 <dir_next>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d0d7      	beq.n	800dce4 <dir_alloc+0x26>
 800dd34:	e000      	b.n	800dd38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dd36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	d101      	bne.n	800dd42 <dir_alloc+0x84>
 800dd3e:	2307      	movs	r3, #7
 800dd40:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	331a      	adds	r3, #26
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff f842 	bl	800cde4 <ld_word>
 800dd60:	4603      	mov	r3, r0
 800dd62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d109      	bne.n	800dd80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	3314      	adds	r3, #20
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff f837 	bl	800cde4 <ld_word>
 800dd76:	4603      	mov	r3, r0
 800dd78:	041b      	lsls	r3, r3, #16
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dd80:	68fb      	ldr	r3, [r7, #12]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	331a      	adds	r3, #26
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7ff f85a 	bl	800ce5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b03      	cmp	r3, #3
 800ddac:	d109      	bne.n	800ddc2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	f103 0214 	add.w	r2, r3, #20
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	0c1b      	lsrs	r3, r3, #16
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	f7ff f84c 	bl	800ce5a <st_word>
	}
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b086      	sub	sp, #24
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ddd8:	2100      	movs	r1, #0
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff fe2f 	bl	800da3e <dir_sdi>
 800dde0:	4603      	mov	r3, r0
 800dde2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dde4:	7dfb      	ldrb	r3, [r7, #23]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <dir_find+0x24>
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
 800ddec:	e03e      	b.n	800de6c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	69db      	ldr	r3, [r3, #28]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6938      	ldr	r0, [r7, #16]
 800ddf6:	f7ff faa5 	bl	800d344 <move_window>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d12f      	bne.n	800de64 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <dir_find+0x4e>
 800de12:	2304      	movs	r3, #4
 800de14:	75fb      	strb	r3, [r7, #23]
 800de16:	e028      	b.n	800de6a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a1b      	ldr	r3, [r3, #32]
 800de1c:	330b      	adds	r3, #11
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de24:	b2da      	uxtb	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	330b      	adds	r3, #11
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	f003 0308 	and.w	r3, r3, #8
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10a      	bne.n	800de50 <dir_find+0x86>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a18      	ldr	r0, [r3, #32]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3324      	adds	r3, #36	@ 0x24
 800de42:	220b      	movs	r2, #11
 800de44:	4619      	mov	r1, r3
 800de46:	f7ff f88b 	bl	800cf60 <mem_cmp>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00b      	beq.n	800de68 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800de50:	2100      	movs	r1, #0
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7ff fe6e 	bl	800db34 <dir_next>
 800de58:	4603      	mov	r3, r0
 800de5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0c5      	beq.n	800ddee <dir_find+0x24>
 800de62:	e002      	b.n	800de6a <dir_find+0xa0>
		if (res != FR_OK) break;
 800de64:	bf00      	nop
 800de66:	e000      	b.n	800de6a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de68:	bf00      	nop

	return res;
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3718      	adds	r7, #24
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800de82:	2101      	movs	r1, #1
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff ff1a 	bl	800dcbe <dir_alloc>
 800de8a:	4603      	mov	r3, r0
 800de8c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800de8e:	7bfb      	ldrb	r3, [r7, #15]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d11c      	bne.n	800dece <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	69db      	ldr	r3, [r3, #28]
 800de98:	4619      	mov	r1, r3
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7ff fa52 	bl	800d344 <move_window>
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d111      	bne.n	800dece <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	2220      	movs	r2, #32
 800deb0:	2100      	movs	r1, #0
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7ff f839 	bl	800cf2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a18      	ldr	r0, [r3, #32]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	3324      	adds	r3, #36	@ 0x24
 800dec0:	220b      	movs	r2, #11
 800dec2:	4619      	mov	r1, r3
 800dec4:	f7ff f810 	bl	800cee8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2201      	movs	r2, #1
 800decc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dece:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3324      	adds	r3, #36	@ 0x24
 800deec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800deee:	220b      	movs	r2, #11
 800def0:	2120      	movs	r1, #32
 800def2:	68b8      	ldr	r0, [r7, #8]
 800def4:	f7ff f819 	bl	800cf2a <mem_set>
	si = i = 0; ni = 8;
 800def8:	2300      	movs	r3, #0
 800defa:	613b      	str	r3, [r7, #16]
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	61fb      	str	r3, [r7, #28]
 800df00:	2308      	movs	r3, #8
 800df02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	61fa      	str	r2, [r7, #28]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	4413      	add	r3, r2
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800df12:	7efb      	ldrb	r3, [r7, #27]
 800df14:	2b20      	cmp	r3, #32
 800df16:	d94e      	bls.n	800dfb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800df18:	7efb      	ldrb	r3, [r7, #27]
 800df1a:	2b2f      	cmp	r3, #47	@ 0x2f
 800df1c:	d006      	beq.n	800df2c <create_name+0x54>
 800df1e:	7efb      	ldrb	r3, [r7, #27]
 800df20:	2b5c      	cmp	r3, #92	@ 0x5c
 800df22:	d110      	bne.n	800df46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df24:	e002      	b.n	800df2c <create_name+0x54>
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	3301      	adds	r3, #1
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	4413      	add	r3, r2
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b2f      	cmp	r3, #47	@ 0x2f
 800df36:	d0f6      	beq.n	800df26 <create_name+0x4e>
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	4413      	add	r3, r2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b5c      	cmp	r3, #92	@ 0x5c
 800df42:	d0f0      	beq.n	800df26 <create_name+0x4e>
			break;
 800df44:	e038      	b.n	800dfb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800df46:	7efb      	ldrb	r3, [r7, #27]
 800df48:	2b2e      	cmp	r3, #46	@ 0x2e
 800df4a:	d003      	beq.n	800df54 <create_name+0x7c>
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	429a      	cmp	r2, r3
 800df52:	d30c      	bcc.n	800df6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	2b0b      	cmp	r3, #11
 800df58:	d002      	beq.n	800df60 <create_name+0x88>
 800df5a:	7efb      	ldrb	r3, [r7, #27]
 800df5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800df5e:	d001      	beq.n	800df64 <create_name+0x8c>
 800df60:	2306      	movs	r3, #6
 800df62:	e044      	b.n	800dfee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800df64:	2308      	movs	r3, #8
 800df66:	613b      	str	r3, [r7, #16]
 800df68:	230b      	movs	r3, #11
 800df6a:	617b      	str	r3, [r7, #20]
			continue;
 800df6c:	e022      	b.n	800dfb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800df6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800df72:	2b00      	cmp	r3, #0
 800df74:	da04      	bge.n	800df80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800df76:	7efb      	ldrb	r3, [r7, #27]
 800df78:	3b80      	subs	r3, #128	@ 0x80
 800df7a:	4a1f      	ldr	r2, [pc, #124]	@ (800dff8 <create_name+0x120>)
 800df7c:	5cd3      	ldrb	r3, [r2, r3]
 800df7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800df80:	7efb      	ldrb	r3, [r7, #27]
 800df82:	4619      	mov	r1, r3
 800df84:	481d      	ldr	r0, [pc, #116]	@ (800dffc <create_name+0x124>)
 800df86:	f7ff f812 	bl	800cfae <chk_chr>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <create_name+0xbc>
 800df90:	2306      	movs	r3, #6
 800df92:	e02c      	b.n	800dfee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800df94:	7efb      	ldrb	r3, [r7, #27]
 800df96:	2b60      	cmp	r3, #96	@ 0x60
 800df98:	d905      	bls.n	800dfa6 <create_name+0xce>
 800df9a:	7efb      	ldrb	r3, [r7, #27]
 800df9c:	2b7a      	cmp	r3, #122	@ 0x7a
 800df9e:	d802      	bhi.n	800dfa6 <create_name+0xce>
 800dfa0:	7efb      	ldrb	r3, [r7, #27]
 800dfa2:	3b20      	subs	r3, #32
 800dfa4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	1c5a      	adds	r2, r3, #1
 800dfaa:	613a      	str	r2, [r7, #16]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	4413      	add	r3, r2
 800dfb0:	7efa      	ldrb	r2, [r7, #27]
 800dfb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dfb4:	e7a6      	b.n	800df04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dfb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	441a      	add	r2, r3
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <create_name+0xf4>
 800dfc8:	2306      	movs	r3, #6
 800dfca:	e010      	b.n	800dfee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2be5      	cmp	r3, #229	@ 0xe5
 800dfd2:	d102      	bne.n	800dfda <create_name+0x102>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	2205      	movs	r2, #5
 800dfd8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dfda:	7efb      	ldrb	r3, [r7, #27]
 800dfdc:	2b20      	cmp	r3, #32
 800dfde:	d801      	bhi.n	800dfe4 <create_name+0x10c>
 800dfe0:	2204      	movs	r2, #4
 800dfe2:	e000      	b.n	800dfe6 <create_name+0x10e>
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	330b      	adds	r3, #11
 800dfea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dfec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3720      	adds	r7, #32
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	0800fb18 	.word	0x0800fb18
 800dffc:	0800f828 	.word	0x0800f828

0800e000 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e014:	e002      	b.n	800e01c <follow_path+0x1c>
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	3301      	adds	r3, #1
 800e01a:	603b      	str	r3, [r7, #0]
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b2f      	cmp	r3, #47	@ 0x2f
 800e022:	d0f8      	beq.n	800e016 <follow_path+0x16>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	2b5c      	cmp	r3, #92	@ 0x5c
 800e02a:	d0f4      	beq.n	800e016 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2200      	movs	r2, #0
 800e030:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b1f      	cmp	r3, #31
 800e038:	d80a      	bhi.n	800e050 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2280      	movs	r2, #128	@ 0x80
 800e03e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e042:	2100      	movs	r1, #0
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7ff fcfa 	bl	800da3e <dir_sdi>
 800e04a:	4603      	mov	r3, r0
 800e04c:	75fb      	strb	r3, [r7, #23]
 800e04e:	e043      	b.n	800e0d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e050:	463b      	mov	r3, r7
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff ff3f 	bl	800ded8 <create_name>
 800e05a:	4603      	mov	r3, r0
 800e05c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d134      	bne.n	800e0ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff feb0 	bl	800ddca <dir_find>
 800e06a:	4603      	mov	r3, r0
 800e06c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e074:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00a      	beq.n	800e092 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e07c:	7dfb      	ldrb	r3, [r7, #23]
 800e07e:	2b04      	cmp	r3, #4
 800e080:	d127      	bne.n	800e0d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e082:	7afb      	ldrb	r3, [r7, #11]
 800e084:	f003 0304 	and.w	r3, r3, #4
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d122      	bne.n	800e0d2 <follow_path+0xd2>
 800e08c:	2305      	movs	r3, #5
 800e08e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e090:	e01f      	b.n	800e0d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e092:	7afb      	ldrb	r3, [r7, #11]
 800e094:	f003 0304 	and.w	r3, r3, #4
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d11c      	bne.n	800e0d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	799b      	ldrb	r3, [r3, #6]
 800e0a0:	f003 0310 	and.w	r3, r3, #16
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0a8:	2305      	movs	r3, #5
 800e0aa:	75fb      	strb	r3, [r7, #23]
 800e0ac:	e014      	b.n	800e0d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	695b      	ldr	r3, [r3, #20]
 800e0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0bc:	4413      	add	r3, r2
 800e0be:	4619      	mov	r1, r3
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7ff fe43 	bl	800dd4c <ld_clust>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e0cc:	e7c0      	b.n	800e050 <follow_path+0x50>
			if (res != FR_OK) break;
 800e0ce:	bf00      	nop
 800e0d0:	e002      	b.n	800e0d8 <follow_path+0xd8>
				break;
 800e0d2:	bf00      	nop
 800e0d4:	e000      	b.n	800e0d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0d6:	bf00      	nop
			}
		}
	}

	return res;
 800e0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3718      	adds	r7, #24
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b087      	sub	sp, #28
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d031      	beq.n	800e15c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	617b      	str	r3, [r7, #20]
 800e0fe:	e002      	b.n	800e106 <get_ldnumber+0x24>
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	3301      	adds	r3, #1
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	2b20      	cmp	r3, #32
 800e10c:	d903      	bls.n	800e116 <get_ldnumber+0x34>
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b3a      	cmp	r3, #58	@ 0x3a
 800e114:	d1f4      	bne.n	800e100 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e11c:	d11c      	bne.n	800e158 <get_ldnumber+0x76>
			tp = *path;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	60fa      	str	r2, [r7, #12]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	3b30      	subs	r3, #48	@ 0x30
 800e12e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b09      	cmp	r3, #9
 800e134:	d80e      	bhi.n	800e154 <get_ldnumber+0x72>
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d10a      	bne.n	800e154 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d107      	bne.n	800e154 <get_ldnumber+0x72>
					vol = (int)i;
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	3301      	adds	r3, #1
 800e14c:	617b      	str	r3, [r7, #20]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	e002      	b.n	800e15e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e158:	2300      	movs	r3, #0
 800e15a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e15c:	693b      	ldr	r3, [r7, #16]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	371c      	adds	r7, #28
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
	...

0800e16c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	70da      	strb	r2, [r3, #3]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f04f 32ff 	mov.w	r2, #4294967295
 800e182:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7ff f8dc 	bl	800d344 <move_window>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <check_fs+0x2a>
 800e192:	2304      	movs	r3, #4
 800e194:	e038      	b.n	800e208 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	3330      	adds	r3, #48	@ 0x30
 800e19a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe fe20 	bl	800cde4 <ld_word>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d001      	beq.n	800e1b4 <check_fs+0x48>
 800e1b0:	2303      	movs	r3, #3
 800e1b2:	e029      	b.n	800e208 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1ba:	2be9      	cmp	r3, #233	@ 0xe9
 800e1bc:	d009      	beq.n	800e1d2 <check_fs+0x66>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1c4:	2beb      	cmp	r3, #235	@ 0xeb
 800e1c6:	d11e      	bne.n	800e206 <check_fs+0x9a>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e1ce:	2b90      	cmp	r3, #144	@ 0x90
 800e1d0:	d119      	bne.n	800e206 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	3330      	adds	r3, #48	@ 0x30
 800e1d6:	3336      	adds	r3, #54	@ 0x36
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fe1b 	bl	800ce14 <ld_dword>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e1e4:	4a0a      	ldr	r2, [pc, #40]	@ (800e210 <check_fs+0xa4>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d101      	bne.n	800e1ee <check_fs+0x82>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e00c      	b.n	800e208 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3330      	adds	r3, #48	@ 0x30
 800e1f2:	3352      	adds	r3, #82	@ 0x52
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fe fe0d 	bl	800ce14 <ld_dword>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	4a05      	ldr	r2, [pc, #20]	@ (800e214 <check_fs+0xa8>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d101      	bne.n	800e206 <check_fs+0x9a>
 800e202:	2300      	movs	r3, #0
 800e204:	e000      	b.n	800e208 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e206:	2302      	movs	r3, #2
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	00544146 	.word	0x00544146
 800e214:	33544146 	.word	0x33544146

0800e218 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b096      	sub	sp, #88	@ 0x58
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	4613      	mov	r3, r2
 800e224:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7ff ff58 	bl	800e0e2 <get_ldnumber>
 800e232:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e236:	2b00      	cmp	r3, #0
 800e238:	da01      	bge.n	800e23e <find_volume+0x26>
 800e23a:	230b      	movs	r3, #11
 800e23c:	e22d      	b.n	800e69a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e23e:	4aa1      	ldr	r2, [pc, #644]	@ (800e4c4 <find_volume+0x2ac>)
 800e240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e246:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <find_volume+0x3a>
 800e24e:	230c      	movs	r3, #12
 800e250:	e223      	b.n	800e69a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e256:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e258:	79fb      	ldrb	r3, [r7, #7]
 800e25a:	f023 0301 	bic.w	r3, r3, #1
 800e25e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d01a      	beq.n	800e29e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26a:	785b      	ldrb	r3, [r3, #1]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fe fd19 	bl	800cca4 <disk_status>
 800e272:	4603      	mov	r3, r0
 800e274:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e278:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	2b00      	cmp	r3, #0
 800e282:	d10c      	bne.n	800e29e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d007      	beq.n	800e29a <find_volume+0x82>
 800e28a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e28e:	f003 0304 	and.w	r3, r3, #4
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e296:	230a      	movs	r3, #10
 800e298:	e1ff      	b.n	800e69a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e29a:	2300      	movs	r3, #0
 800e29c:	e1fd      	b.n	800e69a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2a6:	b2da      	uxtb	r2, r3
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ae:	785b      	ldrb	r3, [r3, #1]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fe fd11 	bl	800ccd8 <disk_initialize>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2c0:	f003 0301 	and.w	r3, r3, #1
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e1e6      	b.n	800e69a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2cc:	79fb      	ldrb	r3, [r7, #7]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d007      	beq.n	800e2e2 <find_volume+0xca>
 800e2d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2d6:	f003 0304 	and.w	r3, r3, #4
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e2de:	230a      	movs	r3, #10
 800e2e0:	e1db      	b.n	800e69a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e2e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e2ea:	f7ff ff3f 	bl	800e16c <check_fs>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2f8:	2b02      	cmp	r3, #2
 800e2fa:	d149      	bne.n	800e390 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800e300:	e01e      	b.n	800e340 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e304:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e30a:	011b      	lsls	r3, r3, #4
 800e30c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e310:	4413      	add	r3, r2
 800e312:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e316:	3304      	adds	r3, #4
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d006      	beq.n	800e32c <find_volume+0x114>
 800e31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e320:	3308      	adds	r3, #8
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe fd76 	bl	800ce14 <ld_dword>
 800e328:	4602      	mov	r2, r0
 800e32a:	e000      	b.n	800e32e <find_volume+0x116>
 800e32c:	2200      	movs	r2, #0
 800e32e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	3358      	adds	r3, #88	@ 0x58
 800e334:	443b      	add	r3, r7
 800e336:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e33a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e33c:	3301      	adds	r3, #1
 800e33e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e342:	2b03      	cmp	r3, #3
 800e344:	d9dd      	bls.n	800e302 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e346:	2300      	movs	r3, #0
 800e348:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <find_volume+0x13e>
 800e350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e352:	3b01      	subs	r3, #1
 800e354:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	3358      	adds	r3, #88	@ 0x58
 800e35c:	443b      	add	r3, r7
 800e35e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e362:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e366:	2b00      	cmp	r3, #0
 800e368:	d005      	beq.n	800e376 <find_volume+0x15e>
 800e36a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e36c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e36e:	f7ff fefd 	bl	800e16c <check_fs>
 800e372:	4603      	mov	r3, r0
 800e374:	e000      	b.n	800e378 <find_volume+0x160>
 800e376:	2303      	movs	r3, #3
 800e378:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e37c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e380:	2b01      	cmp	r3, #1
 800e382:	d905      	bls.n	800e390 <find_volume+0x178>
 800e384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e386:	3301      	adds	r3, #1
 800e388:	643b      	str	r3, [r7, #64]	@ 0x40
 800e38a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d9e2      	bls.n	800e356 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e390:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e394:	2b04      	cmp	r3, #4
 800e396:	d101      	bne.n	800e39c <find_volume+0x184>
 800e398:	2301      	movs	r3, #1
 800e39a:	e17e      	b.n	800e69a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e39c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d901      	bls.n	800e3a8 <find_volume+0x190>
 800e3a4:	230d      	movs	r3, #13
 800e3a6:	e178      	b.n	800e69a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3aa:	3330      	adds	r3, #48	@ 0x30
 800e3ac:	330b      	adds	r3, #11
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe fd18 	bl	800cde4 <ld_word>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3ba:	d001      	beq.n	800e3c0 <find_volume+0x1a8>
 800e3bc:	230d      	movs	r3, #13
 800e3be:	e16c      	b.n	800e69a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	3330      	adds	r3, #48	@ 0x30
 800e3c4:	3316      	adds	r3, #22
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fe fd0c 	bl	800cde4 <ld_word>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e3d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <find_volume+0x1cc>
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d8:	3330      	adds	r3, #48	@ 0x30
 800e3da:	3324      	adds	r3, #36	@ 0x24
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fe fd19 	bl	800ce14 <ld_dword>
 800e3e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e3e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ec:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f6:	789b      	ldrb	r3, [r3, #2]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d005      	beq.n	800e408 <find_volume+0x1f0>
 800e3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fe:	789b      	ldrb	r3, [r3, #2]
 800e400:	2b02      	cmp	r3, #2
 800e402:	d001      	beq.n	800e408 <find_volume+0x1f0>
 800e404:	230d      	movs	r3, #13
 800e406:	e148      	b.n	800e69a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e40a:	789b      	ldrb	r3, [r3, #2]
 800e40c:	461a      	mov	r2, r3
 800e40e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e410:	fb02 f303 	mul.w	r3, r2, r3
 800e414:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e41c:	461a      	mov	r2, r3
 800e41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e420:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e424:	895b      	ldrh	r3, [r3, #10]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <find_volume+0x224>
 800e42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42c:	895b      	ldrh	r3, [r3, #10]
 800e42e:	461a      	mov	r2, r3
 800e430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e432:	895b      	ldrh	r3, [r3, #10]
 800e434:	3b01      	subs	r3, #1
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <find_volume+0x228>
 800e43c:	230d      	movs	r3, #13
 800e43e:	e12c      	b.n	800e69a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e442:	3330      	adds	r3, #48	@ 0x30
 800e444:	3311      	adds	r3, #17
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fccc 	bl	800cde4 <ld_word>
 800e44c:	4603      	mov	r3, r0
 800e44e:	461a      	mov	r2, r3
 800e450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e452:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e456:	891b      	ldrh	r3, [r3, #8]
 800e458:	f003 030f 	and.w	r3, r3, #15
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <find_volume+0x24e>
 800e462:	230d      	movs	r3, #13
 800e464:	e119      	b.n	800e69a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e468:	3330      	adds	r3, #48	@ 0x30
 800e46a:	3313      	adds	r3, #19
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fcb9 	bl	800cde4 <ld_word>
 800e472:	4603      	mov	r3, r0
 800e474:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d106      	bne.n	800e48a <find_volume+0x272>
 800e47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47e:	3330      	adds	r3, #48	@ 0x30
 800e480:	3320      	adds	r3, #32
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe fcc6 	bl	800ce14 <ld_dword>
 800e488:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48c:	3330      	adds	r3, #48	@ 0x30
 800e48e:	330e      	adds	r3, #14
 800e490:	4618      	mov	r0, r3
 800e492:	f7fe fca7 	bl	800cde4 <ld_word>
 800e496:	4603      	mov	r3, r0
 800e498:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e49a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <find_volume+0x28c>
 800e4a0:	230d      	movs	r3, #13
 800e4a2:	e0fa      	b.n	800e69a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a8:	4413      	add	r3, r2
 800e4aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4ac:	8912      	ldrh	r2, [r2, #8]
 800e4ae:	0912      	lsrs	r2, r2, #4
 800e4b0:	b292      	uxth	r2, r2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d204      	bcs.n	800e4c8 <find_volume+0x2b0>
 800e4be:	230d      	movs	r3, #13
 800e4c0:	e0eb      	b.n	800e69a <find_volume+0x482>
 800e4c2:	bf00      	nop
 800e4c4:	240007e0 	.word	0x240007e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4d0:	8952      	ldrh	r2, [r2, #10]
 800e4d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <find_volume+0x2ca>
 800e4de:	230d      	movs	r3, #13
 800e4e0:	e0db      	b.n	800e69a <find_volume+0x482>
		fmt = FS_FAT32;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d802      	bhi.n	800e4f8 <find_volume+0x2e0>
 800e4f2:	2302      	movs	r3, #2
 800e4f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d802      	bhi.n	800e508 <find_volume+0x2f0>
 800e502:	2301      	movs	r3, #1
 800e504:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50a:	1c9a      	adds	r2, r3, #2
 800e50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e512:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e514:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e516:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e51a:	441a      	add	r2, r3
 800e51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e520:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e524:	441a      	add	r2, r3
 800e526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e528:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e52a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d11e      	bne.n	800e570 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e534:	3330      	adds	r3, #48	@ 0x30
 800e536:	332a      	adds	r3, #42	@ 0x2a
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fe fc53 	bl	800cde4 <ld_word>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d001      	beq.n	800e548 <find_volume+0x330>
 800e544:	230d      	movs	r3, #13
 800e546:	e0a8      	b.n	800e69a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54a:	891b      	ldrh	r3, [r3, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <find_volume+0x33c>
 800e550:	230d      	movs	r3, #13
 800e552:	e0a2      	b.n	800e69a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e556:	3330      	adds	r3, #48	@ 0x30
 800e558:	332c      	adds	r3, #44	@ 0x2c
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fc5a 	bl	800ce14 <ld_dword>
 800e560:	4602      	mov	r2, r0
 800e562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e564:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e568:	695b      	ldr	r3, [r3, #20]
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e56e:	e01f      	b.n	800e5b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e572:	891b      	ldrh	r3, [r3, #8]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d101      	bne.n	800e57c <find_volume+0x364>
 800e578:	230d      	movs	r3, #13
 800e57a:	e08e      	b.n	800e69a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57e:	6a1a      	ldr	r2, [r3, #32]
 800e580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e582:	441a      	add	r2, r3
 800e584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e586:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e588:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d103      	bne.n	800e598 <find_volume+0x380>
 800e590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e592:	695b      	ldr	r3, [r3, #20]
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	e00a      	b.n	800e5ae <find_volume+0x396>
 800e598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59a:	695a      	ldr	r2, [r3, #20]
 800e59c:	4613      	mov	r3, r2
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	4413      	add	r3, r2
 800e5a2:	085a      	lsrs	r2, r3, #1
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a6:	695b      	ldr	r3, [r3, #20]
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b2:	699a      	ldr	r2, [r3, #24]
 800e5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e5ba:	0a5b      	lsrs	r3, r3, #9
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d201      	bcs.n	800e5c4 <find_volume+0x3ac>
 800e5c0:	230d      	movs	r3, #13
 800e5c2:	e06a      	b.n	800e69a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ca:	611a      	str	r2, [r3, #16]
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ce:	691a      	ldr	r2, [r3, #16]
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	2280      	movs	r2, #128	@ 0x80
 800e5d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e5da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	d149      	bne.n	800e676 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e4:	3330      	adds	r3, #48	@ 0x30
 800e5e6:	3330      	adds	r3, #48	@ 0x30
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fe fbfb 	bl	800cde4 <ld_word>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d140      	bne.n	800e676 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e5f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5fc:	f7fe fea2 	bl	800d344 <move_window>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d137      	bne.n	800e676 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e608:	2200      	movs	r2, #0
 800e60a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60e:	3330      	adds	r3, #48	@ 0x30
 800e610:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e614:	4618      	mov	r0, r3
 800e616:	f7fe fbe5 	bl	800cde4 <ld_word>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461a      	mov	r2, r3
 800e61e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e622:	429a      	cmp	r2, r3
 800e624:	d127      	bne.n	800e676 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e628:	3330      	adds	r3, #48	@ 0x30
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fbf2 	bl	800ce14 <ld_dword>
 800e630:	4603      	mov	r3, r0
 800e632:	4a1c      	ldr	r2, [pc, #112]	@ (800e6a4 <find_volume+0x48c>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d11e      	bne.n	800e676 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63a:	3330      	adds	r3, #48	@ 0x30
 800e63c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e640:	4618      	mov	r0, r3
 800e642:	f7fe fbe7 	bl	800ce14 <ld_dword>
 800e646:	4603      	mov	r3, r0
 800e648:	4a17      	ldr	r2, [pc, #92]	@ (800e6a8 <find_volume+0x490>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d113      	bne.n	800e676 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e650:	3330      	adds	r3, #48	@ 0x30
 800e652:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fbdc 	bl	800ce14 <ld_dword>
 800e65c:	4602      	mov	r2, r0
 800e65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e660:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e664:	3330      	adds	r3, #48	@ 0x30
 800e666:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe fbd2 	bl	800ce14 <ld_dword>
 800e670:	4602      	mov	r2, r0
 800e672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e674:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e67c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e67e:	4b0b      	ldr	r3, [pc, #44]	@ (800e6ac <find_volume+0x494>)
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	3301      	adds	r3, #1
 800e684:	b29a      	uxth	r2, r3
 800e686:	4b09      	ldr	r3, [pc, #36]	@ (800e6ac <find_volume+0x494>)
 800e688:	801a      	strh	r2, [r3, #0]
 800e68a:	4b08      	ldr	r3, [pc, #32]	@ (800e6ac <find_volume+0x494>)
 800e68c:	881a      	ldrh	r2, [r3, #0]
 800e68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e690:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e694:	f7fe fdee 	bl	800d274 <clear_lock>
#endif
	return FR_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3758      	adds	r7, #88	@ 0x58
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	41615252 	.word	0x41615252
 800e6a8:	61417272 	.word	0x61417272
 800e6ac:	240007e4 	.word	0x240007e4

0800e6b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e6ba:	2309      	movs	r3, #9
 800e6bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d01c      	beq.n	800e6fe <validate+0x4e>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d018      	beq.n	800e6fe <validate+0x4e>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d013      	beq.n	800e6fe <validate+0x4e>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	889a      	ldrh	r2, [r3, #4]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	88db      	ldrh	r3, [r3, #6]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d10c      	bne.n	800e6fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	785b      	ldrb	r3, [r3, #1]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe fada 	bl	800cca4 <disk_status>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d101      	bne.n	800e6fe <validate+0x4e>
			res = FR_OK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d102      	bne.n	800e70a <validate+0x5a>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	e000      	b.n	800e70c <validate+0x5c>
 800e70a:	2300      	movs	r3, #0
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	6013      	str	r3, [r2, #0]
	return res;
 800e710:	7bfb      	ldrb	r3, [r7, #15]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
	...

0800e71c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b088      	sub	sp, #32
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	4613      	mov	r3, r2
 800e728:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e72e:	f107 0310 	add.w	r3, r7, #16
 800e732:	4618      	mov	r0, r3
 800e734:	f7ff fcd5 	bl	800e0e2 <get_ldnumber>
 800e738:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	da01      	bge.n	800e744 <f_mount+0x28>
 800e740:	230b      	movs	r3, #11
 800e742:	e02b      	b.n	800e79c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e744:	4a17      	ldr	r2, [pc, #92]	@ (800e7a4 <f_mount+0x88>)
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e74c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d005      	beq.n	800e760 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e754:	69b8      	ldr	r0, [r7, #24]
 800e756:	f7fe fd8d 	bl	800d274 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	2200      	movs	r2, #0
 800e75e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	490d      	ldr	r1, [pc, #52]	@ (800e7a4 <f_mount+0x88>)
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <f_mount+0x66>
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d001      	beq.n	800e786 <f_mount+0x6a>
 800e782:	2300      	movs	r3, #0
 800e784:	e00a      	b.n	800e79c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e786:	f107 010c 	add.w	r1, r7, #12
 800e78a:	f107 0308 	add.w	r3, r7, #8
 800e78e:	2200      	movs	r2, #0
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff fd41 	bl	800e218 <find_volume>
 800e796:	4603      	mov	r3, r0
 800e798:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3720      	adds	r7, #32
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	240007e0 	.word	0x240007e0

0800e7a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b098      	sub	sp, #96	@ 0x60
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d101      	bne.n	800e7c0 <f_open+0x18>
 800e7bc:	2309      	movs	r3, #9
 800e7be:	e1a9      	b.n	800eb14 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e7c8:	79fa      	ldrb	r2, [r7, #7]
 800e7ca:	f107 0110 	add.w	r1, r7, #16
 800e7ce:	f107 0308 	add.w	r3, r7, #8
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff fd20 	bl	800e218 <find_volume>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e7de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f040 818d 	bne.w	800eb02 <f_open+0x35a>
		dj.obj.fs = fs;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	f107 0314 	add.w	r3, r7, #20
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff fc03 	bl	800e000 <follow_path>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e800:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e804:	2b00      	cmp	r3, #0
 800e806:	d118      	bne.n	800e83a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e808:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e80c:	b25b      	sxtb	r3, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	da03      	bge.n	800e81a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e812:	2306      	movs	r3, #6
 800e814:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e818:	e00f      	b.n	800e83a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e81a:	79fb      	ldrb	r3, [r7, #7]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	bf8c      	ite	hi
 800e820:	2301      	movhi	r3, #1
 800e822:	2300      	movls	r3, #0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	461a      	mov	r2, r3
 800e828:	f107 0314 	add.w	r3, r7, #20
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fe fbd8 	bl	800cfe4 <chk_lock>
 800e834:	4603      	mov	r3, r0
 800e836:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e83a:	79fb      	ldrb	r3, [r7, #7]
 800e83c:	f003 031c 	and.w	r3, r3, #28
 800e840:	2b00      	cmp	r3, #0
 800e842:	d07f      	beq.n	800e944 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d017      	beq.n	800e87c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e84c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e850:	2b04      	cmp	r3, #4
 800e852:	d10e      	bne.n	800e872 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e854:	f7fe fc22 	bl	800d09c <enq_lock>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d006      	beq.n	800e86c <f_open+0xc4>
 800e85e:	f107 0314 	add.w	r3, r7, #20
 800e862:	4618      	mov	r0, r3
 800e864:	f7ff fb06 	bl	800de74 <dir_register>
 800e868:	4603      	mov	r3, r0
 800e86a:	e000      	b.n	800e86e <f_open+0xc6>
 800e86c:	2312      	movs	r3, #18
 800e86e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e872:	79fb      	ldrb	r3, [r7, #7]
 800e874:	f043 0308 	orr.w	r3, r3, #8
 800e878:	71fb      	strb	r3, [r7, #7]
 800e87a:	e010      	b.n	800e89e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e87c:	7ebb      	ldrb	r3, [r7, #26]
 800e87e:	f003 0311 	and.w	r3, r3, #17
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <f_open+0xe6>
					res = FR_DENIED;
 800e886:	2307      	movs	r3, #7
 800e888:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e88c:	e007      	b.n	800e89e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e88e:	79fb      	ldrb	r3, [r7, #7]
 800e890:	f003 0304 	and.w	r3, r3, #4
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <f_open+0xf6>
 800e898:	2308      	movs	r3, #8
 800e89a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e89e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d168      	bne.n	800e978 <f_open+0x1d0>
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	f003 0308 	and.w	r3, r3, #8
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d063      	beq.n	800e978 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e8b0:	f7fd ffb2 	bl	800c818 <get_fattime>
 800e8b4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b8:	330e      	adds	r3, #14
 800e8ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fae7 	bl	800ce90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c4:	3316      	adds	r3, #22
 800e8c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fae1 	bl	800ce90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d0:	330b      	adds	r3, #11
 800e8d2:	2220      	movs	r2, #32
 800e8d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8da:	4611      	mov	r1, r2
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff fa35 	bl	800dd4c <ld_clust>
 800e8e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff fa4d 	bl	800dd8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f2:	331c      	adds	r3, #28
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe faca 	bl	800ce90 <st_dword>
					fs->wflag = 1;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	2201      	movs	r2, #1
 800e900:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e904:	2b00      	cmp	r3, #0
 800e906:	d037      	beq.n	800e978 <f_open+0x1d0>
						dw = fs->winsect;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e90c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e90e:	f107 0314 	add.w	r3, r7, #20
 800e912:	2200      	movs	r2, #0
 800e914:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe ff60 	bl	800d7dc <remove_chain>
 800e91c:	4603      	mov	r3, r0
 800e91e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e922:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e926:	2b00      	cmp	r3, #0
 800e928:	d126      	bne.n	800e978 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe fd08 	bl	800d344 <move_window>
 800e934:	4603      	mov	r3, r0
 800e936:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e93e:	3a01      	subs	r2, #1
 800e940:	60da      	str	r2, [r3, #12]
 800e942:	e019      	b.n	800e978 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e944:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d115      	bne.n	800e978 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e94c:	7ebb      	ldrb	r3, [r7, #26]
 800e94e:	f003 0310 	and.w	r3, r3, #16
 800e952:	2b00      	cmp	r3, #0
 800e954:	d003      	beq.n	800e95e <f_open+0x1b6>
					res = FR_NO_FILE;
 800e956:	2304      	movs	r3, #4
 800e958:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e95c:	e00c      	b.n	800e978 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e95e:	79fb      	ldrb	r3, [r7, #7]
 800e960:	f003 0302 	and.w	r3, r3, #2
 800e964:	2b00      	cmp	r3, #0
 800e966:	d007      	beq.n	800e978 <f_open+0x1d0>
 800e968:	7ebb      	ldrb	r3, [r7, #26]
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d002      	beq.n	800e978 <f_open+0x1d0>
						res = FR_DENIED;
 800e972:	2307      	movs	r3, #7
 800e974:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e978:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d126      	bne.n	800e9ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	f003 0308 	and.w	r3, r3, #8
 800e986:	2b00      	cmp	r3, #0
 800e988:	d003      	beq.n	800e992 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e990:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e99a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	bf8c      	ite	hi
 800e9a6:	2301      	movhi	r3, #1
 800e9a8:	2300      	movls	r3, #0
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	f107 0314 	add.w	r3, r7, #20
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe fb93 	bl	800d0e0 <inc_lock>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <f_open+0x226>
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e9ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f040 8095 	bne.w	800eb02 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9dc:	4611      	mov	r1, r2
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff f9b4 	bl	800dd4c <ld_clust>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ec:	331c      	adds	r3, #28
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fe fa10 	bl	800ce14 <ld_dword>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	88da      	ldrh	r2, [r3, #6]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	79fa      	ldrb	r2, [r7, #7]
 800ea12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3330      	adds	r3, #48	@ 0x30
 800ea2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea2e:	2100      	movs	r1, #0
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fe fa7a 	bl	800cf2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea36:	79fb      	ldrb	r3, [r7, #7]
 800ea38:	f003 0320 	and.w	r3, r3, #32
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d060      	beq.n	800eb02 <f_open+0x35a>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d05c      	beq.n	800eb02 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	895b      	ldrh	r3, [r3, #10]
 800ea54:	025b      	lsls	r3, r3, #9
 800ea56:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea64:	e016      	b.n	800ea94 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fe fd25 	bl	800d4ba <get_fat>
 800ea70:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ea72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d802      	bhi.n	800ea7e <f_open+0x2d6>
 800ea78:	2302      	movs	r3, #2
 800ea7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea84:	d102      	bne.n	800ea8c <f_open+0x2e4>
 800ea86:	2301      	movs	r3, #1
 800ea88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <f_open+0x2fc>
 800ea9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d8e0      	bhi.n	800ea66 <f_open+0x2be>
				}
				fp->clust = clst;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaa8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eaaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d127      	bne.n	800eb02 <f_open+0x35a>
 800eab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d022      	beq.n	800eb02 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe fcdb 	bl	800d47c <clust2sect>
 800eac6:	6478      	str	r0, [r7, #68]	@ 0x44
 800eac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d103      	bne.n	800ead6 <f_open+0x32e>
						res = FR_INT_ERR;
 800eace:	2302      	movs	r3, #2
 800ead0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ead4:	e015      	b.n	800eb02 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ead6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead8:	0a5a      	lsrs	r2, r3, #9
 800eada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eadc:	441a      	add	r2, r3
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	7858      	ldrb	r0, [r3, #1]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6a1a      	ldr	r2, [r3, #32]
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	f7fe f919 	bl	800cd28 <disk_read>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <f_open+0x35a>
 800eafc:	2301      	movs	r3, #1
 800eafe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <f_open+0x368>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3760      	adds	r7, #96	@ 0x60
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08e      	sub	sp, #56	@ 0x38
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
 800eb28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2200      	movs	r2, #0
 800eb32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f107 0214 	add.w	r2, r7, #20
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fdb7 	bl	800e6b0 <validate>
 800eb42:	4603      	mov	r3, r0
 800eb44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d107      	bne.n	800eb60 <f_read+0x44>
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	7d5b      	ldrb	r3, [r3, #21]
 800eb54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <f_read+0x4a>
 800eb60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb64:	e115      	b.n	800ed92 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	7d1b      	ldrb	r3, [r3, #20]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <f_read+0x5a>
 800eb72:	2307      	movs	r3, #7
 800eb74:	e10d      	b.n	800ed92 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	68da      	ldr	r2, [r3, #12]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	6a3b      	ldr	r3, [r7, #32]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	f240 80fe 	bls.w	800ed88 <f_read+0x26c>
 800eb8c:	6a3b      	ldr	r3, [r7, #32]
 800eb8e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb90:	e0fa      	b.n	800ed88 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	699b      	ldr	r3, [r3, #24]
 800eb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f040 80c6 	bne.w	800ed2c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	0a5b      	lsrs	r3, r3, #9
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	8952      	ldrh	r2, [r2, #10]
 800ebaa:	3a01      	subs	r2, #1
 800ebac:	4013      	ands	r3, r2
 800ebae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d12f      	bne.n	800ec16 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	699b      	ldr	r3, [r3, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d103      	bne.n	800ebc6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebc4:	e013      	b.n	800ebee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d007      	beq.n	800ebde <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7fe fefe 	bl	800d9d6 <clmt_clust>
 800ebda:	6338      	str	r0, [r7, #48]	@ 0x30
 800ebdc:	e007      	b.n	800ebee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	69db      	ldr	r3, [r3, #28]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	f7fe fc67 	bl	800d4ba <get_fat>
 800ebec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ebee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d804      	bhi.n	800ebfe <f_read+0xe2>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	755a      	strb	r2, [r3, #21]
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	e0c9      	b.n	800ed92 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec04:	d104      	bne.n	800ec10 <f_read+0xf4>
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	755a      	strb	r2, [r3, #21]
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	e0c0      	b.n	800ed92 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4610      	mov	r0, r2
 800ec20:	f7fe fc2c 	bl	800d47c <clust2sect>
 800ec24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d104      	bne.n	800ec36 <f_read+0x11a>
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2202      	movs	r2, #2
 800ec30:	755a      	strb	r2, [r3, #21]
 800ec32:	2302      	movs	r3, #2
 800ec34:	e0ad      	b.n	800ed92 <f_read+0x276>
			sect += csect;
 800ec36:	69ba      	ldr	r2, [r7, #24]
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	0a5b      	lsrs	r3, r3, #9
 800ec42:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d039      	beq.n	800ecbe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec4a:	69fa      	ldr	r2, [r7, #28]
 800ec4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec4e:	4413      	add	r3, r2
 800ec50:	697a      	ldr	r2, [r7, #20]
 800ec52:	8952      	ldrh	r2, [r2, #10]
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d905      	bls.n	800ec64 <f_read+0x148>
					cc = fs->csize - csect;
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	895b      	ldrh	r3, [r3, #10]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	7858      	ldrb	r0, [r3, #1]
 800ec68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec6a:	69ba      	ldr	r2, [r7, #24]
 800ec6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec6e:	f7fe f85b 	bl	800cd28 <disk_read>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d004      	beq.n	800ec82 <f_read+0x166>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	755a      	strb	r2, [r3, #21]
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e087      	b.n	800ed92 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	7d1b      	ldrb	r3, [r3, #20]
 800ec86:	b25b      	sxtb	r3, r3
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	da14      	bge.n	800ecb6 <f_read+0x19a>
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6a1a      	ldr	r2, [r3, #32]
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d90d      	bls.n	800ecb6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6a1a      	ldr	r2, [r3, #32]
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	025b      	lsls	r3, r3, #9
 800eca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eca6:	18d0      	adds	r0, r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3330      	adds	r3, #48	@ 0x30
 800ecac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	f7fe f919 	bl	800cee8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ecb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb8:	025b      	lsls	r3, r3, #9
 800ecba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ecbc:	e050      	b.n	800ed60 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	69ba      	ldr	r2, [r7, #24]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d02e      	beq.n	800ed26 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	7d1b      	ldrb	r3, [r3, #20]
 800eccc:	b25b      	sxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	da18      	bge.n	800ed04 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	7858      	ldrb	r0, [r3, #1]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6a1a      	ldr	r2, [r3, #32]
 800ece0:	2301      	movs	r3, #1
 800ece2:	f7fe f841 	bl	800cd68 <disk_write>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <f_read+0x1da>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	755a      	strb	r2, [r3, #21]
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e04d      	b.n	800ed92 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	7d1b      	ldrb	r3, [r3, #20]
 800ecfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	7858      	ldrb	r0, [r3, #1]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed0e:	2301      	movs	r3, #1
 800ed10:	69ba      	ldr	r2, [r7, #24]
 800ed12:	f7fe f809 	bl	800cd28 <disk_read>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <f_read+0x20a>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	755a      	strb	r2, [r3, #21]
 800ed22:	2301      	movs	r3, #1
 800ed24:	e035      	b.n	800ed92 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	69ba      	ldr	r2, [r7, #24]
 800ed2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	699b      	ldr	r3, [r3, #24]
 800ed30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed34:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ed38:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d901      	bls.n	800ed46 <f_read+0x22a>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed54:	4413      	add	r3, r2
 800ed56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed5c:	f7fe f8c4 	bl	800cee8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed64:	4413      	add	r3, r2
 800ed66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	699a      	ldr	r2, [r3, #24]
 800ed6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6e:	441a      	add	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	619a      	str	r2, [r3, #24]
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed7a:	441a      	add	r2, r3
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f47f af01 	bne.w	800eb92 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3738      	adds	r7, #56	@ 0x38
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b086      	sub	sp, #24
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f107 0208 	add.w	r2, r7, #8
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7ff fc80 	bl	800e6b0 <validate>
 800edb0:	4603      	mov	r3, r0
 800edb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800edb4:	7dfb      	ldrb	r3, [r7, #23]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d168      	bne.n	800ee8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	7d1b      	ldrb	r3, [r3, #20]
 800edbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d062      	beq.n	800ee8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	7d1b      	ldrb	r3, [r3, #20]
 800edca:	b25b      	sxtb	r3, r3
 800edcc:	2b00      	cmp	r3, #0
 800edce:	da15      	bge.n	800edfc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	7858      	ldrb	r0, [r3, #1]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6a1a      	ldr	r2, [r3, #32]
 800edde:	2301      	movs	r3, #1
 800ede0:	f7fd ffc2 	bl	800cd68 <disk_write>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <f_sync+0x54>
 800edea:	2301      	movs	r3, #1
 800edec:	e04f      	b.n	800ee8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	7d1b      	ldrb	r3, [r3, #20]
 800edf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800edfc:	f7fd fd0c 	bl	800c818 <get_fattime>
 800ee00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee08:	4619      	mov	r1, r3
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	f7fe fa9a 	bl	800d344 <move_window>
 800ee10:	4603      	mov	r3, r0
 800ee12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d138      	bne.n	800ee8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	330b      	adds	r3, #11
 800ee24:	781a      	ldrb	r2, [r3, #0]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	330b      	adds	r3, #11
 800ee2a:	f042 0220 	orr.w	r2, r2, #32
 800ee2e:	b2d2      	uxtb	r2, r2
 800ee30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	68f9      	ldr	r1, [r7, #12]
 800ee3e:	f7fe ffa4 	bl	800dd8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f103 021c 	add.w	r2, r3, #28
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7fe f81e 	bl	800ce90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3316      	adds	r3, #22
 800ee58:	6939      	ldr	r1, [r7, #16]
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fe f818 	bl	800ce90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	3312      	adds	r3, #18
 800ee64:	2100      	movs	r1, #0
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fd fff7 	bl	800ce5a <st_word>
					fs->wflag = 1;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fe fa93 	bl	800d3a0 <sync_fs>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
 800ee82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ee8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3718      	adds	r7, #24
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7ff ff7b 	bl	800ed9a <f_sync>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d118      	bne.n	800eee0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f107 0208 	add.w	r2, r7, #8
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff fbfa 	bl	800e6b0 <validate>
 800eebc:	4603      	mov	r3, r0
 800eebe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d10c      	bne.n	800eee0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe f996 	bl	800d1fc <dec_lock>
 800eed0:	4603      	mov	r3, r0
 800eed2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d102      	bne.n	800eee0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b090      	sub	sp, #64	@ 0x40
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f107 0208 	add.w	r2, r7, #8
 800eefa:	4611      	mov	r1, r2
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff fbd7 	bl	800e6b0 <validate>
 800ef02:	4603      	mov	r3, r0
 800ef04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <f_lseek+0x2e>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	7d5b      	ldrb	r3, [r3, #21]
 800ef14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ef18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <f_lseek+0x3c>
 800ef20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef24:	e1e6      	b.n	800f2f4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 80d1 	beq.w	800f0d2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d15a      	bne.n	800efee <f_lseek+0x104>
			tbl = fp->cltbl;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef3c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef40:	1d1a      	adds	r2, r3, #4
 800ef42:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	617b      	str	r3, [r7, #20]
 800ef48:	2302      	movs	r3, #2
 800ef4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ef52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d03a      	beq.n	800efce <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ef58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5a:	613b      	str	r3, [r7, #16]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef62:	3302      	adds	r3, #2
 800ef64:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ef66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef68:	60fb      	str	r3, [r7, #12]
 800ef6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fe faa0 	bl	800d4ba <get_fat>
 800ef7a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d804      	bhi.n	800ef8c <f_lseek+0xa2>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2202      	movs	r2, #2
 800ef86:	755a      	strb	r2, [r3, #21]
 800ef88:	2302      	movs	r3, #2
 800ef8a:	e1b3      	b.n	800f2f4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	d104      	bne.n	800ef9e <f_lseek+0xb4>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	755a      	strb	r2, [r3, #21]
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e1aa      	b.n	800f2f4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3301      	adds	r3, #1
 800efa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d0de      	beq.n	800ef66 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800efa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	429a      	cmp	r2, r3
 800efae:	d809      	bhi.n	800efc4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800efb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb2:	1d1a      	adds	r2, r3, #4
 800efb4:	627a      	str	r2, [r7, #36]	@ 0x24
 800efb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efbc:	1d1a      	adds	r2, r3, #4
 800efbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800efc0:	693a      	ldr	r2, [r7, #16]
 800efc2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efca:	429a      	cmp	r2, r3
 800efcc:	d3c4      	bcc.n	800ef58 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efd4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800efd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d803      	bhi.n	800efe6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800efde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe0:	2200      	movs	r2, #0
 800efe2:	601a      	str	r2, [r3, #0]
 800efe4:	e184      	b.n	800f2f0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800efe6:	2311      	movs	r3, #17
 800efe8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800efec:	e180      	b.n	800f2f0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d902      	bls.n	800effe <f_lseek+0x114>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f000 8172 	beq.w	800f2f0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	3b01      	subs	r3, #1
 800f010:	4619      	mov	r1, r3
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fe fcdf 	bl	800d9d6 <clmt_clust>
 800f018:	4602      	mov	r2, r0
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	69db      	ldr	r3, [r3, #28]
 800f024:	4619      	mov	r1, r3
 800f026:	4610      	mov	r0, r2
 800f028:	f7fe fa28 	bl	800d47c <clust2sect>
 800f02c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d104      	bne.n	800f03e <f_lseek+0x154>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2202      	movs	r2, #2
 800f038:	755a      	strb	r2, [r3, #21]
 800f03a:	2302      	movs	r3, #2
 800f03c:	e15a      	b.n	800f2f4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	3b01      	subs	r3, #1
 800f042:	0a5b      	lsrs	r3, r3, #9
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	8952      	ldrh	r2, [r2, #10]
 800f048:	3a01      	subs	r2, #1
 800f04a:	4013      	ands	r3, r2
 800f04c:	69ba      	ldr	r2, [r7, #24]
 800f04e:	4413      	add	r3, r2
 800f050:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 8148 	beq.w	800f2f0 <f_lseek+0x406>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a1b      	ldr	r3, [r3, #32]
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	429a      	cmp	r2, r3
 800f068:	f000 8142 	beq.w	800f2f0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	7d1b      	ldrb	r3, [r3, #20]
 800f070:	b25b      	sxtb	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	da18      	bge.n	800f0a8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	7858      	ldrb	r0, [r3, #1]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a1a      	ldr	r2, [r3, #32]
 800f084:	2301      	movs	r3, #1
 800f086:	f7fd fe6f 	bl	800cd68 <disk_write>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d004      	beq.n	800f09a <f_lseek+0x1b0>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	755a      	strb	r2, [r3, #21]
 800f096:	2301      	movs	r3, #1
 800f098:	e12c      	b.n	800f2f4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	7d1b      	ldrb	r3, [r3, #20]
 800f09e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	7858      	ldrb	r0, [r3, #1]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	69ba      	ldr	r2, [r7, #24]
 800f0b6:	f7fd fe37 	bl	800cd28 <disk_read>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <f_lseek+0x1e0>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	755a      	strb	r2, [r3, #21]
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e114      	b.n	800f2f4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	621a      	str	r2, [r3, #32]
 800f0d0:	e10e      	b.n	800f2f0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d908      	bls.n	800f0ee <f_lseek+0x204>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
 800f0e0:	f003 0302 	and.w	r3, r3, #2
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0fc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	f000 80a7 	beq.w	800f254 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	895b      	ldrh	r3, [r3, #10]
 800f10a:	025b      	lsls	r3, r3, #9
 800f10c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d01b      	beq.n	800f14c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	1e5a      	subs	r2, r3, #1
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f11e:	6a3b      	ldr	r3, [r7, #32]
 800f120:	1e59      	subs	r1, r3, #1
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f128:	429a      	cmp	r2, r3
 800f12a:	d30f      	bcc.n	800f14c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	1e5a      	subs	r2, r3, #1
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	425b      	negs	r3, r3
 800f134:	401a      	ands	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	69db      	ldr	r3, [r3, #28]
 800f148:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f14a:	e022      	b.n	800f192 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f154:	2b00      	cmp	r3, #0
 800f156:	d119      	bne.n	800f18c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2100      	movs	r1, #0
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fe fba2 	bl	800d8a6 <create_chain>
 800f162:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f166:	2b01      	cmp	r3, #1
 800f168:	d104      	bne.n	800f174 <f_lseek+0x28a>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2202      	movs	r2, #2
 800f16e:	755a      	strb	r2, [r3, #21]
 800f170:	2302      	movs	r3, #2
 800f172:	e0bf      	b.n	800f2f4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f17a:	d104      	bne.n	800f186 <f_lseek+0x29c>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	755a      	strb	r2, [r3, #21]
 800f182:	2301      	movs	r3, #1
 800f184:	e0b6      	b.n	800f2f4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f18a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f190:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f194:	2b00      	cmp	r3, #0
 800f196:	d05d      	beq.n	800f254 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f198:	e03a      	b.n	800f210 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	603b      	str	r3, [r7, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	699a      	ldr	r2, [r3, #24]
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	441a      	add	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7d1b      	ldrb	r3, [r3, #20]
 800f1b2:	f003 0302 	and.w	r3, r3, #2
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00b      	beq.n	800f1d2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fe fb71 	bl	800d8a6 <create_chain>
 800f1c4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d108      	bne.n	800f1de <f_lseek+0x2f4>
							ofs = 0; break;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	603b      	str	r3, [r7, #0]
 800f1d0:	e022      	b.n	800f218 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fe f96f 	bl	800d4ba <get_fat>
 800f1dc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e4:	d104      	bne.n	800f1f0 <f_lseek+0x306>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	755a      	strb	r2, [r3, #21]
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e081      	b.n	800f2f4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d904      	bls.n	800f200 <f_lseek+0x316>
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	695b      	ldr	r3, [r3, #20]
 800f1fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d304      	bcc.n	800f20a <f_lseek+0x320>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2202      	movs	r2, #2
 800f204:	755a      	strb	r2, [r3, #21]
 800f206:	2302      	movs	r3, #2
 800f208:	e074      	b.n	800f2f4 <f_lseek+0x40a>
					fp->clust = clst;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f20e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f210:	683a      	ldr	r2, [r7, #0]
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	429a      	cmp	r2, r3
 800f216:	d8c0      	bhi.n	800f19a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	699a      	ldr	r2, [r3, #24]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	441a      	add	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d012      	beq.n	800f254 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe f922 	bl	800d47c <clust2sect>
 800f238:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d104      	bne.n	800f24a <f_lseek+0x360>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2202      	movs	r2, #2
 800f244:	755a      	strb	r2, [r3, #21]
 800f246:	2302      	movs	r3, #2
 800f248:	e054      	b.n	800f2f4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	0a5b      	lsrs	r3, r3, #9
 800f24e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f250:	4413      	add	r3, r2
 800f252:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	699a      	ldr	r2, [r3, #24]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d90a      	bls.n	800f276 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	699a      	ldr	r2, [r3, #24]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	7d1b      	ldrb	r3, [r3, #20]
 800f26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f270:	b2da      	uxtb	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	699b      	ldr	r3, [r3, #24]
 800f27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d036      	beq.n	800f2f0 <f_lseek+0x406>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a1b      	ldr	r3, [r3, #32]
 800f286:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f288:	429a      	cmp	r2, r3
 800f28a:	d031      	beq.n	800f2f0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	7d1b      	ldrb	r3, [r3, #20]
 800f290:	b25b      	sxtb	r3, r3
 800f292:	2b00      	cmp	r3, #0
 800f294:	da18      	bge.n	800f2c8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	7858      	ldrb	r0, [r3, #1]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6a1a      	ldr	r2, [r3, #32]
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	f7fd fd5f 	bl	800cd68 <disk_write>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d004      	beq.n	800f2ba <f_lseek+0x3d0>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	755a      	strb	r2, [r3, #21]
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e01c      	b.n	800f2f4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	7d1b      	ldrb	r3, [r3, #20]
 800f2be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2c2:	b2da      	uxtb	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	7858      	ldrb	r0, [r3, #1]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2d6:	f7fd fd27 	bl	800cd28 <disk_read>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d004      	beq.n	800f2ea <f_lseek+0x400>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	755a      	strb	r2, [r3, #21]
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e004      	b.n	800f2f4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2ee:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f2f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3740      	adds	r7, #64	@ 0x40
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b087      	sub	sp, #28
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	4613      	mov	r3, r2
 800f308:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f30a:	2301      	movs	r3, #1
 800f30c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f30e:	2300      	movs	r3, #0
 800f310:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f312:	4b1f      	ldr	r3, [pc, #124]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f314:	7a5b      	ldrb	r3, [r3, #9]
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d131      	bne.n	800f380 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f31c:	4b1c      	ldr	r3, [pc, #112]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f31e:	7a5b      	ldrb	r3, [r3, #9]
 800f320:	b2db      	uxtb	r3, r3
 800f322:	461a      	mov	r2, r3
 800f324:	4b1a      	ldr	r3, [pc, #104]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f326:	2100      	movs	r1, #0
 800f328:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f32a:	4b19      	ldr	r3, [pc, #100]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f32c:	7a5b      	ldrb	r3, [r3, #9]
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	4a17      	ldr	r2, [pc, #92]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4413      	add	r3, r2
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f33a:	4b15      	ldr	r3, [pc, #84]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f33c:	7a5b      	ldrb	r3, [r3, #9]
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	461a      	mov	r2, r3
 800f342:	4b13      	ldr	r3, [pc, #76]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f344:	4413      	add	r3, r2
 800f346:	79fa      	ldrb	r2, [r7, #7]
 800f348:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f34a:	4b11      	ldr	r3, [pc, #68]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f34c:	7a5b      	ldrb	r3, [r3, #9]
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	1c5a      	adds	r2, r3, #1
 800f352:	b2d1      	uxtb	r1, r2
 800f354:	4a0e      	ldr	r2, [pc, #56]	@ (800f390 <FATFS_LinkDriverEx+0x94>)
 800f356:	7251      	strb	r1, [r2, #9]
 800f358:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f35a:	7dbb      	ldrb	r3, [r7, #22]
 800f35c:	3330      	adds	r3, #48	@ 0x30
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	3301      	adds	r3, #1
 800f368:	223a      	movs	r2, #58	@ 0x3a
 800f36a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	3302      	adds	r3, #2
 800f370:	222f      	movs	r2, #47	@ 0x2f
 800f372:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	3303      	adds	r3, #3
 800f378:	2200      	movs	r2, #0
 800f37a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f380:	7dfb      	ldrb	r3, [r7, #23]
}
 800f382:	4618      	mov	r0, r3
 800f384:	371c      	adds	r7, #28
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	24000808 	.word	0x24000808

0800f394 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f39e:	2200      	movs	r2, #0
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7ff ffaa 	bl	800f2fc <FATFS_LinkDriverEx>
 800f3a8:	4603      	mov	r3, r0
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
	...

0800f3b4 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	607b      	str	r3, [r7, #4]
 800f3be:	e02e      	b.n	800f41e <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	3b80      	subs	r3, #128	@ 0x80
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800f3ce:	fb02 f303 	mul.w	r3, r2, r3
 800f3d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3d6:	141a      	asrs	r2, r3, #16
 800f3d8:	4916      	ldr	r1, [pc, #88]	@ (800f434 <JPEG_InitPostProcColorTables+0x80>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800f3e6:	fb02 f303 	mul.w	r3, r2, r3
 800f3ea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f3ee:	141a      	asrs	r2, r3, #16
 800f3f0:	4911      	ldr	r1, [pc, #68]	@ (800f438 <JPEG_InitPostProcColorTables+0x84>)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	4a10      	ldr	r2, [pc, #64]	@ (800f43c <JPEG_InitPostProcColorTables+0x88>)
 800f3fc:	fb03 f202 	mul.w	r2, r3, r2
 800f400:	490f      	ldr	r1, [pc, #60]	@ (800f440 <JPEG_InitPostProcColorTables+0x8c>)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	4a0e      	ldr	r2, [pc, #56]	@ (800f444 <JPEG_InitPostProcColorTables+0x90>)
 800f40c:	fb03 f202 	mul.w	r2, r3, r2
 800f410:	490d      	ldr	r1, [pc, #52]	@ (800f448 <JPEG_InitPostProcColorTables+0x94>)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3301      	adds	r3, #1
 800f41c:	607b      	str	r3, [r7, #4]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2bff      	cmp	r3, #255	@ 0xff
 800f422:	ddcd      	ble.n	800f3c0 <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800f424:	bf00      	nop
 800f426:	bf00      	nop
 800f428:	370c      	adds	r7, #12
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	24000814 	.word	0x24000814
 800f438:	24000c14 	.word	0x24000c14
 800f43c:	ffffa498 	.word	0xffffa498
 800f440:	24001014 	.word	0x24001014
 800f444:	ffffd3f4 	.word	0xffffd3f4
 800f448:	24001414 	.word	0x24001414

0800f44c <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800f450:	f000 f806 	bl	800f460 <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800f454:	f000 f888 	bl	800f568 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800f458:	f7ff ffac 	bl	800f3b4 <JPEG_InitPostProcColorTables>
#endif

}
 800f45c:	bf00      	nop
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800f466:	2300      	movs	r3, #0
 800f468:	607b      	str	r3, [r7, #4]
 800f46a:	e05a      	b.n	800f522 <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800f472:	fb02 f303 	mul.w	r3, r2, r3
 800f476:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f47a:	141a      	asrs	r2, r3, #16
 800f47c:	492e      	ldr	r1, [pc, #184]	@ (800f538 <JPEG_InitPreProcColorTables+0xd8>)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f249 6245 	movw	r2, #38469	@ 0x9645
 800f48a:	fb02 f303 	mul.w	r3, r2, r3
 800f48e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f492:	141a      	asrs	r2, r3, #16
 800f494:	4929      	ldr	r1, [pc, #164]	@ (800f53c <JPEG_InitPreProcColorTables+0xdc>)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800f4a2:	fb02 f303 	mul.w	r3, r2, r3
 800f4a6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4aa:	141a      	asrs	r2, r3, #16
 800f4ac:	4924      	ldr	r1, [pc, #144]	@ (800f540 <JPEG_InitPreProcColorTables+0xe0>)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a23      	ldr	r2, [pc, #140]	@ (800f544 <JPEG_InitPreProcColorTables+0xe4>)
 800f4b8:	fb02 f303 	mul.w	r3, r2, r3
 800f4bc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4c0:	141a      	asrs	r2, r3, #16
 800f4c2:	4921      	ldr	r1, [pc, #132]	@ (800f548 <JPEG_InitPreProcColorTables+0xe8>)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a1f      	ldr	r2, [pc, #124]	@ (800f54c <JPEG_InitPreProcColorTables+0xec>)
 800f4ce:	fb02 f303 	mul.w	r3, r2, r3
 800f4d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4d6:	141a      	asrs	r2, r3, #16
 800f4d8:	491d      	ldr	r1, [pc, #116]	@ (800f550 <JPEG_InitPreProcColorTables+0xf0>)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	03db      	lsls	r3, r3, #15
 800f4e6:	141a      	asrs	r2, r3, #16
 800f4e8:	491a      	ldr	r1, [pc, #104]	@ (800f554 <JPEG_InitPreProcColorTables+0xf4>)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a19      	ldr	r2, [pc, #100]	@ (800f558 <JPEG_InitPreProcColorTables+0xf8>)
 800f4f4:	fb02 f303 	mul.w	r3, r2, r3
 800f4f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f4fc:	141a      	asrs	r2, r3, #16
 800f4fe:	4917      	ldr	r1, [pc, #92]	@ (800f55c <JPEG_InitPreProcColorTables+0xfc>)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a15      	ldr	r2, [pc, #84]	@ (800f560 <JPEG_InitPreProcColorTables+0x100>)
 800f50a:	fb02 f303 	mul.w	r3, r2, r3
 800f50e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800f512:	141a      	asrs	r2, r3, #16
 800f514:	4913      	ldr	r1, [pc, #76]	@ (800f564 <JPEG_InitPreProcColorTables+0x104>)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3301      	adds	r3, #1
 800f520:	607b      	str	r3, [r7, #4]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2bff      	cmp	r3, #255	@ 0xff
 800f526:	dda1      	ble.n	800f46c <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800f528:	bf00      	nop
 800f52a:	bf00      	nop
 800f52c:	370c      	adds	r7, #12
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	24001814 	.word	0x24001814
 800f53c:	24002414 	.word	0x24002414
 800f540:	24003014 	.word	0x24003014
 800f544:	ffffd4d1 	.word	0xffffd4d1
 800f548:	24001c14 	.word	0x24001c14
 800f54c:	ffffab30 	.word	0xffffab30
 800f550:	24002c14 	.word	0x24002c14
 800f554:	24002014 	.word	0x24002014
 800f558:	ffff94d1 	.word	0xffff94d1
 800f55c:	24002814 	.word	0x24002814
 800f560:	ffffeb30 	.word	0xffffeb30
 800f564:	24003414 	.word	0x24003414

0800f568 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800f56e:	2300      	movs	r3, #0
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	e036      	b.n	800f5e2 <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800f574:	2300      	movs	r3, #0
 800f576:	60bb      	str	r3, [r7, #8]
 800f578:	e02d      	b.n	800f5d6 <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	4413      	add	r3, r2
 800f582:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	2b07      	cmp	r3, #7
 800f588:	d906      	bls.n	800f598 <JPEG_Init_MCU_LUT+0x30>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b07      	cmp	r3, #7
 800f58e:	d903      	bls.n	800f598 <JPEG_Init_MCU_LUT+0x30>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3378      	adds	r3, #120	@ 0x78
 800f594:	607b      	str	r3, [r7, #4]
 800f596:	e012      	b.n	800f5be <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2b07      	cmp	r3, #7
 800f59c:	d906      	bls.n	800f5ac <JPEG_Init_MCU_LUT+0x44>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2b07      	cmp	r3, #7
 800f5a2:	d803      	bhi.n	800f5ac <JPEG_Init_MCU_LUT+0x44>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3338      	adds	r3, #56	@ 0x38
 800f5a8:	607b      	str	r3, [r7, #4]
 800f5aa:	e008      	b.n	800f5be <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	2b07      	cmp	r3, #7
 800f5b0:	d805      	bhi.n	800f5be <JPEG_Init_MCU_LUT+0x56>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2b07      	cmp	r3, #7
 800f5b6:	d902      	bls.n	800f5be <JPEG_Init_MCU_LUT+0x56>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	3340      	adds	r3, #64	@ 0x40
 800f5bc:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	011a      	lsls	r2, r3, #4
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	b291      	uxth	r1, r2
 800f5ca:	4a62      	ldr	r2, [pc, #392]	@ (800f754 <JPEG_Init_MCU_LUT+0x1ec>)
 800f5cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	60bb      	str	r3, [r7, #8]
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b0f      	cmp	r3, #15
 800f5da:	d9ce      	bls.n	800f57a <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	60fb      	str	r3, [r7, #12]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2b0f      	cmp	r3, #15
 800f5e6:	d9c5      	bls.n	800f574 <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	60fb      	str	r3, [r7, #12]
 800f5ec:	e072      	b.n	800f6d4 <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	60bb      	str	r3, [r7, #8]
 800f5f2:	e069      	b.n	800f6c8 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	011b      	lsls	r3, r3, #4
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	085b      	lsrs	r3, r3, #1
 800f602:	b29a      	uxth	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	085b      	lsrs	r3, r3, #1
 800f608:	b29b      	uxth	r3, r3
 800f60a:	00db      	lsls	r3, r3, #3
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4413      	add	r3, r2
 800f610:	b29b      	uxth	r3, r3
 800f612:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f616:	b299      	uxth	r1, r3
 800f618:	4a4f      	ldr	r2, [pc, #316]	@ (800f758 <JPEG_Init_MCU_LUT+0x1f0>)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	085b      	lsrs	r3, r3, #1
 800f624:	b29a      	uxth	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	b29b      	uxth	r3, r3
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4413      	add	r3, r2
 800f630:	b29b      	uxth	r3, r3
 800f632:	3380      	adds	r3, #128	@ 0x80
 800f634:	b299      	uxth	r1, r3
 800f636:	4a49      	ldr	r2, [pc, #292]	@ (800f75c <JPEG_Init_MCU_LUT+0x1f4>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	085b      	lsrs	r3, r3, #1
 800f642:	b29a      	uxth	r2, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	085b      	lsrs	r3, r3, #1
 800f648:	b29b      	uxth	r3, r3
 800f64a:	00db      	lsls	r3, r3, #3
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4413      	add	r3, r2
 800f650:	b29b      	uxth	r3, r3
 800f652:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f656:	b299      	uxth	r1, r3
 800f658:	4a41      	ldr	r2, [pc, #260]	@ (800f760 <JPEG_Init_MCU_LUT+0x1f8>)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	085b      	lsrs	r3, r3, #1
 800f664:	b29a      	uxth	r2, r3
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	4413      	add	r3, r2
 800f670:	b29b      	uxth	r3, r3
 800f672:	33c0      	adds	r3, #192	@ 0xc0
 800f674:	b299      	uxth	r1, r3
 800f676:	4a3b      	ldr	r2, [pc, #236]	@ (800f764 <JPEG_Init_MCU_LUT+0x1fc>)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	085b      	lsrs	r3, r3, #1
 800f682:	b29a      	uxth	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	085b      	lsrs	r3, r3, #1
 800f688:	b29b      	uxth	r3, r3
 800f68a:	00db      	lsls	r3, r3, #3
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	4413      	add	r3, r2
 800f690:	b29b      	uxth	r3, r3
 800f692:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f696:	b299      	uxth	r1, r3
 800f698:	4a33      	ldr	r2, [pc, #204]	@ (800f768 <JPEG_Init_MCU_LUT+0x200>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	085b      	lsrs	r3, r3, #1
 800f6a4:	b29a      	uxth	r2, r3
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	085b      	lsrs	r3, r3, #1
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	00db      	lsls	r3, r3, #3
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f6b8:	b299      	uxth	r1, r3
 800f6ba:	4a2c      	ldr	r2, [pc, #176]	@ (800f76c <JPEG_Init_MCU_LUT+0x204>)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	60bb      	str	r3, [r7, #8]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	2b0f      	cmp	r3, #15
 800f6cc:	d992      	bls.n	800f5f4 <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2b0f      	cmp	r3, #15
 800f6d8:	d989      	bls.n	800f5ee <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800f6da:	2300      	movs	r3, #0
 800f6dc:	60fb      	str	r3, [r7, #12]
 800f6de:	e02e      	b.n	800f73e <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	60bb      	str	r3, [r7, #8]
 800f6e4:	e025      	b.n	800f732 <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	b299      	uxth	r1, r3
 800f6f4:	4a1e      	ldr	r2, [pc, #120]	@ (800f770 <JPEG_Init_MCU_LUT+0x208>)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	3340      	adds	r3, #64	@ 0x40
 800f702:	b299      	uxth	r1, r3
 800f704:	4a1b      	ldr	r2, [pc, #108]	@ (800f774 <JPEG_Init_MCU_LUT+0x20c>)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	3380      	adds	r3, #128	@ 0x80
 800f712:	b299      	uxth	r1, r3
 800f714:	4a18      	ldr	r2, [pc, #96]	@ (800f778 <JPEG_Init_MCU_LUT+0x210>)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	33c0      	adds	r3, #192	@ 0xc0
 800f722:	b299      	uxth	r1, r3
 800f724:	4a15      	ldr	r2, [pc, #84]	@ (800f77c <JPEG_Init_MCU_LUT+0x214>)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	3301      	adds	r3, #1
 800f730:	60bb      	str	r3, [r7, #8]
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2b07      	cmp	r3, #7
 800f736:	d9d6      	bls.n	800f6e6 <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3301      	adds	r3, #1
 800f73c:	60fb      	str	r3, [r7, #12]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2b07      	cmp	r3, #7
 800f742:	d9cd      	bls.n	800f6e0 <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800f744:	bf00      	nop
 800f746:	bf00      	nop
 800f748:	3714      	adds	r7, #20
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	24003814 	.word	0x24003814
 800f758:	24003a94 	.word	0x24003a94
 800f75c:	24003c94 	.word	0x24003c94
 800f760:	24003f14 	.word	0x24003f14
 800f764:	24004114 	.word	0x24004114
 800f768:	24004394 	.word	0x24004394
 800f76c:	24004594 	.word	0x24004594
 800f770:	24003a14 	.word	0x24003a14
 800f774:	24003e94 	.word	0x24003e94
 800f778:	24004314 	.word	0x24004314
 800f77c:	24004794 	.word	0x24004794

0800f780 <memset>:
 800f780:	4402      	add	r2, r0
 800f782:	4603      	mov	r3, r0
 800f784:	4293      	cmp	r3, r2
 800f786:	d100      	bne.n	800f78a <memset+0xa>
 800f788:	4770      	bx	lr
 800f78a:	f803 1b01 	strb.w	r1, [r3], #1
 800f78e:	e7f9      	b.n	800f784 <memset+0x4>

0800f790 <__libc_init_array>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	4d0d      	ldr	r5, [pc, #52]	@ (800f7c8 <__libc_init_array+0x38>)
 800f794:	4c0d      	ldr	r4, [pc, #52]	@ (800f7cc <__libc_init_array+0x3c>)
 800f796:	1b64      	subs	r4, r4, r5
 800f798:	10a4      	asrs	r4, r4, #2
 800f79a:	2600      	movs	r6, #0
 800f79c:	42a6      	cmp	r6, r4
 800f79e:	d109      	bne.n	800f7b4 <__libc_init_array+0x24>
 800f7a0:	4d0b      	ldr	r5, [pc, #44]	@ (800f7d0 <__libc_init_array+0x40>)
 800f7a2:	4c0c      	ldr	r4, [pc, #48]	@ (800f7d4 <__libc_init_array+0x44>)
 800f7a4:	f000 f818 	bl	800f7d8 <_init>
 800f7a8:	1b64      	subs	r4, r4, r5
 800f7aa:	10a4      	asrs	r4, r4, #2
 800f7ac:	2600      	movs	r6, #0
 800f7ae:	42a6      	cmp	r6, r4
 800f7b0:	d105      	bne.n	800f7be <__libc_init_array+0x2e>
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}
 800f7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7b8:	4798      	blx	r3
 800f7ba:	3601      	adds	r6, #1
 800f7bc:	e7ee      	b.n	800f79c <__libc_init_array+0xc>
 800f7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c2:	4798      	blx	r3
 800f7c4:	3601      	adds	r6, #1
 800f7c6:	e7f2      	b.n	800f7ae <__libc_init_array+0x1e>
 800f7c8:	0800fba0 	.word	0x0800fba0
 800f7cc:	0800fba0 	.word	0x0800fba0
 800f7d0:	0800fba0 	.word	0x0800fba0
 800f7d4:	0800fba4 	.word	0x0800fba4

0800f7d8 <_init>:
 800f7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7da:	bf00      	nop
 800f7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7de:	bc08      	pop	{r3}
 800f7e0:	469e      	mov	lr, r3
 800f7e2:	4770      	bx	lr

0800f7e4 <_fini>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	bf00      	nop
 800f7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ea:	bc08      	pop	{r3}
 800f7ec:	469e      	mov	lr, r3
 800f7ee:	4770      	bx	lr
