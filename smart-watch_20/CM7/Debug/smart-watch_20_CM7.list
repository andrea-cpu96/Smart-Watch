
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6a8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800e940  0800e940  0000f940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecc0  0800ecc0  00010018  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecc0  0800ecc0  0000fcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecc8  0800ecc8  00010018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecc8  0800ecc8  0000fcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eccc  0800eccc  0000fccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  24000000  0800ecd0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005798  24000018  0800ece8  00010018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240057b0  0800ece8  000107b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002201e  00000000  00000000  00010046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000433c  00000000  00000000  00032064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001319  00000000  00000000  00037c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043e3f  00000000  00000000  00038f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ab6  00000000  00000000  0007cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a5a6c  00000000  00000000  000a387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002492ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006770  00000000  00000000  00249330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0024faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e928 	.word	0x0800e928

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800e928 	.word	0x0800e928

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <GC9A01_set_reset+0x30>)
 800070a:	f002 fa1d 	bl	8002b48 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800070e:	e004      	b.n	800071a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <GC9A01_set_reset+0x30>)
 8000716:	f002 fa17 	bl	8002b48 <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58022400 	.word	0x58022400

08000728 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	@ 0x40
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800073e:	f002 fa03 	bl	8002b48 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000742:	e004      	b.n	800074e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2140      	movs	r1, #64	@ 0x40
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800074a:	f002 f9fd 	bl	8002b48 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58022400 	.word	0x58022400

0800075c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2102      	movs	r1, #2
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <GC9A01_set_chip_select+0x30>)
 8000772:	f002 f9e9 	bl	8002b48 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000776:	e004      	b.n	8000782 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <GC9A01_set_chip_select+0x30>)
 800077e:	f002 f9e3 	bl	8002b48 <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58022800 	.word	0x58022800

08000790 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffc4 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ffdb 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fa92 	bl	8000cd4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffd3 	bl	800075c <GC9A01_set_chip_select>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ffad 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ffc4 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 fa7a 	bl	8000cd4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ffbb 	bl	800075c <GC9A01_set_chip_select>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffde 	bl	80007be <GC9A01_write_data>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000814:	202c      	movs	r0, #44	@ 0x2c
 8000816:	f7ff ffbb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800081a:	6839      	ldr	r1, [r7, #0]
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffce 	bl	80007be <GC9A01_write_data>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000834:	203c      	movs	r0, #60	@ 0x3c
 8000836:	f7ff ffab 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffbe 	bl	80007be <GC9A01_write_data>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <GC9A01_init>:

void GC9A01_init(void) {
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff84 	bl	800075c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000854:	2005      	movs	r0, #5
 8000856:	f001 fa93 	bl	8001d80 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff4a 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 fa8d 	bl	8001d80 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ff44 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(120);
 800086c:	2078      	movs	r0, #120	@ 0x78
 800086e:	f001 fa87 	bl	8001d80 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000872:	20ef      	movs	r0, #239	@ 0xef
 8000874:	f7ff ff8c 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000878:	20eb      	movs	r0, #235	@ 0xeb
 800087a:	f7ff ff89 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800087e:	2014      	movs	r0, #20
 8000880:	f7ff ffb5 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000884:	20fe      	movs	r0, #254	@ 0xfe
 8000886:	f7ff ff83 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800088a:	20ef      	movs	r0, #239	@ 0xef
 800088c:	f7ff ff80 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000890:	20eb      	movs	r0, #235	@ 0xeb
 8000892:	f7ff ff7d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000896:	2014      	movs	r0, #20
 8000898:	f7ff ffa9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800089c:	2084      	movs	r0, #132	@ 0x84
 800089e:	f7ff ff77 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80008a2:	2040      	movs	r0, #64	@ 0x40
 80008a4:	f7ff ffa3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80008a8:	2085      	movs	r0, #133	@ 0x85
 80008aa:	f7ff ff71 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008ae:	20ff      	movs	r0, #255	@ 0xff
 80008b0:	f7ff ff9d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80008b4:	2086      	movs	r0, #134	@ 0x86
 80008b6:	f7ff ff6b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008ba:	20ff      	movs	r0, #255	@ 0xff
 80008bc:	f7ff ff97 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80008c0:	2087      	movs	r0, #135	@ 0x87
 80008c2:	f7ff ff65 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008c6:	20ff      	movs	r0, #255	@ 0xff
 80008c8:	f7ff ff91 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80008cc:	2088      	movs	r0, #136	@ 0x88
 80008ce:	f7ff ff5f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f7ff ff8b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80008d8:	2089      	movs	r0, #137	@ 0x89
 80008da:	f7ff ff59 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80008de:	2021      	movs	r0, #33	@ 0x21
 80008e0:	f7ff ff85 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80008e4:	208a      	movs	r0, #138	@ 0x8a
 80008e6:	f7ff ff53 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff7f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 80008f0:	208b      	movs	r0, #139	@ 0x8b
 80008f2:	f7ff ff4d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 80008f6:	2080      	movs	r0, #128	@ 0x80
 80008f8:	f7ff ff79 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 80008fc:	208c      	movs	r0, #140	@ 0x8c
 80008fe:	f7ff ff47 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff73 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000908:	208d      	movs	r0, #141	@ 0x8d
 800090a:	f7ff ff41 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff6d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000914:	208e      	movs	r0, #142	@ 0x8e
 8000916:	f7ff ff3b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800091a:	20ff      	movs	r0, #255	@ 0xff
 800091c:	f7ff ff67 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000920:	208f      	movs	r0, #143	@ 0x8f
 8000922:	f7ff ff35 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000926:	20ff      	movs	r0, #255	@ 0xff
 8000928:	f7ff ff61 	bl	80007ee <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800092c:	20b6      	movs	r0, #182	@ 0xb6
 800092e:	f7ff ff2f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff5b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff58 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800093e:	2036      	movs	r0, #54	@ 0x36
 8000940:	f7ff ff26 	bl	8000790 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000944:	2048      	movs	r0, #72	@ 0x48
 8000946:	f7ff ff52 	bl	80007ee <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800094a:	203a      	movs	r0, #58	@ 0x3a
 800094c:	f7ff ff20 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000950:	2005      	movs	r0, #5
 8000952:	f7ff ff4c 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000956:	2090      	movs	r0, #144	@ 0x90
 8000958:	f7ff ff1a 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800095c:	2008      	movs	r0, #8
 800095e:	f7ff ff46 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000962:	2008      	movs	r0, #8
 8000964:	f7ff ff43 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000968:	2008      	movs	r0, #8
 800096a:	f7ff ff40 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800096e:	2008      	movs	r0, #8
 8000970:	f7ff ff3d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000974:	20bd      	movs	r0, #189	@ 0xbd
 8000976:	f7ff ff0b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff ff37 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000980:	20bc      	movs	r0, #188	@ 0xbc
 8000982:	f7ff ff05 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff31 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800098c:	20ff      	movs	r0, #255	@ 0xff
 800098e:	f7ff feff 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000992:	2060      	movs	r0, #96	@ 0x60
 8000994:	f7ff ff2b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff28 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800099e:	2004      	movs	r0, #4
 80009a0:	f7ff ff25 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80009a4:	20c3      	movs	r0, #195	@ 0xc3
 80009a6:	f7ff fef3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80009aa:	2013      	movs	r0, #19
 80009ac:	f7ff ff1f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80009b0:	20c4      	movs	r0, #196	@ 0xc4
 80009b2:	f7ff feed 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80009b6:	2013      	movs	r0, #19
 80009b8:	f7ff ff19 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80009bc:	20c9      	movs	r0, #201	@ 0xc9
 80009be:	f7ff fee7 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80009c2:	2022      	movs	r0, #34	@ 0x22
 80009c4:	f7ff ff13 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80009c8:	20be      	movs	r0, #190	@ 0xbe
 80009ca:	f7ff fee1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80009ce:	2011      	movs	r0, #17
 80009d0:	f7ff ff0d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80009d4:	20e1      	movs	r0, #225	@ 0xe1
 80009d6:	f7ff fedb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80009da:	2010      	movs	r0, #16
 80009dc:	f7ff ff07 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80009e0:	200e      	movs	r0, #14
 80009e2:	f7ff ff04 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80009e6:	20df      	movs	r0, #223	@ 0xdf
 80009e8:	f7ff fed2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80009ec:	2021      	movs	r0, #33	@ 0x21
 80009ee:	f7ff fefe 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 80009f2:	200c      	movs	r0, #12
 80009f4:	f7ff fefb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fef8 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 80009fe:	20f0      	movs	r0, #240	@ 0xf0
 8000a00:	f7ff fec6 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a04:	2045      	movs	r0, #69	@ 0x45
 8000a06:	f7ff fef2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a0a:	2009      	movs	r0, #9
 8000a0c:	f7ff feef 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a10:	2008      	movs	r0, #8
 8000a12:	f7ff feec 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a16:	2008      	movs	r0, #8
 8000a18:	f7ff fee9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a1c:	2026      	movs	r0, #38	@ 0x26
 8000a1e:	f7ff fee6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a22:	202a      	movs	r0, #42	@ 0x2a
 8000a24:	f7ff fee3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000a28:	20f1      	movs	r0, #241	@ 0xf1
 8000a2a:	f7ff feb1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a2e:	2043      	movs	r0, #67	@ 0x43
 8000a30:	f7ff fedd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a34:	2070      	movs	r0, #112	@ 0x70
 8000a36:	f7ff feda 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a3a:	2072      	movs	r0, #114	@ 0x72
 8000a3c:	f7ff fed7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a40:	2036      	movs	r0, #54	@ 0x36
 8000a42:	f7ff fed4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a46:	2037      	movs	r0, #55	@ 0x37
 8000a48:	f7ff fed1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000a4c:	206f      	movs	r0, #111	@ 0x6f
 8000a4e:	f7ff fece 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000a52:	20f2      	movs	r0, #242	@ 0xf2
 8000a54:	f7ff fe9c 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a58:	2045      	movs	r0, #69	@ 0x45
 8000a5a:	f7ff fec8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fec5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a64:	2008      	movs	r0, #8
 8000a66:	f7ff fec2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a6a:	2008      	movs	r0, #8
 8000a6c:	f7ff febf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a70:	2026      	movs	r0, #38	@ 0x26
 8000a72:	f7ff febc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a76:	202a      	movs	r0, #42	@ 0x2a
 8000a78:	f7ff feb9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000a7c:	20f3      	movs	r0, #243	@ 0xf3
 8000a7e:	f7ff fe87 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a82:	2043      	movs	r0, #67	@ 0x43
 8000a84:	f7ff feb3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a88:	2070      	movs	r0, #112	@ 0x70
 8000a8a:	f7ff feb0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a8e:	2072      	movs	r0, #114	@ 0x72
 8000a90:	f7ff fead 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a94:	2036      	movs	r0, #54	@ 0x36
 8000a96:	f7ff feaa 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a9a:	2037      	movs	r0, #55	@ 0x37
 8000a9c:	f7ff fea7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000aa0:	206f      	movs	r0, #111	@ 0x6f
 8000aa2:	f7ff fea4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000aa6:	20ed      	movs	r0, #237	@ 0xed
 8000aa8:	f7ff fe72 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000aac:	201b      	movs	r0, #27
 8000aae:	f7ff fe9e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f7ff fe9b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000ab8:	20ae      	movs	r0, #174	@ 0xae
 8000aba:	f7ff fe69 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000abe:	2077      	movs	r0, #119	@ 0x77
 8000ac0:	f7ff fe95 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000ac4:	20cd      	movs	r0, #205	@ 0xcd
 8000ac6:	f7ff fe63 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000aca:	2063      	movs	r0, #99	@ 0x63
 8000acc:	f7ff fe8f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000ad0:	2070      	movs	r0, #112	@ 0x70
 8000ad2:	f7ff fe5d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff fe89 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000adc:	2007      	movs	r0, #7
 8000ade:	f7ff fe86 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	f7ff fe83 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000ae8:	200e      	movs	r0, #14
 8000aea:	f7ff fe80 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff fe7d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000af4:	2009      	movs	r0, #9
 8000af6:	f7ff fe7a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f7ff fe77 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000b00:	2008      	movs	r0, #8
 8000b02:	f7ff fe74 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f7ff fe71 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000b0c:	20e8      	movs	r0, #232	@ 0xe8
 8000b0e:	f7ff fe3f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000b12:	2034      	movs	r0, #52	@ 0x34
 8000b14:	f7ff fe6b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000b18:	2062      	movs	r0, #98	@ 0x62
 8000b1a:	f7ff fe39 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b1e:	2018      	movs	r0, #24
 8000b20:	f7ff fe65 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f7ff fe62 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b2a:	2071      	movs	r0, #113	@ 0x71
 8000b2c:	f7ff fe5f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000b30:	20ed      	movs	r0, #237	@ 0xed
 8000b32:	f7ff fe5c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b36:	2070      	movs	r0, #112	@ 0x70
 8000b38:	f7ff fe59 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b3c:	2070      	movs	r0, #112	@ 0x70
 8000b3e:	f7ff fe56 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b42:	2018      	movs	r0, #24
 8000b44:	f7ff fe53 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000b48:	200f      	movs	r0, #15
 8000b4a:	f7ff fe50 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b4e:	2071      	movs	r0, #113	@ 0x71
 8000b50:	f7ff fe4d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000b54:	20ef      	movs	r0, #239	@ 0xef
 8000b56:	f7ff fe4a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b5a:	2070      	movs	r0, #112	@ 0x70
 8000b5c:	f7ff fe47 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b60:	2070      	movs	r0, #112	@ 0x70
 8000b62:	f7ff fe44 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000b66:	2063      	movs	r0, #99	@ 0x63
 8000b68:	f7ff fe12 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b6c:	2018      	movs	r0, #24
 8000b6e:	f7ff fe3e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000b72:	2011      	movs	r0, #17
 8000b74:	f7ff fe3b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b78:	2071      	movs	r0, #113	@ 0x71
 8000b7a:	f7ff fe38 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000b7e:	20f1      	movs	r0, #241	@ 0xf1
 8000b80:	f7ff fe35 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b84:	2070      	movs	r0, #112	@ 0x70
 8000b86:	f7ff fe32 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b8a:	2070      	movs	r0, #112	@ 0x70
 8000b8c:	f7ff fe2f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b90:	2018      	movs	r0, #24
 8000b92:	f7ff fe2c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000b96:	2013      	movs	r0, #19
 8000b98:	f7ff fe29 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b9c:	2071      	movs	r0, #113	@ 0x71
 8000b9e:	f7ff fe26 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000ba2:	20f3      	movs	r0, #243	@ 0xf3
 8000ba4:	f7ff fe23 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000ba8:	2070      	movs	r0, #112	@ 0x70
 8000baa:	f7ff fe20 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000bae:	2070      	movs	r0, #112	@ 0x70
 8000bb0:	f7ff fe1d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f7ff fdeb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000bba:	2028      	movs	r0, #40	@ 0x28
 8000bbc:	f7ff fe17 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000bc0:	2029      	movs	r0, #41	@ 0x29
 8000bc2:	f7ff fe14 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000bc6:	20f1      	movs	r0, #241	@ 0xf1
 8000bc8:	f7ff fe11 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fe0e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000bd2:	20f1      	movs	r0, #241	@ 0xf1
 8000bd4:	f7ff fe0b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fe08 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f7ff fe05 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000be4:	2066      	movs	r0, #102	@ 0x66
 8000be6:	f7ff fdd3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000bea:	203c      	movs	r0, #60	@ 0x3c
 8000bec:	f7ff fdff 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fdfc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000bf6:	20cd      	movs	r0, #205	@ 0xcd
 8000bf8:	f7ff fdf9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000bfc:	2067      	movs	r0, #103	@ 0x67
 8000bfe:	f7ff fdf6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000c02:	2045      	movs	r0, #69	@ 0x45
 8000c04:	f7ff fdf3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000c08:	2045      	movs	r0, #69	@ 0x45
 8000c0a:	f7ff fdf0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f7ff fded 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fdea 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fde7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fde4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000c26:	2067      	movs	r0, #103	@ 0x67
 8000c28:	f7ff fdb2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdde 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000c32:	203c      	movs	r0, #60	@ 0x3c
 8000c34:	f7ff fddb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fdd8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fdd5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fdd2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdcf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000c50:	2054      	movs	r0, #84	@ 0x54
 8000c52:	f7ff fdcc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff fdc9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000c5c:	2032      	movs	r0, #50	@ 0x32
 8000c5e:	f7ff fdc6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000c62:	2098      	movs	r0, #152	@ 0x98
 8000c64:	f7ff fdc3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000c68:	2074      	movs	r0, #116	@ 0x74
 8000c6a:	f7ff fd91 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f7ff fdbd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000c74:	2085      	movs	r0, #133	@ 0x85
 8000c76:	f7ff fdba 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000c7a:	2080      	movs	r0, #128	@ 0x80
 8000c7c:	f7ff fdb7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fdb4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fdb1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000c8c:	204e      	movs	r0, #78	@ 0x4e
 8000c8e:	f7ff fdae 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fdab 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000c98:	2098      	movs	r0, #152	@ 0x98
 8000c9a:	f7ff fd79 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000c9e:	203e      	movs	r0, #62	@ 0x3e
 8000ca0:	f7ff fda5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f7ff fda2 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000caa:	2035      	movs	r0, #53	@ 0x35
 8000cac:	f7ff fd70 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000cb0:	2021      	movs	r0, #33	@ 0x21
 8000cb2:	f7ff fd6d 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000cb6:	2011      	movs	r0, #17
 8000cb8:	f7ff fd6a 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(120);
 8000cbc:	2078      	movs	r0, #120	@ 0x78
 8000cbe:	f001 f85f 	bl	8001d80 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000cc2:	2029      	movs	r0, #41	@ 0x29
 8000cc4:	f7ff fd64 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(20);
 8000cc8:	2014      	movs	r0, #20
 8000cca:	f001 f859 	bl	8001d80 <HAL_Delay>
    
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <GC9A01_spi_tx+0x30>)
 8000cea:	f008 fe1d 	bl	8009928 <HAL_SPI_Transmit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <GC9A01_spi_tx+0x34>)
 8000cf4:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <GC9A01_spi_tx+0x34>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
		return;

}
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2400164c 	.word	0x2400164c
 8000d08:	24000034 	.word	0x24000034

08000d0c <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, FIL *file, uint32_t DestAddress)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  pFile = file;
 8000d18:	4a16      	ldr	r2, [pc, #88]	@ (8000d74 <JPEG_DecodePolling+0x68>)
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8000d1e:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <JPEG_DecodePolling+0x6c>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]

  /* Read from JPG file and fill the input buffer */
  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) != FR_OK)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <JPEG_DecodePolling+0x68>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <JPEG_DecodePolling+0x74>)
 8000d2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d32:	f00d f843 	bl	800ddbc <f_read>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <JPEG_DecodePolling+0x34>
  {
    Error_Handler();
 8000d3c:	f000 fd26 	bl	800178c <Error_Handler>
  }

  /* Update the file Offset*/
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <JPEG_DecodePolling+0x78>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* Start JPEG decoding with polling (Blocking) method */
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT,HAL_MAX_DELAY);
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <JPEG_DecodePolling+0x70>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <JPEG_DecodePolling+0x6c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4603      	mov	r3, r0
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f002 f84e 	bl	8002e06 <HAL_JPEG_Decode>

  return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000038 	.word	0x24000038
 8000d78:	24001044 	.word	0x24001044
 8000d7c:	24000008 	.word	0x24000008
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	2400103c 	.word	0x2400103c

08000d88 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  if(NbDecodedData != JPEG_InBuffer.DataBufferSize)
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d010      	beq.n	8000dd6 <HAL_JPEG_GetDataCallback+0x36>
  {
    Inputfile_Offset = Inputfile_Offset - JPEG_InBuffer.DataBufferSize + NbDecodedData;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	1ad2      	subs	r2, r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a17      	ldr	r2, [pc, #92]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000dc4:	6013      	str	r3, [r2, #0]
    f_lseek(pFile,Inputfile_Offset);
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_JPEG_GetDataCallback+0x84>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f00d f932 	bl	800e03a <f_lseek>
  }

  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) == FR_OK)
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_JPEG_GetDataCallback+0x84>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_JPEG_GetDataCallback+0x88>)
 8000de0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000de4:	f00c ffea 	bl	800ddbc <f_read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10f      	bne.n	8000e0e <HAL_JPEG_GetDataCallback+0x6e>
  {
    Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <HAL_JPEG_GetDataCallback+0x80>)
 8000dfa:	6013      	str	r3, [r2, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000e02:	6852      	ldr	r2, [r2, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f002 f8dd 	bl	8002fc6 <HAL_JPEG_ConfigInputBuffer>
  }
  else
  {
    Error_Handler();
  }
}
 8000e0c:	e001      	b.n	8000e12 <HAL_JPEG_GetDataCallback+0x72>
    Error_Handler();
 8000e0e:	f000 fcbd 	bl	800178c <Error_Handler>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000008 	.word	0x24000008
 8000e20:	2400103c 	.word	0x2400103c
 8000e24:	24000038 	.word	0x24000038
 8000e28:	2400000c 	.word	0x2400000c

08000e2c <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/
  FrameBufferAddress += OutDataLength;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_JPEG_DataReadyCallback+0x30>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_JPEG_DataReadyCallback+0x30>)
 8000e42:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT);
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_JPEG_DataReadyCallback+0x30>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f002 f8cb 	bl	8002fea <HAL_JPEG_ConfigOutputBuffer>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24001044 	.word	0x24001044

08000e60 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  Jpeg_Decoding_End = 1;
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	24001040 	.word	0x24001040

08000e80 <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

	// SD card initialization
	sd_init();
 8000e84:	f000 f8e8 	bl	8001058 <sd_init>

	// Initialize the YCbCr to RGB color conversion tables.
	JPEG_InitColorTables();
 8000e88:	f00d fb88 	bl	800e59c <JPEG_InitColorTables>

	// Display driver initialization
	GC9A01_init();
 8000e8c:	f7ff fcdd 	bl	800084a <GC9A01_init>

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <lcd_process>:


void lcd_process(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();

	// Start the demonstrative execution of the JPEG decoding
	jpeg_demo();
 8000e98:	f000 f842 	bl	8000f20 <jpeg_demo>

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e022      	b.n	8000f0a <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	e016      	b.n	8000ef8 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d108      	bne.n	8000ee4 <lcd_draw+0x44>
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d104      	bne.n	8000ee4 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8000eda:	2102      	movs	r1, #2
 8000edc:	6a38      	ldr	r0, [r7, #32]
 8000ede:	f7ff fc94 	bl	800080a <GC9A01_write>
 8000ee2:	e003      	b.n	8000eec <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	6a38      	ldr	r0, [r7, #32]
 8000ee8:	f7ff fc9f 	bl	800082a <GC9A01_write_continue>

			}

			data += 2;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	3302      	adds	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	883a      	ldrh	r2, [r7, #0]
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbe2      	blt.n	8000eca <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4413      	add	r3, r2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbd6      	blt.n	8000ec4 <lcd_draw+0x24>

		}

	}

}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}

08000f20 <jpeg_demo>:


void jpeg_demo(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	f5ad 3d61 	sub.w	sp, sp, #230400	@ 0x38400
 8000f26:	b08d      	sub	sp, #52	@ 0x34
 8000f28:	af04      	add	r7, sp, #16
    uint8_t JPEG_OutputBuffer[MAX_BUFFER_SIZE]; 					// RAW buffer
    uint8_t DECODED_OutputBuffer[MAX_BUFFER_SIZE];					// Decoded buffer


    // File opening in reading
    if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	493d      	ldr	r1, [pc, #244]	@ (8001024 <jpeg_demo+0x104>)
 8000f2e:	483e      	ldr	r0, [pc, #248]	@ (8001028 <jpeg_demo+0x108>)
 8000f30:	f00c fd8a 	bl	800da48 <f_open>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <jpeg_demo+0x1e>
    	while(1);
 8000f3a:	bf00      	nop
 8000f3c:	e7fd      	b.n	8000f3a <jpeg_demo+0x1a>

    // JPEG decoding in polling mode
    JPEG_DecodePolling(&hjpeg, &file, (uint32_t)JPEG_OutputBuffer);
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <jpeg_demo+0x10c>)
 8000f40:	f503 3361 	add.w	r3, r3, #230400	@ 0x38400
 8000f44:	f103 0320 	add.w	r3, r3, #32
 8000f48:	443b      	add	r3, r7
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4936      	ldr	r1, [pc, #216]	@ (8001028 <jpeg_demo+0x108>)
 8000f4e:	4838      	ldr	r0, [pc, #224]	@ (8001030 <jpeg_demo+0x110>)
 8000f50:	f7ff fedc 	bl	8000d0c <JPEG_DecodePolling>

    // Wait until the end of the conversion
    while(!Jpeg_Decoding_End);
 8000f54:	bf00      	nop
 8000f56:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <jpeg_demo+0x114>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0fb      	beq.n	8000f56 <jpeg_demo+0x36>

    // Get info from the JPEG file
    HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8000f5e:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <jpeg_demo+0x118>)
 8000f60:	443b      	add	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4832      	ldr	r0, [pc, #200]	@ (8001030 <jpeg_demo+0x110>)
 8000f66:	f001 feb9 	bl	8002cdc <HAL_JPEG_GetInfo>

    uint16_t width = JPEG_Info.ImageWidth;
 8000f6a:	4b34      	ldr	r3, [pc, #208]	@ (800103c <jpeg_demo+0x11c>)
 8000f6c:	443b      	add	r3, r7
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a33      	ldr	r2, [pc, #204]	@ (8001040 <jpeg_demo+0x120>)
 8000f72:	443a      	add	r2, r7
 8000f74:	8013      	strh	r3, [r2, #0]
	uint16_t height = JPEG_Info.ImageHeight;
 8000f76:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <jpeg_demo+0x124>)
 8000f78:	443b      	add	r3, r7
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a32      	ldr	r2, [pc, #200]	@ (8001048 <jpeg_demo+0x128>)
 8000f7e:	443a      	add	r2, r7
 8000f80:	8013      	strh	r3, [r2, #0]

    uint16_t xPos = (LCD_WIDTH - width)/2;					// Center the image in x
 8000f82:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <jpeg_demo+0x120>)
 8000f84:	443b      	add	r3, r7
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da00      	bge.n	8000f92 <jpeg_demo+0x72>
 8000f90:	3301      	adds	r3, #1
 8000f92:	105b      	asrs	r3, r3, #1
 8000f94:	4a2d      	ldr	r2, [pc, #180]	@ (800104c <jpeg_demo+0x12c>)
 8000f96:	443a      	add	r2, r7
 8000f98:	8013      	strh	r3, [r2, #0]
    uint16_t yPos = (LCD_WIDTH - height)/2;					// Center the image in y
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001048 <jpeg_demo+0x128>)
 8000f9c:	443b      	add	r3, r7
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	da00      	bge.n	8000faa <jpeg_demo+0x8a>
 8000fa8:	3301      	adds	r3, #1
 8000faa:	105b      	asrs	r3, r3, #1
 8000fac:	4a28      	ldr	r2, [pc, #160]	@ (8001050 <jpeg_demo+0x130>)
 8000fae:	443a      	add	r2, r7
 8000fb0:	8013      	strh	r3, [r2, #0]

    // Convert the YCbCr format into the RGBB565 format
    DMA2D_CopyBuffer((uint32_t *)JPEG_OutputBuffer, (uint32_t *)DECODED_OutputBuffer, 0, 0, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, 0);
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <jpeg_demo+0x11c>)
 8000fb4:	443b      	add	r3, r7
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <jpeg_demo+0x124>)
 8000fbc:	443a      	add	r2, r7
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	4924      	ldr	r1, [pc, #144]	@ (8001054 <jpeg_demo+0x134>)
 8000fc4:	f501 3161 	add.w	r1, r1, #230400	@ 0x38400
 8000fc8:	f101 0120 	add.w	r1, r1, #32
 8000fcc:	4439      	add	r1, r7
 8000fce:	4817      	ldr	r0, [pc, #92]	@ (800102c <jpeg_demo+0x10c>)
 8000fd0:	f500 3061 	add.w	r0, r0, #230400	@ 0x38400
 8000fd4:	f100 0020 	add.w	r0, r0, #32
 8000fd8:	4438      	add	r0, r7
 8000fda:	2400      	movs	r4, #0
 8000fdc:	9402      	str	r4, [sp, #8]
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f000 f84d 	bl	8001084 <DMA2D_CopyBuffer>

    // Display the image
    lcd_draw(xPos, yPos, width, height, DECODED_OutputBuffer);
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <jpeg_demo+0x128>)
 8000fec:	443b      	add	r3, r7
 8000fee:	881c      	ldrh	r4, [r3, #0]
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <jpeg_demo+0x120>)
 8000ff2:	443b      	add	r3, r7
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <jpeg_demo+0x130>)
 8000ff8:	443b      	add	r3, r7
 8000ffa:	8819      	ldrh	r1, [r3, #0]
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <jpeg_demo+0x12c>)
 8000ffe:	443b      	add	r3, r7
 8001000:	8818      	ldrh	r0, [r3, #0]
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <jpeg_demo+0x134>)
 8001004:	f503 3361 	add.w	r3, r3, #230400	@ 0x38400
 8001008:	f103 0320 	add.w	r3, r3, #32
 800100c:	443b      	add	r3, r7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4623      	mov	r3, r4
 8001012:	f7ff ff45 	bl	8000ea0 <lcd_draw>

}
 8001016:	bf00      	nop
 8001018:	f507 3761 	add.w	r7, r7, #230400	@ 0x38400
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	0800e940 	.word	0x0800e940
 8001028:	24001278 	.word	0x24001278
 800102c:	fffe3de4 	.word	0xfffe3de4
 8001030:	24001578 	.word	0x24001578
 8001034:	24001040 	.word	0x24001040
 8001038:	00038404 	.word	0x00038404
 800103c:	00038410 	.word	0x00038410
 8001040:	0003841e 	.word	0x0003841e
 8001044:	0003840c 	.word	0x0003840c
 8001048:	0003841c 	.word	0x0003841c
 800104c:	0003841a 	.word	0x0003841a
 8001050:	00038418 	.word	0x00038418
 8001054:	fffc7be4 	.word	0xfffc7be4

08001058 <sd_init>:


// SD

static void sd_init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 800105c:	2201      	movs	r2, #1
 800105e:	4905      	ldr	r1, [pc, #20]	@ (8001074 <sd_init+0x1c>)
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <sd_init+0x20>)
 8001062:	f00c fcab 	bl	800d9bc <f_mount>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <sd_init+0x18>
    	sd_error_handler();
 800106c:	f000 f806 	bl	800107c <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0800e94c 	.word	0x0800e94c
 8001078:	24001048 	.word	0x24001048

0800107c <sd_error_handler>:


static void sd_error_handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

	while(1);
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <sd_error_handler+0x4>

08001084 <DMA2D_CopyBuffer>:
  * @param  ysize: image Height
  * @retval None
  */
static DMA2D_HandleTypeDef    DMA2D_Handle;
static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4611      	mov	r1, r2
 8001090:	461a      	mov	r2, r3
 8001092:	460b      	mov	r3, r1
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = DMA2D_CSS_420, inputLineOffset = 0;
 800109a:	2302      	movs	r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  uint32_t destination = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 80010a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d10d      	bne.n	80010c8 <DMA2D_CopyBuffer+0x44>
  {
    cssMode = DMA2D_CSS_420;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61fb      	str	r3, [r7, #28]

    inputLineOffset = xsize % 16;
 80010b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	61bb      	str	r3, [r7, #24]
    if(inputLineOffset != 0)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d025      	beq.n	800110a <DMA2D_CopyBuffer+0x86>
    {
      inputLineOffset = 16 - inputLineOffset;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f1c3 0310 	rsb	r3, r3, #16
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	e020      	b.n	800110a <DMA2D_CopyBuffer+0x86>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 80010c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <DMA2D_CopyBuffer+0x66>
  {
    cssMode = DMA2D_NO_CSS;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]

    inputLineOffset = xsize % 8;
 80010d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	61bb      	str	r3, [r7, #24]
    if(inputLineOffset != 0)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d014      	beq.n	800110a <DMA2D_CopyBuffer+0x86>
    {
      inputLineOffset = 8 - inputLineOffset;
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f1c3 0308 	rsb	r3, r3, #8
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	e00f      	b.n	800110a <DMA2D_CopyBuffer+0x86>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80010ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10c      	bne.n	800110a <DMA2D_CopyBuffer+0x86>
  {
    cssMode = DMA2D_CSS_422;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]

    inputLineOffset = xsize % 16;
 80010f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	61bb      	str	r3, [r7, #24]
    if(inputLineOffset != 0)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <DMA2D_CopyBuffer+0x86>
    {
      inputLineOffset = 16 - inputLineOffset;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	f1c3 0310 	rsb	r3, r3, #16
 8001108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800110a:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 800110c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001110:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB565;
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001114:	2202      	movs	r2, #2
 8001116:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_WIDTH - xsize;
 8001118:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800111a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800111e:	461a      	mov	r2, r3
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001122:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8001136:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001138:	2201      	movs	r2, #1
 800113a:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800113c:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 800113e:	22ff      	movs	r2, #255	@ 0xff
 8001140:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001142:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001144:	220b      	movs	r2, #11
 8001146:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001156:	2200      	movs	r2, #0
 8001158:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 800115c:	2200      	movs	r2, #0
 800115e:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001162:	4a14      	ldr	r2, [pc, #80]	@ (80011b4 <DMA2D_CopyBuffer+0x130>)
 8001164:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001166:	4812      	ldr	r0, [pc, #72]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001168:	f000 ff4a 	bl	8002000 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800116c:	2101      	movs	r1, #1
 800116e:	4810      	ldr	r0, [pc, #64]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 8001170:	f001 f9ce 	bl	8002510 <HAL_DMA2D_ConfigLayer>

  /*##-5-  copy the new decoded frame to the LCD Frame buffer ################*/
  destination = (uint32_t)pDst + ((y * LCD_WIDTH) + x) * 4;
 8001174:	88ba      	ldrh	r2, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	1a9b      	subs	r3, r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	461a      	mov	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]

  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, xsize, ysize);
 800118e:	68f9      	ldr	r1, [r7, #12]
 8001190:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001192:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4613      	mov	r3, r2
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 800119c:	f000 ff94 	bl	80020c8 <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 80011a0:	2119      	movs	r1, #25
 80011a2:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <DMA2D_CopyBuffer+0x12c>)
 80011a4:	f000 ffbb 	bl	800211e <HAL_DMA2D_PollForTransfer>
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	240014a8 	.word	0x240014a8
 80011b4:	52001000 	.word	0x52001000

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80011be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80011c4:	bf00      	nop
 80011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <main+0xb8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <main+0x24>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dcf4      	bgt.n	80011c6 <main+0xe>
  if ( timeout < 0 )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da01      	bge.n	80011e6 <main+0x2e>
  {
  Error_Handler();
 80011e2:	f000 fad3 	bl	800178c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e6:	f000 fd39 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ea:	f000 f843 	bl	8001274 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011ee:	f000 f8c5 	bl	800137c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <main+0xb8>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <main+0xb8>)
 80011fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <main+0xb8>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001210:	2000      	movs	r0, #0
 8001212:	f001 fcb3 	bl	8002b7c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001216:	2100      	movs	r1, #0
 8001218:	2000      	movs	r0, #0
 800121a:	f001 fcc9 	bl	8002bb0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800121e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001222:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001224:	bf00      	nop
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <main+0xb8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d104      	bne.n	800123c <main+0x84>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dcf4      	bgt.n	8001226 <main+0x6e>
if ( timeout < 0 )
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	da01      	bge.n	8001246 <main+0x8e>
{
Error_Handler();
 8001242:	f000 faa3 	bl	800178c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 f9db 	bl	8001600 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800124a:	f000 f8c7 	bl	80013dc <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 800124e:	f000 f913 	bl	8001478 <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 8001252:	f000 f935 	bl	80014c0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001256:	f000 f987 	bl	8001568 <MX_USART1_UART_Init>
  MX_JPEG_Init();
 800125a:	f000 f8f9 	bl	8001450 <MX_JPEG_Init>
  MX_FATFS_Init();
 800125e:	f00a fce1 	bl	800bc24 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001262:	f00a ff2f 	bl	800c0c4 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001266:	f7ff fe0b 	bl	8000e80 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 800126a:	f7ff fe13 	bl	8000e94 <lcd_process>
 800126e:	e7fc      	b.n	800126a <main+0xb2>
 8001270:	58024400 	.word	0x58024400

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b09c      	sub	sp, #112	@ 0x70
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	224c      	movs	r2, #76	@ 0x4c
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00d fb24 	bl	800e8d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2220      	movs	r2, #32
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f00d fb1e 	bl	800e8d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001294:	2004      	movs	r0, #4
 8001296:	f002 ffd7 	bl	8004248 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <SystemClock_Config+0x100>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a2:	4a34      	ldr	r2, [pc, #208]	@ (8001374 <SystemClock_Config+0x100>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012aa:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <SystemClock_Config+0x100>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <SystemClock_Config+0x104>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <SystemClock_Config+0x104>)
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <SystemClock_Config+0x104>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012cc:	bf00      	nop
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <SystemClock_Config+0x104>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012da:	d1f8      	bne.n	80012ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80012dc:	230a      	movs	r3, #10
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2340      	movs	r3, #64	@ 0x40
 80012e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80012f8:	230c      	movs	r3, #12
 80012fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001308:	230c      	movs	r3, #12
 800130a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800130c:	2300      	movs	r3, #0
 800130e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131a:	4618      	mov	r0, r3
 800131c:	f002 ffee 	bl	80042fc <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001326:	f000 fa31 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	233f      	movs	r3, #63	@ 0x3f
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2303      	movs	r3, #3
 8001330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800133a:	2340      	movs	r3, #64	@ 0x40
 800133c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800133e:	2340      	movs	r3, #64	@ 0x40
 8001340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001348:	2340      	movs	r3, #64	@ 0x40
 800134a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fc2d 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800135c:	f000 fa16 	bl	800178c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001360:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001364:	2100      	movs	r1, #0
 8001366:	2000      	movs	r0, #0
 8001368:	f003 fdd8 	bl	8004f1c <HAL_RCC_MCOConfig>
}
 800136c:	bf00      	nop
 800136e:	3770      	adds	r7, #112	@ 0x70
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58000400 	.word	0x58000400
 8001378:	58024800 	.word	0x58024800

0800137c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0b2      	sub	sp, #200	@ 0xc8
 8001380:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	22c8      	movs	r2, #200	@ 0xc8
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f00d faa1 	bl	800e8d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800138e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800139a:	2304      	movs	r3, #4
 800139c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800139e:	2309      	movs	r3, #9
 80013a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013ae:	23c0      	movs	r3, #192	@ 0xc0
 80013b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013b2:	2320      	movs	r3, #32
 80013b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80013b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 ffe9 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80013d0:	f000 f9dc 	bl	800178c <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	37c8      	adds	r7, #200	@ 0xc8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 80013e2:	4a1a      	ldr	r2, [pc, #104]	@ (800144c <MX_DMA2D_Init+0x70>)
 80013e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 8001400:	2202      	movs	r2, #2
 8001402:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 8001406:	2200      	movs	r2, #0
 8001408:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 800140c:	2200      	movs	r2, #0
 800140e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 8001412:	2200      	movs	r2, #0
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 8001418:	2200      	movs	r2, #0
 800141a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 800141e:	2200      	movs	r2, #0
 8001420:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001422:	4809      	ldr	r0, [pc, #36]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 8001424:	f000 fdec 	bl	8002000 <HAL_DMA2D_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800142e:	f000 f9ad 	bl	800178c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001432:	2101      	movs	r1, #1
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_DMA2D_Init+0x6c>)
 8001436:	f001 f86b 	bl	8002510 <HAL_DMA2D_ConfigLayer>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001440:	f000 f9a4 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	24001510 	.word	0x24001510
 800144c:	52001000 	.word	0x52001000

08001450 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_JPEG_Init+0x20>)
 8001456:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <MX_JPEG_Init+0x24>)
 8001458:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_JPEG_Init+0x20>)
 800145c:	f001 fbbc 	bl	8002bd8 <HAL_JPEG_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001466:	f000 f991 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24001578 	.word	0x24001578
 8001474:	52003000 	.word	0x52003000

08001478 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 800147e:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <MX_SDMMC1_SD_Init+0x44>)
 8001480:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 8001490:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001494:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_SDMMC1_SD_Init+0x40>)
 80014a4:	f006 fcb8 	bl	8007e18 <HAL_SD_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80014ae:	f000 f96d 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	240015d0 	.word	0x240015d0
 80014bc:	52007000 	.word	0x52007000

080014c0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80014c4:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014c6:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <MX_SPI5_Init+0xa4>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014da:	2207      	movs	r2, #7
 80014dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_SPI5_Init+0xa0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_SPI5_Init+0xa0>)
 800150c:	2200      	movs	r2, #0
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001512:	2200      	movs	r2, #0
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001518:	2200      	movs	r2, #0
 800151a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_SPI5_Init+0xa0>)
 800151e:	2200      	movs	r2, #0
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001524:	2200      	movs	r2, #0
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001528:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <MX_SPI5_Init+0xa0>)
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001530:	2200      	movs	r2, #0
 8001532:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001536:	2200      	movs	r2, #0
 8001538:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_SPI5_Init+0xa0>)
 800153c:	2200      	movs	r2, #0
 800153e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001542:	2200      	movs	r2, #0
 8001544:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_SPI5_Init+0xa0>)
 8001548:	2200      	movs	r2, #0
 800154a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_SPI5_Init+0xa0>)
 800154e:	f008 f8c7 	bl	80096e0 <HAL_SPI_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001558:	f000 f918 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2400164c 	.word	0x2400164c
 8001564:	40015000 	.word	0x40015000

08001568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <MX_USART1_UART_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015b2:	f008 fc90 	bl	8009ed6 <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f8e6 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015c4:	f009 fc99 	bl	800aefa <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f000 f8dd 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015d6:	f009 fcce 	bl	800af76 <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f000 f8d4 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015e6:	f009 fc4f 	bl	800ae88 <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f000 f8cc 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	240016d4 	.word	0x240016d4
 80015fc:	40011000 	.word	0x40011000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161c:	4a56      	ldr	r2, [pc, #344]	@ (8001778 <MX_GPIO_Init+0x178>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001626:	4b54      	ldr	r3, [pc, #336]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a4f      	ldr	r2, [pc, #316]	@ (8001778 <MX_GPIO_Init+0x178>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	4a47      	ldr	r2, [pc, #284]	@ (8001778 <MX_GPIO_Init+0x178>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001662:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001670:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	4a40      	ldr	r2, [pc, #256]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001680:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001694:	4a38      	ldr	r2, [pc, #224]	@ (8001778 <MX_GPIO_Init+0x178>)
 8001696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169e:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016ac:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b2:	4a31      	ldr	r2, [pc, #196]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d0:	4a29      	ldr	r2, [pc, #164]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016da:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2102      	movs	r1, #2
 80016ec:	4823      	ldr	r0, [pc, #140]	@ (800177c <MX_GPIO_Init+0x17c>)
 80016ee:	f001 fa2b 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2161      	movs	r1, #97	@ 0x61
 80016f6:	4822      	ldr	r0, [pc, #136]	@ (8001780 <MX_GPIO_Init+0x180>)
 80016f8:	f001 fa26 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	481c      	ldr	r0, [pc, #112]	@ (8001784 <MX_GPIO_Init+0x184>)
 8001712:	f001 f851 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001716:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <MX_GPIO_Init+0x188>)
 8001734:	f001 f840 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	480b      	ldr	r0, [pc, #44]	@ (800177c <MX_GPIO_Init+0x17c>)
 8001750:	f001 f832 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8001754:	2361      	movs	r3, #97	@ 0x61
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_GPIO_Init+0x180>)
 800176c:	f001 f824 	bl	80027b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	@ 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	58024400 	.word	0x58024400
 800177c:	58022800 	.word	0x58022800
 8001780:	58022400 	.word	0x58022400
 8001784:	58022000 	.word	0x58022000
 8001788:	58020000 	.word	0x58020000

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <Error_Handler+0x8>

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_MspInit+0x30>)
 80017a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017a4:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x30>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x30>)
 80017b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	58024400 	.word	0x58024400

080017cc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <HAL_DMA2D_MspInit+0x48>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d116      	bne.n	800180c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_DMA2D_MspInit+0x4c>)
 80017e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <HAL_DMA2D_MspInit+0x4c>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_DMA2D_MspInit+0x4c>)
 80017f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	205a      	movs	r0, #90	@ 0x5a
 8001802:	f000 fbc8 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001806:	205a      	movs	r0, #90	@ 0x5a
 8001808:	f000 fbdf 	bl	8001fca <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	52001000 	.word	0x52001000
 8001818:	58024400 	.word	0x58024400

0800181c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0b      	ldr	r2, [pc, #44]	@ (8001858 <HAL_JPEG_MspInit+0x3c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10e      	bne.n	800184c <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_JPEG_MspInit+0x40>)
 8001830:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001834:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_JPEG_MspInit+0x40>)
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_JPEG_MspInit+0x40>)
 8001840:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	52003000 	.word	0x52003000
 800185c:	58024400 	.word	0x58024400

08001860 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0be      	sub	sp, #248	@ 0xf8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	22c8      	movs	r2, #200	@ 0xc8
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00d f825 	bl	800e8d0 <memset>
  if(hsd->Instance==SDMMC1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a3c      	ldr	r2, [pc, #240]	@ (800197c <HAL_SD_MspInit+0x11c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d171      	bne.n	8001974 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001890:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800189c:	2300      	movs	r3, #0
 800189e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fd79 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80018b0:	f7ff ff6c 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018b4:	4b32      	ldr	r3, [pc, #200]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ba:	4a31      	ldr	r2, [pc, #196]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f6:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <HAL_SD_MspInit+0x120>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <HAL_SD_MspInit+0x120>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 800190e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001912:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001928:	230c      	movs	r3, #12
 800192a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001932:	4619      	mov	r1, r3
 8001934:	4813      	ldr	r0, [pc, #76]	@ (8001984 <HAL_SD_MspInit+0x124>)
 8001936:	f000 ff3f 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800193a:	2304      	movs	r3, #4
 800193c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001952:	230c      	movs	r3, #12
 8001954:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800195c:	4619      	mov	r1, r3
 800195e:	480a      	ldr	r0, [pc, #40]	@ (8001988 <HAL_SD_MspInit+0x128>)
 8001960:	f000 ff2a 	bl	80027b8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	2031      	movs	r0, #49	@ 0x31
 800196a:	f000 fb14 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800196e:	2031      	movs	r0, #49	@ 0x31
 8001970:	f000 fb2b 	bl	8001fca <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001974:	bf00      	nop
 8001976:	37f8      	adds	r7, #248	@ 0xf8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	52007000 	.word	0x52007000
 8001980:	58024400 	.word	0x58024400
 8001984:	58020800 	.word	0x58020800
 8001988:	58020c00 	.word	0x58020c00

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0be      	sub	sp, #248	@ 0xf8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	22c8      	movs	r2, #200	@ 0xc8
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00c ff8f 	bl	800e8d0 <memset>
  if(hspi->Instance==SPI5)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a39      	ldr	r2, [pc, #228]	@ (8001a9c <HAL_SPI_MspInit+0x110>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d16a      	bne.n	8001a92 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80019bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f107 0318 	add.w	r3, r7, #24
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fce2 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80019de:	f7ff fed5 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80019e2:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 80019e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019e8:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 80019ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019f2:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 80019f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a00:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a06:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a10:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a24:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <HAL_SPI_MspInit+0x114>)
 8001a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a54:	2305      	movs	r3, #5
 8001a56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4810      	ldr	r0, [pc, #64]	@ (8001aa4 <HAL_SPI_MspInit+0x118>)
 8001a62:	f000 fea9 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001a66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a80:	2305      	movs	r3, #5
 8001a82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a86:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <HAL_SPI_MspInit+0x11c>)
 8001a8e:	f000 fe93 	bl	80027b8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001a92:	bf00      	nop
 8001a94:	37f8      	adds	r7, #248	@ 0xf8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40015000 	.word	0x40015000
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58022800 	.word	0x58022800
 8001aa8:	58022400 	.word	0x58022400

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0bc      	sub	sp, #240	@ 0xf0
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	22c8      	movs	r2, #200	@ 0xc8
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00c feff 	bl	800e8d0 <memset>
  if(huart->Instance==USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a27      	ldr	r2, [pc, #156]	@ (8001b74 <HAL_UART_MspInit+0xc8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d146      	bne.n	8001b6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001adc:	f04f 0201 	mov.w	r2, #1
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fc52 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001afe:	f7ff fe45 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b08:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b26:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001b3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <HAL_UART_MspInit+0xd0>)
 8001b66:	f000 fe27 	bl	80027b8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b6a:	bf00      	nop
 8001b6c:	37f0      	adds	r7, #240	@ 0xf0
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40011000 	.word	0x40011000
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58020000 	.word	0x58020000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x4>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <MemManage_Handler+0x4>

08001b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd6:	f000 f8b3 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <SDMMC1_IRQHandler+0x10>)
 8001be6:	f006 fb87 	bl	80082f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	240015d0 	.word	0x240015d0

08001bf4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <DMA2D_IRQHandler+0x10>)
 8001bfa:	f000 fb79 	bl	80022f0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	24001510 	.word	0x24001510

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c0c:	f7fe fcdc 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f00c fe53 	bl	800e8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff fabd 	bl	80011b8 <main>
  bx  lr
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c48:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001c4c:	0800ecd0 	.word	0x0800ecd0
  ldr r2, =_sbss
 8001c50:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001c54:	240057b0 	.word	0x240057b0

08001c58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC3_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f98c 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c68:	f003 f9c2 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4913      	ldr	r1, [pc, #76]	@ (8001cc8 <HAL_Init+0x6c>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <HAL_Init+0x6c>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_Init+0x70>)
 8001c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <HAL_Init+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f814 	bl	8001cd4 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e002      	b.n	8001cbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb6:	f7ff fd6f 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	0800e994 	.word	0x0800e994
 8001ccc:	24000004 	.word	0x24000004
 8001cd0:	24000000 	.word	0x24000000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_InitTick+0x60>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e021      	b.n	8001d2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_InitTick+0x64>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_InitTick+0x60>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f971 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f93b 	bl	8001f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <HAL_InitTick+0x68>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	24000014 	.word	0x24000014
 8001d38:	24000000 	.word	0x24000000
 8001d3c:	24000010 	.word	0x24000010

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	24000014 	.word	0x24000014
 8001d64:	24001768 	.word	0x24001768

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	24001768 	.word	0x24001768

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	24000014 	.word	0x24000014

08001dc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetREVID+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	5c001000 	.word	0x5c001000

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x40>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x40>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00
 8001e24:	05fa0000 	.word	0x05fa0000

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4907      	ldr	r1, [pc, #28]	@ (8001e7c <__NVIC_EnableIRQ+0x38>)
 8001e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	@ (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	@ (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	@ 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ff8e 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff29 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff40 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff33 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa4 	bl	8001f3c <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e04f      	b.n	80020b2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fbd0 	bl	80017cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <HAL_DMA2D_Init+0xbc>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6851      	ldr	r1, [r2, #4]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	69d2      	ldr	r2, [r2, #28]
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002056:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_DMA2D_Init+0xc0>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6891      	ldr	r1, [r2, #8]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6992      	ldr	r2, [r2, #24]
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_DMA2D_Init+0xc4>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68d1      	ldr	r1, [r2, #12]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	430b      	orrs	r3, r1
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	051a      	lsls	r2, r3, #20
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	055b      	lsls	r3, r3, #21
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	fff8ffbf 	.word	0xfff8ffbf
 80020c0:	fffffef8 	.word	0xfffffef8
 80020c4:	ffff0000 	.word	0xffff0000

080020c8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_DMA2D_Start+0x1c>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e018      	b.n	8002116 <HAL_DMA2D_Start+0x4e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fab4 	bl	800266c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d056      	beq.n	80021e8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800213a:	f7ff fe15 	bl	8001d68 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002140:	e04b      	b.n	80021da <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2221      	movs	r2, #33	@ 0x21
 8002186:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0a5      	b.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d01a      	beq.n	80021da <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021a4:	f7ff fde0 	bl	8001d68 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <HAL_DMA2D_PollForTransfer+0x9c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2203      	movs	r2, #3
 80021ca:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e086      	b.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ac      	beq.n	8002142 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d061      	beq.n	80022ce <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800220a:	f7ff fdad 	bl	8001d68 <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002210:	e056      	b.n	80022c0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02e      	beq.n	8002282 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002232:	f043 0204 	orr.w	r2, r3, #4
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002248:	f043 0202 	orr.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2229      	movs	r2, #41	@ 0x29
 800226c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2204      	movs	r2, #4
 8002272:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e032      	b.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d01a      	beq.n	80022c0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800228a:	f7ff fd6d 	bl	8001d68 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <HAL_DMA2D_PollForTransfer+0x182>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10f      	bne.n	80022c0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2203      	movs	r2, #3
 80022b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e013      	b.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0a1      	beq.n	8002212 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2212      	movs	r2, #18
 80022d4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d026      	beq.n	8002360 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800232a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2204      	movs	r2, #4
 8002344:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d026      	beq.n	80023b8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d021      	beq.n	80023b8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002382:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2220      	movs	r2, #32
 800238a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2204      	movs	r2, #4
 800239c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d026      	beq.n	8002410 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d021      	beq.n	8002410 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023da:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2204      	movs	r2, #4
 80023f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d013      	beq.n	8002442 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002432:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2204      	movs	r2, #4
 800243a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f853 	bl	80024e8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d024      	beq.n	8002496 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01f      	beq.n	8002496 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01f      	beq.n	80024e0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01a      	beq.n	80024e0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2210      	movs	r2, #16
 80024c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f80e 	bl	80024fc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_DMA2D_ConfigLayer+0x24>
 8002530:	2302      	movs	r3, #2
 8002532:	e092      	b.n	800265a <HAL_DMA2D_ConfigLayer+0x14a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	3328      	adds	r3, #40	@ 0x28
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002568:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002574:	4b3c      	ldr	r3, [pc, #240]	@ (8002668 <HAL_DMA2D_ConfigLayer+0x158>)
 8002576:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b0a      	cmp	r3, #10
 800257e:	d003      	beq.n	8002588 <HAL_DMA2D_ConfigLayer+0x78>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b09      	cmp	r3, #9
 8002586:	d107      	bne.n	8002598 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e005      	b.n	80025a4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d120      	bne.n	80025ec <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	ea02 0103 	and.w	r1, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	430a      	orrs	r2, r1
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b0a      	cmp	r3, #10
 80025d2:	d003      	beq.n	80025dc <HAL_DMA2D_ConfigLayer+0xcc>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	d135      	bne.n	8002648 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025ea:	e02d      	b.n	8002648 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b0b      	cmp	r3, #11
 80025f2:	d109      	bne.n	8002608 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	049b      	lsls	r3, r3, #18
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002606:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	43db      	mvns	r3, r3
 8002612:	ea02 0103 	and.w	r1, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	430a      	orrs	r2, r1
 800261e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d003      	beq.n	800263a <HAL_DMA2D_ConfigLayer+0x12a>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b09      	cmp	r3, #9
 8002638:	d106      	bne.n	8002648 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002646:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	ff33000f 	.word	0xff33000f

0800266c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800266c:	b480      	push	{r7}
 800266e:	b08b      	sub	sp, #44	@ 0x2c
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	041a      	lsls	r2, r3, #16
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026a4:	d174      	bne.n	8002790 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80026ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80026b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80026bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d108      	bne.n	80026de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
 80026dc:	e053      	b.n	8002786 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d106      	bne.n	80026f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	e048      	b.n	8002786 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d111      	bne.n	8002720 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	0cdb      	lsrs	r3, r3, #19
 8002700:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	0a9b      	lsrs	r3, r3, #10
 8002706:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	02db      	lsls	r3, r3, #11
 8002716:	4313      	orrs	r3, r2
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	e032      	b.n	8002786 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d117      	bne.n	8002758 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	0fdb      	lsrs	r3, r3, #31
 800272c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	0cdb      	lsrs	r3, r3, #19
 8002732:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	0adb      	lsrs	r3, r3, #11
 8002738:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	431a      	orrs	r2, r3
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	03db      	lsls	r3, r3, #15
 800274e:	4313      	orrs	r3, r2
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
 8002756:	e016      	b.n	8002786 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	0f1b      	lsrs	r3, r3, #28
 800275c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	0d1b      	lsrs	r3, r3, #20
 8002762:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	0b1b      	lsrs	r3, r3, #12
 8002768:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	011a      	lsls	r2, r3, #4
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	431a      	orrs	r2, r3
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	031b      	lsls	r3, r3, #12
 800277e:	4313      	orrs	r3, r2
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800278e:	e00d      	b.n	80027ac <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002798:	d104      	bne.n	80027a4 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	615a      	str	r2, [r3, #20]
}
 80027a2:	e003      	b.n	80027ac <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	60da      	str	r2, [r3, #12]
}
 80027ac:	bf00      	nop
 80027ae:	372c      	adds	r7, #44	@ 0x2c
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	@ 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027c6:	4b89      	ldr	r3, [pc, #548]	@ (80029ec <HAL_GPIO_Init+0x234>)
 80027c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027ca:	e194      	b.n	8002af6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8186 	beq.w	8002af0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d005      	beq.n	80027fc <HAL_GPIO_Init+0x44>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d130      	bne.n	800285e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002832:	2201      	movs	r2, #1
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0201 	and.w	r2, r3, #1
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d017      	beq.n	800289a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d123      	bne.n	80028ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80e0 	beq.w	8002af0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002930:	4b2f      	ldr	r3, [pc, #188]	@ (80029f0 <HAL_GPIO_Init+0x238>)
 8002932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002936:	4a2e      	ldr	r2, [pc, #184]	@ (80029f0 <HAL_GPIO_Init+0x238>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002940:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_GPIO_Init+0x238>)
 8002942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294e:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <HAL_GPIO_Init+0x23c>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <HAL_GPIO_Init+0x240>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d052      	beq.n	8002a20 <HAL_GPIO_Init+0x268>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_GPIO_Init+0x244>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_GPIO_Init+0x22e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <HAL_GPIO_Init+0x248>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02b      	beq.n	80029e2 <HAL_GPIO_Init+0x22a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_GPIO_Init+0x24c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x226>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_GPIO_Init+0x250>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x222>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_GPIO_Init+0x254>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x21e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a10 <HAL_GPIO_Init+0x258>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x21a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <HAL_GPIO_Init+0x25c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x216>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_GPIO_Init+0x260>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x212>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a17      	ldr	r2, [pc, #92]	@ (8002a1c <HAL_GPIO_Init+0x264>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x20e>
 80029c2:	2309      	movs	r3, #9
 80029c4:	e02d      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029c6:	230a      	movs	r3, #10
 80029c8:	e02b      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029ca:	2308      	movs	r3, #8
 80029cc:	e029      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e027      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e025      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029d6:	2305      	movs	r3, #5
 80029d8:	e023      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029da:	2304      	movs	r3, #4
 80029dc:	e021      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029de:	2303      	movs	r3, #3
 80029e0:	e01f      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e01d      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e01b      	b.n	8002a22 <HAL_GPIO_Init+0x26a>
 80029ea:	bf00      	nop
 80029ec:	58000080 	.word	0x58000080
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58000400 	.word	0x58000400
 80029f8:	58020000 	.word	0x58020000
 80029fc:	58020400 	.word	0x58020400
 8002a00:	58020800 	.word	0x58020800
 8002a04:	58020c00 	.word	0x58020c00
 8002a08:	58021000 	.word	0x58021000
 8002a0c:	58021400 	.word	0x58021400
 8002a10:	58021800 	.word	0x58021800
 8002a14:	58021c00 	.word	0x58021c00
 8002a18:	58022000 	.word	0x58022000
 8002a1c:	58022400 	.word	0x58022400
 8002a20:	2300      	movs	r3, #0
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a32:	4938      	ldr	r1, [pc, #224]	@ (8002b14 <HAL_GPIO_Init+0x35c>)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f47f ae63 	bne.w	80027cc <HAL_GPIO_Init+0x14>
  }
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	3724      	adds	r7, #36	@ 0x24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	58000400 	.word	0x58000400

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002b84:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_HSEM_FastTake+0x2c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3320      	adds	r3, #32
 8002b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <HAL_HSEM_FastTake+0x30>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	58026400 	.word	0x58026400
 8002bac:	80000300 	.word	0x80000300

08002bb0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002bba:	4906      	ldr	r1, [pc, #24]	@ (8002bd4 <HAL_HSEM_Release+0x24>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	58026400 	.word	0x58026400

08002bd8 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e070      	b.n	8002ccc <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fe0c 	bl	800181c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_JPEG_Init+0xfc>)
 8002c70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_JPEG_Init+0x100>)
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fcdb 	bl	8003640 <JPEG_Set_HuffEnc_Mem>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e018      	b.n	8002ccc <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	0800eb84 	.word	0x0800eb84
 8002cd8:	0800ebc4 	.word	0x0800ebc4

08002cdc <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_JPEG_GetInfo+0x16>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e083      	b.n	8002dfe <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d103      	bne.n	8002d0c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2210      	movs	r2, #16
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e017      	b.n	8002d3c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e00c      	b.n	8002d3c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d103      	bne.n	8002d38 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2230      	movs	r2, #48	@ 0x30
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e001      	b.n	8002d3c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e060      	b.n	8002dfe <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d003      	beq.n	8002d68 <HAL_JPEG_GetInfo+0x8c>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b30      	cmp	r3, #48	@ 0x30
 8002d66:	d140      	bne.n	8002dea <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d109      	bne.n	8002dac <HAL_JPEG_GetInfo+0xd0>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_JPEG_GetInfo+0xd0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2202      	movs	r2, #2
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	e01d      	b.n	8002de8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_JPEG_GetInfo+0xea>
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <HAL_JPEG_GetInfo+0xea>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e010      	b.n	8002de8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d109      	bne.n	8002de0 <HAL_JPEG_GetInfo+0x104>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_JPEG_GetInfo+0x104>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e003      	b.n	8002de8 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002de6:	e003      	b.n	8002df0 <HAL_JPEG_GetInfo+0x114>
 8002de8:	e002      	b.n	8002df0 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 f9cb 	bl	800418c <JPEG_GetQuality>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_JPEG_Decode+0x20>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_JPEG_Decode+0x20>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e071      	b.n	8002f0e <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_JPEG_Decode+0x32>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e06a      	b.n	8002f0e <HAL_JPEG_Decode+0x108>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e40:	f7fe ff92 	bl	8001d68 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d158      	bne.n	8002f04 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2204      	movs	r2, #4
 8002e56:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	f043 0206 	orr.w	r2, r3, #6
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f023 0203 	bic.w	r2, r3, #3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fe50 	bl	8003b44 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002ea4:	e01e      	b.n	8002ee4 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d01a      	beq.n	8002ee4 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002eae:	f7fe ff5b 	bl	8001d68 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <HAL_JPEG_Decode+0xbe>
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec8:	f043 0208 	orr.w	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e014      	b.n	8002f0e <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fea1 	bl	8003c2c <JPEG_Process>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0da      	beq.n	8002ea6 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e004      	b.n	8002f0e <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d116      	bne.n	8002f5e <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d033      	beq.n	8002fb8 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f5c:	e02c      	b.n	8002fb8 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d126      	bne.n	8002fb8 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f043 0306 	orr.w	r3, r3, #6
 8002f86:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002fa4:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8003022:	b480      	push	{r7}
 8003024:	b08b      	sub	sp, #44	@ 0x2c
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e020      	b.n	800307c <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	4413      	add	r3, r2
 800304a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800304e:	d90f      	bls.n	8003070 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e055      	b.n	8003100 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	440b      	add	r3, r1
 800305e:	3201      	adds	r2, #1
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]
      p++;
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	3301      	adds	r3, #1
 8003068:	623b      	str	r3, [r7, #32]
      i--;
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	3b01      	subs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ee      	bne.n	8003054 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	d9db      	bls.n	800303a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	4413      	add	r3, r2
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]
  p = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80030a0:	e027      	b.n	80030f2 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	601a      	str	r2, [r3, #0]
      p++;
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	3301      	adds	r3, #1
 80030b2:	623b      	str	r3, [r7, #32]
      code++;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	4413      	add	r3, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d0eb      	beq.n	80030a2 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b1f      	cmp	r3, #31
 80030ce:	d901      	bls.n	80030d4 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e015      	b.n	8003100 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80030d4:	2201      	movs	r2, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d301      	bcc.n	80030e6 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00c      	b.n	8003100 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
    si++;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1dd      	bne.n	80030ba <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	372c      	adds	r7, #44	@ 0x2c
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003112:	af00      	add	r7, sp, #0
 8003114:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003118:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800311c:	6018      	str	r0, [r3, #0]
 800311e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003122:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003126:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003128:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800312c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	f107 020c 	add.w	r2, r7, #12
 800313a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800313e:	f7ff ff70 	bl	8003022 <JPEG_Bits_To_SizeCodes>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8003148:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003150:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003154:	e075      	b.n	8003242 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800315c:	e067      	b.n	800322e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800315e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003162:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800316c:	4413      	add	r3, r2
 800316e:	3310      	adds	r3, #16
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8003176:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800317e:	23a0      	movs	r3, #160	@ 0xa0
 8003180:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003184:	e021      	b.n	80031ca <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8003186:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800318a:	2bf0      	cmp	r3, #240	@ 0xf0
 800318c:	d103      	bne.n	8003196 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800318e:	23a1      	movs	r3, #161	@ 0xa1
 8003190:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8003194:	e019      	b.n	80031ca <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8003196:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80031a4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80031b0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	461a      	mov	r2, r3
 80031be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80031c2:	4413      	add	r3, r2
 80031c4:	3b01      	subs	r3, #1
 80031c6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80031ca:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80031ce:	2ba1      	cmp	r3, #161	@ 0xa1
 80031d0:	d901      	bls.n	80031d6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80031d2:	2301      	movs	r3, #1
 80031d4:	e035      	b.n	8003242 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80031d6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80031da:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80031de:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80031e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031e6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80031ea:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80031f4:	3328      	adds	r3, #40	@ 0x28
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80031fc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003200:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003204:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003208:	4413      	add	r3, r2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	b2d9      	uxtb	r1, r3
 8003210:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003214:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800321e:	4413      	add	r3, r2
 8003220:	460a      	mov	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]
      k++;
 8003224:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003228:	3301      	adds	r3, #1
 800322a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800322e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003232:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800323c:	429a      	cmp	r2, r3
 800323e:	d38e      	bcc.n	800315e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003252:	af00      	add	r7, sp, #0
 8003254:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003258:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800325c:	6018      	str	r0, [r3, #0]
 800325e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003262:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003266:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8003268:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800326c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8003276:	f107 0208 	add.w	r2, r7, #8
 800327a:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800327e:	f7ff fed0 	bl	8003022 <JPEG_Bits_To_SizeCodes>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8003288:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8003290:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8003294:	e048      	b.n	8003328 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800329c:	e03d      	b.n	800331a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800329e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80032a2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80032ac:	4413      	add	r3, r2
 80032ae:	3310      	adds	r3, #16
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80032b6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80032ba:	2b0b      	cmp	r3, #11
 80032bc:	d901      	bls.n	80032c2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80032be:	2301      	movs	r3, #1
 80032c0:	e032      	b.n	8003328 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80032c2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80032c6:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80032ca:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80032ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032d2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80032d6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80032e0:	3302      	adds	r3, #2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80032e8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80032ec:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80032f0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b2d9      	uxtb	r1, r3
 80032fc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003300:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800330a:	4413      	add	r3, r2
 800330c:	460a      	mov	r2, r1
 800330e:	701a      	strb	r2, [r3, #0]
      k++;
 8003310:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8003314:	3301      	adds	r3, #1
 8003316:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800331a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800331e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003322:	429a      	cmp	r2, r3
 8003324:	d3bb      	bcc.n	800329e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b09a      	sub	sp, #104	@ 0x68
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d106      	bne.n	800335a <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003354:	3318      	adds	r3, #24
 8003356:	663b      	str	r3, [r7, #96]	@ 0x60
 8003358:	e00f      	b.n	800337a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	d106      	bne.n	8003376 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003370:	3318      	adds	r3, #24
 8003372:	663b      	str	r3, [r7, #96]	@ 0x60
 8003374:	e001      	b.n	800337a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e059      	b.n	800342e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d055      	beq.n	800342c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f7ff ff60 	bl	800324c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8003392:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800339a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800339e:	e046      	b.n	800342e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80033a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80033a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033a6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80033aa:	601a      	str	r2, [r3, #0]
    addressDef++;
 80033ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033ae:	3304      	adds	r3, #4
 80033b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80033b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033b4:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80033b8:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80033ba:	230c      	movs	r3, #12
 80033bc:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80033be:	e032      	b.n	8003426 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80033c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033c2:	3b01      	subs	r3, #1
 80033c4:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80033c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033c8:	3b04      	subs	r3, #4
 80033ca:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80033cc:	f107 0214 	add.w	r2, r7, #20
 80033d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80033dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033de:	3302      	adds	r3, #2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	3368      	adds	r3, #104	@ 0x68
 80033e4:	443b      	add	r3, r7
 80033e6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4313      	orrs	r3, r2
 80033ee:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 80033f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f2:	3b01      	subs	r3, #1
 80033f4:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80033f6:	f107 0214 	add.w	r2, r7, #20
 80033fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003408:	3302      	adds	r3, #2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3368      	adds	r3, #104	@ 0x68
 800340e:	443b      	add	r3, r7
 8003410:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800341a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003420:	431a      	orrs	r2, r3
 8003422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003424:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8003426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003428:	2b01      	cmp	r3, #1
 800342a:	d8c9      	bhi.n	80033c0 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3768      	adds	r7, #104	@ 0x68
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800343e:	af00      	add	r7, sp, #0
 8003440:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003444:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003448:	6018      	str	r0, [r3, #0]
 800344a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800344e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003452:	6019      	str	r1, [r3, #0]
 8003454:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003458:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800345c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800345e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003462:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003472:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d10c      	bne.n	8003496 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800347c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003480:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003490:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003494:	e01d      	b.n	80034d2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8003496:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800349a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80034a6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80034aa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10c      	bne.n	80034ce <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80034b4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80034b8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80034c4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80034c8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80034cc:	e001      	b.n	80034d2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0a8      	b.n	8003624 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 80034d2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80034d6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a0 	beq.w	8003622 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 80034e2:	f107 0214 	add.w	r2, r7, #20
 80034e6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80034ea:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80034ee:	4611      	mov	r1, r2
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f7ff fe0b 	bl	800310c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 80034fc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8003504:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003508:	e08c      	b.n	8003624 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800350a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800350e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003518:	e00e      	b.n	8003538 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800351a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800351e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003522:	601a      	str	r2, [r3, #0]
      addressDef++;
 8003524:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003528:	3304      	adds	r3, #4
 800352a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800352e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003532:	3301      	adds	r3, #1
 8003534:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003538:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800353c:	2b02      	cmp	r3, #2
 800353e:	d9ec      	bls.n	800351a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8003540:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003544:	4a3a      	ldr	r2, [pc, #232]	@ (8003630 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003546:	601a      	str	r2, [r3, #0]
    addressDef++;
 8003548:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800354c:	3304      	adds	r3, #4
 800354e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8003552:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003556:	4a37      	ldr	r2, [pc, #220]	@ (8003634 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003558:	601a      	str	r2, [r3, #0]
    addressDef++;
 800355a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800355e:	3304      	adds	r3, #4
 8003560:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8003564:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003568:	4a33      	ldr	r2, [pc, #204]	@ (8003638 <JPEG_Set_HuffAC_Mem+0x200>)
 800356a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800356c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003570:	3304      	adds	r3, #4
 8003572:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8003576:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800357a:	4a30      	ldr	r2, [pc, #192]	@ (800363c <JPEG_Set_HuffAC_Mem+0x204>)
 800357c:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800357e:	23a2      	movs	r3, #162	@ 0xa2
 8003580:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8003584:	e049      	b.n	800361a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8003586:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800358a:	3b01      	subs	r3, #1
 800358c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8003590:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003594:	3b04      	subs	r3, #4
 8003596:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800359a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800359e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80035a2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80035b0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035b4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80035b8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035bc:	3328      	adds	r3, #40	@ 0x28
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80035cc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035d0:	3b01      	subs	r3, #1
 80035d2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80035d6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035da:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80035de:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035e2:	4413      	add	r3, r2
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80035ec:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80035f0:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80035f4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035f8:	3328      	adds	r3, #40	@ 0x28
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8003608:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003612:	431a      	orrs	r2, r3
 8003614:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003618:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800361a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800361e:	2b01      	cmp	r3, #1
 8003620:	d8b1      	bhi.n	8003586 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	0fd10fd0 	.word	0x0fd10fd0
 8003634:	0fd30fd2 	.word	0x0fd30fd2
 8003638:	0fd50fd4 	.word	0x0fd50fd4
 800363c:	0fd70fd6 	.word	0x0fd70fd6

08003640 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f84d 	bl	80036e8 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003656:	461a      	mov	r2, r3
 8003658:	491f      	ldr	r1, [pc, #124]	@ (80036d8 <JPEG_Set_HuffEnc_Mem+0x98>)
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff feec 	bl	8003438 <JPEG_Set_HuffAC_Mem>
 8003660:	4603      	mov	r3, r0
 8003662:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	e030      	b.n	80036d0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003676:	461a      	mov	r2, r3
 8003678:	4918      	ldr	r1, [pc, #96]	@ (80036dc <JPEG_Set_HuffEnc_Mem+0x9c>)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fedc 	bl	8003438 <JPEG_Set_HuffAC_Mem>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	e020      	b.n	80036d0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003696:	461a      	mov	r2, r3
 8003698:	4911      	ldr	r1, [pc, #68]	@ (80036e0 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe49 	bl	8003332 <JPEG_Set_HuffDC_Mem>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	e010      	b.n	80036d0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80036b6:	461a      	mov	r2, r3
 80036b8:	490a      	ldr	r1, [pc, #40]	@ (80036e4 <JPEG_Set_HuffEnc_Mem+0xa4>)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe39 	bl	8003332 <JPEG_Set_HuffDC_Mem>
 80036c0:	4603      	mov	r3, r0
 80036c2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	e000      	b.n	80036d0 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	0800e9dc 	.word	0x0800e9dc
 80036dc:	0800ea90 	.word	0x0800ea90
 80036e0:	0800e9a4 	.word	0x0800e9a4
 80036e4:	0800e9c0 	.word	0x0800e9c0

080036e8 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b08b      	sub	sp, #44	@ 0x2c
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80036f0:	4b80      	ldr	r3, [pc, #512]	@ (80038f4 <JPEG_Set_Huff_DHTMem+0x20c>)
 80036f2:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80036f4:	4b80      	ldr	r3, [pc, #512]	@ (80038f8 <JPEG_Set_Huff_DHTMem+0x210>)
 80036f6:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80036f8:	4b80      	ldr	r3, [pc, #512]	@ (80038fc <JPEG_Set_Huff_DHTMem+0x214>)
 80036fa:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80036fc:	4b80      	ldr	r3, [pc, #512]	@ (8003900 <JPEG_Set_Huff_DHTMem+0x218>)
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003708:	330c      	adds	r3, #12
 800370a:	623b      	str	r3, [r7, #32]
  index = 16;
 800370c:	2310      	movs	r3, #16
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003710:	e01d      	b.n	800374e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	3b01      	subs	r3, #1
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	3b02      	subs	r3, #2
 8003720:	6979      	ldr	r1, [r7, #20]
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003726:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	3b03      	subs	r3, #3
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003732:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003736:	3a04      	subs	r2, #4
 8003738:	6979      	ldr	r1, [r7, #20]
 800373a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800373c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	601a      	str	r2, [r3, #0]
    address--;
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	3b04      	subs	r3, #4
 8003746:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	3b04      	subs	r3, #4
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	2b03      	cmp	r3, #3
 8003752:	d8de      	bhi.n	8003712 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800375c:	3318      	adds	r3, #24
 800375e:	623b      	str	r3, [r7, #32]
  index = 12;
 8003760:	230c      	movs	r3, #12
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003764:	e021      	b.n	80037aa <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	3b01      	subs	r3, #1
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4413      	add	r3, r2
 800376e:	7c1b      	ldrb	r3, [r3, #16]
 8003770:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	3b02      	subs	r3, #2
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	440b      	add	r3, r1
 800377a:	7c1b      	ldrb	r3, [r3, #16]
 800377c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800377e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	3b03      	subs	r3, #3
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	440b      	add	r3, r1
 8003788:	7c1b      	ldrb	r3, [r3, #16]
 800378a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800378c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003790:	3a04      	subs	r2, #4
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	440a      	add	r2, r1
 8003796:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003798:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	601a      	str	r2, [r3, #0]
    address--;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	3b04      	subs	r3, #4
 80037a2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	3b04      	subs	r3, #4
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d8da      	bhi.n	8003766 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80037b8:	3328      	adds	r3, #40	@ 0x28
 80037ba:	623b      	str	r3, [r7, #32]
  index = 16;
 80037bc:	2310      	movs	r3, #16
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80037c0:	e01d      	b.n	80037fe <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	3b01      	subs	r3, #1
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	5cd3      	ldrb	r3, [r2, r3]
 80037ca:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	3b02      	subs	r3, #2
 80037d0:	69f9      	ldr	r1, [r7, #28]
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80037d6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	3b03      	subs	r3, #3
 80037dc:	69f9      	ldr	r1, [r7, #28]
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80037e2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80037e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e6:	3a04      	subs	r2, #4
 80037e8:	69f9      	ldr	r1, [r7, #28]
 80037ea:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80037ec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	601a      	str	r2, [r3, #0]
    address--;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	3b04      	subs	r3, #4
 80037f6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	3b04      	subs	r3, #4
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2b03      	cmp	r3, #3
 8003802:	d8de      	bhi.n	80037c2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800380c:	33cc      	adds	r3, #204	@ 0xcc
 800380e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b3b      	ldr	r3, [pc, #236]	@ (8003904 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	3b04      	subs	r3, #4
 800383a:	623b      	str	r3, [r7, #32]
  index = 160;
 800383c:	23a0      	movs	r3, #160	@ 0xa0
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003840:	e021      	b.n	8003886 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	3b01      	subs	r3, #1
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	7c1b      	ldrb	r3, [r3, #16]
 800384c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	3b02      	subs	r3, #2
 8003852:	69f9      	ldr	r1, [r7, #28]
 8003854:	440b      	add	r3, r1
 8003856:	7c1b      	ldrb	r3, [r3, #16]
 8003858:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800385a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	3b03      	subs	r3, #3
 8003860:	69f9      	ldr	r1, [r7, #28]
 8003862:	440b      	add	r3, r1
 8003864:	7c1b      	ldrb	r3, [r3, #16]
 8003866:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003868:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800386a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386c:	3a04      	subs	r2, #4
 800386e:	69f9      	ldr	r1, [r7, #28]
 8003870:	440a      	add	r2, r1
 8003872:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003874:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	601a      	str	r2, [r3, #0]
    address--;
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	3b04      	subs	r3, #4
 800387e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	3b04      	subs	r3, #4
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b03      	cmp	r3, #3
 800388a:	d8da      	bhi.n	8003842 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003894:	33cc      	adds	r3, #204	@ 0xcc
 8003896:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	061a      	lsls	r2, r3, #24
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80038c2:	33dc      	adds	r3, #220	@ 0xdc
 80038c4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003904 <JPEG_Set_Huff_DHTMem+0x21c>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	7bdb      	ldrb	r3, [r3, #15]
 80038d4:	021a      	lsls	r2, r3, #8
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	7b92      	ldrb	r2, [r2, #14]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	3b04      	subs	r3, #4
 80038ec:	623b      	str	r3, [r7, #32]
  index = 12;
 80038ee:	230c      	movs	r3, #12
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80038f2:	e027      	b.n	8003944 <JPEG_Set_Huff_DHTMem+0x25c>
 80038f4:	0800e9dc 	.word	0x0800e9dc
 80038f8:	0800ea90 	.word	0x0800ea90
 80038fc:	0800e9a4 	.word	0x0800e9a4
 8003900:	0800e9c0 	.word	0x0800e9c0
 8003904:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	3301      	adds	r3, #1
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003912:	6939      	ldr	r1, [r7, #16]
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	440b      	add	r3, r1
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800391c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	3b01      	subs	r3, #1
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003928:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	3a02      	subs	r2, #2
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003932:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	601a      	str	r2, [r3, #0]
    address--;
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	3b04      	subs	r3, #4
 800393c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	3b04      	subs	r3, #4
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	2b03      	cmp	r3, #3
 8003948:	d8de      	bhi.n	8003908 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003952:	33dc      	adds	r3, #220	@ 0xdc
 8003954:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	7c5b      	ldrb	r3, [r3, #17]
 8003962:	061a      	lsls	r2, r3, #24
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	431a      	orrs	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	7c1b      	ldrb	r3, [r3, #16]
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003980:	33e8      	adds	r3, #232	@ 0xe8
 8003982:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b6d      	ldr	r3, [pc, #436]	@ (8003b40 <JPEG_Set_Huff_DHTMem+0x458>)
 800398a:	4013      	ands	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	7edb      	ldrb	r3, [r3, #27]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	7e92      	ldrb	r2, [r2, #26]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  *address = value;
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	3b04      	subs	r3, #4
 80039aa:	623b      	str	r3, [r7, #32]
  index = 8;
 80039ac:	2308      	movs	r3, #8
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80039b0:	e021      	b.n	80039f6 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	3301      	adds	r3, #1
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	7c1b      	ldrb	r3, [r3, #16]
 80039bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	440b      	add	r3, r1
 80039c4:	3310      	adds	r3, #16
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80039ca:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	3b01      	subs	r3, #1
 80039d0:	6939      	ldr	r1, [r7, #16]
 80039d2:	440b      	add	r3, r1
 80039d4:	7c1b      	ldrb	r3, [r3, #16]
 80039d6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80039d8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80039da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039dc:	3a02      	subs	r2, #2
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	440a      	add	r2, r1
 80039e2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80039e4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	601a      	str	r2, [r3, #0]
    address--;
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	3b04      	subs	r3, #4
 80039ee:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	3b04      	subs	r3, #4
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d8da      	bhi.n	80039b2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003a04:	33e8      	adds	r3, #232	@ 0xe8
 8003a06:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	061a      	lsls	r2, r3, #24
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003a32:	33f8      	adds	r3, #248	@ 0xf8
 8003a34:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <JPEG_Set_Huff_DHTMem+0x458>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	7bdb      	ldrb	r3, [r3, #15]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	7b92      	ldrb	r2, [r2, #14]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	623b      	str	r3, [r7, #32]
  index = 12;
 8003a5e:	230c      	movs	r3, #12
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003a62:	e01d      	b.n	8003aa0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	3301      	adds	r3, #1
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003a6e:	69b9      	ldr	r1, [r7, #24]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	440b      	add	r3, r1
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003a78:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003a84:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	3a02      	subs	r2, #2
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003a8e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	601a      	str	r2, [r3, #0]
    address--;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	3b04      	subs	r3, #4
 8003a98:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	3b04      	subs	r3, #4
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d8de      	bhi.n	8003a64 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003aae:	33f8      	adds	r3, #248	@ 0xf8
 8003ab0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	7c5b      	ldrb	r3, [r3, #17]
 8003abe:	061a      	lsls	r2, r3, #24
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	7c1b      	ldrb	r3, [r3, #16]
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003adc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8003ae0:	623b      	str	r3, [r7, #32]
  index = 160;
 8003ae2:	23a0      	movs	r3, #160	@ 0xa0
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003ae6:	e021      	b.n	8003b2c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	3301      	adds	r3, #1
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4413      	add	r3, r2
 8003af0:	7c1b      	ldrb	r3, [r3, #16]
 8003af2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8003af4:	69b9      	ldr	r1, [r7, #24]
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	440b      	add	r3, r1
 8003afa:	3310      	adds	r3, #16
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003b00:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	3b01      	subs	r3, #1
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	440b      	add	r3, r1
 8003b0a:	7c1b      	ldrb	r3, [r3, #16]
 8003b0c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8003b0e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8003b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b12:	3a02      	subs	r2, #2
 8003b14:	69b9      	ldr	r1, [r7, #24]
 8003b16:	440a      	add	r2, r1
 8003b18:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003b1a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	601a      	str	r2, [r3, #0]
    address--;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	3b04      	subs	r3, #4
 8003b24:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	3b04      	subs	r3, #4
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d8da      	bhi.n	8003ae8 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
 8003b36:	372c      	adds	r7, #44	@ 0x2c
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	ffff0000 	.word	0xffff0000

08003b44 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d108      	bne.n	8003b76 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	e007      	b.n	8003b86 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0208 	bic.w	r2, r2, #8
 8003b84:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003bd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d108      	bne.n	8003c04 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c02:	e00d      	b.n	8003c20 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d107      	bne.n	8003c20 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d125      	bne.n	8003c8c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01e      	beq.n	8003c8c <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff f841 	bl	8002cdc <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd f88e 	bl	8000d88 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d116      	bne.n	8003cc6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f988 	bl	8003fbe <JPEG_ReadInputData>
 8003cae:	e00a      	b.n	8003cc6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f97c 	bl	8003fbe <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003ce0:	2108      	movs	r1, #8
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f864 	bl	8003db0 <JPEG_StoreOutputData>
 8003ce8:	e00a      	b.n	8003d00 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f858 	bl	8003db0 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d14b      	bne.n	8003da6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d107      	bne.n	8003d3a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003d48:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69d9      	ldr	r1, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fd f865 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d103      	bne.n	8003d9c <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd f863 	bl	8000e60 <HAL_JPEG_DecodeCpltCallback>
 8003d9a:	e002      	b.n	8003da2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff f936 	bl	800300e <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d34b      	bcc.n	8003e64 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e031      	b.n	8003e36 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	4413      	add	r3, r2
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0a19      	lsrs	r1, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	3301      	adds	r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	0c19      	lsrs	r1, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b2ca      	uxtb	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	0e19      	lsrs	r1, r3, #24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	3303      	adds	r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	b2ca      	uxtb	r2, r1
 8003e24:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3301      	adds	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d3c9      	bcc.n	8003dd2 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f040 80b5 	bne.w	8003fb6 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69d9      	ldr	r1, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	461a      	mov	r2, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc ffe8 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e62:	e0a8      	b.n	8003fb6 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	f240 80a2 	bls.w	8003fb6 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e031      	b.n	8003eea <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	4413      	add	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0a19      	lsrs	r1, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	b2ca      	uxtb	r2, r1
 8003eb0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0c19      	lsrs	r1, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69da      	ldr	r2, [r3, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b2ca      	uxtb	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0e19      	lsrs	r1, r3, #24
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	3303      	adds	r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	b2ca      	uxtb	r2, r1
 8003ed8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	1d1a      	adds	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d3c9      	bcc.n	8003e86 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10b      	bne.n	8003f16 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69d9      	ldr	r1, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	461a      	mov	r2, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fc ff8f 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003f14:	e04f      	b.n	8003fb6 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f28:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e015      	b.n	8003f5c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	fa22 f103 	lsr.w	r1, r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	4413      	add	r3, r2
 8003f48:	b2ca      	uxtb	r2, r1
 8003f4a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d3e5      	bcc.n	8003f30 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69d9      	ldr	r1, [r3, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fc ff5c 	bl	8000e2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f1c3 0304 	rsb	r3, r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e013      	b.n	8003fb0 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	fa22 f103 	lsr.w	r1, r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	4413      	add	r3, r2
 8003f9c:	b2ca      	uxtb	r2, r1
 8003f9e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3301      	adds	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d9e8      	bls.n	8003f88 <JPEG_StoreOutputData+0x1d8>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <JPEG_ReadInputData+0x1c>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8003fda:	2101      	movs	r1, #1
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fe ff9a 	bl	8002f16 <HAL_JPEG_Pause>
 8003fe2:	e028      	b.n	8004036 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d906      	bls.n	8003ffe <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e01b      	b.n	8004036 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	429a      	cmp	r2, r3
 8004008:	d115      	bne.n	8004036 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fc fec5 	bl	8000da0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	2b04      	cmp	r3, #4
 800401c:	d905      	bls.n	800402a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 809f 	bne.w	8004182 <JPEG_ReadInputData+0x1c4>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 809b 	beq.w	8004182 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d335      	bcc.n	80040c6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e02d      	b.n	80040bc <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004080:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3302      	adds	r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004092:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3303      	adds	r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80040a8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3cd      	bcc.n	8004060 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80040c4:	e05d      	b.n	8004182 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d035      	beq.n	8004138 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e02d      	b.n	800412e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3301      	adds	r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80040f2:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6999      	ldr	r1, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3302      	adds	r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8004104:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3303      	adds	r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800411a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	1d1a      	adds	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	3301      	adds	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d3cd      	bcc.n	80040d2 <JPEG_ReadInputData+0x114>
}
 8004136:	e024      	b.n	8004182 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e017      	b.n	8004172 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4413      	add	r3, r2
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	3301      	adds	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	429a      	cmp	r2, r3
 8004178:	d3e3      	bcc.n	8004142 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004182:	bf00      	nop
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800418c:	b480      	push	{r7}
 800418e:	b08b      	sub	sp, #44	@ 0x2c
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3350      	adds	r3, #80	@ 0x50
 800419e:	61bb      	str	r3, [r7, #24]

  i = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80041a4:	e042      	b.n	800422c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	e033      	b.n	800421a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d103      	bne.n	80041ce <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	3364      	adds	r3, #100	@ 0x64
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80041cc:	e022      	b.n	8004214 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2264      	movs	r2, #100	@ 0x64
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041da:	6a38      	ldr	r0, [r7, #32]
 80041dc:	69f9      	ldr	r1, [r7, #28]
 80041de:	4401      	add	r1, r0
 80041e0:	4818      	ldr	r0, [pc, #96]	@ (8004244 <JPEG_GetQuality+0xb8>)
 80041e2:	5c41      	ldrb	r1, [r0, r1]
 80041e4:	440a      	add	r2, r1
 80041e6:	7812      	ldrb	r2, [r2, #0]
 80041e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b64      	cmp	r3, #100	@ 0x64
 80041f2:	d807      	bhi.n	8004204 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fe:	4413      	add	r3, r2
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
 8004202:	e007      	b.n	8004214 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8004204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004210:	4413      	add	r3, r2
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d9c8      	bls.n	80041b2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	3304      	adds	r3, #4
 8004224:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	3304      	adds	r3, #4
 800422a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004230:	d9b9      	bls.n	80041a6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	099b      	lsrs	r3, r3, #6
}
 8004236:	4618      	mov	r0, r3
 8004238:	372c      	adds	r7, #44	@ 0x2c
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	0800eb44 	.word	0x0800eb44

08004248 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004250:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	2b06      	cmp	r3, #6
 800425a:	d00a      	beq.n	8004272 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800425c:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d001      	beq.n	800426e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e040      	b.n	80042f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e03e      	b.n	80042f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004272:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800427a:	491f      	ldr	r1, [pc, #124]	@ (80042f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4313      	orrs	r3, r2
 8004280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004282:	f7fd fd71 	bl	8001d68 <HAL_GetTick>
 8004286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004288:	e009      	b.n	800429e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800428a:	f7fd fd6d 	bl	8001d68 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004298:	d901      	bls.n	800429e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e028      	b.n	80042f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800429e:	4b16      	ldr	r3, [pc, #88]	@ (80042f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042aa:	d1ee      	bne.n	800428a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b1e      	cmp	r3, #30
 80042b0:	d008      	beq.n	80042c4 <HAL_PWREx_ConfigSupply+0x7c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80042b6:	d005      	beq.n	80042c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b1d      	cmp	r3, #29
 80042bc:	d002      	beq.n	80042c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b2d      	cmp	r3, #45	@ 0x2d
 80042c2:	d114      	bne.n	80042ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80042c4:	f7fd fd50 	bl	8001d68 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042ca:	e009      	b.n	80042e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042cc:	f7fd fd4c 	bl	8001d68 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042da:	d901      	bls.n	80042e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d1ee      	bne.n	80042cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	58024800 	.word	0x58024800

080042fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	@ 0x30
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f000 bc48 	b.w	8004ba0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8088 	beq.w	800442e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800431e:	4b99      	ldr	r3, [pc, #612]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004328:	4b96      	ldr	r3, [pc, #600]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800432e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004330:	2b10      	cmp	r3, #16
 8004332:	d007      	beq.n	8004344 <HAL_RCC_OscConfig+0x48>
 8004334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004336:	2b18      	cmp	r3, #24
 8004338:	d111      	bne.n	800435e <HAL_RCC_OscConfig+0x62>
 800433a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d10c      	bne.n	800435e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	4b8f      	ldr	r3, [pc, #572]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d06d      	beq.n	800442c <HAL_RCC_OscConfig+0x130>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d169      	bne.n	800442c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f000 bc21 	b.w	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x7a>
 8004368:	4b86      	ldr	r3, [pc, #536]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a85      	ldr	r2, [pc, #532]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e02e      	b.n	80043d4 <HAL_RCC_OscConfig+0xd8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x9c>
 800437e:	4b81      	ldr	r3, [pc, #516]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a80      	ldr	r2, [pc, #512]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b7e      	ldr	r3, [pc, #504]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7d      	ldr	r2, [pc, #500]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xd8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0xc0>
 80043a2:	4b78      	ldr	r3, [pc, #480]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a77      	ldr	r2, [pc, #476]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b75      	ldr	r3, [pc, #468]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a74      	ldr	r2, [pc, #464]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xd8>
 80043bc:	4b71      	ldr	r3, [pc, #452]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a70      	ldr	r2, [pc, #448]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6d      	ldr	r2, [pc, #436]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fcc4 	bl	8001d68 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fd fcc0 	bl	8001d68 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e3d4      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043f6:	4b63      	ldr	r3, [pc, #396]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xe8>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd fcb0 	bl	8001d68 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd fcac 	bl	8001d68 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e3c0      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800441e:	4b59      	ldr	r3, [pc, #356]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x110>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80ca 	beq.w	80045d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443c:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004444:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004446:	4b4f      	ldr	r3, [pc, #316]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_RCC_OscConfig+0x166>
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	2b18      	cmp	r3, #24
 8004456:	d156      	bne.n	8004506 <HAL_RCC_OscConfig+0x20a>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d151      	bne.n	8004506 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004462:	4b48      	ldr	r3, [pc, #288]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x17e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e392      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800447a:	4b42      	ldr	r3, [pc, #264]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0219 	bic.w	r2, r3, #25
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	493f      	ldr	r1, [pc, #252]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fd fc6c 	bl	8001d68 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004494:	f7fd fc68 	bl	8001d68 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e37c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a6:	4b37      	ldr	r3, [pc, #220]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	f7fd fc89 	bl	8001dc8 <HAL_GetREVID>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044bc:	4293      	cmp	r3, r2
 80044be:	d817      	bhi.n	80044f0 <HAL_RCC_OscConfig+0x1f4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	d108      	bne.n	80044da <HAL_RCC_OscConfig+0x1de>
 80044c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80044d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d8:	e07a      	b.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b2a      	ldr	r3, [pc, #168]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	031b      	lsls	r3, r3, #12
 80044e8:	4926      	ldr	r1, [pc, #152]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ee:	e06f      	b.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	061b      	lsls	r3, r3, #24
 80044fe:	4921      	ldr	r1, [pc, #132]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004500:	4313      	orrs	r3, r2
 8004502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004504:	e064      	b.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d047      	beq.n	800459e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 0219 	bic.w	r2, r3, #25
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	491a      	ldr	r1, [pc, #104]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fc22 	bl	8001d68 <HAL_GetTick>
 8004524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004528:	f7fd fc1e 	bl	8001d68 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e332      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800453a:	4b12      	ldr	r3, [pc, #72]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	f7fd fc3f 	bl	8001dc8 <HAL_GetREVID>
 800454a:	4603      	mov	r3, r0
 800454c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004550:	4293      	cmp	r3, r2
 8004552:	d819      	bhi.n	8004588 <HAL_RCC_OscConfig+0x28c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d108      	bne.n	800456e <HAL_RCC_OscConfig+0x272>
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004564:	4a07      	ldr	r2, [pc, #28]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456a:	6053      	str	r3, [r2, #4]
 800456c:	e030      	b.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
 800456e:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	031b      	lsls	r3, r3, #12
 800457c:	4901      	ldr	r1, [pc, #4]	@ (8004584 <HAL_RCC_OscConfig+0x288>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
 8004582:	e025      	b.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
 8004584:	58024400 	.word	0x58024400
 8004588:	4b9a      	ldr	r3, [pc, #616]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	4997      	ldr	r1, [pc, #604]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	e018      	b.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459e:	4b95      	ldr	r3, [pc, #596]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a94      	ldr	r2, [pc, #592]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd fbdd 	bl	8001d68 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fd fbd9 	bl	8001d68 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e2ed      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c4:	4b8b      	ldr	r3, [pc, #556]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a9 	beq.w	8004730 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045de:	4b85      	ldr	r3, [pc, #532]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045e8:	4b82      	ldr	r3, [pc, #520]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d007      	beq.n	8004604 <HAL_RCC_OscConfig+0x308>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b18      	cmp	r3, #24
 80045f8:	d13a      	bne.n	8004670 <HAL_RCC_OscConfig+0x374>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d135      	bne.n	8004670 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004604:	4b7b      	ldr	r3, [pc, #492]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_OscConfig+0x320>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e2c1      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461c:	f7fd fbd4 	bl	8001dc8 <HAL_GetREVID>
 8004620:	4603      	mov	r3, r0
 8004622:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004626:	4293      	cmp	r3, r2
 8004628:	d817      	bhi.n	800465a <HAL_RCC_OscConfig+0x35e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	2b20      	cmp	r3, #32
 8004630:	d108      	bne.n	8004644 <HAL_RCC_OscConfig+0x348>
 8004632:	4b70      	ldr	r3, [pc, #448]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800463a:	4a6e      	ldr	r2, [pc, #440]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004640:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004642:	e075      	b.n	8004730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004644:	4b6b      	ldr	r3, [pc, #428]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	069b      	lsls	r3, r3, #26
 8004652:	4968      	ldr	r1, [pc, #416]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004658:	e06a      	b.n	8004730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800465a:	4b66      	ldr	r3, [pc, #408]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	4962      	ldr	r1, [pc, #392]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800466e:	e05f      	b.n	8004730 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d042      	beq.n	80046fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004678:	4b5e      	ldr	r3, [pc, #376]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5d      	ldr	r2, [pc, #372]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fb70 	bl	8001d68 <HAL_GetTick>
 8004688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800468c:	f7fd fb6c 	bl	8001d68 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e280      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800469e:	4b55      	ldr	r3, [pc, #340]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046aa:	f7fd fb8d 	bl	8001dc8 <HAL_GetREVID>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d817      	bhi.n	80046e8 <HAL_RCC_OscConfig+0x3ec>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d108      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3d6>
 80046c0:	4b4c      	ldr	r3, [pc, #304]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80046c8:	4a4a      	ldr	r2, [pc, #296]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046ce:	6053      	str	r3, [r2, #4]
 80046d0:	e02e      	b.n	8004730 <HAL_RCC_OscConfig+0x434>
 80046d2:	4b48      	ldr	r3, [pc, #288]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	069b      	lsls	r3, r3, #26
 80046e0:	4944      	ldr	r1, [pc, #272]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
 80046e6:	e023      	b.n	8004730 <HAL_RCC_OscConfig+0x434>
 80046e8:	4b42      	ldr	r3, [pc, #264]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	493f      	ldr	r1, [pc, #252]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60cb      	str	r3, [r1, #12]
 80046fc:	e018      	b.n	8004730 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046fe:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a3c      	ldr	r2, [pc, #240]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fd fb2d 	bl	8001d68 <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004712:	f7fd fb29 	bl	8001d68 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e23d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004724:	4b33      	ldr	r3, [pc, #204]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d036      	beq.n	80047aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d019      	beq.n	8004778 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004744:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004748:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fb0a 	bl	8001d68 <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fb06 	bl	8001d68 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e21a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800476a:	4b22      	ldr	r3, [pc, #136]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x45c>
 8004776:	e018      	b.n	80047aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004778:	4b1e      	ldr	r3, [pc, #120]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477c:	4a1d      	ldr	r2, [pc, #116]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd faf0 	bl	8001d68 <HAL_GetTick>
 8004788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478c:	f7fd faec 	bl	8001d68 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e200      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800479e:	4b15      	ldr	r3, [pc, #84]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d039      	beq.n	800482a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80047c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047ca:	f7fd facd 	bl	8001d68 <HAL_GetTick>
 80047ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d2:	f7fd fac9 	bl	8001d68 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e1dd      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047e4:	4b03      	ldr	r3, [pc, #12]	@ (80047f4 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x4d6>
 80047f0:	e01b      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
 80047f2:	bf00      	nop
 80047f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a9a      	ldr	r2, [pc, #616]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80047fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004802:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004804:	f7fd fab0 	bl	8001d68 <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800480c:	f7fd faac 	bl	8001d68 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e1c0      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800481e:	4b92      	ldr	r3, [pc, #584]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8081 	beq.w	800493a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004838:	4b8c      	ldr	r3, [pc, #560]	@ (8004a6c <HAL_RCC_OscConfig+0x770>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a8b      	ldr	r2, [pc, #556]	@ (8004a6c <HAL_RCC_OscConfig+0x770>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004844:	f7fd fa90 	bl	8001d68 <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484c:	f7fd fa8c 	bl	8001d68 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	@ 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e1a0      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485e:	4b83      	ldr	r3, [pc, #524]	@ (8004a6c <HAL_RCC_OscConfig+0x770>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d106      	bne.n	8004880 <HAL_RCC_OscConfig+0x584>
 8004872:	4b7d      	ldr	r3, [pc, #500]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	4a7c      	ldr	r2, [pc, #496]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6713      	str	r3, [r2, #112]	@ 0x70
 800487e:	e02d      	b.n	80048dc <HAL_RCC_OscConfig+0x5e0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10c      	bne.n	80048a2 <HAL_RCC_OscConfig+0x5a6>
 8004888:	4b77      	ldr	r3, [pc, #476]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	4a76      	ldr	r2, [pc, #472]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	6713      	str	r3, [r2, #112]	@ 0x70
 8004894:	4b74      	ldr	r3, [pc, #464]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4a73      	ldr	r2, [pc, #460]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a0:	e01c      	b.n	80048dc <HAL_RCC_OscConfig+0x5e0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c8>
 80048aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0x5e0>
 80048c4:	4b68      	ldr	r3, [pc, #416]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c8:	4a67      	ldr	r2, [pc, #412]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d0:	4b65      	ldr	r3, [pc, #404]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d4:	4a64      	ldr	r2, [pc, #400]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80048d6:	f023 0304 	bic.w	r3, r3, #4
 80048da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d015      	beq.n	8004910 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fd fa40 	bl	8001d68 <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fd fa3c 	bl	8001d68 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e14e      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004902:	4b59      	ldr	r3, [pc, #356]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ee      	beq.n	80048ec <HAL_RCC_OscConfig+0x5f0>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd fa2a 	bl	8001d68 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fd fa26 	bl	8001d68 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e138      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800492e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ee      	bne.n	8004918 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 812d 	beq.w	8004b9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004944:	4b48      	ldr	r3, [pc, #288]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800494c:	2b18      	cmp	r3, #24
 800494e:	f000 80bd 	beq.w	8004acc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	2b02      	cmp	r3, #2
 8004958:	f040 809e 	bne.w	8004a98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b42      	ldr	r3, [pc, #264]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a41      	ldr	r2, [pc, #260]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd f9fe 	bl	8001d68 <HAL_GetTick>
 800496c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd f9fa 	bl	8001d68 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e10e      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004982:	4b39      	ldr	r3, [pc, #228]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800498e:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004992:	4b37      	ldr	r3, [pc, #220]	@ (8004a70 <HAL_RCC_OscConfig+0x774>)
 8004994:	4013      	ands	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	430a      	orrs	r2, r1
 80049a2:	4931      	ldr	r1, [pc, #196]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	3b01      	subs	r3, #1
 80049ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b6:	3b01      	subs	r3, #1
 80049b8:	025b      	lsls	r3, r3, #9
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	3b01      	subs	r3, #1
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	3b01      	subs	r3, #1
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049d8:	4923      	ldr	r1, [pc, #140]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80049de:	4b22      	ldr	r3, [pc, #136]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	4a21      	ldr	r2, [pc, #132]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ee:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049f6:	00d2      	lsls	r2, r2, #3
 80049f8:	491b      	ldr	r1, [pc, #108]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	f023 020c 	bic.w	r2, r3, #12
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	4917      	ldr	r1, [pc, #92]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a10:	4b15      	ldr	r3, [pc, #84]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	f023 0202 	bic.w	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1c:	4912      	ldr	r1, [pc, #72]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a22:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	4a10      	ldr	r2, [pc, #64]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	4a0d      	ldr	r2, [pc, #52]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	4a07      	ldr	r2, [pc, #28]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a52:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <HAL_RCC_OscConfig+0x76c>)
 8004a58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fd f983 	bl	8001d68 <HAL_GetTick>
 8004a62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a64:	e011      	b.n	8004a8a <HAL_RCC_OscConfig+0x78e>
 8004a66:	bf00      	nop
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	58024800 	.word	0x58024800
 8004a70:	fffffc0c 	.word	0xfffffc0c
 8004a74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd f976 	bl	8001d68 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e08a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x77c>
 8004a96:	e082      	b.n	8004b9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a98:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd f960 	bl	8001d68 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd f95c 	bl	8001d68 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e070      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004abe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x7b0>
 8004aca:	e068      	b.n	8004b9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004acc:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ad2:	4b35      	ldr	r3, [pc, #212]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d031      	beq.n	8004b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f003 0203 	and.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d12a      	bne.n	8004b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d122      	bne.n	8004b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d11a      	bne.n	8004b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	0a5b      	lsrs	r3, r3, #9
 8004b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d111      	bne.n	8004b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d108      	bne.n	8004b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	0e1b      	lsrs	r3, r3, #24
 8004b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e02b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b48:	4b17      	ldr	r3, [pc, #92]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4c:	08db      	lsrs	r3, r3, #3
 8004b4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d01f      	beq.n	8004b9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	4a11      	ldr	r2, [pc, #68]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b6a:	f7fd f8fd 	bl	8001d68 <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b70:	bf00      	nop
 8004b72:	f7fd f8f9 	bl	8001d68 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d0f9      	beq.n	8004b72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b82:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <HAL_RCC_OscConfig+0x8b0>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b8a:	00d2      	lsls	r2, r2, #3
 8004b8c:	4906      	ldr	r1, [pc, #24]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	4a04      	ldr	r2, [pc, #16]	@ (8004ba8 <HAL_RCC_OscConfig+0x8ac>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3730      	adds	r7, #48	@ 0x30
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	ffff0007 	.word	0xffff0007

08004bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e19c      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d910      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b87      	ldr	r3, [pc, #540]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 020f 	bic.w	r2, r3, #15
 8004bda:	4985      	ldr	r1, [pc, #532]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	4b83      	ldr	r3, [pc, #524]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e184      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	4b7b      	ldr	r3, [pc, #492]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d908      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c10:	4b78      	ldr	r3, [pc, #480]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4975      	ldr	r1, [pc, #468]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	4b70      	ldr	r3, [pc, #448]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d908      	bls.n	8004c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	496a      	ldr	r1, [pc, #424]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	4b64      	ldr	r3, [pc, #400]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d908      	bls.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	495e      	ldr	r1, [pc, #376]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d010      	beq.n	8004cac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	4b59      	ldr	r3, [pc, #356]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d908      	bls.n	8004cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c9a:	4b56      	ldr	r3, [pc, #344]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4953      	ldr	r1, [pc, #332]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d010      	beq.n	8004cda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d908      	bls.n	8004cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f023 020f 	bic.w	r2, r3, #15
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4947      	ldr	r1, [pc, #284]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d055      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ce6:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4940      	ldr	r1, [pc, #256]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d00:	4b3c      	ldr	r3, [pc, #240]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d121      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0f6      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d18:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0ea      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d30:	4b30      	ldr	r3, [pc, #192]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0de      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d40:	4b2c      	ldr	r3, [pc, #176]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0d6      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d50:	4b28      	ldr	r3, [pc, #160]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f023 0207 	bic.w	r2, r3, #7
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4925      	ldr	r1, [pc, #148]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d62:	f7fd f801 	bl	8001d68 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6a:	f7fc fffd 	bl	8001d68 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0be      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d80:	4b1c      	ldr	r3, [pc, #112]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d1eb      	bne.n	8004d6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d208      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dae:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	490e      	ldr	r1, [pc, #56]	@ (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d214      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	4906      	ldr	r1, [pc, #24]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b04      	ldr	r3, [pc, #16]	@ (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e086      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
 8004df0:	52002000 	.word	0x52002000
 8004df4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	4b3f      	ldr	r3, [pc, #252]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d208      	bcs.n	8004e26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e14:	4b3c      	ldr	r3, [pc, #240]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4939      	ldr	r1, [pc, #228]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d208      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e42:	4b31      	ldr	r3, [pc, #196]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	492e      	ldr	r1, [pc, #184]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	4b28      	ldr	r3, [pc, #160]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d208      	bcs.n	8004e82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e70:	4b25      	ldr	r3, [pc, #148]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4922      	ldr	r1, [pc, #136]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d208      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4917      	ldr	r1, [pc, #92]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004eb0:	f000 f89e 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	4912      	ldr	r1, [pc, #72]	@ (8004f0c <HAL_RCC_ClockConfig+0x35c>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ecc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ece:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8004f0c <HAL_RCC_ClockConfig+0x35c>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <HAL_RCC_ClockConfig+0x360>)
 8004ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <HAL_RCC_ClockConfig+0x364>)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004eee:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_RCC_ClockConfig+0x368>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fc feee 	bl	8001cd4 <HAL_InitTick>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	0800e994 	.word	0x0800e994
 8004f10:	24000004 	.word	0x24000004
 8004f14:	24000000 	.word	0x24000000
 8004f18:	24000010 	.word	0x24000010

08004f1c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	@ 0x30
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d12a      	bne.n	8004f84 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f34:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f3e:	4b29      	ldr	r3, [pc, #164]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f52:	2302      	movs	r3, #2
 8004f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f56:	2303      	movs	r3, #3
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004f62:	f107 031c 	add.w	r3, r7, #28
 8004f66:	4619      	mov	r1, r3
 8004f68:	481f      	ldr	r0, [pc, #124]	@ (8004fe8 <HAL_RCC_MCOConfig+0xcc>)
 8004f6a:	f7fd fc25 	bl	80027b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	4919      	ldr	r1, [pc, #100]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004f82:	e02a      	b.n	8004fda <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004f84:	4b17      	ldr	r3, [pc, #92]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f8a:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f8c:	f043 0304 	orr.w	r3, r3, #4
 8004f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f94:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fac:	2303      	movs	r3, #3
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004fb8:	f107 031c 	add.w	r3, r7, #28
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	480b      	ldr	r0, [pc, #44]	@ (8004fec <HAL_RCC_MCOConfig+0xd0>)
 8004fc0:	f7fd fbfa 	bl	80027b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004fc4:	4b07      	ldr	r3, [pc, #28]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	01d9      	lsls	r1, r3, #7
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	4903      	ldr	r1, [pc, #12]	@ (8004fe4 <HAL_RCC_MCOConfig+0xc8>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	610b      	str	r3, [r1, #16]
}
 8004fda:	bf00      	nop
 8004fdc:	3730      	adds	r7, #48	@ 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	58020000 	.word	0x58020000
 8004fec:	58020800 	.word	0x58020800

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	@ 0x24
 8004ff4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff6:	4bb3      	ldr	r3, [pc, #716]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ffe:	2b18      	cmp	r3, #24
 8005000:	f200 8155 	bhi.w	80052ae <HAL_RCC_GetSysClockFreq+0x2be>
 8005004:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005071 	.word	0x08005071
 8005010:	080052af 	.word	0x080052af
 8005014:	080052af 	.word	0x080052af
 8005018:	080052af 	.word	0x080052af
 800501c:	080052af 	.word	0x080052af
 8005020:	080052af 	.word	0x080052af
 8005024:	080052af 	.word	0x080052af
 8005028:	080052af 	.word	0x080052af
 800502c:	08005097 	.word	0x08005097
 8005030:	080052af 	.word	0x080052af
 8005034:	080052af 	.word	0x080052af
 8005038:	080052af 	.word	0x080052af
 800503c:	080052af 	.word	0x080052af
 8005040:	080052af 	.word	0x080052af
 8005044:	080052af 	.word	0x080052af
 8005048:	080052af 	.word	0x080052af
 800504c:	0800509d 	.word	0x0800509d
 8005050:	080052af 	.word	0x080052af
 8005054:	080052af 	.word	0x080052af
 8005058:	080052af 	.word	0x080052af
 800505c:	080052af 	.word	0x080052af
 8005060:	080052af 	.word	0x080052af
 8005064:	080052af 	.word	0x080052af
 8005068:	080052af 	.word	0x080052af
 800506c:	080050a3 	.word	0x080050a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005070:	4b94      	ldr	r3, [pc, #592]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800507c:	4b91      	ldr	r3, [pc, #580]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	4a90      	ldr	r2, [pc, #576]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800508e:	e111      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005090:	4b8d      	ldr	r3, [pc, #564]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005092:	61bb      	str	r3, [r7, #24]
      break;
 8005094:	e10e      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005096:	4b8d      	ldr	r3, [pc, #564]	@ (80052cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005098:	61bb      	str	r3, [r7, #24]
      break;
 800509a:	e10b      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800509c:	4b8c      	ldr	r3, [pc, #560]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800509e:	61bb      	str	r3, [r7, #24]
      break;
 80050a0:	e108      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050a2:	4b88      	ldr	r3, [pc, #544]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050ac:	4b85      	ldr	r3, [pc, #532]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050b8:	4b82      	ldr	r3, [pc, #520]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050c2:	4b80      	ldr	r3, [pc, #512]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c6:	08db      	lsrs	r3, r3, #3
 80050c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80e1 	beq.w	80052a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	f000 8083 	beq.w	80051f4 <HAL_RCC_GetSysClockFreq+0x204>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f200 80a1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x248>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x114>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d056      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005102:	e099      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005104:	4b6f      	ldr	r3, [pc, #444]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02d      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005110:	4b6c      	ldr	r3, [pc, #432]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	08db      	lsrs	r3, r3, #3
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	4a6b      	ldr	r2, [pc, #428]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
 8005120:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b62      	ldr	r3, [pc, #392]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a02 	vldr	s12, [r7, #8]
 800514e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80052d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800516a:	e087      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80052d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b51      	ldr	r3, [pc, #324]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005192:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80052d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ae:	e065      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80052dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80051be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c2:	4b40      	ldr	r3, [pc, #256]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80052d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051f2:	e043      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80052e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005206:	4b2f      	ldr	r3, [pc, #188]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005216:	ed97 6a02 	vldr	s12, [r7, #8]
 800521a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80052d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800521e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005236:	e021      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80052dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524a:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a02 	vldr	s12, [r7, #8]
 800525e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80052d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800527a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800527c:	4b11      	ldr	r3, [pc, #68]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	0a5b      	lsrs	r3, r3, #9
 8005282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005286:	3301      	adds	r3, #1
 8005288:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005294:	edd7 6a07 	vldr	s13, [r7, #28]
 8005298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a0:	ee17 3a90 	vmov	r3, s15
 80052a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052a6:	e005      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61bb      	str	r3, [r7, #24]
      break;
 80052ac:	e002      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052ae:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052b0:	61bb      	str	r3, [r7, #24]
      break;
 80052b2:	bf00      	nop
  }

  return sysclockfreq;
 80052b4:	69bb      	ldr	r3, [r7, #24]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3724      	adds	r7, #36	@ 0x24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	58024400 	.word	0x58024400
 80052c8:	03d09000 	.word	0x03d09000
 80052cc:	003d0900 	.word	0x003d0900
 80052d0:	017d7840 	.word	0x017d7840
 80052d4:	46000000 	.word	0x46000000
 80052d8:	4c742400 	.word	0x4c742400
 80052dc:	4a742400 	.word	0x4a742400
 80052e0:	4bbebc20 	.word	0x4bbebc20

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052ea:	f7ff fe81 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_RCC_GetHCLKFreq+0x50>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	490f      	ldr	r1, [pc, #60]	@ (8005338 <HAL_RCC_GetHCLKFreq+0x54>)
 80052fc:	5ccb      	ldrb	r3, [r1, r3]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005308:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <HAL_RCC_GetHCLKFreq+0x50>)
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	4a09      	ldr	r2, [pc, #36]	@ (8005338 <HAL_RCC_GetHCLKFreq+0x54>)
 8005312:	5cd3      	ldrb	r3, [r2, r3]
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	4a07      	ldr	r2, [pc, #28]	@ (800533c <HAL_RCC_GetHCLKFreq+0x58>)
 8005320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005322:	4a07      	ldr	r2, [pc, #28]	@ (8005340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <HAL_RCC_GetHCLKFreq+0x58>)
 800532a:	681b      	ldr	r3, [r3, #0]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	58024400 	.word	0x58024400
 8005338:	0800e994 	.word	0x0800e994
 800533c:	24000004 	.word	0x24000004
 8005340:	24000000 	.word	0x24000000

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005348:	f7ff ffcc 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4904      	ldr	r1, [pc, #16]	@ (800536c <HAL_RCC_GetPCLK1Freq+0x28>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}
 8005368:	58024400 	.word	0x58024400
 800536c:	0800e994 	.word	0x0800e994

08005370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005374:	f7ff ffb6 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005378:	4602      	mov	r2, r0
 800537a:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	4904      	ldr	r1, [pc, #16]	@ (8005398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005386:	5ccb      	ldrb	r3, [r1, r3]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	58024400 	.word	0x58024400
 8005398:	0800e994 	.word	0x0800e994

0800539c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b0cc      	sub	sp, #304	@ 0x130
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ae:	2300      	movs	r3, #0
 80053b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80053c0:	2500      	movs	r5, #0
 80053c2:	ea54 0305 	orrs.w	r3, r4, r5
 80053c6:	d049      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053d2:	d02f      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053d8:	d828      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053de:	d01a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053e4:	d822      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ee:	d007      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053f0:	e01c      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f2:	4bb8      	ldr	r3, [pc, #736]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	4ab7      	ldr	r2, [pc, #732]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053fe:	e01a      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005404:	3308      	adds	r3, #8
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f002 fba1 	bl	8007b50 <RCCEx_PLL2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005414:	e00f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541a:	3328      	adds	r3, #40	@ 0x28
 800541c:	2102      	movs	r1, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f002 fc48 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800542a:	e004      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800543e:	4ba5      	ldr	r3, [pc, #660]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005442:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544c:	4aa1      	ldr	r2, [pc, #644]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544e:	430b      	orrs	r3, r1
 8005450:	6513      	str	r3, [r2, #80]	@ 0x50
 8005452:	e003      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005458:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800545c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005468:	f04f 0900 	mov.w	r9, #0
 800546c:	ea58 0309 	orrs.w	r3, r8, r9
 8005470:	d047      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	2b04      	cmp	r3, #4
 800547a:	d82a      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800547c:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	08005499 	.word	0x08005499
 8005488:	080054a7 	.word	0x080054a7
 800548c:	080054bd 	.word	0x080054bd
 8005490:	080054db 	.word	0x080054db
 8005494:	080054db 	.word	0x080054db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005498:	4b8e      	ldr	r3, [pc, #568]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a8d      	ldr	r2, [pc, #564]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800549e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a4:	e01a      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054aa:	3308      	adds	r3, #8
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f002 fb4e 	bl	8007b50 <RCCEx_PLL2_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ba:	e00f      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c0:	3328      	adds	r3, #40	@ 0x28
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f002 fbf5 	bl	8007cb4 <RCCEx_PLL3_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e4:	4b7b      	ldr	r3, [pc, #492]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e8:	f023 0107 	bic.w	r1, r3, #7
 80054ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f2:	4a78      	ldr	r2, [pc, #480]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	ea5a 030b 	orrs.w	r3, sl, fp
 8005516:	d04c      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800551c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005522:	d030      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005528:	d829      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800552a:	2bc0      	cmp	r3, #192	@ 0xc0
 800552c:	d02d      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800552e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005530:	d825      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005532:	2b80      	cmp	r3, #128	@ 0x80
 8005534:	d018      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d821      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d007      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005542:	e01c      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005544:	4b63      	ldr	r3, [pc, #396]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	4a62      	ldr	r2, [pc, #392]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800554a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005550:	e01c      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005556:	3308      	adds	r3, #8
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f002 faf8 	bl	8007b50 <RCCEx_PLL2_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005566:	e011      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800556c:	3328      	adds	r3, #40	@ 0x28
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f002 fb9f 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800557c:	e006      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005584:	e002      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800558a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005594:	4b4f      	ldr	r3, [pc, #316]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005598:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800559c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a2:	4a4c      	ldr	r2, [pc, #304]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80055be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80055c2:	2300      	movs	r3, #0
 80055c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80055c8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80055cc:	460b      	mov	r3, r1
 80055ce:	4313      	orrs	r3, r2
 80055d0:	d053      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80055d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055de:	d035      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80055e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e4:	d82e      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055ea:	d031      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80055ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055f0:	d828      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f6:	d01a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055fc:	d822      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005606:	d007      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005608:	e01c      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560a:	4b32      	ldr	r3, [pc, #200]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	4a31      	ldr	r2, [pc, #196]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005616:	e01c      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800561c:	3308      	adds	r3, #8
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f002 fa95 	bl	8007b50 <RCCEx_PLL2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800562c:	e011      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800562e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005632:	3328      	adds	r3, #40	@ 0x28
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f002 fb3c 	bl	8007cb4 <RCCEx_PLL3_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005642:	e006      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800564a:	e002      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800564c:	bf00      	nop
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800565a:	4b1e      	ldr	r3, [pc, #120]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005666:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800566a:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800566c:	430b      	orrs	r3, r1
 800566e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005670:	e003      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005676:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800567a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005686:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800568a:	2300      	movs	r3, #0
 800568c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005690:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005694:	460b      	mov	r3, r1
 8005696:	4313      	orrs	r3, r2
 8005698:	d056      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800569a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800569e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056a6:	d038      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ac:	d831      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056b2:	d034      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80056b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056b8:	d82b      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056be:	d01d      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80056c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056c4:	d825      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d006      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80056ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056d0:	e01f      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	4aa1      	ldr	r2, [pc, #644]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056e4:	e01c      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ea:	3308      	adds	r3, #8
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f002 fa2e 	bl	8007b50 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005700:	3328      	adds	r3, #40	@ 0x28
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f002 fad5 	bl	8007cb4 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005728:	4b8e      	ldr	r3, [pc, #568]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005730:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005734:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005738:	4a8a      	ldr	r2, [pc, #552]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800573a:	430b      	orrs	r3, r1
 800573c:	6593      	str	r3, [r2, #88]	@ 0x58
 800573e:	e003      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005744:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005748:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005754:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800575e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d03a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800576c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576e:	2b30      	cmp	r3, #48	@ 0x30
 8005770:	d01f      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005772:	2b30      	cmp	r3, #48	@ 0x30
 8005774:	d819      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005776:	2b20      	cmp	r3, #32
 8005778:	d00c      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800577a:	2b20      	cmp	r3, #32
 800577c:	d815      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d019      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005782:	2b10      	cmp	r3, #16
 8005784:	d111      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005786:	4b77      	ldr	r3, [pc, #476]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a76      	ldr	r2, [pc, #472]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005792:	e011      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005798:	3308      	adds	r3, #8
 800579a:	2102      	movs	r1, #2
 800579c:	4618      	mov	r0, r3
 800579e:	f002 f9d7 	bl	8007b50 <RCCEx_PLL2_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057a8:	e006      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057b0:	e002      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057c0:	4b68      	ldr	r3, [pc, #416]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80057c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ce:	4a65      	ldr	r2, [pc, #404]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d0:	430b      	orrs	r3, r1
 80057d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80057ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057ee:	2300      	movs	r3, #0
 80057f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057f4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d051      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80057fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005808:	d035      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800580a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800580e:	d82e      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005814:	d031      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005816:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800581a:	d828      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800581c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005820:	d01a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005826:	d822      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005830:	d007      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005832:	e01c      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b4b      	ldr	r3, [pc, #300]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	4a4a      	ldr	r2, [pc, #296]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005840:	e01c      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005846:	3308      	adds	r3, #8
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f002 f980 	bl	8007b50 <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005856:	e011      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800585c:	3328      	adds	r3, #40	@ 0x28
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f002 fa27 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800586c:	e006      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005874:	e002      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800587a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005884:	4b37      	ldr	r3, [pc, #220]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005888:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800588c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005892:	4a34      	ldr	r2, [pc, #208]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005894:	430b      	orrs	r3, r1
 8005896:	6513      	str	r3, [r2, #80]	@ 0x50
 8005898:	e003      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800589e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058bc:	460b      	mov	r3, r1
 80058be:	4313      	orrs	r3, r2
 80058c0:	d056      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80058c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058cc:	d033      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80058ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058d2:	d82c      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058d8:	d02f      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80058da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058de:	d826      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058e4:	d02b      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80058e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058ea:	d820      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f0:	d012      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80058f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f6:	d81a      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d022      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005900:	d115      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005906:	3308      	adds	r3, #8
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f002 f920 	bl	8007b50 <RCCEx_PLL2_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005916:	e015      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800591c:	3328      	adds	r3, #40	@ 0x28
 800591e:	2101      	movs	r1, #1
 8005920:	4618      	mov	r0, r3
 8005922:	f002 f9c7 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005936:	bf00      	nop
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005944:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005950:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800595a:	4a02      	ldr	r2, [pc, #8]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595c:	430b      	orrs	r3, r1
 800595e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005960:	e006      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800596c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800597c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005986:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d055      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800599c:	d033      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800599e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059a2:	d82c      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a8:	d02f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d826      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059b4:	d02b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80059b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059ba:	d820      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c0:	d012      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c6:	d81a      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d022      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80059cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d0:	d115      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059d6:	3308      	adds	r3, #8
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f002 f8b8 	bl	8007b50 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059e6:	e015      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ec:	3328      	adds	r3, #40	@ 0x28
 80059ee:	2101      	movs	r1, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f002 f95f 	bl	8007cb4 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059fc:	e00a      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a06:	bf00      	nop
 8005a08:	e004      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a1c:	4bb6      	ldr	r3, [pc, #728]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a20:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a2c:	4ab2      	ldr	r2, [pc, #712]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a32:	e003      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d02a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d011      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	d10a      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a70:	3308      	adds	r3, #8
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f002 f86b 	bl	8007b50 <RCCEx_PLL2_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005a80:	e004      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005a94:	4b98      	ldr	r3, [pc, #608]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a98:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa2:	4a95      	ldr	r2, [pc, #596]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aa8:	e003      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aaa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ac8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005acc:	460b      	mov	r3, r1
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	d037      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005adc:	d00e      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ae2:	d816      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d018      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005aec:	d111      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aee:	4b82      	ldr	r3, [pc, #520]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	4a81      	ldr	r2, [pc, #516]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005afa:	e00f      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b00:	3308      	adds	r3, #8
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 f823 	bl	8007b50 <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b10:	e004      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b18:	e000      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b24:	4b74      	ldr	r3, [pc, #464]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b32:	4a71      	ldr	r2, [pc, #452]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b38:	e003      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b58:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	d03a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d81d      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005bb1 	.word	0x08005bb1
 8005b78:	08005b85 	.word	0x08005b85
 8005b7c:	08005b93 	.word	0x08005b93
 8005b80:	08005bb1 	.word	0x08005bb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4b5c      	ldr	r3, [pc, #368]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	4a5b      	ldr	r2, [pc, #364]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b90:	e00f      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b96:	3308      	adds	r3, #8
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 ffd8 	bl	8007b50 <RCCEx_PLL2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ba6:	e004      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bba:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbe:	f023 0103 	bic.w	r1, r3, #3
 8005bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bce:	e003      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bd4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005be4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f000 80a0 	beq.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfa:	4b40      	ldr	r3, [pc, #256]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c06:	f7fc f8af 	bl	8001d68 <HAL_GetTick>
 8005c0a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c10:	f7fc f8aa 	bl	8001d68 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b64      	cmp	r3, #100	@ 0x64
 8005c1e:	d903      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c26:	e005      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c28:	4b34      	ldr	r3, [pc, #208]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ed      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005c34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d17a      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c48:	4053      	eors	r3, r2
 8005c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d015      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c52:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c5e:	4b26      	ldr	r3, [pc, #152]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c62:	4a25      	ldr	r2, [pc, #148]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c6a:	4b23      	ldr	r3, [pc, #140]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6e:	4a22      	ldr	r2, [pc, #136]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c76:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c78:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005c7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c8a:	d118      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fc f86c 	bl	8001d68 <HAL_GetTick>
 8005c90:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c94:	e00d      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c96:	f7fc f867 	bl	8001d68 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d903      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005cb0:	e005      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cb2:	4b11      	ldr	r3, [pc, #68]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0eb      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005cbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d130      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cd6:	d115      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005cd8:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ce8:	091a      	lsrs	r2, r3, #4
 8005cea:	4b05      	ldr	r3, [pc, #20]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	4a02      	ldr	r2, [pc, #8]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6113      	str	r3, [r2, #16]
 8005cf4:	e00c      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005cf6:	bf00      	nop
 8005cf8:	58024400 	.word	0x58024400
 8005cfc:	58024800 	.word	0x58024800
 8005d00:	00ffffcf 	.word	0x00ffffcf
 8005d04:	4bd4      	ldr	r3, [pc, #848]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4ad3      	ldr	r2, [pc, #844]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d0e:	6113      	str	r3, [r2, #16]
 8005d10:	4bd1      	ldr	r3, [pc, #836]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d12:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d20:	4acd      	ldr	r2, [pc, #820]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d26:	e008      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005d30:	e003      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f002 0301 	and.w	r3, r2, #1
 8005d46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f000 808b 	beq.w	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d64:	2b28      	cmp	r3, #40	@ 0x28
 8005d66:	d86b      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005e49 	.word	0x08005e49
 8005d74:	08005e41 	.word	0x08005e41
 8005d78:	08005e41 	.word	0x08005e41
 8005d7c:	08005e41 	.word	0x08005e41
 8005d80:	08005e41 	.word	0x08005e41
 8005d84:	08005e41 	.word	0x08005e41
 8005d88:	08005e41 	.word	0x08005e41
 8005d8c:	08005e41 	.word	0x08005e41
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e41 	.word	0x08005e41
 8005d98:	08005e41 	.word	0x08005e41
 8005d9c:	08005e41 	.word	0x08005e41
 8005da0:	08005e41 	.word	0x08005e41
 8005da4:	08005e41 	.word	0x08005e41
 8005da8:	08005e41 	.word	0x08005e41
 8005dac:	08005e41 	.word	0x08005e41
 8005db0:	08005e2b 	.word	0x08005e2b
 8005db4:	08005e41 	.word	0x08005e41
 8005db8:	08005e41 	.word	0x08005e41
 8005dbc:	08005e41 	.word	0x08005e41
 8005dc0:	08005e41 	.word	0x08005e41
 8005dc4:	08005e41 	.word	0x08005e41
 8005dc8:	08005e41 	.word	0x08005e41
 8005dcc:	08005e41 	.word	0x08005e41
 8005dd0:	08005e49 	.word	0x08005e49
 8005dd4:	08005e41 	.word	0x08005e41
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005e41 	.word	0x08005e41
 8005de0:	08005e41 	.word	0x08005e41
 8005de4:	08005e41 	.word	0x08005e41
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e41 	.word	0x08005e41
 8005dfc:	08005e41 	.word	0x08005e41
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e41 	.word	0x08005e41
 8005e0c:	08005e41 	.word	0x08005e41
 8005e10:	08005e49 	.word	0x08005e49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e18:	3308      	adds	r3, #8
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fe97 	bl	8007b50 <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e28:	e00f      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e2e:	3328      	adds	r3, #40	@ 0x28
 8005e30:	2101      	movs	r1, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 ff3e 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e3e:	e004      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e52:	4b81      	ldr	r3, [pc, #516]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e62:	4a7d      	ldr	r2, [pc, #500]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e68:	e003      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f002 0302 	and.w	r3, r2, #2
 8005e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e88:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d042      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d825      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ebd 	.word	0x08005ebd
 8005eac:	08005ed3 	.word	0x08005ed3
 8005eb0:	08005ef1 	.word	0x08005ef1
 8005eb4:	08005ef1 	.word	0x08005ef1
 8005eb8:	08005ef1 	.word	0x08005ef1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fe43 	bl	8007b50 <RCCEx_PLL2_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e00f      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed6:	3328      	adds	r3, #40	@ 0x28
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 feea 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ee6:	e004      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005eee:	e000      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005efa:	4b57      	ldr	r3, [pc, #348]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f023 0107 	bic.w	r1, r3, #7
 8005f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f08:	4a53      	ldr	r2, [pc, #332]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f0e:	e003      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f14:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f002 0304 	and.w	r3, r2, #4
 8005f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d044      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f40:	2b05      	cmp	r3, #5
 8005f42:	d825      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005f44:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f65 	.word	0x08005f65
 8005f54:	08005f7b 	.word	0x08005f7b
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f68:	3308      	adds	r3, #8
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fdef 	bl	8007b50 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f78:	e00f      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f7e:	3328      	adds	r3, #40	@ 0x28
 8005f80:	2101      	movs	r1, #1
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 fe96 	bl	8007cb4 <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f8e:	e004      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f96:	e000      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa6:	f023 0107 	bic.w	r1, r3, #7
 8005faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fb2:	4a29      	ldr	r2, [pc, #164]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fb8:	e003      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f002 0320 	and.w	r3, r2, #32
 8005fce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	d057      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fee:	d035      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff4:	d82c      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffa:	d031      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d826      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006002:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006006:	d02d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800600c:	d820      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800600e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006012:	d012      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006018:	d81a      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d024      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800601e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006022:	d115      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006028:	3308      	adds	r3, #8
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fd8f 	bl	8007b50 <RCCEx_PLL2_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006038:	e017      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800603a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800603e:	3328      	adds	r3, #40	@ 0x28
 8006040:	2102      	movs	r1, #2
 8006042:	4618      	mov	r0, r3
 8006044:	f001 fe36 	bl	8007cb4 <RCCEx_PLL3_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800604e:	e00c      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006056:	e008      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006058:	58024400 	.word	0x58024400
        break;
 800605c:	bf00      	nop
 800605e:	e004      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006060:	bf00      	nop
 8006062:	e002      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006072:	4bc2      	ldr	r3, [pc, #776]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800607a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800607e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006082:	4abe      	ldr	r2, [pc, #760]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6553      	str	r3, [r2, #84]	@ 0x54
 8006088:	e003      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800608e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d055      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060be:	d033      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80060c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060c4:	d82c      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ca:	d02f      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d0:	d826      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80060d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060d6:	d02b      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80060d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060dc:	d820      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80060de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e2:	d012      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e8:	d81a      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d022      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80060ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f2:	d115      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f8:	3308      	adds	r3, #8
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fd27 	bl	8007b50 <RCCEx_PLL2_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006108:	e015      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800610a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800610e:	3328      	adds	r3, #40	@ 0x28
 8006110:	2102      	movs	r1, #2
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fdce 	bl	8007cb4 <RCCEx_PLL3_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800611e:	e00a      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006126:	e006      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006128:	bf00      	nop
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800612c:	bf00      	nop
 800612e:	e002      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006130:	bf00      	nop
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800613e:	4b8f      	ldr	r3, [pc, #572]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800614a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800614e:	4a8b      	ldr	r2, [pc, #556]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6593      	str	r3, [r2, #88]	@ 0x58
 8006154:	e003      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800615a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800616a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006174:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006178:	460b      	mov	r3, r1
 800617a:	4313      	orrs	r3, r2
 800617c:	d055      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006186:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800618a:	d033      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800618c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006190:	d82c      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006196:	d02f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800619c:	d826      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800619e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061a2:	d02b      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80061a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061a8:	d820      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80061aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ae:	d012      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80061b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b4:	d81a      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d022      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80061ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061be:	d115      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061c4:	3308      	adds	r3, #8
 80061c6:	2100      	movs	r1, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fcc1 	bl	8007b50 <RCCEx_PLL2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061d4:	e015      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061da:	3328      	adds	r3, #40	@ 0x28
 80061dc:	2102      	movs	r1, #2
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fd68 	bl	8007cb4 <RCCEx_PLL3_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061ea:	e00a      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061f2:	e006      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80061f4:	bf00      	nop
 80061f6:	e004      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80061f8:	bf00      	nop
 80061fa:	e002      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80061fc:	bf00      	nop
 80061fe:	e000      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006202:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800620a:	4b5c      	ldr	r3, [pc, #368]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006216:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800621a:	4a58      	ldr	r2, [pc, #352]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800621c:	430b      	orrs	r3, r1
 800621e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006220:	e003      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006222:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006226:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800622a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f002 0308 	and.w	r3, r2, #8
 8006236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800623a:	2300      	movs	r3, #0
 800623c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006240:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006244:	460b      	mov	r3, r1
 8006246:	4313      	orrs	r3, r2
 8006248:	d01e      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800624a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006256:	d10c      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800625c:	3328      	adds	r3, #40	@ 0x28
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fd27 	bl	8007cb4 <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006272:	4b42      	ldr	r3, [pc, #264]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800627a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006282:	4a3e      	ldr	r2, [pc, #248]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006284:	430b      	orrs	r3, r1
 8006286:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f002 0310 	and.w	r3, r2, #16
 8006294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800629e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062a2:	460b      	mov	r3, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	d01e      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ba:	3328      	adds	r3, #40	@ 0x28
 80062bc:	2102      	movs	r1, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fcf8 	bl	8007cb4 <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062d0:	4b2a      	ldr	r3, [pc, #168]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062e0:	4a26      	ldr	r2, [pc, #152]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062e2:	430b      	orrs	r3, r1
 80062e4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062f6:	2300      	movs	r3, #0
 80062f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d040      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800630a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800630e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006312:	d022      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006318:	d81b      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800631e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006322:	d00b      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006324:	e015      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800632a:	3308      	adds	r3, #8
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fc0e 	bl	8007b50 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800633a:	e00f      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800633c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006340:	3328      	adds	r3, #40	@ 0x28
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fcb5 	bl	8007cb4 <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006350:	e004      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006358:	e000      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800635a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10d      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006364:	4b05      	ldr	r3, [pc, #20]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006368:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800636c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006370:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006374:	4a01      	ldr	r2, [pc, #4]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006376:	430b      	orrs	r3, r1
 8006378:	6593      	str	r3, [r2, #88]	@ 0x58
 800637a:	e005      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800637c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006384:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006396:	2300      	movs	r3, #0
 8006398:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800639a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800639e:	460b      	mov	r3, r1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	d03b      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063b0:	d01f      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80063b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063b6:	d818      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80063b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063bc:	d003      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80063be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063c2:	d007      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80063c4:	e011      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c6:	4b64      	ldr	r3, [pc, #400]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	4a63      	ldr	r2, [pc, #396]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80063d2:	e00f      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d8:	3328      	adds	r3, #40	@ 0x28
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fc69 	bl	8007cb4 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80063e8:	e004      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063f0:	e000      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80063f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063fc:	4b56      	ldr	r3, [pc, #344]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006400:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800640c:	4a52      	ldr	r2, [pc, #328]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800640e:	430b      	orrs	r3, r1
 8006410:	6553      	str	r3, [r2, #84]	@ 0x54
 8006412:	e003      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006418:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800641c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006428:	673b      	str	r3, [r7, #112]	@ 0x70
 800642a:	2300      	movs	r3, #0
 800642c:	677b      	str	r3, [r7, #116]	@ 0x74
 800642e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d031      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800643c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006446:	d007      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006448:	e011      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800644a:	4b43      	ldr	r3, [pc, #268]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	4a42      	ldr	r2, [pc, #264]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006456:	e00e      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800645c:	3308      	adds	r3, #8
 800645e:	2102      	movs	r1, #2
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fb75 	bl	8007b50 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800647e:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800648a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648c:	4a32      	ldr	r2, [pc, #200]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800648e:	430b      	orrs	r3, r1
 8006490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006498:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800649c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064aa:	2300      	movs	r3, #0
 80064ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d00c      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064bc:	3328      	adds	r3, #40	@ 0x28
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 fbf7 	bl	8007cb4 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064de:	663b      	str	r3, [r7, #96]	@ 0x60
 80064e0:	2300      	movs	r3, #0
 80064e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80064e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064e8:	460b      	mov	r3, r1
 80064ea:	4313      	orrs	r3, r2
 80064ec:	d03a      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064fa:	d018      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006500:	d811      	bhi.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006506:	d014      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800650c:	d80b      	bhi.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d011      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006516:	d106      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006518:	4b0f      	ldr	r3, [pc, #60]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	4a0e      	ldr	r2, [pc, #56]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800651e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006524:	e008      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800652c:	e004      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006538:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10d      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006540:	4b05      	ldr	r3, [pc, #20]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006544:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800654c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006550:	4a01      	ldr	r2, [pc, #4]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006552:	430b      	orrs	r3, r1
 8006554:	6553      	str	r3, [r2, #84]	@ 0x54
 8006556:	e005      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006560:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006564:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006570:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006572:	2300      	movs	r3, #0
 8006574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006576:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800657a:	460b      	mov	r3, r1
 800657c:	4313      	orrs	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006580:	4baa      	ldr	r3, [pc, #680]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006584:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800658c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800658e:	4aa7      	ldr	r2, [pc, #668]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006590:	430b      	orrs	r3, r1
 8006592:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80065a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065a2:	2300      	movs	r3, #0
 80065a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d00a      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065b0:	4b9e      	ldr	r3, [pc, #632]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80065b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065c0:	4a9a      	ldr	r2, [pc, #616]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065c2:	430b      	orrs	r3, r1
 80065c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d4:	2300      	movs	r3, #0
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065e2:	4b92      	ldr	r3, [pc, #584]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f0:	4a8e      	ldr	r2, [pc, #568]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065f2:	430b      	orrs	r3, r1
 80065f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006602:	643b      	str	r3, [r7, #64]	@ 0x40
 8006604:	2300      	movs	r3, #0
 8006606:	647b      	str	r3, [r7, #68]	@ 0x44
 8006608:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006612:	4b86      	ldr	r3, [pc, #536]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	4a85      	ldr	r2, [pc, #532]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006618:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800661c:	6113      	str	r3, [r2, #16]
 800661e:	4b83      	ldr	r3, [pc, #524]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006620:	6919      	ldr	r1, [r3, #16]
 8006622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800662a:	4a80      	ldr	r2, [pc, #512]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800663c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800663e:	2300      	movs	r3, #0
 8006640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006642:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006646:	460b      	mov	r3, r1
 8006648:	4313      	orrs	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800664c:	4b77      	ldr	r3, [pc, #476]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800664e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006650:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	4a74      	ldr	r2, [pc, #464]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800665c:	430b      	orrs	r3, r1
 800665e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800666c:	633b      	str	r3, [r7, #48]	@ 0x30
 800666e:	2300      	movs	r3, #0
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34
 8006672:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800667c:	4b6b      	ldr	r3, [pc, #428]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800667e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006680:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668c:	4a67      	ldr	r2, [pc, #412]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800668e:	430b      	orrs	r3, r1
 8006690:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	2100      	movs	r1, #0
 800669c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066a8:	460b      	mov	r3, r1
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d011      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066b2:	3308      	adds	r3, #8
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fa4a 	bl	8007b50 <RCCEx_PLL2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80066c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80066d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	2100      	movs	r1, #0
 80066dc:	6239      	str	r1, [r7, #32]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d011      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066f2:	3308      	adds	r3, #8
 80066f4:	2101      	movs	r1, #1
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 fa2a 	bl	8007b50 <RCCEx_PLL2_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006702:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800670e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006712:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	2100      	movs	r1, #0
 800671c:	61b9      	str	r1, [r7, #24]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d011      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800672e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006732:	3308      	adds	r3, #8
 8006734:	2102      	movs	r1, #2
 8006736:	4618      	mov	r0, r3
 8006738:	f001 fa0a 	bl	8007b50 <RCCEx_PLL2_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800674e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	2100      	movs	r1, #0
 800675c:	6139      	str	r1, [r7, #16]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006768:	460b      	mov	r3, r1
 800676a:	4313      	orrs	r3, r2
 800676c:	d011      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800676e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006772:	3328      	adds	r3, #40	@ 0x28
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fa9c 	bl	8007cb4 <RCCEx_PLL3_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006782:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800678e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	2100      	movs	r1, #0
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067a8:	460b      	mov	r3, r1
 80067aa:	4313      	orrs	r3, r2
 80067ac:	d011      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b2:	3328      	adds	r3, #40	@ 0x28
 80067b4:	2101      	movs	r1, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 fa7c 	bl	8007cb4 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80067c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	2100      	movs	r1, #0
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d011      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067f2:	3328      	adds	r3, #40	@ 0x28
 80067f4:	2102      	movs	r1, #2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 fa5c 	bl	8007cb4 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006802:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800680e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006812:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
}
 8006820:	4618      	mov	r0, r3
 8006822:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006826:	46bd      	mov	sp, r7
 8006828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682c:	58024400 	.word	0x58024400

08006830 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b090      	sub	sp, #64	@ 0x40
 8006834:	af00      	add	r7, sp, #0
 8006836:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800683a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006842:	430b      	orrs	r3, r1
 8006844:	f040 8094 	bne.w	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006848:	4b9e      	ldr	r3, [pc, #632]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	2b04      	cmp	r3, #4
 8006856:	f200 8087 	bhi.w	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006875 	.word	0x08006875
 8006864:	0800689d 	.word	0x0800689d
 8006868:	080068c5 	.word	0x080068c5
 800686c:	08006961 	.word	0x08006961
 8006870:	080068ed 	.word	0x080068ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006874:	4b93      	ldr	r3, [pc, #588]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006880:	d108      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006886:	4618      	mov	r0, r3
 8006888:	f001 f810 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006890:	f000 bd45 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006898:	f000 bd41 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800689c:	4b89      	ldr	r3, [pc, #548]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068a8:	d108      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068aa:	f107 0318 	add.w	r3, r7, #24
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fd54 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b8:	f000 bd31 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c0:	f000 bd2d 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068c4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d0:	d108      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fe94 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e0:	f000 bd1d 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e8:	f000 bd19 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068ec:	4b75      	ldr	r3, [pc, #468]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068f6:	4b73      	ldr	r3, [pc, #460]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d10c      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006908:	4b6e      	ldr	r3, [pc, #440]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	4a6d      	ldr	r2, [pc, #436]	@ (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800691a:	e01f      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800691c:	4b69      	ldr	r3, [pc, #420]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006928:	d106      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006930:	d102      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006932:	4b66      	ldr	r3, [pc, #408]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006936:	e011      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006938:	4b62      	ldr	r3, [pc, #392]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006944:	d106      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694c:	d102      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800694e:	4b60      	ldr	r3, [pc, #384]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006952:	e003      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006958:	f000 bce1 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800695c:	f000 bcdf 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006960:	4b5c      	ldr	r3, [pc, #368]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006964:	f000 bcdb 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696c:	f000 bcd7 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006974:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006978:	430b      	orrs	r3, r1
 800697a:	f040 80ad 	bne.w	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800697e:	4b51      	ldr	r3, [pc, #324]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006982:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006986:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698e:	d056      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006996:	f200 8090 	bhi.w	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2bc0      	cmp	r3, #192	@ 0xc0
 800699e:	f000 8088 	beq.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a6:	f200 8088 	bhi.w	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	2b80      	cmp	r3, #128	@ 0x80
 80069ae:	d032      	beq.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	2b80      	cmp	r3, #128	@ 0x80
 80069b4:	f200 8081 	bhi.w	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	2b40      	cmp	r3, #64	@ 0x40
 80069c2:	d014      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80069c4:	e079      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069c6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069d2:	d108      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 ff67 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e2:	f000 bc9c 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ea:	f000 bc98 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069ee:	4b35      	ldr	r3, [pc, #212]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069fa:	d108      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fc:	f107 0318 	add.w	r3, r7, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fcab 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a0a:	f000 bc88 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a12:	f000 bc84 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a16:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a22:	d108      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a24:	f107 030c 	add.w	r3, r7, #12
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 fdeb 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a32:	f000 bc74 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a3a:	f000 bc70 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a3e:	4b21      	ldr	r3, [pc, #132]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a48:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d10c      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	08db      	lsrs	r3, r3, #3
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	4a18      	ldr	r2, [pc, #96]	@ (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a6c:	e01f      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a82:	d102      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a84:	4b11      	ldr	r3, [pc, #68]	@ (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a88:	e011      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a96:	d106      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa4:	e003      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006aaa:	f000 bc38 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006aae:	f000 bc36 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ab2:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ab6:	f000 bc32 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006abe:	f000 bc2e 	b.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ac2:	bf00      	nop
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	03d09000 	.word	0x03d09000
 8006acc:	003d0900 	.word	0x003d0900
 8006ad0:	017d7840 	.word	0x017d7840
 8006ad4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006adc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	f040 809c 	bne.w	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006af6:	d054      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006afe:	f200 808b 	bhi.w	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b08:	f000 8083 	beq.w	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b12:	f200 8081 	bhi.w	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b1c:	d02f      	beq.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b24:	d878      	bhi.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b32:	d012      	beq.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b34:	e070      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b36:	4b8a      	ldr	r3, [pc, #552]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b42:	d107      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 feaf 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b52:	e3e4      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b58:	e3e1      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b5a:	4b81      	ldr	r3, [pc, #516]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b66:	d107      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b68:	f107 0318 	add.w	r3, r7, #24
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fbf5 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b76:	e3d2      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7c:	e3cf      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b7e:	4b78      	ldr	r3, [pc, #480]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fd37 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b9a:	e3c0      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba0:	e3bd      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bac:	4b6c      	ldr	r3, [pc, #432]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d10c      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bbe:	4b68      	ldr	r3, [pc, #416]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	08db      	lsrs	r3, r3, #3
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	4a66      	ldr	r2, [pc, #408]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bca:	fa22 f303 	lsr.w	r3, r2, r3
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd0:	e01e      	b.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bd2:	4b63      	ldr	r3, [pc, #396]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bde:	d106      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be6:	d102      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006be8:	4b5f      	ldr	r3, [pc, #380]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bec:	e010      	b.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bee:	4b5c      	ldr	r3, [pc, #368]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bfa:	d106      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c02:	d102      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c04:	4b59      	ldr	r3, [pc, #356]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c08:	e002      	b.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c0e:	e386      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c10:	e385      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c12:	4b57      	ldr	r3, [pc, #348]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c16:	e382      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1c:	e37f      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c22:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006c26:	430b      	orrs	r3, r1
 8006c28:	f040 80a7 	bne.w	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c30:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006c34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c3c:	d055      	beq.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c44:	f200 8096 	bhi.w	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c4e:	f000 8084 	beq.w	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c58:	f200 808c 	bhi.w	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c62:	d030      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c6a:	f200 8083 	bhi.w	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c7a:	d012      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c7c:	e07a      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c7e:	4b38      	ldr	r3, [pc, #224]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fe0b 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c9a:	e340      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca0:	e33d      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb0:	f107 0318 	add.w	r3, r7, #24
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fb51 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cbe:	e32e      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e32b      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc6:	4b26      	ldr	r3, [pc, #152]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fc93 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce2:	e31c      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	e319      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d10c      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d06:	4b16      	ldr	r3, [pc, #88]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	08db      	lsrs	r3, r3, #3
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	4a14      	ldr	r2, [pc, #80]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006d12:	fa22 f303 	lsr.w	r3, r2, r3
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	e01e      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1a:	4b11      	ldr	r3, [pc, #68]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d26:	d106      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d2e:	d102      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d30:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d34:	e010      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d36:	4b0a      	ldr	r3, [pc, #40]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d42:	d106      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d4c:	4b07      	ldr	r3, [pc, #28]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d50:	e002      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d56:	e2e2      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d58:	e2e1      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d5a:	4b05      	ldr	r3, [pc, #20]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5e:	e2de      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d60:	58024400 	.word	0x58024400
 8006d64:	03d09000 	.word	0x03d09000
 8006d68:	003d0900 	.word	0x003d0900
 8006d6c:	017d7840 	.word	0x017d7840
 8006d70:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d78:	e2d1      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006d82:	430b      	orrs	r3, r1
 8006d84:	f040 809c 	bne.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d88:	4b93      	ldr	r3, [pc, #588]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d98:	d054      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da0:	f200 808b 	bhi.w	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006daa:	f000 8083 	beq.w	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006db4:	f200 8081 	bhi.w	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dbe:	d02f      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc6:	d878      	bhi.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd4:	d012      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006dd6:	e070      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006de4:	d107      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fd5e 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df4:	e293      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfa:	e290      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dfc:	4b76      	ldr	r3, [pc, #472]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e08:	d107      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0a:	f107 0318 	add.w	r3, r7, #24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 faa4 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e18:	e281      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1e:	e27e      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e20:	4b6d      	ldr	r3, [pc, #436]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e2e:	f107 030c 	add.w	r3, r7, #12
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fbe6 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3c:	e26f      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e42:	e26c      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e44:	4b64      	ldr	r3, [pc, #400]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e4e:	4b62      	ldr	r3, [pc, #392]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b5d      	ldr	r3, [pc, #372]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a5c      	ldr	r2, [pc, #368]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e72:	e01e      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e74:	4b58      	ldr	r3, [pc, #352]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e80:	d106      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e88:	d102      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e8a:	4b55      	ldr	r3, [pc, #340]	@ (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8e:	e010      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e90:	4b51      	ldr	r3, [pc, #324]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e9c:	d106      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea4:	d102      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eaa:	e002      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006eb0:	e235      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eb2:	e234      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006eb4:	4b4c      	ldr	r3, [pc, #304]	@ (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb8:	e231      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebe:	e22e      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	f040 808f 	bne.w	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006ece:	4b42      	ldr	r3, [pc, #264]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ede:	d06b      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ee6:	d874      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eee:	d056      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ef6:	d86c      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006efe:	d03b      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f06:	d864      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0e:	d021      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f16:	d85c      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f24:	d004      	beq.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006f26:	e054      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006f28:	f7fe fa0c 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006f2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f2e:	e1f6      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f30:	4b29      	ldr	r3, [pc, #164]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f3c:	d107      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3e:	f107 0318 	add.w	r3, r7, #24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fa0a 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f4c:	e1e7      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f52:	e1e4      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f54:	4b20      	ldr	r3, [pc, #128]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f60:	d107      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fb4c 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f70:	e1d5      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f76:	e1d2      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f78:	4b17      	ldr	r3, [pc, #92]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d109      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b14      	ldr	r3, [pc, #80]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f96:	e1c2      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9c:	e1bf      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006faa:	d102      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb0:	e1b5      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fb6:	e1b2      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fb8:	4b07      	ldr	r3, [pc, #28]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc4:	d102      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006fc6:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fca:	e1a8      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd0:	e1a5      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd6:	e1a2      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	03d09000 	.word	0x03d09000
 8006fe0:	003d0900 	.word	0x003d0900
 8006fe4:	017d7840 	.word	0x017d7840
 8006fe8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	d173      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ff8:	4b9c      	ldr	r3, [pc, #624]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007000:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007008:	d02f      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007010:	d863      	bhi.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701e:	d012      	beq.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007020:	e05b      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007022:	4b92      	ldr	r3, [pc, #584]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800702a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800702e:	d107      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007030:	f107 0318 	add.w	r3, r7, #24
 8007034:	4618      	mov	r0, r3
 8007036:	f000 f991 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800703e:	e16e      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007044:	e16b      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007046:	4b89      	ldr	r3, [pc, #548]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007052:	d107      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fad3 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007062:	e15c      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007068:	e159      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800706a:	4b80      	ldr	r3, [pc, #512]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800706c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007074:	4b7d      	ldr	r3, [pc, #500]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b04      	cmp	r3, #4
 800707e:	d10c      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007086:	4b79      	ldr	r3, [pc, #484]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	f003 0303 	and.w	r3, r3, #3
 8007090:	4a77      	ldr	r2, [pc, #476]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007092:	fa22 f303 	lsr.w	r3, r2, r3
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	e01e      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800709a:	4b74      	ldr	r3, [pc, #464]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a6:	d106      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070ae:	d102      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070b0:	4b70      	ldr	r3, [pc, #448]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b4:	e010      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070b6:	4b6d      	ldr	r3, [pc, #436]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c2:	d106      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80070c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ca:	d102      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d0:	e002      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070d6:	e122      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070d8:	e121      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070de:	e11e      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80070e8:	430b      	orrs	r3, r1
 80070ea:	d133      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070ec:	4b5f      	ldr	r3, [pc, #380]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007102:	d012      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007104:	e023      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007106:	4b59      	ldr	r3, [pc, #356]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007112:	d107      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fbc7 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007122:	e0fc      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007128:	e0f9      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800712a:	4b50      	ldr	r3, [pc, #320]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007136:	d107      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007138:	f107 0318 	add.w	r3, r7, #24
 800713c:	4618      	mov	r0, r3
 800713e:	f000 f90d 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007146:	e0ea      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714c:	e0e7      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007152:	e0e4      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007158:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800715c:	430b      	orrs	r3, r1
 800715e:	f040 808d 	bne.w	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007162:	4b42      	ldr	r3, [pc, #264]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007166:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800716a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007172:	d06b      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800717a:	d874      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007182:	d056      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718a:	d86c      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007192:	d03b      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800719a:	d864      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a2:	d021      	beq.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071aa:	d85c      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b8:	d004      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80071ba:	e054      	b.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80071bc:	f000 f8b8 	bl	8007330 <HAL_RCCEx_GetD3PCLK1Freq>
 80071c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071c2:	e0ac      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071c4:	4b29      	ldr	r3, [pc, #164]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d0:	d107      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d2:	f107 0318 	add.w	r3, r7, #24
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f8c0 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e0:	e09d      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e6:	e09a      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071e8:	4b20      	ldr	r3, [pc, #128]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f4:	d107      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fa02 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007204:	e08b      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800720a:	e088      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800720c:	4b17      	ldr	r3, [pc, #92]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b04      	cmp	r3, #4
 8007216:	d109      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007218:	4b14      	ldr	r3, [pc, #80]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a13      	ldr	r2, [pc, #76]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800722a:	e078      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007230:	e075      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007232:	4b0e      	ldr	r3, [pc, #56]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800723e:	d102      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007240:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007244:	e06b      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724a:	e068      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800724c:	4b07      	ldr	r3, [pc, #28]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007258:	d102      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800725a:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725e:	e05e      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007264:	e05b      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800726a:	e058      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800726c:	58024400 	.word	0x58024400
 8007270:	03d09000 	.word	0x03d09000
 8007274:	003d0900 	.word	0x003d0900
 8007278:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800727c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007280:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007284:	430b      	orrs	r3, r1
 8007286:	d148      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007288:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800728a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007290:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007298:	d02a      	beq.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072a0:	d838      	bhi.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ae:	d00d      	beq.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80072b0:	e030      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072be:	d102      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80072c0:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c4:	e02b      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ca:	e028      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072cc:	4b16      	ldr	r3, [pc, #88]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072d8:	d107      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fae4 	bl	80078ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e8:	e019      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ee:	e016      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072fc:	d107      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072fe:	f107 0318 	add.w	r3, r7, #24
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f82a 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800730c:	e007      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007312:	e004      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007318:	e001      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800731e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007320:	4618      	mov	r0, r3
 8007322:	3740      	adds	r7, #64	@ 0x40
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	58024400 	.word	0x58024400
 800732c:	017d7840 	.word	0x017d7840

08007330 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007334:	f7fd ffd6 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	091b      	lsrs	r3, r3, #4
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4904      	ldr	r1, [pc, #16]	@ (8007358 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	58024400 	.word	0x58024400
 8007358:	0800e994 	.word	0x0800e994

0800735c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800735c:	b480      	push	{r7}
 800735e:	b089      	sub	sp, #36	@ 0x24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007364:	4ba1      	ldr	r3, [pc, #644]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800736e:	4b9f      	ldr	r3, [pc, #636]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	0b1b      	lsrs	r3, r3, #12
 8007374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007378:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800737a:	4b9c      	ldr	r3, [pc, #624]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007386:	4b99      	ldr	r3, [pc, #612]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800738a:	08db      	lsrs	r3, r3, #3
 800738c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	fb02 f303 	mul.w	r3, r2, r3
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8111 	beq.w	80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	f000 8083 	beq.w	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	f200 80a1 	bhi.w	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d056      	beq.n	8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073c6:	e099      	b.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c8:	4b88      	ldr	r3, [pc, #544]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d02d      	beq.n	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d4:	4b85      	ldr	r3, [pc, #532]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	08db      	lsrs	r3, r3, #3
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	4a84      	ldr	r2, [pc, #528]	@ (80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b7b      	ldr	r3, [pc, #492]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800742e:	e087      	b.n	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800743e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007442:	4b6a      	ldr	r3, [pc, #424]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	ed97 6a03 	vldr	s12, [r7, #12]
 8007456:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800745a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007472:	e065      	b.n	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b59      	ldr	r3, [pc, #356]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b6:	e043      	b.n	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b48      	ldr	r3, [pc, #288]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fa:	e021      	b.n	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b37      	ldr	r3, [pc, #220]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007540:	4b2a      	ldr	r3, [pc, #168]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007544:	0a5b      	lsrs	r3, r3, #9
 8007546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755a:	edd7 6a07 	vldr	s13, [r7, #28]
 800755e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007566:	ee17 2a90 	vmov	r2, s15
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800756e:	4b1f      	ldr	r3, [pc, #124]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007588:	edd7 6a07 	vldr	s13, [r7, #28]
 800758c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007594:	ee17 2a90 	vmov	r2, s15
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800759c:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c2:	ee17 2a90 	vmov	r2, s15
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075ca:	e008      	b.n	80075de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	609a      	str	r2, [r3, #8]
}
 80075de:	bf00      	nop
 80075e0:	3724      	adds	r7, #36	@ 0x24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400
 80075f0:	03d09000 	.word	0x03d09000
 80075f4:	46000000 	.word	0x46000000
 80075f8:	4c742400 	.word	0x4c742400
 80075fc:	4a742400 	.word	0x4a742400
 8007600:	4bbebc20 	.word	0x4bbebc20

08007604 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	@ 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800760c:	4ba1      	ldr	r3, [pc, #644]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007616:	4b9f      	ldr	r3, [pc, #636]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	0d1b      	lsrs	r3, r3, #20
 800761c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007620:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007622:	4b9c      	ldr	r3, [pc, #624]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800762e:	4b99      	ldr	r3, [pc, #612]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007632:	08db      	lsrs	r3, r3, #3
 8007634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	fb02 f303 	mul.w	r3, r2, r3
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8111 	beq.w	8007874 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b02      	cmp	r3, #2
 8007656:	f000 8083 	beq.w	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b02      	cmp	r3, #2
 800765e:	f200 80a1 	bhi.w	80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d056      	beq.n	800771c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800766e:	e099      	b.n	80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007670:	4b88      	ldr	r3, [pc, #544]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d02d      	beq.n	80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800767c:	4b85      	ldr	r3, [pc, #532]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	08db      	lsrs	r3, r3, #3
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	4a84      	ldr	r2, [pc, #528]	@ (8007898 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007688:	fa22 f303 	lsr.w	r3, r2, r3
 800768c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800789c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076d6:	e087      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800789c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771a:	e065      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b59      	ldr	r3, [pc, #356]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800789c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800775e:	e043      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b48      	ldr	r3, [pc, #288]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a03 	vldr	s12, [r7, #12]
 8007786:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800789c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a2:	e021      	b.n	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b37      	ldr	r3, [pc, #220]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800789c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ec:	0a5b      	lsrs	r3, r3, #9
 80077ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007802:	edd7 6a07 	vldr	s13, [r7, #28]
 8007806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800780a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780e:	ee17 2a90 	vmov	r2, s15
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007816:	4b1f      	ldr	r3, [pc, #124]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	0c1b      	lsrs	r3, r3, #16
 800781c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800782c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007830:	edd7 6a07 	vldr	s13, [r7, #28]
 8007834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783c:	ee17 2a90 	vmov	r2, s15
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007844:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007848:	0e1b      	lsrs	r3, r3, #24
 800784a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800785a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800785e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800786a:	ee17 2a90 	vmov	r2, s15
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007872:	e008      	b.n	8007886 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	609a      	str	r2, [r3, #8]
}
 8007886:	bf00      	nop
 8007888:	3724      	adds	r7, #36	@ 0x24
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	58024400 	.word	0x58024400
 8007898:	03d09000 	.word	0x03d09000
 800789c:	46000000 	.word	0x46000000
 80078a0:	4c742400 	.word	0x4c742400
 80078a4:	4a742400 	.word	0x4a742400
 80078a8:	4bbebc20 	.word	0x4bbebc20

080078ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b089      	sub	sp, #36	@ 0x24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078b4:	4ba0      	ldr	r3, [pc, #640]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80078be:	4b9e      	ldr	r3, [pc, #632]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078ca:	4b9b      	ldr	r3, [pc, #620]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078d4:	4b98      	ldr	r3, [pc, #608]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d8:	08db      	lsrs	r3, r3, #3
 80078da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 8111 	beq.w	8007b1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	f000 8083 	beq.w	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b02      	cmp	r3, #2
 8007904:	f200 80a1 	bhi.w	8007a4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d056      	beq.n	80079c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007914:	e099      	b.n	8007a4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007916:	4b88      	ldr	r3, [pc, #544]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d02d      	beq.n	800797e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007922:	4b85      	ldr	r3, [pc, #532]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	08db      	lsrs	r3, r3, #3
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	4a83      	ldr	r2, [pc, #524]	@ (8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800792e:	fa22 f303 	lsr.w	r3, r2, r3
 8007932:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	ee07 3a90 	vmov	s15, r3
 8007944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794c:	4b7a      	ldr	r3, [pc, #488]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800794e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007960:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007978:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800797c:	e087      	b.n	8007a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007988:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800798c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007990:	4b69      	ldr	r3, [pc, #420]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c0:	e065      	b.n	8007a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079cc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007b48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80079d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d4:	4b58      	ldr	r3, [pc, #352]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a04:	e043      	b.n	8007a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a10:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a18:	4b47      	ldr	r3, [pc, #284]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a48:	e021      	b.n	8007a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a54:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007b44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5c:	4b36      	ldr	r3, [pc, #216]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a92:	0a5b      	lsrs	r3, r3, #9
 8007a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab4:	ee17 2a90 	vmov	r2, s15
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007abc:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae2:	ee17 2a90 	vmov	r2, s15
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007aea:	4b13      	ldr	r3, [pc, #76]	@ (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aee:	0e1b      	lsrs	r3, r3, #24
 8007af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b10:	ee17 2a90 	vmov	r2, s15
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b18:	e008      	b.n	8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	609a      	str	r2, [r3, #8]
}
 8007b2c:	bf00      	nop
 8007b2e:	3724      	adds	r7, #36	@ 0x24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	03d09000 	.word	0x03d09000
 8007b40:	46000000 	.word	0x46000000
 8007b44:	4c742400 	.word	0x4c742400
 8007b48:	4a742400 	.word	0x4a742400
 8007b4c:	4bbebc20 	.word	0x4bbebc20

08007b50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b5e:	4b53      	ldr	r3, [pc, #332]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d101      	bne.n	8007b6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e099      	b.n	8007ca2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a4e      	ldr	r2, [pc, #312]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007b74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7a:	f7fa f8f5 	bl	8001d68 <HAL_GetTick>
 8007b7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b80:	e008      	b.n	8007b94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b82:	f7fa f8f1 	bl	8001d68 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d901      	bls.n	8007b94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e086      	b.n	8007ca2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b94:	4b45      	ldr	r3, [pc, #276]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f0      	bne.n	8007b82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ba0:	4b42      	ldr	r3, [pc, #264]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	031b      	lsls	r3, r3, #12
 8007bae:	493f      	ldr	r1, [pc, #252]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	025b      	lsls	r3, r3, #9
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	061b      	lsls	r3, r3, #24
 8007be0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007be4:	4931      	ldr	r1, [pc, #196]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bea:	4b30      	ldr	r3, [pc, #192]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	492d      	ldr	r1, [pc, #180]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	f023 0220 	bic.w	r2, r3, #32
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	4928      	ldr	r1, [pc, #160]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c0e:	4b27      	ldr	r3, [pc, #156]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	4a26      	ldr	r2, [pc, #152]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c14:	f023 0310 	bic.w	r3, r3, #16
 8007c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c1a:	4b24      	ldr	r3, [pc, #144]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c1e:	4b24      	ldr	r3, [pc, #144]	@ (8007cb0 <RCCEx_PLL2_Config+0x160>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	69d2      	ldr	r2, [r2, #28]
 8007c26:	00d2      	lsls	r2, r2, #3
 8007c28:	4920      	ldr	r1, [pc, #128]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	4a1e      	ldr	r2, [pc, #120]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c34:	f043 0310 	orr.w	r3, r3, #16
 8007c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c40:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	4a19      	ldr	r2, [pc, #100]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c4c:	e00f      	b.n	8007c6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d106      	bne.n	8007c62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c54:	4b15      	ldr	r3, [pc, #84]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a14      	ldr	r2, [pc, #80]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c60:	e005      	b.n	8007c6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	4a11      	ldr	r2, [pc, #68]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a0e      	ldr	r2, [pc, #56]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7a:	f7fa f875 	bl	8001d68 <HAL_GetTick>
 8007c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c80:	e008      	b.n	8007c94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c82:	f7fa f871 	bl	8001d68 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e006      	b.n	8007ca2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <RCCEx_PLL2_Config+0x15c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	ffff0007 	.word	0xffff0007

08007cb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cc2:	4b53      	ldr	r3, [pc, #332]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d101      	bne.n	8007cd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e099      	b.n	8007e06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cde:	f7fa f843 	bl	8001d68 <HAL_GetTick>
 8007ce2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ce4:	e008      	b.n	8007cf8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ce6:	f7fa f83f 	bl	8001d68 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e086      	b.n	8007e06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cf8:	4b45      	ldr	r3, [pc, #276]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1f0      	bne.n	8007ce6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d04:	4b42      	ldr	r3, [pc, #264]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	051b      	lsls	r3, r3, #20
 8007d12:	493f      	ldr	r1, [pc, #252]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	025b      	lsls	r3, r3, #9
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	041b      	lsls	r3, r3, #16
 8007d36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	061b      	lsls	r3, r3, #24
 8007d44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d48:	4931      	ldr	r1, [pc, #196]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d4e:	4b30      	ldr	r3, [pc, #192]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	492d      	ldr	r1, [pc, #180]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d60:	4b2b      	ldr	r3, [pc, #172]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	4928      	ldr	r1, [pc, #160]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d72:	4b27      	ldr	r3, [pc, #156]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	4a26      	ldr	r2, [pc, #152]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d7e:	4b24      	ldr	r3, [pc, #144]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d82:	4b24      	ldr	r3, [pc, #144]	@ (8007e14 <RCCEx_PLL3_Config+0x160>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	69d2      	ldr	r2, [r2, #28]
 8007d8a:	00d2      	lsls	r2, r2, #3
 8007d8c:	4920      	ldr	r1, [pc, #128]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d92:	4b1f      	ldr	r3, [pc, #124]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d96:	4a1e      	ldr	r2, [pc, #120]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007da4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da8:	4a19      	ldr	r2, [pc, #100]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007daa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007db0:	e00f      	b.n	8007dd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d106      	bne.n	8007dc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007db8:	4b15      	ldr	r3, [pc, #84]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	4a14      	ldr	r2, [pc, #80]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dc4:	e005      	b.n	8007dd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dc6:	4b12      	ldr	r3, [pc, #72]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	4a11      	ldr	r2, [pc, #68]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dde:	f7f9 ffc3 	bl	8001d68 <HAL_GetTick>
 8007de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de4:	e008      	b.n	8007df8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007de6:	f7f9 ffbf 	bl	8001d68 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e006      	b.n	8007e06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007df8:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <RCCEx_PLL3_Config+0x15c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0f0      	beq.n	8007de6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	58024400 	.word	0x58024400
 8007e14:	ffff0007 	.word	0xffff0007

08007e18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e075      	b.n	8007f16 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7f9 fd0f 	bl	8001860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2204      	movs	r2, #4
 8007e46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f868 	bl	8007f20 <HAL_SD_InitCard>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e05d      	b.n	8007f16 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007e5a:	f107 0308 	add.w	r3, r7, #8
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fdaf 	bl	80089c4 <HAL_SD_GetCardStatus>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e052      	b.n	8007f16 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007e70:	7e3b      	ldrb	r3, [r7, #24]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007e76:	7e7b      	ldrb	r3, [r7, #25]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d10a      	bne.n	8007e9a <HAL_SD_Init+0x82>
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <HAL_SD_Init+0x78>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e96:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e98:	e00b      	b.n	8007eb2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d104      	bne.n	8007eac <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ea8:	659a      	str	r2, [r3, #88]	@ 0x58
 8007eaa:	e002      	b.n	8007eb2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fe6d 	bl	8008b98 <HAL_SD_ConfigWideBusOperation>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e026      	b.n	8007f16 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007ec8:	f7f9 ff4e 	bl	8001d68 <HAL_GetTick>
 8007ecc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007ece:	e011      	b.n	8007ef4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ed0:	f7f9 ff4a 	bl	8001d68 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d109      	bne.n	8007ef4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ee6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e010      	b.n	8007f16 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 ff61 	bl	8008dbc <HAL_SD_GetCardState>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d1e7      	bne.n	8007ed0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3728      	adds	r7, #40	@ 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b08d      	sub	sp, #52	@ 0x34
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007f38:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007f3c:	f04f 0100 	mov.w	r1, #0
 8007f40:	f7fe fc76 	bl	8006830 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f44:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f5a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e070      	b.n	8008042 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	4a39      	ldr	r2, [pc, #228]	@ (800804c <HAL_SD_InitCard+0x12c>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681c      	ldr	r4, [r3, #0]
 8007f72:	466a      	mov	r2, sp
 8007f74:	f107 0318 	add.w	r3, r7, #24
 8007f78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007f7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007f80:	f107 030c 	add.w	r3, r7, #12
 8007f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f86:	4620      	mov	r0, r4
 8007f88:	f003 f882 	bl	800b090 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f003 f8c5 	bl	800b120 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007fae:	4a28      	ldr	r2, [pc, #160]	@ (8008050 <HAL_SD_InitCard+0x130>)
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7f9 fee1 	bl	8001d80 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 ffea 	bl	8008f98 <SD_PowerON>
 8007fc4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e02e      	b.n	8008042 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 ff09 	bl	8008dfc <SD_InitCard>
 8007fea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e01b      	b.n	8008042 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008012:	4618      	mov	r0, r3
 8008014:	f003 f91a 	bl	800b24c <SDMMC_CmdBlockLength>
 8008018:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00f      	beq.n	8008040 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a0b      	ldr	r2, [pc, #44]	@ (8008054 <HAL_SD_InitCard+0x134>)
 8008026:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	372c      	adds	r7, #44	@ 0x2c
 8008046:	46bd      	mov	sp, r7
 8008048:	bd90      	pop	{r4, r7, pc}
 800804a:	bf00      	nop
 800804c:	014f8b59 	.word	0x014f8b59
 8008050:	00012110 	.word	0x00012110
 8008054:	1fe00fff 	.word	0x1fe00fff

08008058 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08c      	sub	sp, #48	@ 0x30
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008074:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e08d      	b.n	800819c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b01      	cmp	r3, #1
 800808a:	f040 8086 	bne.w	800819a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	441a      	add	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809e:	429a      	cmp	r2, r3
 80080a0:	d907      	bls.n	80080b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e074      	b.n	800819c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2200      	movs	r2, #0
 80080c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	025a      	lsls	r2, r3, #9
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d002      	beq.n	80080de <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	025b      	lsls	r3, r3, #9
 80080dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080de:	f04f 33ff 	mov.w	r3, #4294967295
 80080e2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	025b      	lsls	r3, r3, #9
 80080e8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080ea:	2390      	movs	r3, #144	@ 0x90
 80080ec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080ee:	2302      	movs	r3, #2
 80080f0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f107 0210 	add.w	r2, r7, #16
 8008102:	4611      	mov	r1, r2
 8008104:	4618      	mov	r0, r3
 8008106:	f003 f875 	bl	800b1f4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008118:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2201      	movs	r2, #1
 8008128:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d90a      	bls.n	8008146 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2282      	movs	r2, #130	@ 0x82
 8008134:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800813c:	4618      	mov	r0, r3
 800813e:	f003 f8cb 	bl	800b2d8 <SDMMC_CmdReadMultiBlock>
 8008142:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008144:	e009      	b.n	800815a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2281      	movs	r2, #129	@ 0x81
 800814a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008152:	4618      	mov	r0, r3
 8008154:	f003 f89d 	bl	800b292 <SDMMC_CmdReadSingleBlock>
 8008158:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d012      	beq.n	8008186 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a0f      	ldr	r2, [pc, #60]	@ (80081a4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008166:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800816c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816e:	431a      	orrs	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e00a      	b.n	800819c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008194:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e000      	b.n	800819c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800819a:	2302      	movs	r3, #2
  }
}
 800819c:	4618      	mov	r0, r3
 800819e:	3730      	adds	r7, #48	@ 0x30
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	1fe00fff 	.word	0x1fe00fff

080081a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08c      	sub	sp, #48	@ 0x30
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d107      	bne.n	80081d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e08d      	b.n	80082ec <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	f040 8086 	bne.w	80082ea <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	441a      	add	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d907      	bls.n	8008202 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e074      	b.n	80082ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2203      	movs	r2, #3
 8008206:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	025a      	lsls	r2, r3, #9
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	2b01      	cmp	r3, #1
 8008226:	d002      	beq.n	800822e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822a:	025b      	lsls	r3, r3, #9
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295
 8008232:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	025b      	lsls	r3, r3, #9
 8008238:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800823a:	2390      	movs	r3, #144	@ 0x90
 800823c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800823e:	2300      	movs	r3, #0
 8008240:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008242:	2300      	movs	r3, #0
 8008244:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f107 0210 	add.w	r2, r7, #16
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f002 ffcd 	bl	800b1f4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008268:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d90a      	bls.n	8008296 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	22a0      	movs	r2, #160	@ 0xa0
 8008284:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800828c:	4618      	mov	r0, r3
 800828e:	f003 f869 	bl	800b364 <SDMMC_CmdWriteMultiBlock>
 8008292:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008294:	e009      	b.n	80082aa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2290      	movs	r2, #144	@ 0x90
 800829a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082a2:	4618      	mov	r0, r3
 80082a4:	f003 f83b 	bl	800b31e <SDMMC_CmdWriteSingleBlock>
 80082a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80082aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d012      	beq.n	80082d6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0f      	ldr	r2, [pc, #60]	@ (80082f4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80082b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082be:	431a      	orrs	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e00a      	b.n	80082ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 80082e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	e000      	b.n	80082ec <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80082ea:	2302      	movs	r3, #2
  }
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3730      	adds	r7, #48	@ 0x30
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	1fe00fff 	.word	0x1fe00fff

080082f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_SD_IRQHandler+0x2e>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f926 	bl	8009570 <SD_Read_IT>
 8008324:	e19a      	b.n	800865c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80ac 	beq.w	800848e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800833e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b59      	ldr	r3, [pc, #356]	@ (80084b0 <HAL_SD_IRQHandler+0x1b8>)
 800834c:	400b      	ands	r3, r1
 800834e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800835e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800836e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d038      	beq.n	80083ec <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d104      	bne.n	800838e <HAL_SD_IRQHandler+0x96>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d011      	beq.n	80083b2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f003 f80a 	bl	800b3ac <SDMMC_CmdStopTransfer>
 8008398:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f95b 	bl	8008668 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a3f      	ldr	r2, [pc, #252]	@ (80084b4 <HAL_SD_IRQHandler+0x1bc>)
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <HAL_SD_IRQHandler+0xe4>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f003 fcbd 	bl	800bd5c <HAL_SD_RxCpltCallback>
 80083e2:	e13b      	b.n	800865c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f003 fcaf 	bl	800bd48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80083ea:	e137      	b.n	800865c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8132 	beq.w	800865c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2200      	movs	r2, #0
 800840e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d104      	bne.n	8008424 <HAL_SD_IRQHandler+0x12c>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d011      	beq.n	8008448 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f002 ffbf 	bl	800b3ac <SDMMC_CmdStopTransfer>
 800842e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f910 	bl	8008668 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <HAL_SD_IRQHandler+0x172>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f003 fc6c 	bl	800bd48 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <HAL_SD_IRQHandler+0x18e>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 80eb 	beq.w	800865c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f003 fc68 	bl	800bd5c <HAL_SD_RxCpltCallback>
}
 800848c:	e0e6      	b.n	800865c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00d      	beq.n	80084b8 <HAL_SD_IRQHandler+0x1c0>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 f8a8 	bl	80095fc <SD_Write_IT>
 80084ac:	e0d6      	b.n	800865c <HAL_SD_IRQHandler+0x364>
 80084ae:	bf00      	nop
 80084b0:	ffff3ec5 	.word	0xffff3ec5
 80084b4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084be:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 809d 	beq.w	8008602 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084da:	f043 0202 	orr.w	r2, r3, #2
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f4:	f043 0208 	orr.w	r2, r3, #8
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008502:	f003 0320 	and.w	r3, r3, #32
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800850e:	f043 0220 	orr.w	r2, r3, #32
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008528:	f043 0210 	orr.w	r2, r3, #16
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a4b      	ldr	r2, [pc, #300]	@ (8008664 <HAL_SD_IRQHandler+0x36c>)
 8008536:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008546:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008556:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008576:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f002 ff15 	bl	800b3ac <SDMMC_CmdStopTransfer>
 8008582:	4602      	mov	r2, r0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800859c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085a6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f851 	bl	8008668 <HAL_SD_ErrorCallback>
}
 80085c6:	e049      	b.n	800865c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d044      	beq.n	800865c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d040      	beq.n	800865c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80085e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f834 	bl	8008668 <HAL_SD_ErrorCallback>
}
 8008600:	e02c      	b.n	800865c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d025      	beq.n	800865c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008618:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10c      	bne.n	8008642 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f001 f84a 	bl	80096cc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008638:	e010      	b.n	800865c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 f832 	bl	80096a4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008640:	e00c      	b.n	800865c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f833 	bl	80096b8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008652:	e003      	b.n	800865c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f81b 	bl	8009690 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800865a:	e7ff      	b.n	800865c <HAL_SD_IRQHandler+0x364>
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	18000f3a 	.word	0x18000f3a

08008668 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800868a:	0f9b      	lsrs	r3, r3, #30
 800868c:	b2da      	uxtb	r2, r3
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008696:	0e9b      	lsrs	r3, r3, #26
 8008698:	b2db      	uxtb	r3, r3
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086a8:	0e1b      	lsrs	r3, r3, #24
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086dc:	0d1b      	lsrs	r3, r3, #20
 80086de:	b29a      	uxth	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e8:	0c1b      	lsrs	r3, r3, #16
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f003 030f 	and.w	r3, r3, #15
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086fa:	0bdb      	lsrs	r3, r3, #15
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800870c:	0b9b      	lsrs	r3, r3, #14
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800871e:	0b5b      	lsrs	r3, r3, #13
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008730:	0b1b      	lsrs	r3, r3, #12
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	2b00      	cmp	r3, #0
 800874a:	d163      	bne.n	8008814 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008750:	009a      	lsls	r2, r3, #2
 8008752:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008756:	4013      	ands	r3, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800875c:	0f92      	lsrs	r2, r2, #30
 800875e:	431a      	orrs	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008768:	0edb      	lsrs	r3, r3, #27
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877a:	0e1b      	lsrs	r3, r3, #24
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	b2da      	uxtb	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800878c:	0d5b      	lsrs	r3, r3, #21
 800878e:	b2db      	uxtb	r3, r3
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	b2da      	uxtb	r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800879e:	0c9b      	lsrs	r3, r3, #18
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b0:	0bdb      	lsrs	r3, r3, #15
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	7e1b      	ldrb	r3, [r3, #24]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	3302      	adds	r3, #2
 80087d4:	2201      	movs	r2, #1
 80087d6:	fa02 f303 	lsl.w	r3, r2, r3
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80087de:	fb03 f202 	mul.w	r2, r3, r2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	7a1b      	ldrb	r3, [r3, #8]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	2201      	movs	r2, #1
 80087f2:	409a      	lsls	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008800:	0a52      	lsrs	r2, r2, #9
 8008802:	fb03 f202 	mul.w	r2, r3, r2
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008810:	655a      	str	r2, [r3, #84]	@ 0x54
 8008812:	e031      	b.n	8008878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008818:	2b01      	cmp	r3, #1
 800881a:	d11d      	bne.n	8008858 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800882a:	0c1b      	lsrs	r3, r3, #16
 800882c:	431a      	orrs	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	3301      	adds	r3, #1
 8008838:	029a      	lsls	r2, r3, #10
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800884c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	655a      	str	r2, [r3, #84]	@ 0x54
 8008856:	e00f      	b.n	8008878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a58      	ldr	r2, [pc, #352]	@ (80089c0 <HAL_SD_GetCardCSD+0x344>)
 800885e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e09d      	b.n	80089b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800887c:	0b9b      	lsrs	r3, r3, #14
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800888e:	09db      	lsrs	r3, r3, #7
 8008890:	b2db      	uxtb	r3, r3
 8008892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008896:	b2da      	uxtb	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088b0:	0fdb      	lsrs	r3, r3, #31
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088bc:	0f5b      	lsrs	r3, r3, #29
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088ce:	0e9b      	lsrs	r3, r3, #26
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088e0:	0d9b      	lsrs	r3, r3, #22
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088f2:	0d5b      	lsrs	r3, r3, #21
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	b2da      	uxtb	r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008922:	0bdb      	lsrs	r3, r3, #15
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	b2da      	uxtb	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008936:	0b9b      	lsrs	r3, r3, #14
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800894a:	0b5b      	lsrs	r3, r3, #13
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800895e:	0b1b      	lsrs	r3, r3, #12
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008972:	0a9b      	lsrs	r3, r3, #10
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	b2da      	uxtb	r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	b2da      	uxtb	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	1fe00fff 	.word	0x1fe00fff

080089c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b094      	sub	sp, #80	@ 0x50
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d101      	bne.n	80089e4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e0a7      	b.n	8008b34 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fb62 	bl	80090b4 <SD_SendSDStatus>
 80089f0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80089f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d011      	beq.n	8008a1c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a4f      	ldr	r2, [pc, #316]	@ (8008b3c <HAL_SD_GetCardStatus+0x178>)
 80089fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008a1a:	e070      	b.n	8008afe <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	099b      	lsrs	r3, r3, #6
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	0e1b      	lsrs	r3, r3, #24
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	061a      	lsls	r2, r3, #24
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a62:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a6c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	0e1b      	lsrs	r3, r3, #24
 8008a72:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	0a1b      	lsrs	r3, r3, #8
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	0d1b      	lsrs	r3, r3, #20
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 030f 	and.w	r3, r3, #15
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	0c1b      	lsrs	r3, r3, #16
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	0a9b      	lsrs	r3, r3, #10
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	0a1b      	lsrs	r3, r3, #8
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	0e1b      	lsrs	r3, r3, #24
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b06:	4618      	mov	r0, r3
 8008b08:	f002 fba0 	bl	800b24c <SDMMC_CmdBlockLength>
 8008b0c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00d      	beq.n	8008b30 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <HAL_SD_GetCardStatus+0x178>)
 8008b1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b20:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008b30:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3750      	adds	r7, #80	@ 0x50
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	1fe00fff 	.word	0x1fe00fff

08008b40 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b98:	b590      	push	{r4, r7, lr}
 8008b9a:	b08d      	sub	sp, #52	@ 0x34
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2203      	movs	r2, #3
 8008bac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d02e      	beq.n	8008c16 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bbe:	d106      	bne.n	8008bce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	635a      	str	r2, [r3, #52]	@ 0x34
 8008bcc:	e029      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd4:	d10a      	bne.n	8008bec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fb64 	bl	80092a4 <SD_WideBus_Enable>
 8008bdc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8008bea:	e01a      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fba1 	bl	800933a <SD_WideBus_Disable>
 8008bf8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	635a      	str	r2, [r3, #52]	@ 0x34
 8008c06:	e00c      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	635a      	str	r2, [r3, #52]	@ 0x34
 8008c14:	e005      	b.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8008dac <HAL_SD_ConfigWideBusOperation+0x214>)
 8008c30:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c38:	e096      	b.n	8008d68 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c3a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008c3e:	f04f 0100 	mov.w	r1, #0
 8008c42:	f7fd fdf5 	bl	8006830 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c46:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8083 	beq.w	8008d56 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695a      	ldr	r2, [r3, #20]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4950      	ldr	r1, [pc, #320]	@ (8008db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008c6e:	fba1 1303 	umull	r1, r3, r1, r3
 8008c72:	0e1b      	lsrs	r3, r3, #24
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d303      	bcc.n	8008c80 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	e05a      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c88:	d103      	bne.n	8008c92 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	61bb      	str	r3, [r7, #24]
 8008c90:	e051      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c9a:	d126      	bne.n	8008cea <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10e      	bne.n	8008cc2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	4a43      	ldr	r2, [pc, #268]	@ (8008db4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d906      	bls.n	8008cba <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4a40      	ldr	r2, [pc, #256]	@ (8008db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb4:	0e5b      	lsrs	r3, r3, #25
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	e03d      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	e039      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cce:	4a39      	ldr	r2, [pc, #228]	@ (8008db4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d906      	bls.n	8008ce2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4a36      	ldr	r2, [pc, #216]	@ (8008db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	0e5b      	lsrs	r3, r3, #25
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	e029      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	61bb      	str	r3, [r7, #24]
 8008ce8:	e025      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10e      	bne.n	8008d10 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4a30      	ldr	r2, [pc, #192]	@ (8008db8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d906      	bls.n	8008d08 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8008db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008d02:	0e1b      	lsrs	r3, r3, #24
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e016      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	e012      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	4a26      	ldr	r2, [pc, #152]	@ (8008db8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d906      	bls.n	8008d30 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	4a22      	ldr	r2, [pc, #136]	@ (8008db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d26:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2a:	0e1b      	lsrs	r3, r3, #24
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e002      	b.n	8008d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681c      	ldr	r4, [r3, #0]
 8008d3a:	466a      	mov	r2, sp
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d44:	e882 0003 	stmia.w	r2, {r0, r1}
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f002 f99e 	bl	800b090 <SDMMC_Init>
 8008d54:	e008      	b.n	8008d68 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d70:	4618      	mov	r0, r3
 8008d72:	f002 fa6b 	bl	800b24c <SDMMC_CmdBlockLength>
 8008d76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00c      	beq.n	8008d98 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a0a      	ldr	r2, [pc, #40]	@ (8008dac <HAL_SD_ConfigWideBusOperation+0x214>)
 8008d84:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	372c      	adds	r7, #44	@ 0x2c
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd90      	pop	{r4, r7, pc}
 8008dac:	1fe00fff 	.word	0x1fe00fff
 8008db0:	55e63b89 	.word	0x55e63b89
 8008db4:	02faf080 	.word	0x02faf080
 8008db8:	017d7840 	.word	0x017d7840

08008dbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008dc8:	f107 030c 	add.w	r3, r7, #12
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa40 	bl	8009254 <SD_SendStatus>
 8008dd4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	0a5b      	lsrs	r3, r3, #9
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008df2:	693b      	ldr	r3, [r7, #16]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b090      	sub	sp, #64	@ 0x40
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008e08:	f7f8 ffae 	bl	8001d68 <HAL_GetTick>
 8008e0c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f002 f995 	bl	800b142 <SDMMC_GetPowerState>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008e22:	e0b5      	b.n	8008f90 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d02e      	beq.n	8008e8a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 fbe0 	bl	800b5f6 <SDMMC_CmdSendCID>
 8008e36:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <SD_InitCard+0x46>
    {
      return errorstate;
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	e0a6      	b.n	8008f90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f002 f9c0 	bl	800b1ce <SDMMC_GetResponse>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2104      	movs	r1, #4
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 f9b7 	bl	800b1ce <SDMMC_GetResponse>
 8008e60:	4602      	mov	r2, r0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2108      	movs	r1, #8
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f002 f9ae 	bl	800b1ce <SDMMC_GetResponse>
 8008e72:	4602      	mov	r2, r0
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	210c      	movs	r1, #12
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f9a5 	bl	800b1ce <SDMMC_GetResponse>
 8008e84:	4602      	mov	r2, r0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d01d      	beq.n	8008ece <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008e92:	e019      	b.n	8008ec8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f107 020a 	add.w	r2, r7, #10
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f002 fbe8 	bl	800b674 <SDMMC_CmdSetRelAdd>
 8008ea4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	e06f      	b.n	8008f90 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008eb0:	f7f8 ff5a 	bl	8001d68 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d902      	bls.n	8008ec8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008ec2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ec6:	e063      	b.n	8008f90 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008ec8:	897b      	ldrh	r3, [r7, #10]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0e2      	beq.n	8008e94 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d036      	beq.n	8008f44 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ed6:	897b      	ldrh	r3, [r7, #10]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee6:	041b      	lsls	r3, r3, #16
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f002 fba2 	bl	800b634 <SDMMC_CmdSendCSD>
 8008ef0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <SD_InitCard+0x100>
    {
      return errorstate;
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efa:	e049      	b.n	8008f90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2100      	movs	r1, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f002 f963 	bl	800b1ce <SDMMC_GetResponse>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2104      	movs	r1, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f002 f95a 	bl	800b1ce <SDMMC_GetResponse>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2108      	movs	r1, #8
 8008f26:	4618      	mov	r0, r3
 8008f28:	f002 f951 	bl	800b1ce <SDMMC_GetResponse>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	210c      	movs	r1, #12
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f002 f948 	bl	800b1ce <SDMMC_GetResponse>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2104      	movs	r1, #4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f002 f93f 	bl	800b1ce <SDMMC_GetResponse>
 8008f50:	4603      	mov	r3, r0
 8008f52:	0d1a      	lsrs	r2, r3, #20
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7ff fb8c 	bl	800867c <HAL_SD_GetCardCSD>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008f6e:	e00f      	b.n	8008f90 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f78:	041b      	lsls	r3, r3, #16
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f002 fa51 	bl	800b424 <SDMMC_CmdSelDesel>
 8008f82:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <SD_InitCard+0x192>
  {
    return errorstate;
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	e000      	b.n	8008f90 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3740      	adds	r7, #64	@ 0x40
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f002 fa5a 	bl	800b46a <SDMMC_CmdGoIdleState>
 8008fb6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	e072      	b.n	80090a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f002 fa6d 	bl	800b4a6 <SDMMC_CmdOperCond>
 8008fcc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fd4:	d10d      	bne.n	8008ff2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f002 fa42 	bl	800b46a <SDMMC_CmdGoIdleState>
 8008fe6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <SD_PowerON+0x60>
    {
      return errorstate;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	e05a      	b.n	80090a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d137      	bne.n	8009070 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f002 fa6d 	bl	800b4e6 <SDMMC_CmdAppCommand>
 800900c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d02d      	beq.n	8009070 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009014:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009018:	e046      	b.n	80090a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f002 fa60 	bl	800b4e6 <SDMMC_CmdAppCommand>
 8009026:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <SD_PowerON+0x9a>
    {
      return errorstate;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	e03a      	b.n	80090a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	491e      	ldr	r1, [pc, #120]	@ (80090b0 <SD_PowerON+0x118>)
 8009038:	4618      	mov	r0, r3
 800903a:	f002 fa77 	bl	800b52c <SDMMC_CmdAppOperCommand>
 800903e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009046:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800904a:	e02d      	b.n	80090a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2100      	movs	r1, #0
 8009052:	4618      	mov	r0, r3
 8009054:	f002 f8bb 	bl	800b1ce <SDMMC_GetResponse>
 8009058:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	0fdb      	lsrs	r3, r3, #31
 800905e:	2b01      	cmp	r3, #1
 8009060:	d101      	bne.n	8009066 <SD_PowerON+0xce>
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <SD_PowerON+0xd0>
 8009066:	2300      	movs	r3, #0
 8009068:	613b      	str	r3, [r7, #16]

    count++;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3301      	adds	r3, #1
 800906e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009076:	4293      	cmp	r3, r2
 8009078:	d802      	bhi.n	8009080 <SD_PowerON+0xe8>
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0cc      	beq.n	800901a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009086:	4293      	cmp	r3, r2
 8009088:	d902      	bls.n	8009090 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800908a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800908e:	e00b      	b.n	80090a8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	c1100000 	.word	0xc1100000

080090b4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08c      	sub	sp, #48	@ 0x30
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090be:	f7f8 fe53 	bl	8001d68 <HAL_GetTick>
 80090c2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 f87d 	bl	800b1ce <SDMMC_GetResponse>
 80090d4:	4603      	mov	r3, r0
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090de:	d102      	bne.n	80090e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090e4:	e0b0      	b.n	8009248 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2140      	movs	r1, #64	@ 0x40
 80090ec:	4618      	mov	r0, r3
 80090ee:	f002 f8ad 	bl	800b24c <SDMMC_CmdBlockLength>
 80090f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	e0a0      	b.n	8009248 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f002 f9e7 	bl	800b4e6 <SDMMC_CmdAppCommand>
 8009118:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	e08d      	b.n	8009248 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
 8009130:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009132:	2340      	movs	r3, #64	@ 0x40
 8009134:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009136:	2360      	movs	r3, #96	@ 0x60
 8009138:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800913a:	2302      	movs	r3, #2
 800913c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800913e:	2300      	movs	r3, #0
 8009140:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009142:	2301      	movs	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f107 0208 	add.w	r2, r7, #8
 800914e:	4611      	mov	r1, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f002 f84f 	bl	800b1f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f002 facf 	bl	800b6fe <SDMMC_CmdStatusRegister>
 8009160:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d02b      	beq.n	80091c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	e069      	b.n	8009248 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800917a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d013      	beq.n	80091aa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009182:	2300      	movs	r3, #0
 8009184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009186:	e00d      	b.n	80091a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f001 ffa9 	bl	800b0e4 <SDMMC_ReadFIFO>
 8009192:	4602      	mov	r2, r0
 8009194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009196:	601a      	str	r2, [r3, #0]
        pData++;
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	3304      	adds	r3, #4
 800919c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800919e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a0:	3301      	adds	r3, #1
 80091a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	2b07      	cmp	r3, #7
 80091a8:	d9ee      	bls.n	8009188 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091aa:	f7f8 fddd 	bl	8001d68 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d102      	bne.n	80091c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091be:	e043      	b.n	8009248 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0d2      	beq.n	8009174 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d4:	f003 0308 	and.w	r3, r3, #8
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091dc:	2308      	movs	r3, #8
 80091de:	e033      	b.n	8009248 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091ee:	2302      	movs	r3, #2
 80091f0:	e02a      	b.n	8009248 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d017      	beq.n	8009230 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009200:	2320      	movs	r3, #32
 8009202:	e021      	b.n	8009248 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4618      	mov	r0, r3
 800920a:	f001 ff6b 	bl	800b0e4 <SDMMC_ReadFIFO>
 800920e:	4602      	mov	r2, r0
 8009210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009212:	601a      	str	r2, [r3, #0]
    pData++;
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	3304      	adds	r3, #4
 8009218:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800921a:	f7f8 fda5 	bl	8001d68 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009228:	d102      	bne.n	8009230 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800922a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800922e:	e00b      	b.n	8009248 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e2      	bne.n	8009204 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a03      	ldr	r2, [pc, #12]	@ (8009250 <SD_SendSDStatus+0x19c>)
 8009244:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3730      	adds	r7, #48	@ 0x30
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	18000f3a 	.word	0x18000f3a

08009254 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009268:	e018      	b.n	800929c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009272:	041b      	lsls	r3, r3, #16
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f002 fa1e 	bl	800b6b8 <SDMMC_CmdSendStatus>
 800927c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	e009      	b.n	800929c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f001 ff9d 	bl	800b1ce <SDMMC_GetResponse>
 8009294:	4602      	mov	r2, r0
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	2300      	movs	r3, #0
 80092b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2100      	movs	r1, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 ff87 	bl	800b1ce <SDMMC_GetResponse>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092ca:	d102      	bne.n	80092d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092d0:	e02f      	b.n	8009332 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f879 	bl	80093d0 <SD_FindSCR>
 80092de:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	e023      	b.n	8009332 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01c      	beq.n	800932e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fc:	041b      	lsls	r3, r3, #16
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f002 f8f0 	bl	800b4e6 <SDMMC_CmdAppCommand>
 8009306:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	e00f      	b.n	8009332 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2102      	movs	r1, #2
 8009318:	4618      	mov	r0, r3
 800931a:	f002 f927 	bl	800b56c <SDMMC_CmdBusWidth>
 800931e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	e003      	b.n	8009332 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800932a:	2300      	movs	r3, #0
 800932c:	e001      	b.n	8009332 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800932e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f001 ff3c 	bl	800b1ce <SDMMC_GetResponse>
 8009356:	4603      	mov	r3, r0
 8009358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009360:	d102      	bne.n	8009368 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009362:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009366:	e02f      	b.n	80093c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f82e 	bl	80093d0 <SD_FindSCR>
 8009374:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	e023      	b.n	80093c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d01c      	beq.n	80093c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009392:	041b      	lsls	r3, r3, #16
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	f002 f8a5 	bl	800b4e6 <SDMMC_CmdAppCommand>
 800939c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	e00f      	b.n	80093c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f002 f8dc 	bl	800b56c <SDMMC_CmdBusWidth>
 80093b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	e003      	b.n	80093c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	e001      	b.n	80093c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	@ 0x38
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093da:	f7f8 fcc5 	bl	8001d68 <HAL_GetTick>
 80093de:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093e4:	2300      	movs	r3, #0
 80093e6:	60bb      	str	r3, [r7, #8]
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2108      	movs	r1, #8
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 ff28 	bl	800b24c <SDMMC_CmdBlockLength>
 80093fc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	e0ad      	b.n	8009564 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f002 f866 	bl	800b4e6 <SDMMC_CmdAppCommand>
 800941a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	e09e      	b.n	8009564 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009426:	f04f 33ff 	mov.w	r3, #4294967295
 800942a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800942c:	2308      	movs	r3, #8
 800942e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009430:	2330      	movs	r3, #48	@ 0x30
 8009432:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009434:	2302      	movs	r3, #2
 8009436:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009438:	2300      	movs	r3, #0
 800943a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800943c:	2301      	movs	r3, #1
 800943e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f107 0210 	add.w	r2, r7, #16
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f001 fed2 	bl	800b1f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f002 f8ac 	bl	800b5b2 <SDMMC_CmdSendSCR>
 800945a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	2b00      	cmp	r3, #0
 8009460:	d027      	beq.n	80094b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	e07e      	b.n	8009564 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d113      	bne.n	800949c <SD_FindSCR+0xcc>
 8009474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009476:	2b00      	cmp	r3, #0
 8009478:	d110      	bne.n	800949c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fe30 	bl	800b0e4 <SDMMC_ReadFIFO>
 8009484:	4603      	mov	r3, r0
 8009486:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fe29 	bl	800b0e4 <SDMMC_ReadFIFO>
 8009492:	4603      	mov	r3, r0
 8009494:	60fb      	str	r3, [r7, #12]
      index++;
 8009496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009498:	3301      	adds	r3, #1
 800949a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800949c:	f7f8 fc64 	bl	8001d68 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094aa:	d102      	bne.n	80094b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094b0:	e058      	b.n	8009564 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80094bc:	4013      	ands	r3, r2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0d1      	beq.n	8009466 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2208      	movs	r2, #8
 80094d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094d8:	2308      	movs	r3, #8
 80094da:	e043      	b.n	8009564 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2202      	movs	r2, #2
 80094f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094f2:	2302      	movs	r3, #2
 80094f4:	e036      	b.n	8009564 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fc:	f003 0320 	and.w	r3, r3, #32
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2220      	movs	r2, #32
 800950a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800950c:	2320      	movs	r3, #32
 800950e:	e029      	b.n	8009564 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a15      	ldr	r2, [pc, #84]	@ (800956c <SD_FindSCR+0x19c>)
 8009516:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	061a      	lsls	r2, r3, #24
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009524:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	0a1b      	lsrs	r3, r3, #8
 800952a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800952e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	0e1b      	lsrs	r3, r3, #24
 8009534:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	601a      	str	r2, [r3, #0]
    scr++;
 800953a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953c:	3304      	adds	r3, #4
 800953e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	061a      	lsls	r2, r3, #24
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800954c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009556:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	0e1b      	lsrs	r3, r3, #24
 800955c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800955e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009560:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3738      	adds	r7, #56	@ 0x38
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	18000f3a 	.word	0x18000f3a

08009570 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	2b1f      	cmp	r3, #31
 8009584:	d936      	bls.n	80095f4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]
 800958a:	e027      	b.n	80095dc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f001 fda7 	bl	800b0e4 <SDMMC_ReadFIFO>
 8009596:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	b2da      	uxtb	r2, r3
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	3301      	adds	r3, #1
 80095a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	0a1b      	lsrs	r3, r3, #8
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3301      	adds	r3, #1
 80095b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	0c1b      	lsrs	r3, r3, #16
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	3301      	adds	r3, #1
 80095c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	0e1b      	lsrs	r3, r3, #24
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	3301      	adds	r3, #1
 80095d4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3301      	adds	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2b07      	cmp	r3, #7
 80095e0:	d9d4      	bls.n	800958c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	f1a3 0220 	sub.w	r2, r3, #32
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 80095f4:	bf00      	nop
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	2b1f      	cmp	r3, #31
 8009610:	d93a      	bls.n	8009688 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	e02b      	b.n	8009670 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	3301      	adds	r3, #1
 8009622:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	021a      	lsls	r2, r3, #8
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	3301      	adds	r3, #1
 8009634:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	041a      	lsls	r2, r3, #16
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	3301      	adds	r3, #1
 8009646:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	061a      	lsls	r2, r3, #24
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	3301      	adds	r3, #1
 8009658:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f107 020c 	add.w	r2, r7, #12
 8009662:	4611      	mov	r1, r2
 8009664:	4618      	mov	r0, r3
 8009666:	f001 fd4a 	bl	800b0fe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	3301      	adds	r3, #1
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b07      	cmp	r3, #7
 8009674:	d9d0      	bls.n	8009618 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	f1a3 0220 	sub.w	r2, r3, #32
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	621a      	str	r2, [r3, #32]
  }
}
 8009688:	bf00      	nop
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e10f      	b.n	8009912 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a87      	ldr	r2, [pc, #540]	@ (800991c <HAL_SPI_Init+0x23c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00f      	beq.n	8009722 <HAL_SPI_Init+0x42>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a86      	ldr	r2, [pc, #536]	@ (8009920 <HAL_SPI_Init+0x240>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00a      	beq.n	8009722 <HAL_SPI_Init+0x42>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a84      	ldr	r2, [pc, #528]	@ (8009924 <HAL_SPI_Init+0x244>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d005      	beq.n	8009722 <HAL_SPI_Init+0x42>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	2b0f      	cmp	r3, #15
 800971c:	d901      	bls.n	8009722 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e0f7      	b.n	8009912 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fbbc 	bl	8009ea0 <SPI_GetPacketSize>
 8009728:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a7b      	ldr	r2, [pc, #492]	@ (800991c <HAL_SPI_Init+0x23c>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00c      	beq.n	800974e <HAL_SPI_Init+0x6e>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a79      	ldr	r2, [pc, #484]	@ (8009920 <HAL_SPI_Init+0x240>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d007      	beq.n	800974e <HAL_SPI_Init+0x6e>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a78      	ldr	r2, [pc, #480]	@ (8009924 <HAL_SPI_Init+0x244>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d002      	beq.n	800974e <HAL_SPI_Init+0x6e>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b08      	cmp	r3, #8
 800974c:	d811      	bhi.n	8009772 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009752:	4a72      	ldr	r2, [pc, #456]	@ (800991c <HAL_SPI_Init+0x23c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d009      	beq.n	800976c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a70      	ldr	r2, [pc, #448]	@ (8009920 <HAL_SPI_Init+0x240>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <HAL_SPI_Init+0x8c>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a6f      	ldr	r2, [pc, #444]	@ (8009924 <HAL_SPI_Init+0x244>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d104      	bne.n	8009776 <HAL_SPI_Init+0x96>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b10      	cmp	r3, #16
 8009770:	d901      	bls.n	8009776 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0cd      	b.n	8009912 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d106      	bne.n	8009790 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7f8 f8fe 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0201 	bic.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80097b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097bc:	d119      	bne.n	80097f2 <HAL_SPI_Init+0x112>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097c6:	d103      	bne.n	80097d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10c      	bne.n	80097f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e0:	d107      	bne.n	80097f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00f      	beq.n	800981e <HAL_SPI_Init+0x13e>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d90b      	bls.n	800981e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e007      	b.n	800982e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800982c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69da      	ldr	r2, [r3, #28]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009836:	431a      	orrs	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009840:	ea42 0103 	orr.w	r1, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800988e:	ea42 0103 	orr.w	r1, r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d113      	bne.n	80098ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0201 	bic.w	r2, r2, #1
 80098dc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40013000 	.word	0x40013000
 8009920:	40003800 	.word	0x40003800
 8009924:	40003c00 	.word	0x40003c00

08009928 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af02      	add	r7, sp, #8
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	4613      	mov	r3, r2
 8009936:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3320      	adds	r3, #32
 800993e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009940:	f7f8 fa12 	bl	8001d68 <HAL_GetTick>
 8009944:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b01      	cmp	r3, #1
 8009950:	d001      	beq.n	8009956 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009952:	2302      	movs	r3, #2
 8009954:	e1d1      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <HAL_SPI_Transmit+0x3a>
 800995c:	88fb      	ldrh	r3, [r7, #6]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e1c9      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_SPI_Transmit+0x4c>
 8009970:	2302      	movs	r3, #2
 8009972:	e1c2      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2203      	movs	r2, #3
 8009980:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	88fa      	ldrh	r2, [r7, #6]
 8009996:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80099cc:	d108      	bne.n	80099e0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e009      	b.n	80099f4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80099f2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	4b96      	ldr	r3, [pc, #600]	@ (8009c54 <HAL_SPI_Transmit+0x32c>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	88f9      	ldrh	r1, [r7, #6]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a20:	d107      	bne.n	8009a32 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b0f      	cmp	r3, #15
 8009a38:	d947      	bls.n	8009aca <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a3a:	e03f      	b.n	8009abc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d114      	bne.n	8009a74 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a5a:	1d1a      	adds	r2, r3, #4
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a72:	e023      	b.n	8009abc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a74:	f7f8 f978 	bl	8001d68 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d803      	bhi.n	8009a8c <HAL_SPI_Transmit+0x164>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8a:	d102      	bne.n	8009a92 <HAL_SPI_Transmit+0x16a>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d114      	bne.n	8009abc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f936 	bl	8009d04 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e11e      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1b9      	bne.n	8009a3c <HAL_SPI_Transmit+0x114>
 8009ac8:	e0f1      	b.n	8009cae <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	2b07      	cmp	r3, #7
 8009ad0:	f240 80e6 	bls.w	8009ca0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ad4:	e05d      	b.n	8009b92 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d132      	bne.n	8009b4a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d918      	bls.n	8009b22 <HAL_SPI_Transmit+0x1fa>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d014      	beq.n	8009b22 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b02      	subs	r3, #2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b20:	e037      	b.n	8009b92 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b26:	881a      	ldrh	r2, [r3, #0]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b30:	1c9a      	adds	r2, r3, #2
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b48:	e023      	b.n	8009b92 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b4a:	f7f8 f90d 	bl	8001d68 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d803      	bhi.n	8009b62 <HAL_SPI_Transmit+0x23a>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d102      	bne.n	8009b68 <HAL_SPI_Transmit+0x240>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d114      	bne.n	8009b92 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f8cb 	bl	8009d04 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e0b3      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d19b      	bne.n	8009ad6 <HAL_SPI_Transmit+0x1ae>
 8009b9e:	e086      	b.n	8009cae <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d154      	bne.n	8009c58 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d918      	bls.n	8009bec <HAL_SPI_Transmit+0x2c4>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bbe:	2b40      	cmp	r3, #64	@ 0x40
 8009bc0:	d914      	bls.n	8009bec <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bd2:	1d1a      	adds	r2, r3, #4
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b04      	subs	r3, #4
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bea:	e059      	b.n	8009ca0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d917      	bls.n	8009c28 <HAL_SPI_Transmit+0x300>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d013      	beq.n	8009c28 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c04:	881a      	ldrh	r2, [r3, #0]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c0e:	1c9a      	adds	r2, r3, #2
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3b02      	subs	r3, #2
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c26:	e03b      	b.n	8009ca0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3320      	adds	r3, #32
 8009c32:	7812      	ldrb	r2, [r2, #0]
 8009c34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c52:	e025      	b.n	8009ca0 <HAL_SPI_Transmit+0x378>
 8009c54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c58:	f7f8 f886 	bl	8001d68 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d803      	bhi.n	8009c70 <HAL_SPI_Transmit+0x348>
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6e:	d102      	bne.n	8009c76 <HAL_SPI_Transmit+0x34e>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d114      	bne.n	8009ca0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f844 	bl	8009d04 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e02c      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f47f af79 	bne.w	8009ba0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2108      	movs	r1, #8
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f8c3 	bl	8009e44 <SPI_WaitOnFlagUntilTimeout>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d007      	beq.n	8009cd4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cca:	f043 0220 	orr.w	r2, r3, #32
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f815 	bl	8009d04 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
  }
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop

08009d04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f042 0208 	orr.w	r2, r2, #8
 8009d22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f042 0210 	orr.w	r2, r2, #16
 8009d32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0201 	bic.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6919      	ldr	r1, [r3, #16]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e40 <SPI_CloseTransfer+0x13c>)
 8009d50:	400b      	ands	r3, r1
 8009d52:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689a      	ldr	r2, [r3, #8]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d014      	beq.n	8009d9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00f      	beq.n	8009d9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699a      	ldr	r2, [r3, #24]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0220 	orr.w	r2, r2, #32
 8009d98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d014      	beq.n	8009dd0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00f      	beq.n	8009dd0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009db6:	f043 0204 	orr.w	r2, r3, #4
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00f      	beq.n	8009dfa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009de0:	f043 0201 	orr.w	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	699a      	ldr	r2, [r3, #24]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009df8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00f      	beq.n	8009e24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e0a:	f043 0208 	orr.w	r2, r3, #8
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	fffffc90 	.word	0xfffffc90

08009e44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	4613      	mov	r3, r2
 8009e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e54:	e010      	b.n	8009e78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e56:	f7f7 ff87 	bl	8001d68 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d803      	bhi.n	8009e6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d102      	bne.n	8009e74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e00f      	b.n	8009e98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695a      	ldr	r2, [r3, #20]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4013      	ands	r3, r2
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	bf0c      	ite	eq
 8009e88:	2301      	moveq	r3, #1
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	461a      	mov	r2, r3
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d0df      	beq.n	8009e56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eac:	095b      	lsrs	r3, r3, #5
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	3307      	adds	r3, #7
 8009ebe:	08db      	lsrs	r3, r3, #3
 8009ec0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e042      	b.n	8009f6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f7 fdd6 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2224      	movs	r2, #36	@ 0x24
 8009f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0201 	bic.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fd91 	bl	800aa48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f826 	bl	8009f78 <UART_SetConfig>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d101      	bne.n	8009f36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e01b      	b.n	8009f6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 0201 	orr.w	r2, r2, #1
 8009f64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fe10 	bl	800ab8c <UART_CheckIdleState>
 8009f6c:	4603      	mov	r3, r0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f7c:	b092      	sub	sp, #72	@ 0x48
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	431a      	orrs	r2, r3
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	431a      	orrs	r2, r3
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	4bbe      	ldr	r3, [pc, #760]	@ (800a2a0 <UART_SetConfig+0x328>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	6812      	ldr	r2, [r2, #0]
 8009fae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4ab3      	ldr	r2, [pc, #716]	@ (800a2a4 <UART_SetConfig+0x32c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	4baf      	ldr	r3, [pc, #700]	@ (800a2a8 <UART_SetConfig+0x330>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	6812      	ldr	r2, [r2, #0]
 8009ff2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffe:	f023 010f 	bic.w	r1, r3, #15
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4aa6      	ldr	r2, [pc, #664]	@ (800a2ac <UART_SetConfig+0x334>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d177      	bne.n	800a108 <UART_SetConfig+0x190>
 800a018:	4ba5      	ldr	r3, [pc, #660]	@ (800a2b0 <UART_SetConfig+0x338>)
 800a01a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a020:	2b28      	cmp	r3, #40	@ 0x28
 800a022:	d86d      	bhi.n	800a100 <UART_SetConfig+0x188>
 800a024:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <UART_SetConfig+0xb4>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a0d1 	.word	0x0800a0d1
 800a030:	0800a101 	.word	0x0800a101
 800a034:	0800a101 	.word	0x0800a101
 800a038:	0800a101 	.word	0x0800a101
 800a03c:	0800a101 	.word	0x0800a101
 800a040:	0800a101 	.word	0x0800a101
 800a044:	0800a101 	.word	0x0800a101
 800a048:	0800a101 	.word	0x0800a101
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a101 	.word	0x0800a101
 800a054:	0800a101 	.word	0x0800a101
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a101 	.word	0x0800a101
 800a068:	0800a101 	.word	0x0800a101
 800a06c:	0800a0e1 	.word	0x0800a0e1
 800a070:	0800a101 	.word	0x0800a101
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a101 	.word	0x0800a101
 800a084:	0800a101 	.word	0x0800a101
 800a088:	0800a101 	.word	0x0800a101
 800a08c:	0800a0e9 	.word	0x0800a0e9
 800a090:	0800a101 	.word	0x0800a101
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	0800a101 	.word	0x0800a101
 800a0a8:	0800a101 	.word	0x0800a101
 800a0ac:	0800a0f1 	.word	0x0800a0f1
 800a0b0:	0800a101 	.word	0x0800a101
 800a0b4:	0800a101 	.word	0x0800a101
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a101 	.word	0x0800a101
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a0f9 	.word	0x0800a0f9
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d6:	e222      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a0d8:	2304      	movs	r3, #4
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0de:	e21e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	e21a      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a0e8:	2310      	movs	r3, #16
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ee:	e216      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f6:	e212      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a0f8:	2340      	movs	r3, #64	@ 0x40
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fe:	e20e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a100:	2380      	movs	r3, #128	@ 0x80
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e20a      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a69      	ldr	r2, [pc, #420]	@ (800a2b4 <UART_SetConfig+0x33c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d130      	bne.n	800a174 <UART_SetConfig+0x1fc>
 800a112:	4b67      	ldr	r3, [pc, #412]	@ (800a2b0 <UART_SetConfig+0x338>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d826      	bhi.n	800a16c <UART_SetConfig+0x1f4>
 800a11e:	a201      	add	r2, pc, #4	@ (adr r2, 800a124 <UART_SetConfig+0x1ac>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a145 	.word	0x0800a145
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a142:	e1ec      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a144:	2304      	movs	r3, #4
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e1e8      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a14c:	2308      	movs	r3, #8
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e1e4      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a154:	2310      	movs	r3, #16
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e1e0      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a15c:	2320      	movs	r3, #32
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e1dc      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a164:	2340      	movs	r3, #64	@ 0x40
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e1d8      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a16c:	2380      	movs	r3, #128	@ 0x80
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e1d4      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a4f      	ldr	r2, [pc, #316]	@ (800a2b8 <UART_SetConfig+0x340>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d130      	bne.n	800a1e0 <UART_SetConfig+0x268>
 800a17e:	4b4c      	ldr	r3, [pc, #304]	@ (800a2b0 <UART_SetConfig+0x338>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b05      	cmp	r3, #5
 800a188:	d826      	bhi.n	800a1d8 <UART_SetConfig+0x260>
 800a18a:	a201      	add	r2, pc, #4	@ (adr r2, 800a190 <UART_SetConfig+0x218>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ae:	e1b6      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b6:	e1b2      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e1ae      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e1aa      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e1a6      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1d0:	2340      	movs	r3, #64	@ 0x40
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e1a2      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1d8:	2380      	movs	r3, #128	@ 0x80
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e19e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a35      	ldr	r2, [pc, #212]	@ (800a2bc <UART_SetConfig+0x344>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d130      	bne.n	800a24c <UART_SetConfig+0x2d4>
 800a1ea:	4b31      	ldr	r3, [pc, #196]	@ (800a2b0 <UART_SetConfig+0x338>)
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b05      	cmp	r3, #5
 800a1f4:	d826      	bhi.n	800a244 <UART_SetConfig+0x2cc>
 800a1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1fc <UART_SetConfig+0x284>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a215 	.word	0x0800a215
 800a200:	0800a21d 	.word	0x0800a21d
 800a204:	0800a225 	.word	0x0800a225
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a235 	.word	0x0800a235
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	2300      	movs	r3, #0
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21a:	e180      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a21c:	2304      	movs	r3, #4
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e17c      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a224:	2308      	movs	r3, #8
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e178      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a22c:	2310      	movs	r3, #16
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e174      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a234:	2320      	movs	r3, #32
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23a:	e170      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a23c:	2340      	movs	r3, #64	@ 0x40
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a242:	e16c      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a244:	2380      	movs	r3, #128	@ 0x80
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24a:	e168      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c0 <UART_SetConfig+0x348>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d142      	bne.n	800a2dc <UART_SetConfig+0x364>
 800a256:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <UART_SetConfig+0x338>)
 800a258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	2b05      	cmp	r3, #5
 800a260:	d838      	bhi.n	800a2d4 <UART_SetConfig+0x35c>
 800a262:	a201      	add	r2, pc, #4	@ (adr r2, 800a268 <UART_SetConfig+0x2f0>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a281 	.word	0x0800a281
 800a26c:	0800a289 	.word	0x0800a289
 800a270:	0800a291 	.word	0x0800a291
 800a274:	0800a299 	.word	0x0800a299
 800a278:	0800a2c5 	.word	0x0800a2c5
 800a27c:	0800a2cd 	.word	0x0800a2cd
 800a280:	2300      	movs	r3, #0
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a286:	e14a      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a288:	2304      	movs	r3, #4
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28e:	e146      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a290:	2308      	movs	r3, #8
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e142      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a298:	2310      	movs	r3, #16
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e13e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a2a0:	cfff69f3 	.word	0xcfff69f3
 800a2a4:	58000c00 	.word	0x58000c00
 800a2a8:	11fff4ff 	.word	0x11fff4ff
 800a2ac:	40011000 	.word	0x40011000
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	40004400 	.word	0x40004400
 800a2b8:	40004800 	.word	0x40004800
 800a2bc:	40004c00 	.word	0x40004c00
 800a2c0:	40005000 	.word	0x40005000
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e128      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a2cc:	2340      	movs	r3, #64	@ 0x40
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e124      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a2d4:	2380      	movs	r3, #128	@ 0x80
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e120      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4acb      	ldr	r2, [pc, #812]	@ (800a610 <UART_SetConfig+0x698>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d176      	bne.n	800a3d4 <UART_SetConfig+0x45c>
 800a2e6:	4bcb      	ldr	r3, [pc, #812]	@ (800a614 <UART_SetConfig+0x69c>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2ee:	2b28      	cmp	r3, #40	@ 0x28
 800a2f0:	d86c      	bhi.n	800a3cc <UART_SetConfig+0x454>
 800a2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x380>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a39d 	.word	0x0800a39d
 800a2fc:	0800a3cd 	.word	0x0800a3cd
 800a300:	0800a3cd 	.word	0x0800a3cd
 800a304:	0800a3cd 	.word	0x0800a3cd
 800a308:	0800a3cd 	.word	0x0800a3cd
 800a30c:	0800a3cd 	.word	0x0800a3cd
 800a310:	0800a3cd 	.word	0x0800a3cd
 800a314:	0800a3cd 	.word	0x0800a3cd
 800a318:	0800a3a5 	.word	0x0800a3a5
 800a31c:	0800a3cd 	.word	0x0800a3cd
 800a320:	0800a3cd 	.word	0x0800a3cd
 800a324:	0800a3cd 	.word	0x0800a3cd
 800a328:	0800a3cd 	.word	0x0800a3cd
 800a32c:	0800a3cd 	.word	0x0800a3cd
 800a330:	0800a3cd 	.word	0x0800a3cd
 800a334:	0800a3cd 	.word	0x0800a3cd
 800a338:	0800a3ad 	.word	0x0800a3ad
 800a33c:	0800a3cd 	.word	0x0800a3cd
 800a340:	0800a3cd 	.word	0x0800a3cd
 800a344:	0800a3cd 	.word	0x0800a3cd
 800a348:	0800a3cd 	.word	0x0800a3cd
 800a34c:	0800a3cd 	.word	0x0800a3cd
 800a350:	0800a3cd 	.word	0x0800a3cd
 800a354:	0800a3cd 	.word	0x0800a3cd
 800a358:	0800a3b5 	.word	0x0800a3b5
 800a35c:	0800a3cd 	.word	0x0800a3cd
 800a360:	0800a3cd 	.word	0x0800a3cd
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a3cd 	.word	0x0800a3cd
 800a36c:	0800a3cd 	.word	0x0800a3cd
 800a370:	0800a3cd 	.word	0x0800a3cd
 800a374:	0800a3cd 	.word	0x0800a3cd
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a3cd 	.word	0x0800a3cd
 800a384:	0800a3cd 	.word	0x0800a3cd
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3cd 	.word	0x0800a3cd
 800a390:	0800a3cd 	.word	0x0800a3cd
 800a394:	0800a3cd 	.word	0x0800a3cd
 800a398:	0800a3c5 	.word	0x0800a3c5
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e0bc      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e0b8      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e0b4      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e0b0      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3bc:	2320      	movs	r3, #32
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e0ac      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3c4:	2340      	movs	r3, #64	@ 0x40
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ca:	e0a8      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3cc:	2380      	movs	r3, #128	@ 0x80
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e0a4      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a8f      	ldr	r2, [pc, #572]	@ (800a618 <UART_SetConfig+0x6a0>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d130      	bne.n	800a440 <UART_SetConfig+0x4c8>
 800a3de:	4b8d      	ldr	r3, [pc, #564]	@ (800a614 <UART_SetConfig+0x69c>)
 800a3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d826      	bhi.n	800a438 <UART_SetConfig+0x4c0>
 800a3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f0 <UART_SetConfig+0x478>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a419 	.word	0x0800a419
 800a3fc:	0800a421 	.word	0x0800a421
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a431 	.word	0x0800a431
 800a408:	2300      	movs	r3, #0
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e086      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a410:	2304      	movs	r3, #4
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e082      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a418:	2308      	movs	r3, #8
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e07e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a420:	2310      	movs	r3, #16
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e07a      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a428:	2320      	movs	r3, #32
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e076      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a430:	2340      	movs	r3, #64	@ 0x40
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e072      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a438:	2380      	movs	r3, #128	@ 0x80
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e06e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a75      	ldr	r2, [pc, #468]	@ (800a61c <UART_SetConfig+0x6a4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d130      	bne.n	800a4ac <UART_SetConfig+0x534>
 800a44a:	4b72      	ldr	r3, [pc, #456]	@ (800a614 <UART_SetConfig+0x69c>)
 800a44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	2b05      	cmp	r3, #5
 800a454:	d826      	bhi.n	800a4a4 <UART_SetConfig+0x52c>
 800a456:	a201      	add	r2, pc, #4	@ (adr r2, 800a45c <UART_SetConfig+0x4e4>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a475 	.word	0x0800a475
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a48d 	.word	0x0800a48d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	2300      	movs	r3, #0
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e050      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a47c:	2304      	movs	r3, #4
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e04c      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a484:	2308      	movs	r3, #8
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e048      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a48c:	2310      	movs	r3, #16
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e044      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a494:	2320      	movs	r3, #32
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e040      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a49c:	2340      	movs	r3, #64	@ 0x40
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e03c      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a4a4:	2380      	movs	r3, #128	@ 0x80
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e038      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a5b      	ldr	r2, [pc, #364]	@ (800a620 <UART_SetConfig+0x6a8>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d130      	bne.n	800a518 <UART_SetConfig+0x5a0>
 800a4b6:	4b57      	ldr	r3, [pc, #348]	@ (800a614 <UART_SetConfig+0x69c>)
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d826      	bhi.n	800a510 <UART_SetConfig+0x598>
 800a4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c8 <UART_SetConfig+0x550>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a4f1 	.word	0x0800a4f1
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a501 	.word	0x0800a501
 800a4dc:	0800a509 	.word	0x0800a509
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e01a      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e016      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e012      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e00e      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a500:	2320      	movs	r3, #32
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e00a      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a508:	2340      	movs	r3, #64	@ 0x40
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e006      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a510:	2380      	movs	r3, #128	@ 0x80
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e002      	b.n	800a51e <UART_SetConfig+0x5a6>
 800a518:	2380      	movs	r3, #128	@ 0x80
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a3f      	ldr	r2, [pc, #252]	@ (800a620 <UART_SetConfig+0x6a8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	f040 80f8 	bne.w	800a71a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a52a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a52e:	2b20      	cmp	r3, #32
 800a530:	dc46      	bgt.n	800a5c0 <UART_SetConfig+0x648>
 800a532:	2b02      	cmp	r3, #2
 800a534:	f2c0 8082 	blt.w	800a63c <UART_SetConfig+0x6c4>
 800a538:	3b02      	subs	r3, #2
 800a53a:	2b1e      	cmp	r3, #30
 800a53c:	d87e      	bhi.n	800a63c <UART_SetConfig+0x6c4>
 800a53e:	a201      	add	r2, pc, #4	@ (adr r2, 800a544 <UART_SetConfig+0x5cc>)
 800a540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a544:	0800a5c7 	.word	0x0800a5c7
 800a548:	0800a63d 	.word	0x0800a63d
 800a54c:	0800a5cf 	.word	0x0800a5cf
 800a550:	0800a63d 	.word	0x0800a63d
 800a554:	0800a63d 	.word	0x0800a63d
 800a558:	0800a63d 	.word	0x0800a63d
 800a55c:	0800a5df 	.word	0x0800a5df
 800a560:	0800a63d 	.word	0x0800a63d
 800a564:	0800a63d 	.word	0x0800a63d
 800a568:	0800a63d 	.word	0x0800a63d
 800a56c:	0800a63d 	.word	0x0800a63d
 800a570:	0800a63d 	.word	0x0800a63d
 800a574:	0800a63d 	.word	0x0800a63d
 800a578:	0800a63d 	.word	0x0800a63d
 800a57c:	0800a5ef 	.word	0x0800a5ef
 800a580:	0800a63d 	.word	0x0800a63d
 800a584:	0800a63d 	.word	0x0800a63d
 800a588:	0800a63d 	.word	0x0800a63d
 800a58c:	0800a63d 	.word	0x0800a63d
 800a590:	0800a63d 	.word	0x0800a63d
 800a594:	0800a63d 	.word	0x0800a63d
 800a598:	0800a63d 	.word	0x0800a63d
 800a59c:	0800a63d 	.word	0x0800a63d
 800a5a0:	0800a63d 	.word	0x0800a63d
 800a5a4:	0800a63d 	.word	0x0800a63d
 800a5a8:	0800a63d 	.word	0x0800a63d
 800a5ac:	0800a63d 	.word	0x0800a63d
 800a5b0:	0800a63d 	.word	0x0800a63d
 800a5b4:	0800a63d 	.word	0x0800a63d
 800a5b8:	0800a63d 	.word	0x0800a63d
 800a5bc:	0800a62f 	.word	0x0800a62f
 800a5c0:	2b40      	cmp	r3, #64	@ 0x40
 800a5c2:	d037      	beq.n	800a634 <UART_SetConfig+0x6bc>
 800a5c4:	e03a      	b.n	800a63c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a5c6:	f7fc feb3 	bl	8007330 <HAL_RCCEx_GetD3PCLK1Freq>
 800a5ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5cc:	e03c      	b.n	800a648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fc fec2 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e034      	b.n	800a648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5de:	f107 0318 	add.w	r3, r7, #24
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fd f80e 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ec:	e02c      	b.n	800a648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5ee:	4b09      	ldr	r3, [pc, #36]	@ (800a614 <UART_SetConfig+0x69c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0320 	and.w	r3, r3, #32
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d016      	beq.n	800a628 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5fa:	4b06      	ldr	r3, [pc, #24]	@ (800a614 <UART_SetConfig+0x69c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	08db      	lsrs	r3, r3, #3
 800a600:	f003 0303 	and.w	r3, r3, #3
 800a604:	4a07      	ldr	r2, [pc, #28]	@ (800a624 <UART_SetConfig+0x6ac>)
 800a606:	fa22 f303 	lsr.w	r3, r2, r3
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a60c:	e01c      	b.n	800a648 <UART_SetConfig+0x6d0>
 800a60e:	bf00      	nop
 800a610:	40011400 	.word	0x40011400
 800a614:	58024400 	.word	0x58024400
 800a618:	40007800 	.word	0x40007800
 800a61c:	40007c00 	.word	0x40007c00
 800a620:	58000c00 	.word	0x58000c00
 800a624:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a628:	4b9d      	ldr	r3, [pc, #628]	@ (800a8a0 <UART_SetConfig+0x928>)
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62c:	e00c      	b.n	800a648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a62e:	4b9d      	ldr	r3, [pc, #628]	@ (800a8a4 <UART_SetConfig+0x92c>)
 800a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a632:	e009      	b.n	800a648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63a:	e005      	b.n	800a648 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a646:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 81de 	beq.w	800aa0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a654:	4a94      	ldr	r2, [pc, #592]	@ (800a8a8 <UART_SetConfig+0x930>)
 800a656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a65a:	461a      	mov	r2, r3
 800a65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a65e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a662:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	4613      	mov	r3, r2
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	4413      	add	r3, r2
 800a66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a670:	429a      	cmp	r2, r3
 800a672:	d305      	bcc.n	800a680 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d903      	bls.n	800a688 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a686:	e1c1      	b.n	800aa0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a68a:	2200      	movs	r2, #0
 800a68c:	60bb      	str	r3, [r7, #8]
 800a68e:	60fa      	str	r2, [r7, #12]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a694:	4a84      	ldr	r2, [pc, #528]	@ (800a8a8 <UART_SetConfig+0x930>)
 800a696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	2200      	movs	r2, #0
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	607a      	str	r2, [r7, #4]
 800a6a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6aa:	f7f5 fe15 	bl	80002d8 <__aeabi_uldivmod>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f04f 0200 	mov.w	r2, #0
 800a6ba:	f04f 0300 	mov.w	r3, #0
 800a6be:	020b      	lsls	r3, r1, #8
 800a6c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6c4:	0202      	lsls	r2, r0, #8
 800a6c6:	6979      	ldr	r1, [r7, #20]
 800a6c8:	6849      	ldr	r1, [r1, #4]
 800a6ca:	0849      	lsrs	r1, r1, #1
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	eb12 0804 	adds.w	r8, r2, r4
 800a6d6:	eb43 0905 	adc.w	r9, r3, r5
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	469a      	mov	sl, r3
 800a6e2:	4693      	mov	fp, r2
 800a6e4:	4652      	mov	r2, sl
 800a6e6:	465b      	mov	r3, fp
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f5 fdf4 	bl	80002d8 <__aeabi_uldivmod>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6fe:	d308      	bcc.n	800a712 <UART_SetConfig+0x79a>
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a706:	d204      	bcs.n	800a712 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a70e:	60da      	str	r2, [r3, #12]
 800a710:	e17c      	b.n	800aa0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a718:	e178      	b.n	800aa0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a722:	f040 80c5 	bne.w	800a8b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a726:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	dc48      	bgt.n	800a7c0 <UART_SetConfig+0x848>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	db7b      	blt.n	800a82a <UART_SetConfig+0x8b2>
 800a732:	2b20      	cmp	r3, #32
 800a734:	d879      	bhi.n	800a82a <UART_SetConfig+0x8b2>
 800a736:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <UART_SetConfig+0x7c4>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a7c7 	.word	0x0800a7c7
 800a740:	0800a7cf 	.word	0x0800a7cf
 800a744:	0800a82b 	.word	0x0800a82b
 800a748:	0800a82b 	.word	0x0800a82b
 800a74c:	0800a7d7 	.word	0x0800a7d7
 800a750:	0800a82b 	.word	0x0800a82b
 800a754:	0800a82b 	.word	0x0800a82b
 800a758:	0800a82b 	.word	0x0800a82b
 800a75c:	0800a7e7 	.word	0x0800a7e7
 800a760:	0800a82b 	.word	0x0800a82b
 800a764:	0800a82b 	.word	0x0800a82b
 800a768:	0800a82b 	.word	0x0800a82b
 800a76c:	0800a82b 	.word	0x0800a82b
 800a770:	0800a82b 	.word	0x0800a82b
 800a774:	0800a82b 	.word	0x0800a82b
 800a778:	0800a82b 	.word	0x0800a82b
 800a77c:	0800a7f7 	.word	0x0800a7f7
 800a780:	0800a82b 	.word	0x0800a82b
 800a784:	0800a82b 	.word	0x0800a82b
 800a788:	0800a82b 	.word	0x0800a82b
 800a78c:	0800a82b 	.word	0x0800a82b
 800a790:	0800a82b 	.word	0x0800a82b
 800a794:	0800a82b 	.word	0x0800a82b
 800a798:	0800a82b 	.word	0x0800a82b
 800a79c:	0800a82b 	.word	0x0800a82b
 800a7a0:	0800a82b 	.word	0x0800a82b
 800a7a4:	0800a82b 	.word	0x0800a82b
 800a7a8:	0800a82b 	.word	0x0800a82b
 800a7ac:	0800a82b 	.word	0x0800a82b
 800a7b0:	0800a82b 	.word	0x0800a82b
 800a7b4:	0800a82b 	.word	0x0800a82b
 800a7b8:	0800a82b 	.word	0x0800a82b
 800a7bc:	0800a81d 	.word	0x0800a81d
 800a7c0:	2b40      	cmp	r3, #64	@ 0x40
 800a7c2:	d02e      	beq.n	800a822 <UART_SetConfig+0x8aa>
 800a7c4:	e031      	b.n	800a82a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7c6:	f7fa fdbd 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800a7ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7cc:	e033      	b.n	800a836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7ce:	f7fa fdcf 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 800a7d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7d4:	e02f      	b.n	800a836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fc fdbe 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e4:	e027      	b.n	800a836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7e6:	f107 0318 	add.w	r3, r7, #24
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fc ff0a 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f4:	e01f      	b.n	800a836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f6:	4b2d      	ldr	r3, [pc, #180]	@ (800a8ac <UART_SetConfig+0x934>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0320 	and.w	r3, r3, #32
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a802:	4b2a      	ldr	r3, [pc, #168]	@ (800a8ac <UART_SetConfig+0x934>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	08db      	lsrs	r3, r3, #3
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	4a24      	ldr	r2, [pc, #144]	@ (800a8a0 <UART_SetConfig+0x928>)
 800a80e:	fa22 f303 	lsr.w	r3, r2, r3
 800a812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a814:	e00f      	b.n	800a836 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a816:	4b22      	ldr	r3, [pc, #136]	@ (800a8a0 <UART_SetConfig+0x928>)
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81a:	e00c      	b.n	800a836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a81c:	4b21      	ldr	r3, [pc, #132]	@ (800a8a4 <UART_SetConfig+0x92c>)
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a820:	e009      	b.n	800a836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a828:	e005      	b.n	800a836 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a834:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80e7 	beq.w	800aa0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a842:	4a19      	ldr	r2, [pc, #100]	@ (800a8a8 <UART_SetConfig+0x930>)
 800a844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a848:	461a      	mov	r2, r3
 800a84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a84c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a850:	005a      	lsls	r2, r3, #1
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	441a      	add	r2, r3
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a862:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a866:	2b0f      	cmp	r3, #15
 800a868:	d916      	bls.n	800a898 <UART_SetConfig+0x920>
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a870:	d212      	bcs.n	800a898 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	b29b      	uxth	r3, r3
 800a876:	f023 030f 	bic.w	r3, r3, #15
 800a87a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	b29b      	uxth	r3, r3
 800a882:	f003 0307 	and.w	r3, r3, #7
 800a886:	b29a      	uxth	r2, r3
 800a888:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a88a:	4313      	orrs	r3, r2
 800a88c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a894:	60da      	str	r2, [r3, #12]
 800a896:	e0b9      	b.n	800aa0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a89e:	e0b5      	b.n	800aa0c <UART_SetConfig+0xa94>
 800a8a0:	03d09000 	.word	0x03d09000
 800a8a4:	003d0900 	.word	0x003d0900
 800a8a8:	0800ec04 	.word	0x0800ec04
 800a8ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	dc49      	bgt.n	800a94c <UART_SetConfig+0x9d4>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	db7c      	blt.n	800a9b6 <UART_SetConfig+0xa3e>
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d87a      	bhi.n	800a9b6 <UART_SetConfig+0xa3e>
 800a8c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c8 <UART_SetConfig+0x950>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a953 	.word	0x0800a953
 800a8cc:	0800a95b 	.word	0x0800a95b
 800a8d0:	0800a9b7 	.word	0x0800a9b7
 800a8d4:	0800a9b7 	.word	0x0800a9b7
 800a8d8:	0800a963 	.word	0x0800a963
 800a8dc:	0800a9b7 	.word	0x0800a9b7
 800a8e0:	0800a9b7 	.word	0x0800a9b7
 800a8e4:	0800a9b7 	.word	0x0800a9b7
 800a8e8:	0800a973 	.word	0x0800a973
 800a8ec:	0800a9b7 	.word	0x0800a9b7
 800a8f0:	0800a9b7 	.word	0x0800a9b7
 800a8f4:	0800a9b7 	.word	0x0800a9b7
 800a8f8:	0800a9b7 	.word	0x0800a9b7
 800a8fc:	0800a9b7 	.word	0x0800a9b7
 800a900:	0800a9b7 	.word	0x0800a9b7
 800a904:	0800a9b7 	.word	0x0800a9b7
 800a908:	0800a983 	.word	0x0800a983
 800a90c:	0800a9b7 	.word	0x0800a9b7
 800a910:	0800a9b7 	.word	0x0800a9b7
 800a914:	0800a9b7 	.word	0x0800a9b7
 800a918:	0800a9b7 	.word	0x0800a9b7
 800a91c:	0800a9b7 	.word	0x0800a9b7
 800a920:	0800a9b7 	.word	0x0800a9b7
 800a924:	0800a9b7 	.word	0x0800a9b7
 800a928:	0800a9b7 	.word	0x0800a9b7
 800a92c:	0800a9b7 	.word	0x0800a9b7
 800a930:	0800a9b7 	.word	0x0800a9b7
 800a934:	0800a9b7 	.word	0x0800a9b7
 800a938:	0800a9b7 	.word	0x0800a9b7
 800a93c:	0800a9b7 	.word	0x0800a9b7
 800a940:	0800a9b7 	.word	0x0800a9b7
 800a944:	0800a9b7 	.word	0x0800a9b7
 800a948:	0800a9a9 	.word	0x0800a9a9
 800a94c:	2b40      	cmp	r3, #64	@ 0x40
 800a94e:	d02e      	beq.n	800a9ae <UART_SetConfig+0xa36>
 800a950:	e031      	b.n	800a9b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a952:	f7fa fcf7 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800a956:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a958:	e033      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a95a:	f7fa fd09 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 800a95e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a960:	e02f      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a966:	4618      	mov	r0, r3
 800a968:	f7fc fcf8 	bl	800735c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a970:	e027      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a972:	f107 0318 	add.w	r3, r7, #24
 800a976:	4618      	mov	r0, r3
 800a978:	f7fc fe44 	bl	8007604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a980:	e01f      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a982:	4b2d      	ldr	r3, [pc, #180]	@ (800aa38 <UART_SetConfig+0xac0>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a98e:	4b2a      	ldr	r3, [pc, #168]	@ (800aa38 <UART_SetConfig+0xac0>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	4a28      	ldr	r2, [pc, #160]	@ (800aa3c <UART_SetConfig+0xac4>)
 800a99a:	fa22 f303 	lsr.w	r3, r2, r3
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9a0:	e00f      	b.n	800a9c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a9a2:	4b26      	ldr	r3, [pc, #152]	@ (800aa3c <UART_SetConfig+0xac4>)
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a6:	e00c      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9a8:	4b25      	ldr	r3, [pc, #148]	@ (800aa40 <UART_SetConfig+0xac8>)
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ac:	e009      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b4:	e005      	b.n	800a9c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9c0:	bf00      	nop
    }

    if (pclk != 0U)
 800a9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d021      	beq.n	800aa0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9cc:	4a1d      	ldr	r2, [pc, #116]	@ (800aa44 <UART_SetConfig+0xacc>)
 800a9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	441a      	add	r2, r3
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ee:	2b0f      	cmp	r3, #15
 800a9f0:	d909      	bls.n	800aa06 <UART_SetConfig+0xa8e>
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9f8:	d205      	bcs.n	800aa06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60da      	str	r2, [r3, #12]
 800aa04:	e002      	b.n	800aa0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2200      	movs	r2, #0
 800aa26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa28:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3748      	adds	r7, #72	@ 0x48
 800aa30:	46bd      	mov	sp, r7
 800aa32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa36:	bf00      	nop
 800aa38:	58024400 	.word	0x58024400
 800aa3c:	03d09000 	.word	0x03d09000
 800aa40:	003d0900 	.word	0x003d0900
 800aa44:	0800ec04 	.word	0x0800ec04

0800aa48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa54:	f003 0308 	and.w	r3, r3, #8
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00a      	beq.n	800aa72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa98:	f003 0302 	and.w	r3, r3, #2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00a      	beq.n	800aab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaba:	f003 0304 	and.w	r3, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00a      	beq.n	800aad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	430a      	orrs	r2, r1
 800aad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aadc:	f003 0310 	and.w	r3, r3, #16
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00a      	beq.n	800aafa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00a      	beq.n	800ab1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d01a      	beq.n	800ab5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab46:	d10a      	bne.n	800ab5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	605a      	str	r2, [r3, #4]
  }
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b098      	sub	sp, #96	@ 0x60
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab9c:	f7f7 f8e4 	bl	8001d68 <HAL_GetTick>
 800aba0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0308 	and.w	r3, r3, #8
 800abac:	2b08      	cmp	r3, #8
 800abae:	d12f      	bne.n	800ac10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abb8:	2200      	movs	r2, #0
 800abba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f88e 	bl	800ace0 <UART_WaitOnFlagUntilTimeout>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d022      	beq.n	800ac10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abde:	653b      	str	r3, [r7, #80]	@ 0x50
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e6      	bne.n	800abca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e063      	b.n	800acd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d149      	bne.n	800acb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac26:	2200      	movs	r2, #0
 800ac28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f857 	bl	800ace0 <UART_WaitOnFlagUntilTimeout>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d03c      	beq.n	800acb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	623b      	str	r3, [r7, #32]
   return(result);
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac56:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e6      	bne.n	800ac38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3308      	adds	r3, #8
 800ac70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	e853 3f00 	ldrex	r3, [r3]
 800ac78:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f023 0301 	bic.w	r3, r3, #1
 800ac80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac8a:	61fa      	str	r2, [r7, #28]
 800ac8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	69b9      	ldr	r1, [r7, #24]
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	617b      	str	r3, [r7, #20]
   return(result);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e5      	bne.n	800ac6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e012      	b.n	800acd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2220      	movs	r2, #32
 800acb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2220      	movs	r2, #32
 800acbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3758      	adds	r7, #88	@ 0x58
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	4613      	mov	r3, r2
 800acee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acf0:	e04f      	b.n	800ad92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d04b      	beq.n	800ad92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acfa:	f7f7 f835 	bl	8001d68 <HAL_GetTick>
 800acfe:	4602      	mov	r2, r0
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d302      	bcc.n	800ad10 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e04e      	b.n	800adb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d037      	beq.n	800ad92 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b80      	cmp	r3, #128	@ 0x80
 800ad26:	d034      	beq.n	800ad92 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2b40      	cmp	r3, #64	@ 0x40
 800ad2c:	d031      	beq.n	800ad92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	69db      	ldr	r3, [r3, #28]
 800ad34:	f003 0308 	and.w	r3, r3, #8
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	d110      	bne.n	800ad5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2208      	movs	r2, #8
 800ad42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f839 	bl	800adbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2208      	movs	r2, #8
 800ad4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e029      	b.n	800adb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad6c:	d111      	bne.n	800ad92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 f81f 	bl	800adbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e00f      	b.n	800adb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	bf0c      	ite	eq
 800ada2:	2301      	moveq	r3, #1
 800ada4:	2300      	movne	r3, #0
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	429a      	cmp	r2, r3
 800adae:	d0a0      	beq.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b095      	sub	sp, #84	@ 0x54
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ade4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ade8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e6      	bne.n	800adc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3308      	adds	r3, #8
 800adfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae06:	69fa      	ldr	r2, [r7, #28]
 800ae08:	4b1e      	ldr	r3, [pc, #120]	@ (800ae84 <UART_EndRxTransfer+0xc8>)
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d118      	bne.n	800ae64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f023 0310 	bic.w	r3, r3, #16
 800ae46:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6979      	ldr	r1, [r7, #20]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae78:	bf00      	nop
 800ae7a:	3754      	adds	r7, #84	@ 0x54
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	effffffe 	.word	0xeffffffe

0800ae88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_UARTEx_DisableFifoMode+0x16>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e027      	b.n	800aeee <HAL_UARTEx_DisableFifoMode+0x66>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2224      	movs	r2, #36	@ 0x24
 800aeaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0201 	bic.w	r2, r2, #1
 800aec4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aecc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2220      	movs	r2, #32
 800aee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d101      	bne.n	800af12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af0e:	2302      	movs	r3, #2
 800af10:	e02d      	b.n	800af6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2224      	movs	r2, #36	@ 0x24
 800af1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 0201 	bic.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f850 	bl	800aff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af86:	2b01      	cmp	r3, #1
 800af88:	d101      	bne.n	800af8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af8a:	2302      	movs	r3, #2
 800af8c:	e02d      	b.n	800afea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2224      	movs	r2, #36	@ 0x24
 800af9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f022 0201 	bic.w	r2, r2, #1
 800afb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f812 	bl	800aff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2220      	movs	r2, #32
 800afdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b000:	2b00      	cmp	r3, #0
 800b002:	d108      	bne.n	800b016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b014:	e031      	b.n	800b07a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b016:	2310      	movs	r3, #16
 800b018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b01a:	2310      	movs	r3, #16
 800b01c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	0e5b      	lsrs	r3, r3, #25
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	0f5b      	lsrs	r3, r3, #29
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f003 0307 	and.w	r3, r3, #7
 800b03c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	7b3a      	ldrb	r2, [r7, #12]
 800b042:	4911      	ldr	r1, [pc, #68]	@ (800b088 <UARTEx_SetNbDataToProcess+0x94>)
 800b044:	5c8a      	ldrb	r2, [r1, r2]
 800b046:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b04a:	7b3a      	ldrb	r2, [r7, #12]
 800b04c:	490f      	ldr	r1, [pc, #60]	@ (800b08c <UARTEx_SetNbDataToProcess+0x98>)
 800b04e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b050:	fb93 f3f2 	sdiv	r3, r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	7b7a      	ldrb	r2, [r7, #13]
 800b060:	4909      	ldr	r1, [pc, #36]	@ (800b088 <UARTEx_SetNbDataToProcess+0x94>)
 800b062:	5c8a      	ldrb	r2, [r1, r2]
 800b064:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b068:	7b7a      	ldrb	r2, [r7, #13]
 800b06a:	4908      	ldr	r1, [pc, #32]	@ (800b08c <UARTEx_SetNbDataToProcess+0x98>)
 800b06c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b06e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b072:	b29a      	uxth	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	0800ec1c 	.word	0x0800ec1c
 800b08c:	0800ec24 	.word	0x0800ec24

0800b090 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b090:	b084      	sub	sp, #16
 800b092:	b480      	push	{r7}
 800b094:	b085      	sub	sp, #20
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	f107 001c 	add.w	r0, r7, #28
 800b09e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b0a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b0aa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b0ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b0b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b0b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <SDMMC_Init+0x50>)
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	b004      	add	sp, #16
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	ffc02c00 	.word	0xffc02c00

0800b0e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f043 0203 	orr.w	r2, r3, #3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0303 	and.w	r3, r3, #3
}
 800b152:	4618      	mov	r0, r3
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
	...

0800b160 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b17e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b184:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b18a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	4b06      	ldr	r3, [pc, #24]	@ (800b1b0 <SDMMC_SendCommand+0x50>)
 800b198:	4013      	ands	r3, r2
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	fffee0c0 	.word	0xfffee0c0

0800b1b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	b2db      	uxtb	r3, r3
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3314      	adds	r3, #20
 800b1dc:	461a      	mov	r2, r3
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b21a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b220:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b232:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	431a      	orrs	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0

}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b25a:	2310      	movs	r3, #16
 800b25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b25e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b26c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff ff73 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b27a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b27e:	2110      	movs	r1, #16
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa5f 	bl	800b744 <SDMMC_GetCmdResp1>
 800b286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b288:	69fb      	ldr	r3, [r7, #28]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b088      	sub	sp, #32
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b2a0:	2311      	movs	r3, #17
 800b2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2b4:	f107 0308 	add.w	r3, r7, #8
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff ff50 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b2c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2c4:	2111      	movs	r1, #17
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fa3c 	bl	800b744 <SDMMC_GetCmdResp1>
 800b2cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ce:	69fb      	ldr	r3, [r7, #28]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3720      	adds	r7, #32
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b088      	sub	sp, #32
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b2e6:	2312      	movs	r3, #18
 800b2e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2fa:	f107 0308 	add.w	r3, r7, #8
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ff2d 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b30a:	2112      	movs	r1, #18
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa19 	bl	800b744 <SDMMC_GetCmdResp1>
 800b312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b314:	69fb      	ldr	r3, [r7, #28]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3720      	adds	r7, #32
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b088      	sub	sp, #32
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b32c:	2318      	movs	r3, #24
 800b32e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b336:	2300      	movs	r3, #0
 800b338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b33a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b33e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b340:	f107 0308 	add.w	r3, r7, #8
 800b344:	4619      	mov	r1, r3
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff ff0a 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b34c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b350:	2118      	movs	r1, #24
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f9f6 	bl	800b744 <SDMMC_GetCmdResp1>
 800b358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b35a:	69fb      	ldr	r3, [r7, #28]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3720      	adds	r7, #32
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b372:	2319      	movs	r3, #25
 800b374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b37a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b37c:	2300      	movs	r3, #0
 800b37e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b386:	f107 0308 	add.w	r3, r7, #8
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7ff fee7 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b392:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b396:	2119      	movs	r1, #25
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f9d3 	bl	800b744 <SDMMC_GetCmdResp1>
 800b39e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3a0:	69fb      	ldr	r3, [r7, #28]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3720      	adds	r7, #32
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b3b8:	230c      	movs	r3, #12
 800b3ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3e4:	f107 0308 	add.w	r3, r7, #8
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff feb8 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b3f0:	4a0b      	ldr	r2, [pc, #44]	@ (800b420 <SDMMC_CmdStopTransfer+0x74>)
 800b3f2:	210c      	movs	r1, #12
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f9a5 	bl	800b744 <SDMMC_GetCmdResp1>
 800b3fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b40e:	d101      	bne.n	800b414 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b410:	2300      	movs	r3, #0
 800b412:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b414:	69fb      	ldr	r3, [r7, #28]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	05f5e100 	.word	0x05f5e100

0800b424 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b432:	2307      	movs	r3, #7
 800b434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b43a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b446:	f107 0308 	add.w	r3, r7, #8
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff fe87 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b452:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b456:	2107      	movs	r1, #7
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f973 	bl	800b744 <SDMMC_GetCmdResp1>
 800b45e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b460:	69fb      	ldr	r3, [r7, #28]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3720      	adds	r7, #32
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b088      	sub	sp, #32
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b47a:	2300      	movs	r3, #0
 800b47c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b488:	f107 0308 	add.w	r3, r7, #8
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff fe66 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fb97 	bl	800bbc8 <SDMMC_GetCmdError>
 800b49a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b49c:	69fb      	ldr	r3, [r7, #28]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3720      	adds	r7, #32
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b088      	sub	sp, #32
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b4ae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b4b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b4b4:	2308      	movs	r3, #8
 800b4b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fe46 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fb29 	bl	800bb2c <SDMMC_GetCmdResp7>
 800b4da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3720      	adds	r7, #32
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b088      	sub	sp, #32
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b4f4:	2337      	movs	r3, #55	@ 0x37
 800b4f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b508:	f107 0308 	add.w	r3, r7, #8
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff fe26 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b514:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b518:	2137      	movs	r1, #55	@ 0x37
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f912 	bl	800b744 <SDMMC_GetCmdResp1>
 800b520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b522:	69fb      	ldr	r3, [r7, #28]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3720      	adds	r7, #32
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b53a:	2329      	movs	r3, #41	@ 0x29
 800b53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b53e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b544:	2300      	movs	r3, #0
 800b546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff fe03 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa2e 	bl	800b9bc <SDMMC_GetCmdResp3>
 800b560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b562:	69fb      	ldr	r3, [r7, #28]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b57a:	2306      	movs	r3, #6
 800b57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b58c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff fde3 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b59a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b59e:	2106      	movs	r1, #6
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f8cf 	bl	800b744 <SDMMC_GetCmdResp1>
 800b5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3720      	adds	r7, #32
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b088      	sub	sp, #32
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b5be:	2333      	movs	r3, #51	@ 0x33
 800b5c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d2:	f107 0308 	add.w	r3, r7, #8
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff fdc1 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b5de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5e2:	2133      	movs	r1, #51	@ 0x33
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f8ad 	bl	800b744 <SDMMC_GetCmdResp1>
 800b5ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3720      	adds	r7, #32
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b088      	sub	sp, #32
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b602:	2302      	movs	r3, #2
 800b604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b606:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b60c:	2300      	movs	r3, #0
 800b60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b616:	f107 0308 	add.w	r3, r7, #8
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fd9f 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f980 	bl	800b928 <SDMMC_GetCmdResp2>
 800b628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b62a:	69fb      	ldr	r3, [r7, #28]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3720      	adds	r7, #32
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b642:	2309      	movs	r3, #9
 800b644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b646:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b64a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64c:	2300      	movs	r3, #0
 800b64e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b654:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff fd7f 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f960 	bl	800b928 <SDMMC_GetCmdResp2>
 800b668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b66a:	69fb      	ldr	r3, [r7, #28]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b682:	2303      	movs	r3, #3
 800b684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b68a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b696:	f107 0308 	add.w	r3, r7, #8
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff fd5f 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	2103      	movs	r1, #3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f9c8 	bl	800ba3c <SDMMC_GetCmdResp6>
 800b6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ae:	69fb      	ldr	r3, [r7, #28]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b6c6:	230d      	movs	r3, #13
 800b6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff fd3d 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b6e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ea:	210d      	movs	r1, #13
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f829 	bl	800b744 <SDMMC_GetCmdResp1>
 800b6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b088      	sub	sp, #32
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b706:	2300      	movs	r3, #0
 800b708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b70a:	230d      	movs	r3, #13
 800b70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b70e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b714:	2300      	movs	r3, #0
 800b716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b71c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b71e:	f107 0308 	add.w	r3, r7, #8
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff fd1b 	bl	800b160 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b72a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b72e:	210d      	movs	r1, #13
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f807 	bl	800b744 <SDMMC_GetCmdResp1>
 800b736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b738:	69fb      	ldr	r3, [r7, #28]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3720      	adds	r7, #32
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	460b      	mov	r3, r1
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b752:	4b70      	ldr	r3, [pc, #448]	@ (800b914 <SDMMC_GetCmdResp1+0x1d0>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a70      	ldr	r2, [pc, #448]	@ (800b918 <SDMMC_GetCmdResp1+0x1d4>)
 800b758:	fba2 2303 	umull	r2, r3, r2, r3
 800b75c:	0a5a      	lsrs	r2, r3, #9
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	fb02 f303 	mul.w	r3, r2, r3
 800b764:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	1e5a      	subs	r2, r3, #1
 800b76a:	61fa      	str	r2, [r7, #28]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d102      	bne.n	800b776 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b770:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b774:	e0c9      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b77a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	4b67      	ldr	r3, [pc, #412]	@ (800b91c <SDMMC_GetCmdResp1+0x1d8>)
 800b780:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0ef      	beq.n	800b766 <SDMMC_GetCmdResp1+0x22>
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1ea      	bne.n	800b766 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d004      	beq.n	800b7a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2204      	movs	r2, #4
 800b7a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	e0b1      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d004      	beq.n	800b7bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e0a6      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4a58      	ldr	r2, [pc, #352]	@ (800b920 <SDMMC_GetCmdResp1+0x1dc>)
 800b7c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fcf6 	bl	800b1b4 <SDMMC_GetCommandResponse>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	7afb      	ldrb	r3, [r7, #11]
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d001      	beq.n	800b7d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e099      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7ff fcf8 	bl	800b1ce <SDMMC_GetResponse>
 800b7de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	4b50      	ldr	r3, [pc, #320]	@ (800b924 <SDMMC_GetCmdResp1+0x1e0>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e08d      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	da02      	bge.n	800b7fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b7f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b7f8:	e087      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b804:	2340      	movs	r3, #64	@ 0x40
 800b806:	e080      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b812:	2380      	movs	r3, #128	@ 0x80
 800b814:	e079      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b824:	e071      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b834:	e069      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b844:	e061      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b850:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b854:	e059      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b864:	e051      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b874:	e049      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b880:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b884:	e041      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b894:	e039      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b8a4:	e031      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d002      	beq.n	800b8b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b8b4:	e029      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b8c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b8c4:	e021      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b8d4:	e019      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b8e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b8e4:	e011      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b8f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b8f4:	e009      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f003 0308 	and.w	r3, r3, #8
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b900:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b904:	e001      	b.n	800b90a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3720      	adds	r7, #32
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	24000000 	.word	0x24000000
 800b918:	10624dd3 	.word	0x10624dd3
 800b91c:	00200045 	.word	0x00200045
 800b920:	002000c5 	.word	0x002000c5
 800b924:	fdffe008 	.word	0xfdffe008

0800b928 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b930:	4b1f      	ldr	r3, [pc, #124]	@ (800b9b0 <SDMMC_GetCmdResp2+0x88>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a1f      	ldr	r2, [pc, #124]	@ (800b9b4 <SDMMC_GetCmdResp2+0x8c>)
 800b936:	fba2 2303 	umull	r2, r3, r2, r3
 800b93a:	0a5b      	lsrs	r3, r3, #9
 800b93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b940:	fb02 f303 	mul.w	r3, r2, r3
 800b944:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	1e5a      	subs	r2, r3, #1
 800b94a:	60fa      	str	r2, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d102      	bne.n	800b956 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b950:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b954:	e026      	b.n	800b9a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0ef      	beq.n	800b946 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1ea      	bne.n	800b946 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2204      	movs	r2, #4
 800b980:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b982:	2304      	movs	r3, #4
 800b984:	e00e      	b.n	800b9a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b998:	2301      	movs	r3, #1
 800b99a:	e003      	b.n	800b9a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a06      	ldr	r2, [pc, #24]	@ (800b9b8 <SDMMC_GetCmdResp2+0x90>)
 800b9a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	24000000 	.word	0x24000000
 800b9b4:	10624dd3 	.word	0x10624dd3
 800b9b8:	002000c5 	.word	0x002000c5

0800b9bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba30 <SDMMC_GetCmdResp3+0x74>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a1a      	ldr	r2, [pc, #104]	@ (800ba34 <SDMMC_GetCmdResp3+0x78>)
 800b9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ce:	0a5b      	lsrs	r3, r3, #9
 800b9d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9d4:	fb02 f303 	mul.w	r3, r2, r3
 800b9d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	1e5a      	subs	r2, r3, #1
 800b9de:	60fa      	str	r2, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9e8:	e01b      	b.n	800ba22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0ef      	beq.n	800b9da <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1ea      	bne.n	800b9da <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2204      	movs	r2, #4
 800ba14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba16:	2304      	movs	r3, #4
 800ba18:	e003      	b.n	800ba22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a06      	ldr	r2, [pc, #24]	@ (800ba38 <SDMMC_GetCmdResp3+0x7c>)
 800ba1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	24000000 	.word	0x24000000
 800ba34:	10624dd3 	.word	0x10624dd3
 800ba38:	002000c5 	.word	0x002000c5

0800ba3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	460b      	mov	r3, r1
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba4a:	4b35      	ldr	r3, [pc, #212]	@ (800bb20 <SDMMC_GetCmdResp6+0xe4>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a35      	ldr	r2, [pc, #212]	@ (800bb24 <SDMMC_GetCmdResp6+0xe8>)
 800ba50:	fba2 2303 	umull	r2, r3, r2, r3
 800ba54:	0a5b      	lsrs	r3, r3, #9
 800ba56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba5a:	fb02 f303 	mul.w	r3, r2, r3
 800ba5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	1e5a      	subs	r2, r3, #1
 800ba64:	61fa      	str	r2, [r7, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba6e:	e052      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0ef      	beq.n	800ba60 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1ea      	bne.n	800ba60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8e:	f003 0304 	and.w	r3, r3, #4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d004      	beq.n	800baa0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2204      	movs	r2, #4
 800ba9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	e03a      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bab2:	2301      	movs	r3, #1
 800bab4:	e02f      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff fb7c 	bl	800b1b4 <SDMMC_GetCommandResponse>
 800babc:	4603      	mov	r3, r0
 800babe:	461a      	mov	r2, r3
 800bac0:	7afb      	ldrb	r3, [r7, #11]
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d001      	beq.n	800baca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e025      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4a16      	ldr	r2, [pc, #88]	@ (800bb28 <SDMMC_GetCmdResp6+0xec>)
 800bace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fb7b 	bl	800b1ce <SDMMC_GetResponse>
 800bad8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	0c1b      	lsrs	r3, r3, #16
 800bae8:	b29a      	uxth	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800baee:	2300      	movs	r3, #0
 800baf0:	e011      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bafc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb00:	e009      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb10:	e001      	b.n	800bb16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3720      	adds	r7, #32
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	24000000 	.word	0x24000000
 800bb24:	10624dd3 	.word	0x10624dd3
 800bb28:	002000c5 	.word	0x002000c5

0800bb2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb34:	4b22      	ldr	r3, [pc, #136]	@ (800bbc0 <SDMMC_GetCmdResp7+0x94>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a22      	ldr	r2, [pc, #136]	@ (800bbc4 <SDMMC_GetCmdResp7+0x98>)
 800bb3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb3e:	0a5b      	lsrs	r3, r3, #9
 800bb40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb44:	fb02 f303 	mul.w	r3, r2, r3
 800bb48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	1e5a      	subs	r2, r3, #1
 800bb4e:	60fa      	str	r2, [r7, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d102      	bne.n	800bb5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb58:	e02c      	b.n	800bbb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0ef      	beq.n	800bb4a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1ea      	bne.n	800bb4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d004      	beq.n	800bb8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2204      	movs	r2, #4
 800bb84:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb86:	2304      	movs	r3, #4
 800bb88:	e014      	b.n	800bbb4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d004      	beq.n	800bba0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e009      	b.n	800bbb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2240      	movs	r2, #64	@ 0x40
 800bbb0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbb2:	2300      	movs	r3, #0

}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	24000000 	.word	0x24000000
 800bbc4:	10624dd3 	.word	0x10624dd3

0800bbc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbd0:	4b11      	ldr	r3, [pc, #68]	@ (800bc18 <SDMMC_GetCmdError+0x50>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a11      	ldr	r2, [pc, #68]	@ (800bc1c <SDMMC_GetCmdError+0x54>)
 800bbd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbda:	0a5b      	lsrs	r3, r3, #9
 800bbdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbe0:	fb02 f303 	mul.w	r3, r2, r3
 800bbe4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	1e5a      	subs	r2, r3, #1
 800bbea:	60fa      	str	r2, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbf0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbf4:	e009      	b.n	800bc0a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0f1      	beq.n	800bbe6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a06      	ldr	r2, [pc, #24]	@ (800bc20 <SDMMC_GetCmdError+0x58>)
 800bc06:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	24000000 	.word	0x24000000
 800bc1c:	10624dd3 	.word	0x10624dd3
 800bc20:	002000c5 	.word	0x002000c5

0800bc24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc28:	4904      	ldr	r1, [pc, #16]	@ (800bc3c <MX_FATFS_Init+0x18>)
 800bc2a:	4805      	ldr	r0, [pc, #20]	@ (800bc40 <MX_FATFS_Init+0x1c>)
 800bc2c:	f002 fc5a 	bl	800e4e4 <FATFS_LinkDriver>
 800bc30:	4603      	mov	r3, r0
 800bc32:	461a      	mov	r2, r3
 800bc34:	4b03      	ldr	r3, [pc, #12]	@ (800bc44 <MX_FATFS_Init+0x20>)
 800bc36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bc38:	bf00      	nop
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	24001770 	.word	0x24001770
 800bc40:	0800ec2c 	.word	0x0800ec2c
 800bc44:	2400176c 	.word	0x2400176c

0800bc48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bc4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc62:	f000 f885 	bl	800bd70 <BSP_SD_IsDetected>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d001      	beq.n	800bc70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e012      	b.n	800bc96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc70:	480b      	ldr	r0, [pc, #44]	@ (800bca0 <BSP_SD_Init+0x48>)
 800bc72:	f7fc f8d1 	bl	8007e18 <HAL_SD_Init>
 800bc76:	4603      	mov	r3, r0
 800bc78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bc84:	4806      	ldr	r0, [pc, #24]	@ (800bca0 <BSP_SD_Init+0x48>)
 800bc86:	f7fc ff87 	bl	8008b98 <HAL_SD_ConfigWideBusOperation>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bc94:	79fb      	ldrb	r3, [r7, #7]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	240015d0 	.word	0x240015d0

0800bca4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	68f9      	ldr	r1, [r7, #12]
 800bcba:	4806      	ldr	r0, [pc, #24]	@ (800bcd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bcbc:	f7fc f9cc 	bl	8008058 <HAL_SD_ReadBlocks_DMA>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	240015d0 	.word	0x240015d0

0800bcd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	68f9      	ldr	r1, [r7, #12]
 800bcee:	4806      	ldr	r0, [pc, #24]	@ (800bd08 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bcf0:	f7fc fa5a 	bl	80081a8 <HAL_SD_WriteBlocks_DMA>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	240015d0 	.word	0x240015d0

0800bd0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd10:	4805      	ldr	r0, [pc, #20]	@ (800bd28 <BSP_SD_GetCardState+0x1c>)
 800bd12:	f7fd f853 	bl	8008dbc <HAL_SD_GetCardState>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	bf14      	ite	ne
 800bd1c:	2301      	movne	r3, #1
 800bd1e:	2300      	moveq	r3, #0
 800bd20:	b2db      	uxtb	r3, r3
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	240015d0 	.word	0x240015d0

0800bd2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd34:	6879      	ldr	r1, [r7, #4]
 800bd36:	4803      	ldr	r0, [pc, #12]	@ (800bd44 <BSP_SD_GetCardInfo+0x18>)
 800bd38:	f7fc ff02 	bl	8008b40 <HAL_SD_GetCardInfo>
}
 800bd3c:	bf00      	nop
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	240015d0 	.word	0x240015d0

0800bd48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bd50:	f000 f9a0 	bl	800c094 <BSP_SD_WriteCpltCallback>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd64:	f000 f9a2 	bl	800c0ac <BSP_SD_ReadCpltCallback>
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd76:	2301      	movs	r3, #1
 800bd78:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bd7a:	f000 f80b 	bl	800bd94 <BSP_PlatformIsDetected>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d101      	bne.n	800bd88 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd84:	2300      	movs	r3, #0
 800bd86:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	b2db      	uxtb	r3, r3
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bd9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bda2:	4806      	ldr	r0, [pc, #24]	@ (800bdbc <BSP_PlatformIsDetected+0x28>)
 800bda4:	f7f6 feb8 	bl	8002b18 <HAL_GPIO_ReadPin>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bdb2:	79fb      	ldrb	r3, [r7, #7]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	58022000 	.word	0x58022000

0800bdc0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bdc8:	f7f5 ffce 	bl	8001d68 <HAL_GetTick>
 800bdcc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bdce:	e006      	b.n	800bdde <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bdd0:	f7ff ff9c 	bl	800bd0c <BSP_SD_GetCardState>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	e009      	b.n	800bdf2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bdde:	f7f5 ffc3 	bl	8001d68 <HAL_GetTick>
 800bde2:	4602      	mov	r2, r0
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d8f0      	bhi.n	800bdd0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
	...

0800bdfc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be06:	4b0b      	ldr	r3, [pc, #44]	@ (800be34 <SD_CheckStatus+0x38>)
 800be08:	2201      	movs	r2, #1
 800be0a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800be0c:	f7ff ff7e 	bl	800bd0c <BSP_SD_GetCardState>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d107      	bne.n	800be26 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be16:	4b07      	ldr	r3, [pc, #28]	@ (800be34 <SD_CheckStatus+0x38>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f023 0301 	bic.w	r3, r3, #1
 800be20:	b2da      	uxtb	r2, r3
 800be22:	4b04      	ldr	r3, [pc, #16]	@ (800be34 <SD_CheckStatus+0x38>)
 800be24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800be26:	4b03      	ldr	r3, [pc, #12]	@ (800be34 <SD_CheckStatus+0x38>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	b2db      	uxtb	r3, r3
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	24000015 	.word	0x24000015

0800be38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800be42:	f7ff ff09 	bl	800bc58 <BSP_SD_Init>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d107      	bne.n	800be5c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff ffd4 	bl	800bdfc <SD_CheckStatus>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	4b04      	ldr	r3, [pc, #16]	@ (800be6c <SD_initialize+0x34>)
 800be5a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800be5c:	4b03      	ldr	r3, [pc, #12]	@ (800be6c <SD_initialize+0x34>)
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	b2db      	uxtb	r3, r3
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	24000015 	.word	0x24000015

0800be70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff ffbd 	bl	800bdfc <SD_CheckStatus>
 800be82:	4603      	mov	r3, r0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	607a      	str	r2, [r7, #4]
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bea0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bea4:	f7ff ff8c 	bl	800bdc0 <SD_CheckStatusWithTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da01      	bge.n	800beb2 <SD_read+0x26>
  {
    return res;
 800beae:	7dfb      	ldrb	r3, [r7, #23]
 800beb0:	e03b      	b.n	800bf2a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	68b8      	ldr	r0, [r7, #8]
 800beb8:	f7ff fef4 	bl	800bca4 <BSP_SD_ReadBlocks_DMA>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d132      	bne.n	800bf28 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bec2:	4b1c      	ldr	r3, [pc, #112]	@ (800bf34 <SD_read+0xa8>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bec8:	f7f5 ff4e 	bl	8001d68 <HAL_GetTick>
 800becc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bece:	bf00      	nop
 800bed0:	4b18      	ldr	r3, [pc, #96]	@ (800bf34 <SD_read+0xa8>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d108      	bne.n	800beea <SD_read+0x5e>
 800bed8:	f7f5 ff46 	bl	8001d68 <HAL_GetTick>
 800bedc:	4602      	mov	r2, r0
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d9f2      	bls.n	800bed0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800beea:	4b12      	ldr	r3, [pc, #72]	@ (800bf34 <SD_read+0xa8>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	75fb      	strb	r3, [r7, #23]
 800bef6:	e017      	b.n	800bf28 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bef8:	4b0e      	ldr	r3, [pc, #56]	@ (800bf34 <SD_read+0xa8>)
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800befe:	f7f5 ff33 	bl	8001d68 <HAL_GetTick>
 800bf02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf04:	e007      	b.n	800bf16 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf06:	f7ff ff01 	bl	800bd0c <BSP_SD_GetCardState>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d102      	bne.n	800bf16 <SD_read+0x8a>
          {
            res = RES_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bf14:	e008      	b.n	800bf28 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf16:	f7f5 ff27 	bl	8001d68 <HAL_GetTick>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d9ee      	bls.n	800bf06 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	24001778 	.word	0x24001778

0800bf38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	607a      	str	r2, [r7, #4]
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bf4c:	4b24      	ldr	r3, [pc, #144]	@ (800bfe0 <SD_write+0xa8>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf52:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bf56:	f7ff ff33 	bl	800bdc0 <SD_CheckStatusWithTimeout>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	da01      	bge.n	800bf64 <SD_write+0x2c>
  {
    return res;
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	e038      	b.n	800bfd6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	6879      	ldr	r1, [r7, #4]
 800bf68:	68b8      	ldr	r0, [r7, #8]
 800bf6a:	f7ff feb5 	bl	800bcd8 <BSP_SD_WriteBlocks_DMA>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d12f      	bne.n	800bfd4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bf74:	f7f5 fef8 	bl	8001d68 <HAL_GetTick>
 800bf78:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bf7a:	bf00      	nop
 800bf7c:	4b18      	ldr	r3, [pc, #96]	@ (800bfe0 <SD_write+0xa8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d108      	bne.n	800bf96 <SD_write+0x5e>
 800bf84:	f7f5 fef0 	bl	8001d68 <HAL_GetTick>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d9f2      	bls.n	800bf7c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800bf96:	4b12      	ldr	r3, [pc, #72]	@ (800bfe0 <SD_write+0xa8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d102      	bne.n	800bfa4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	75fb      	strb	r3, [r7, #23]
 800bfa2:	e017      	b.n	800bfd4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bfa4:	4b0e      	ldr	r3, [pc, #56]	@ (800bfe0 <SD_write+0xa8>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bfaa:	f7f5 fedd 	bl	8001d68 <HAL_GetTick>
 800bfae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bfb0:	e007      	b.n	800bfc2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfb2:	f7ff feab 	bl	800bd0c <BSP_SD_GetCardState>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <SD_write+0x8a>
          {
            res = RES_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	75fb      	strb	r3, [r7, #23]
            break;
 800bfc0:	e008      	b.n	800bfd4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bfc2:	f7f5 fed1 	bl	8001d68 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d9ee      	bls.n	800bfb2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	24001774 	.word	0x24001774

0800bfe4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08c      	sub	sp, #48	@ 0x30
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	603a      	str	r2, [r7, #0]
 800bfee:	71fb      	strb	r3, [r7, #7]
 800bff0:	460b      	mov	r3, r1
 800bff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bffa:	4b25      	ldr	r3, [pc, #148]	@ (800c090 <SD_ioctl+0xac>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <SD_ioctl+0x28>
 800c008:	2303      	movs	r3, #3
 800c00a:	e03c      	b.n	800c086 <SD_ioctl+0xa2>

  switch (cmd)
 800c00c:	79bb      	ldrb	r3, [r7, #6]
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d834      	bhi.n	800c07c <SD_ioctl+0x98>
 800c012:	a201      	add	r2, pc, #4	@ (adr r2, 800c018 <SD_ioctl+0x34>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c029 	.word	0x0800c029
 800c01c:	0800c031 	.word	0x0800c031
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c063 	.word	0x0800c063
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c02e:	e028      	b.n	800c082 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c030:	f107 0308 	add.w	r3, r7, #8
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fe79 	bl	800bd2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c03a:	6a3a      	ldr	r2, [r7, #32]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c046:	e01c      	b.n	800c082 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff fe6d 	bl	800bd2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c054:	b29a      	uxth	r2, r3
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c060:	e00f      	b.n	800c082 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c062:	f107 0308 	add.w	r3, r7, #8
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff fe60 	bl	800bd2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06e:	0a5a      	lsrs	r2, r3, #9
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c07a:	e002      	b.n	800c082 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c07c:	2304      	movs	r3, #4
 800c07e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c082:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c086:	4618      	mov	r0, r3
 800c088:	3730      	adds	r7, #48	@ 0x30
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	24000015 	.word	0x24000015

0800c094 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c094:	b480      	push	{r7}
 800c096:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c098:	4b03      	ldr	r3, [pc, #12]	@ (800c0a8 <BSP_SD_WriteCpltCallback+0x14>)
 800c09a:	2201      	movs	r2, #1
 800c09c:	601a      	str	r2, [r3, #0]
}
 800c09e:	bf00      	nop
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	24001774 	.word	0x24001774

0800c0ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c0b0:	4b03      	ldr	r3, [pc, #12]	@ (800c0c0 <BSP_SD_ReadCpltCallback+0x14>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
}
 800c0b6:	bf00      	nop
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	24001778 	.word	0x24001778

0800c0c4 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c0c8:	bf00      	nop
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c0de:	79fb      	ldrb	r3, [r7, #7]
 800c0e0:	4a08      	ldr	r2, [pc, #32]	@ (800c104 <disk_status+0x30>)
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	79fa      	ldrb	r2, [r7, #7]
 800c0ec:	4905      	ldr	r1, [pc, #20]	@ (800c104 <disk_status+0x30>)
 800c0ee:	440a      	add	r2, r1
 800c0f0:	7a12      	ldrb	r2, [r2, #8]
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	240017a4 	.word	0x240017a4

0800c108 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	4a0e      	ldr	r2, [pc, #56]	@ (800c154 <disk_initialize+0x4c>)
 800c11a:	5cd3      	ldrb	r3, [r2, r3]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d114      	bne.n	800c14a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	4a0c      	ldr	r2, [pc, #48]	@ (800c154 <disk_initialize+0x4c>)
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	79fa      	ldrb	r2, [r7, #7]
 800c12e:	4909      	ldr	r1, [pc, #36]	@ (800c154 <disk_initialize+0x4c>)
 800c130:	440a      	add	r2, r1
 800c132:	7a12      	ldrb	r2, [r2, #8]
 800c134:	4610      	mov	r0, r2
 800c136:	4798      	blx	r3
 800c138:	4603      	mov	r3, r0
 800c13a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d103      	bne.n	800c14a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	4a03      	ldr	r2, [pc, #12]	@ (800c154 <disk_initialize+0x4c>)
 800c146:	2101      	movs	r1, #1
 800c148:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	240017a4 	.word	0x240017a4

0800c158 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c158:	b590      	push	{r4, r7, lr}
 800c15a:	b087      	sub	sp, #28
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	4a0a      	ldr	r2, [pc, #40]	@ (800c194 <disk_read+0x3c>)
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	689c      	ldr	r4, [r3, #8]
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4a07      	ldr	r2, [pc, #28]	@ (800c194 <disk_read+0x3c>)
 800c178:	4413      	add	r3, r2
 800c17a:	7a18      	ldrb	r0, [r3, #8]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	47a0      	blx	r4
 800c184:	4603      	mov	r3, r0
 800c186:	75fb      	strb	r3, [r7, #23]
  return res;
 800c188:	7dfb      	ldrb	r3, [r7, #23]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	371c      	adds	r7, #28
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd90      	pop	{r4, r7, pc}
 800c192:	bf00      	nop
 800c194:	240017a4 	.word	0x240017a4

0800c198 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c198:	b590      	push	{r4, r7, lr}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c1d4 <disk_write+0x3c>)
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	68dc      	ldr	r4, [r3, #12]
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
 800c1b6:	4a07      	ldr	r2, [pc, #28]	@ (800c1d4 <disk_write+0x3c>)
 800c1b8:	4413      	add	r3, r2
 800c1ba:	7a18      	ldrb	r0, [r3, #8]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	47a0      	blx	r4
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	371c      	adds	r7, #28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd90      	pop	{r4, r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	240017a4 	.word	0x240017a4

0800c1d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c1e8:	89fb      	ldrh	r3, [r7, #14]
 800c1ea:	021b      	lsls	r3, r3, #8
 800c1ec:	b21a      	sxth	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	b21b      	sxth	r3, r3
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	b21b      	sxth	r3, r3
 800c1f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c1fa:	89fb      	ldrh	r3, [r7, #14]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3303      	adds	r3, #3
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	021b      	lsls	r3, r3, #8
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	3202      	adds	r2, #2
 800c220:	7812      	ldrb	r2, [r2, #0]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	3201      	adds	r2, #1
 800c22e:	7812      	ldrb	r2, [r2, #0]
 800c230:	4313      	orrs	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	021b      	lsls	r3, r3, #8
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	7812      	ldrb	r2, [r2, #0]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c240:	68fb      	ldr	r3, [r7, #12]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3714      	adds	r7, #20
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	1c5a      	adds	r2, r3, #1
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	887a      	ldrh	r2, [r7, #2]
 800c262:	b2d2      	uxtb	r2, r2
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	887b      	ldrh	r3, [r7, #2]
 800c268:	0a1b      	lsrs	r3, r3, #8
 800c26a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	607a      	str	r2, [r7, #4]
 800c272:	887a      	ldrh	r2, [r7, #2]
 800c274:	b2d2      	uxtb	r2, r2
 800c276:	701a      	strb	r2, [r3, #0]
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	b2d2      	uxtb	r2, r2
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	0a1b      	lsrs	r3, r3, #8
 800c29e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	0a1b      	lsrs	r3, r3, #8
 800c2b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	1c5a      	adds	r2, r3, #1
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	b2d2      	uxtb	r2, r2
 800c2bc:	701a      	strb	r2, [r3, #0]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	0a1b      	lsrs	r3, r3, #8
 800c2c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	607a      	str	r2, [r7, #4]
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	b2d2      	uxtb	r2, r2
 800c2ce:	701a      	strb	r2, [r3, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c2dc:	b480      	push	{r7}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00d      	beq.n	800c312 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	1c53      	adds	r3, r2, #1
 800c2fa:	613b      	str	r3, [r7, #16]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	1c59      	adds	r1, r3, #1
 800c300:	6179      	str	r1, [r7, #20]
 800c302:	7812      	ldrb	r2, [r2, #0]
 800c304:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3b01      	subs	r3, #1
 800c30a:	607b      	str	r3, [r7, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1f1      	bne.n	800c2f6 <mem_cpy+0x1a>
	}
}
 800c312:	bf00      	nop
 800c314:	371c      	adds	r7, #28
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c31e:	b480      	push	{r7}
 800c320:	b087      	sub	sp, #28
 800c322:	af00      	add	r7, sp, #0
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	617a      	str	r2, [r7, #20]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	b2d2      	uxtb	r2, r2
 800c338:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	607b      	str	r3, [r7, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1f3      	bne.n	800c32e <mem_set+0x10>
}
 800c346:	bf00      	nop
 800c348:	bf00      	nop
 800c34a:	371c      	adds	r7, #28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c354:	b480      	push	{r7}
 800c356:	b089      	sub	sp, #36	@ 0x24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	61fb      	str	r3, [r7, #28]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	61fa      	str	r2, [r7, #28]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	4619      	mov	r1, r3
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	1c5a      	adds	r2, r3, #1
 800c37a:	61ba      	str	r2, [r7, #24]
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	1acb      	subs	r3, r1, r3
 800c380:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3b01      	subs	r3, #1
 800c386:	607b      	str	r3, [r7, #4]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <mem_cmp+0x40>
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d0eb      	beq.n	800c36c <mem_cmp+0x18>

	return r;
 800c394:	697b      	ldr	r3, [r7, #20]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3724      	adds	r7, #36	@ 0x24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c3ac:	e002      	b.n	800c3b4 <chk_chr+0x12>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	607b      	str	r3, [r7, #4]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d005      	beq.n	800c3c8 <chk_chr+0x26>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d1f2      	bne.n	800c3ae <chk_chr+0xc>
	return *str;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60bb      	str	r3, [r7, #8]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e029      	b.n	800c440 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c3ec:	4a27      	ldr	r2, [pc, #156]	@ (800c48c <chk_lock+0xb4>)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	011b      	lsls	r3, r3, #4
 800c3f2:	4413      	add	r3, r2
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d01d      	beq.n	800c436 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c3fa:	4a24      	ldr	r2, [pc, #144]	@ (800c48c <chk_lock+0xb4>)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	4413      	add	r3, r2
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d116      	bne.n	800c43a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c40c:	4a1f      	ldr	r2, [pc, #124]	@ (800c48c <chk_lock+0xb4>)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	011b      	lsls	r3, r3, #4
 800c412:	4413      	add	r3, r2
 800c414:	3304      	adds	r3, #4
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d10c      	bne.n	800c43a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c420:	4a1a      	ldr	r2, [pc, #104]	@ (800c48c <chk_lock+0xb4>)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	4413      	add	r3, r2
 800c428:	3308      	adds	r3, #8
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c430:	429a      	cmp	r2, r3
 800c432:	d102      	bne.n	800c43a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c434:	e007      	b.n	800c446 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c436:	2301      	movs	r3, #1
 800c438:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3301      	adds	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d9d2      	bls.n	800c3ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d109      	bne.n	800c460 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <chk_lock+0x80>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d101      	bne.n	800c45c <chk_lock+0x84>
 800c458:	2300      	movs	r3, #0
 800c45a:	e010      	b.n	800c47e <chk_lock+0xa6>
 800c45c:	2312      	movs	r3, #18
 800c45e:	e00e      	b.n	800c47e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d108      	bne.n	800c478 <chk_lock+0xa0>
 800c466:	4a09      	ldr	r2, [pc, #36]	@ (800c48c <chk_lock+0xb4>)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	011b      	lsls	r3, r3, #4
 800c46c:	4413      	add	r3, r2
 800c46e:	330c      	adds	r3, #12
 800c470:	881b      	ldrh	r3, [r3, #0]
 800c472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c476:	d101      	bne.n	800c47c <chk_lock+0xa4>
 800c478:	2310      	movs	r3, #16
 800c47a:	e000      	b.n	800c47e <chk_lock+0xa6>
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	24001784 	.word	0x24001784

0800c490 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c496:	2300      	movs	r3, #0
 800c498:	607b      	str	r3, [r7, #4]
 800c49a:	e002      	b.n	800c4a2 <enq_lock+0x12>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	607b      	str	r3, [r7, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d806      	bhi.n	800c4b6 <enq_lock+0x26>
 800c4a8:	4a09      	ldr	r2, [pc, #36]	@ (800c4d0 <enq_lock+0x40>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	011b      	lsls	r3, r3, #4
 800c4ae:	4413      	add	r3, r2
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1f2      	bne.n	800c49c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	bf14      	ite	ne
 800c4bc:	2301      	movne	r3, #1
 800c4be:	2300      	moveq	r3, #0
 800c4c0:	b2db      	uxtb	r3, r3
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	24001784 	.word	0x24001784

0800c4d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c4de:	2300      	movs	r3, #0
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e01f      	b.n	800c524 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c4e4:	4a41      	ldr	r2, [pc, #260]	@ (800c5ec <inc_lock+0x118>)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	011b      	lsls	r3, r3, #4
 800c4ea:	4413      	add	r3, r2
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d113      	bne.n	800c51e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c4f6:	4a3d      	ldr	r2, [pc, #244]	@ (800c5ec <inc_lock+0x118>)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	011b      	lsls	r3, r3, #4
 800c4fc:	4413      	add	r3, r2
 800c4fe:	3304      	adds	r3, #4
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c506:	429a      	cmp	r2, r3
 800c508:	d109      	bne.n	800c51e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c50a:	4a38      	ldr	r2, [pc, #224]	@ (800c5ec <inc_lock+0x118>)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	011b      	lsls	r3, r3, #4
 800c510:	4413      	add	r3, r2
 800c512:	3308      	adds	r3, #8
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d006      	beq.n	800c52c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3301      	adds	r3, #1
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d9dc      	bls.n	800c4e4 <inc_lock+0x10>
 800c52a:	e000      	b.n	800c52e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c52c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b02      	cmp	r3, #2
 800c532:	d132      	bne.n	800c59a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c534:	2300      	movs	r3, #0
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	e002      	b.n	800c540 <inc_lock+0x6c>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d806      	bhi.n	800c554 <inc_lock+0x80>
 800c546:	4a29      	ldr	r2, [pc, #164]	@ (800c5ec <inc_lock+0x118>)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	4413      	add	r3, r2
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1f2      	bne.n	800c53a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2b02      	cmp	r3, #2
 800c558:	d101      	bne.n	800c55e <inc_lock+0x8a>
 800c55a:	2300      	movs	r3, #0
 800c55c:	e040      	b.n	800c5e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	4922      	ldr	r1, [pc, #136]	@ (800c5ec <inc_lock+0x118>)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	440b      	add	r3, r1
 800c56a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689a      	ldr	r2, [r3, #8]
 800c570:	491e      	ldr	r1, [pc, #120]	@ (800c5ec <inc_lock+0x118>)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	011b      	lsls	r3, r3, #4
 800c576:	440b      	add	r3, r1
 800c578:	3304      	adds	r3, #4
 800c57a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	695a      	ldr	r2, [r3, #20]
 800c580:	491a      	ldr	r1, [pc, #104]	@ (800c5ec <inc_lock+0x118>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	440b      	add	r3, r1
 800c588:	3308      	adds	r3, #8
 800c58a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c58c:	4a17      	ldr	r2, [pc, #92]	@ (800c5ec <inc_lock+0x118>)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	4413      	add	r3, r2
 800c594:	330c      	adds	r3, #12
 800c596:	2200      	movs	r2, #0
 800c598:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d009      	beq.n	800c5b4 <inc_lock+0xe0>
 800c5a0:	4a12      	ldr	r2, [pc, #72]	@ (800c5ec <inc_lock+0x118>)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	011b      	lsls	r3, r3, #4
 800c5a6:	4413      	add	r3, r2
 800c5a8:	330c      	adds	r3, #12
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <inc_lock+0xe0>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e015      	b.n	800c5e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d108      	bne.n	800c5cc <inc_lock+0xf8>
 800c5ba:	4a0c      	ldr	r2, [pc, #48]	@ (800c5ec <inc_lock+0x118>)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	011b      	lsls	r3, r3, #4
 800c5c0:	4413      	add	r3, r2
 800c5c2:	330c      	adds	r3, #12
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	e001      	b.n	800c5d0 <inc_lock+0xfc>
 800c5cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5d0:	4906      	ldr	r1, [pc, #24]	@ (800c5ec <inc_lock+0x118>)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	011b      	lsls	r3, r3, #4
 800c5d6:	440b      	add	r3, r1
 800c5d8:	330c      	adds	r3, #12
 800c5da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3301      	adds	r3, #1
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	24001784 	.word	0x24001784

0800c5f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60fb      	str	r3, [r7, #12]
 800c5fc:	e010      	b.n	800c620 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c5fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c634 <clear_lock+0x44>)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	4413      	add	r3, r2
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d105      	bne.n	800c61a <clear_lock+0x2a>
 800c60e:	4a09      	ldr	r2, [pc, #36]	@ (800c634 <clear_lock+0x44>)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	011b      	lsls	r3, r3, #4
 800c614:	4413      	add	r3, r2
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3301      	adds	r3, #1
 800c61e:	60fb      	str	r3, [r7, #12]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d9eb      	bls.n	800c5fe <clear_lock+0xe>
	}
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr
 800c634:	24001784 	.word	0x24001784

0800c638 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	78db      	ldrb	r3, [r3, #3]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d034      	beq.n	800c6b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c650:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	7858      	ldrb	r0, [r3, #1]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c65c:	2301      	movs	r3, #1
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	f7ff fd9a 	bl	800c198 <disk_write>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	73fb      	strb	r3, [r7, #15]
 800c66e:	e022      	b.n	800c6b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	1ad2      	subs	r2, r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	429a      	cmp	r2, r3
 800c684:	d217      	bcs.n	800c6b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	789b      	ldrb	r3, [r3, #2]
 800c68a:	613b      	str	r3, [r7, #16]
 800c68c:	e010      	b.n	800c6b0 <sync_window+0x78>
					wsect += fs->fsize;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	4413      	add	r3, r2
 800c696:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7858      	ldrb	r0, [r3, #1]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	697a      	ldr	r2, [r7, #20]
 800c6a6:	f7ff fd77 	bl	800c198 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	613b      	str	r3, [r7, #16]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d8eb      	bhi.n	800c68e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3718      	adds	r7, #24
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d01b      	beq.n	800c710 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff ffad 	bl	800c638 <sync_window>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d113      	bne.n	800c710 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	7858      	ldrb	r0, [r3, #1]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	f7ff fd2f 	bl	800c158 <disk_read>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d004      	beq.n	800c70a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c706:	2301      	movs	r3, #1
 800c708:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	3b02      	subs	r3, #2
 800c728:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	3b02      	subs	r3, #2
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d301      	bcc.n	800c73a <clust2sect+0x20>
 800c736:	2300      	movs	r3, #0
 800c738:	e008      	b.n	800c74c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	895b      	ldrh	r3, [r3, #10]
 800c73e:	461a      	mov	r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	fb03 f202 	mul.w	r2, r3, r2
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c74a:	4413      	add	r3, r2
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d904      	bls.n	800c778 <get_fat+0x20>
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d302      	bcc.n	800c77e <get_fat+0x26>
		val = 1;	/* Internal error */
 800c778:	2301      	movs	r3, #1
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	e08e      	b.n	800c89c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c77e:	f04f 33ff 	mov.w	r3, #4294967295
 800c782:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d061      	beq.n	800c850 <get_fat+0xf8>
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	dc7b      	bgt.n	800c888 <get_fat+0x130>
 800c790:	2b01      	cmp	r3, #1
 800c792:	d002      	beq.n	800c79a <get_fat+0x42>
 800c794:	2b02      	cmp	r3, #2
 800c796:	d041      	beq.n	800c81c <get_fat+0xc4>
 800c798:	e076      	b.n	800c888 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	60fb      	str	r3, [r7, #12]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	085b      	lsrs	r3, r3, #1
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6a1a      	ldr	r2, [r3, #32]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	0a5b      	lsrs	r3, r3, #9
 800c7b0:	4413      	add	r3, r2
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6938      	ldr	r0, [r7, #16]
 800c7b6:	f7ff ff83 	bl	800c6c0 <move_window>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d166      	bne.n	800c88e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	60fa      	str	r2, [r7, #12]
 800c7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7d2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	6a1a      	ldr	r2, [r3, #32]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	0a5b      	lsrs	r3, r3, #9
 800c7dc:	4413      	add	r3, r2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6938      	ldr	r0, [r7, #16]
 800c7e2:	f7ff ff6d 	bl	800c6c0 <move_window>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d152      	bne.n	800c892 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <get_fat+0xba>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	091b      	lsrs	r3, r3, #4
 800c810:	e002      	b.n	800c818 <get_fat+0xc0>
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c818:	617b      	str	r3, [r7, #20]
			break;
 800c81a:	e03f      	b.n	800c89c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	6a1a      	ldr	r2, [r3, #32]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	0a1b      	lsrs	r3, r3, #8
 800c824:	4413      	add	r3, r2
 800c826:	4619      	mov	r1, r3
 800c828:	6938      	ldr	r0, [r7, #16]
 800c82a:	f7ff ff49 	bl	800c6c0 <move_window>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d130      	bne.n	800c896 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c842:	4413      	add	r3, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff fcc7 	bl	800c1d8 <ld_word>
 800c84a:	4603      	mov	r3, r0
 800c84c:	617b      	str	r3, [r7, #20]
			break;
 800c84e:	e025      	b.n	800c89c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	6a1a      	ldr	r2, [r3, #32]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	09db      	lsrs	r3, r3, #7
 800c858:	4413      	add	r3, r2
 800c85a:	4619      	mov	r1, r3
 800c85c:	6938      	ldr	r0, [r7, #16]
 800c85e:	f7ff ff2f 	bl	800c6c0 <move_window>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d118      	bne.n	800c89a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c876:	4413      	add	r3, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f7ff fcc5 	bl	800c208 <ld_dword>
 800c87e:	4603      	mov	r3, r0
 800c880:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c884:	617b      	str	r3, [r7, #20]
			break;
 800c886:	e009      	b.n	800c89c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c888:	2301      	movs	r3, #1
 800c88a:	617b      	str	r3, [r7, #20]
 800c88c:	e006      	b.n	800c89c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c88e:	bf00      	nop
 800c890:	e004      	b.n	800c89c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c892:	bf00      	nop
 800c894:	e002      	b.n	800c89c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c896:	bf00      	nop
 800c898:	e000      	b.n	800c89c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c89a:	bf00      	nop
		}
	}

	return val;
 800c89c:	697b      	ldr	r3, [r7, #20]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c8a6:	b590      	push	{r4, r7, lr}
 800c8a8:	b089      	sub	sp, #36	@ 0x24
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	f240 80d9 	bls.w	800ca70 <put_fat+0x1ca>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	f080 80d3 	bcs.w	800ca70 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	f000 8096 	beq.w	800ca00 <put_fat+0x15a>
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	f300 80cb 	bgt.w	800ca70 <put_fat+0x1ca>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d002      	beq.n	800c8e4 <put_fat+0x3e>
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d06e      	beq.n	800c9c0 <put_fat+0x11a>
 800c8e2:	e0c5      	b.n	800ca70 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	61bb      	str	r3, [r7, #24]
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	085b      	lsrs	r3, r3, #1
 800c8ec:	69ba      	ldr	r2, [r7, #24]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6a1a      	ldr	r2, [r3, #32]
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	0a5b      	lsrs	r3, r3, #9
 800c8fa:	4413      	add	r3, r2
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7ff fede 	bl	800c6c0 <move_window>
 800c904:	4603      	mov	r3, r0
 800c906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c908:	7ffb      	ldrb	r3, [r7, #31]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f040 80a9 	bne.w	800ca62 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	1c59      	adds	r1, r3, #1
 800c91a:	61b9      	str	r1, [r7, #24]
 800c91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c920:	4413      	add	r3, r2
 800c922:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00d      	beq.n	800c94a <put_fat+0xa4>
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b25b      	sxtb	r3, r3
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	b25a      	sxtb	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	011b      	lsls	r3, r3, #4
 800c940:	b25b      	sxtb	r3, r3
 800c942:	4313      	orrs	r3, r2
 800c944:	b25b      	sxtb	r3, r3
 800c946:	b2db      	uxtb	r3, r3
 800c948:	e001      	b.n	800c94e <put_fat+0xa8>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2201      	movs	r2, #1
 800c956:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a1a      	ldr	r2, [r3, #32]
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	0a5b      	lsrs	r3, r3, #9
 800c960:	4413      	add	r3, r2
 800c962:	4619      	mov	r1, r3
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f7ff feab 	bl	800c6c0 <move_window>
 800c96a:	4603      	mov	r3, r0
 800c96c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c96e:	7ffb      	ldrb	r3, [r7, #31]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d178      	bne.n	800ca66 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c980:	4413      	add	r3, r2
 800c982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d003      	beq.n	800c996 <put_fat+0xf0>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	091b      	lsrs	r3, r3, #4
 800c992:	b2db      	uxtb	r3, r3
 800c994:	e00e      	b.n	800c9b4 <put_fat+0x10e>
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	b25b      	sxtb	r3, r3
 800c99c:	f023 030f 	bic.w	r3, r3, #15
 800c9a0:	b25a      	sxtb	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	0a1b      	lsrs	r3, r3, #8
 800c9a6:	b25b      	sxtb	r3, r3
 800c9a8:	f003 030f 	and.w	r3, r3, #15
 800c9ac:	b25b      	sxtb	r3, r3
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	b25b      	sxtb	r3, r3
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	70da      	strb	r2, [r3, #3]
			break;
 800c9be:	e057      	b.n	800ca70 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6a1a      	ldr	r2, [r3, #32]
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	0a1b      	lsrs	r3, r3, #8
 800c9c8:	4413      	add	r3, r2
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f7ff fe77 	bl	800c6c0 <move_window>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9d6:	7ffb      	ldrb	r3, [r7, #31]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d146      	bne.n	800ca6a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c9ea:	4413      	add	r3, r2
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	b292      	uxth	r2, r2
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff fc2b 	bl	800c24e <st_word>
			fs->wflag = 1;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	70da      	strb	r2, [r3, #3]
			break;
 800c9fe:	e037      	b.n	800ca70 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6a1a      	ldr	r2, [r3, #32]
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	09db      	lsrs	r3, r3, #7
 800ca08:	4413      	add	r3, r2
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f7ff fe57 	bl	800c6c0 <move_window>
 800ca12:	4603      	mov	r3, r0
 800ca14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca16:	7ffb      	ldrb	r3, [r7, #31]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d128      	bne.n	800ca6e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ca30:	4413      	add	r3, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff fbe8 	bl	800c208 <ld_dword>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ca3e:	4323      	orrs	r3, r4
 800ca40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ca50:	4413      	add	r3, r2
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff fc15 	bl	800c284 <st_dword>
			fs->wflag = 1;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	70da      	strb	r2, [r3, #3]
			break;
 800ca60:	e006      	b.n	800ca70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca62:	bf00      	nop
 800ca64:	e004      	b.n	800ca70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca66:	bf00      	nop
 800ca68:	e002      	b.n	800ca70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca6a:	bf00      	nop
 800ca6c:	e000      	b.n	800ca70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca6e:	bf00      	nop
		}
	}
	return res;
 800ca70:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3724      	adds	r7, #36	@ 0x24
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd90      	pop	{r4, r7, pc}

0800ca7a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b088      	sub	sp, #32
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d904      	bls.n	800caa0 <remove_chain+0x26>
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d301      	bcc.n	800caa4 <remove_chain+0x2a>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e04b      	b.n	800cb3c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00c      	beq.n	800cac4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800caaa:	f04f 32ff 	mov.w	r2, #4294967295
 800caae:	6879      	ldr	r1, [r7, #4]
 800cab0:	69b8      	ldr	r0, [r7, #24]
 800cab2:	f7ff fef8 	bl	800c8a6 <put_fat>
 800cab6:	4603      	mov	r3, r0
 800cab8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800caba:	7ffb      	ldrb	r3, [r7, #31]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <remove_chain+0x4a>
 800cac0:	7ffb      	ldrb	r3, [r7, #31]
 800cac2:	e03b      	b.n	800cb3c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff fe46 	bl	800c758 <get_fat>
 800cacc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d031      	beq.n	800cb38 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d101      	bne.n	800cade <remove_chain+0x64>
 800cada:	2302      	movs	r3, #2
 800cadc:	e02e      	b.n	800cb3c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae4:	d101      	bne.n	800caea <remove_chain+0x70>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e028      	b.n	800cb3c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800caea:	2200      	movs	r2, #0
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	69b8      	ldr	r0, [r7, #24]
 800caf0:	f7ff fed9 	bl	800c8a6 <put_fat>
 800caf4:	4603      	mov	r3, r0
 800caf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800caf8:	7ffb      	ldrb	r3, [r7, #31]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <remove_chain+0x88>
 800cafe:	7ffb      	ldrb	r3, [r7, #31]
 800cb00:	e01c      	b.n	800cb3c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	691a      	ldr	r2, [r3, #16]
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	3b02      	subs	r3, #2
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d20b      	bcs.n	800cb28 <remove_chain+0xae>
			fs->free_clst++;
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	791b      	ldrb	r3, [r3, #4]
 800cb1e:	f043 0301 	orr.w	r3, r3, #1
 800cb22:	b2da      	uxtb	r2, r3
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d3c6      	bcc.n	800cac4 <remove_chain+0x4a>
 800cb36:	e000      	b.n	800cb3a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb38:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3720      	adds	r7, #32
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10d      	bne.n	800cb76 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d004      	beq.n	800cb70 <create_chain+0x2c>
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	69ba      	ldr	r2, [r7, #24]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d31b      	bcc.n	800cba8 <create_chain+0x64>
 800cb70:	2301      	movs	r3, #1
 800cb72:	61bb      	str	r3, [r7, #24]
 800cb74:	e018      	b.n	800cba8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fded 	bl	800c758 <get_fat>
 800cb7e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d801      	bhi.n	800cb8a <create_chain+0x46>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e070      	b.n	800cc6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb90:	d101      	bne.n	800cb96 <create_chain+0x52>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	e06a      	b.n	800cc6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d201      	bcs.n	800cba4 <create_chain+0x60>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	e063      	b.n	800cc6c <create_chain+0x128>
		scl = clst;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	69fa      	ldr	r2, [r7, #28]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d307      	bcc.n	800cbcc <create_chain+0x88>
				ncl = 2;
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cbc0:	69fa      	ldr	r2, [r7, #28]
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d901      	bls.n	800cbcc <create_chain+0x88>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	e04f      	b.n	800cc6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cbcc:	69f9      	ldr	r1, [r7, #28]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7ff fdc2 	bl	800c758 <get_fat>
 800cbd4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d003      	beq.n	800cbea <create_chain+0xa6>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe8:	d101      	bne.n	800cbee <create_chain+0xaa>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	e03e      	b.n	800cc6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cbee:	69fa      	ldr	r2, [r7, #28]
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d1da      	bne.n	800cbac <create_chain+0x68>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e038      	b.n	800cc6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cbfa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800cc00:	69f9      	ldr	r1, [r7, #28]
 800cc02:	6938      	ldr	r0, [r7, #16]
 800cc04:	f7ff fe4f 	bl	800c8a6 <put_fat>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d109      	bne.n	800cc26 <create_chain+0xe2>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d006      	beq.n	800cc26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cc18:	69fa      	ldr	r2, [r7, #28]
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	6938      	ldr	r0, [r7, #16]
 800cc1e:	f7ff fe42 	bl	800c8a6 <put_fat>
 800cc22:	4603      	mov	r3, r0
 800cc24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d116      	bne.n	800cc5a <create_chain+0x116>
		fs->last_clst = ncl;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	69fa      	ldr	r2, [r7, #28]
 800cc30:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	691a      	ldr	r2, [r3, #16]
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	3b02      	subs	r3, #2
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d804      	bhi.n	800cc4a <create_chain+0x106>
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	1e5a      	subs	r2, r3, #1
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	791b      	ldrb	r3, [r3, #4]
 800cc4e:	f043 0301 	orr.w	r3, r3, #1
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	711a      	strb	r2, [r3, #4]
 800cc58:	e007      	b.n	800cc6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d102      	bne.n	800cc66 <create_chain+0x122>
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	e000      	b.n	800cc68 <create_chain+0x124>
 800cc66:	2301      	movs	r3, #1
 800cc68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc6a:	69fb      	ldr	r3, [r7, #28]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3720      	adds	r7, #32
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc88:	3304      	adds	r3, #4
 800cc8a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	0a5b      	lsrs	r3, r3, #9
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	8952      	ldrh	r2, [r2, #10]
 800cc94:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	1d1a      	adds	r2, r3, #4
 800cc9e:	613a      	str	r2, [r7, #16]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <clmt_clust+0x3a>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e010      	b.n	800ccd0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d307      	bcc.n	800ccc6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	617b      	str	r3, [r7, #20]
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ccc4:	e7e9      	b.n	800cc9a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ccc6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	4413      	add	r3, r2
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	371c      	adds	r7, #28
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ccf2:	d204      	bcs.n	800ccfe <dir_sdi+0x22>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	f003 031f 	and.w	r3, r3, #31
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ccfe:	2302      	movs	r3, #2
 800cd00:	e063      	b.n	800cdca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d106      	bne.n	800cd22 <dir_sdi+0x46>
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d902      	bls.n	800cd22 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10c      	bne.n	800cd42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	095b      	lsrs	r3, r3, #5
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	8912      	ldrh	r2, [r2, #8]
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d301      	bcc.n	800cd38 <dir_sdi+0x5c>
 800cd34:	2302      	movs	r3, #2
 800cd36:	e048      	b.n	800cdca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	61da      	str	r2, [r3, #28]
 800cd40:	e029      	b.n	800cd96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	895b      	ldrh	r3, [r3, #10]
 800cd46:	025b      	lsls	r3, r3, #9
 800cd48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd4a:	e019      	b.n	800cd80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6979      	ldr	r1, [r7, #20]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff fd01 	bl	800c758 <get_fat>
 800cd56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5e:	d101      	bne.n	800cd64 <dir_sdi+0x88>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e032      	b.n	800cdca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d904      	bls.n	800cd74 <dir_sdi+0x98>
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	695b      	ldr	r3, [r3, #20]
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d301      	bcc.n	800cd78 <dir_sdi+0x9c>
 800cd74:	2302      	movs	r3, #2
 800cd76:	e028      	b.n	800cdca <dir_sdi+0xee>
			ofs -= csz;
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d2e1      	bcs.n	800cd4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cd88:	6979      	ldr	r1, [r7, #20]
 800cd8a:	6938      	ldr	r0, [r7, #16]
 800cd8c:	f7ff fcc5 	bl	800c71a <clust2sect>
 800cd90:	4602      	mov	r2, r0
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	69db      	ldr	r3, [r3, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <dir_sdi+0xcc>
 800cda4:	2302      	movs	r3, #2
 800cda6:	e010      	b.n	800cdca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	69da      	ldr	r2, [r3, #28]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	0a5b      	lsrs	r3, r3, #9
 800cdb0:	441a      	add	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc2:	441a      	add	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3718      	adds	r7, #24
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b086      	sub	sp, #24
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	3320      	adds	r3, #32
 800cde8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <dir_next+0x28>
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cdf8:	d301      	bcc.n	800cdfe <dir_next+0x2c>
 800cdfa:	2304      	movs	r3, #4
 800cdfc:	e0aa      	b.n	800cf54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f040 8098 	bne.w	800cf3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	69db      	ldr	r3, [r3, #28]
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	699b      	ldr	r3, [r3, #24]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10b      	bne.n	800ce34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	095b      	lsrs	r3, r3, #5
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	8912      	ldrh	r2, [r2, #8]
 800ce24:	4293      	cmp	r3, r2
 800ce26:	f0c0 8088 	bcc.w	800cf3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	61da      	str	r2, [r3, #28]
 800ce30:	2304      	movs	r3, #4
 800ce32:	e08f      	b.n	800cf54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	0a5b      	lsrs	r3, r3, #9
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	8952      	ldrh	r2, [r2, #10]
 800ce3c:	3a01      	subs	r2, #1
 800ce3e:	4013      	ands	r3, r2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d17a      	bne.n	800cf3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	699b      	ldr	r3, [r3, #24]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	f7ff fc83 	bl	800c758 <get_fat>
 800ce52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d801      	bhi.n	800ce5e <dir_next+0x8c>
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	e07a      	b.n	800cf54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce64:	d101      	bne.n	800ce6a <dir_next+0x98>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e074      	b.n	800cf54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d358      	bcc.n	800cf26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d104      	bne.n	800ce84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	61da      	str	r2, [r3, #28]
 800ce80:	2304      	movs	r3, #4
 800ce82:	e067      	b.n	800cf54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	f7ff fe59 	bl	800cb44 <create_chain>
 800ce92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <dir_next+0xcc>
 800ce9a:	2307      	movs	r3, #7
 800ce9c:	e05a      	b.n	800cf54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d101      	bne.n	800cea8 <dir_next+0xd6>
 800cea4:	2302      	movs	r3, #2
 800cea6:	e055      	b.n	800cf54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceae:	d101      	bne.n	800ceb4 <dir_next+0xe2>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e04f      	b.n	800cf54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff fbbf 	bl	800c638 <sync_window>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <dir_next+0xf2>
 800cec0:	2301      	movs	r3, #1
 800cec2:	e047      	b.n	800cf54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3330      	adds	r3, #48	@ 0x30
 800cec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cecc:	2100      	movs	r1, #0
 800cece:	4618      	mov	r0, r3
 800ced0:	f7ff fa25 	bl	800c31e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ced4:	2300      	movs	r3, #0
 800ced6:	613b      	str	r3, [r7, #16]
 800ced8:	6979      	ldr	r1, [r7, #20]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f7ff fc1d 	bl	800c71a <clust2sect>
 800cee0:	4602      	mov	r2, r0
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cee6:	e012      	b.n	800cf0e <dir_next+0x13c>
						fs->wflag = 1;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2201      	movs	r2, #1
 800ceec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7ff fba2 	bl	800c638 <sync_window>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <dir_next+0x12c>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e02a      	b.n	800cf54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	3301      	adds	r3, #1
 800cf02:	613b      	str	r3, [r7, #16]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	895b      	ldrh	r3, [r3, #10]
 800cf12:	461a      	mov	r2, r3
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d3e6      	bcc.n	800cee8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	1ad2      	subs	r2, r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf2c:	6979      	ldr	r1, [r7, #20]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f7ff fbf3 	bl	800c71a <clust2sect>
 800cf34:	4602      	mov	r2, r0
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf4c:	441a      	add	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7ff feb4 	bl	800ccdc <dir_sdi>
 800cf74:	4603      	mov	r3, r0
 800cf76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d12b      	bne.n	800cfd6 <dir_alloc+0x7a>
		n = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	69db      	ldr	r3, [r3, #28]
 800cf86:	4619      	mov	r1, r3
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7ff fb99 	bl	800c6c0 <move_window>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d11d      	bne.n	800cfd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a1b      	ldr	r3, [r3, #32]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2be5      	cmp	r3, #229	@ 0xe5
 800cfa0:	d004      	beq.n	800cfac <dir_alloc+0x50>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d107      	bne.n	800cfbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	613b      	str	r3, [r7, #16]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d102      	bne.n	800cfc0 <dir_alloc+0x64>
 800cfba:	e00c      	b.n	800cfd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff ff05 	bl	800cdd2 <dir_next>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfcc:	7dfb      	ldrb	r3, [r7, #23]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0d7      	beq.n	800cf82 <dir_alloc+0x26>
 800cfd2:	e000      	b.n	800cfd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cfd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	2b04      	cmp	r3, #4
 800cfda:	d101      	bne.n	800cfe0 <dir_alloc+0x84>
 800cfdc:	2307      	movs	r3, #7
 800cfde:	75fb      	strb	r3, [r7, #23]
	return res;
 800cfe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	331a      	adds	r3, #26
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff f8ed 	bl	800c1d8 <ld_word>
 800cffe:	4603      	mov	r3, r0
 800d000:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2b03      	cmp	r3, #3
 800d008:	d109      	bne.n	800d01e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	3314      	adds	r3, #20
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff f8e2 	bl	800c1d8 <ld_word>
 800d014:	4603      	mov	r3, r0
 800d016:	041b      	lsls	r3, r3, #16
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d01e:	68fb      	ldr	r3, [r7, #12]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	331a      	adds	r3, #26
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	b292      	uxth	r2, r2
 800d03c:	4611      	mov	r1, r2
 800d03e:	4618      	mov	r0, r3
 800d040:	f7ff f905 	bl	800c24e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d109      	bne.n	800d060 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f103 0214 	add.w	r2, r3, #20
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	0c1b      	lsrs	r3, r3, #16
 800d056:	b29b      	uxth	r3, r3
 800d058:	4619      	mov	r1, r3
 800d05a:	4610      	mov	r0, r2
 800d05c:	f7ff f8f7 	bl	800c24e <st_word>
	}
}
 800d060:	bf00      	nop
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b086      	sub	sp, #24
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d076:	2100      	movs	r1, #0
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7ff fe2f 	bl	800ccdc <dir_sdi>
 800d07e:	4603      	mov	r3, r0
 800d080:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d082:	7dfb      	ldrb	r3, [r7, #23]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <dir_find+0x24>
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	e03e      	b.n	800d10a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	4619      	mov	r1, r3
 800d092:	6938      	ldr	r0, [r7, #16]
 800d094:	f7ff fb14 	bl	800c6c0 <move_window>
 800d098:	4603      	mov	r3, r0
 800d09a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d09c:	7dfb      	ldrb	r3, [r7, #23]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d12f      	bne.n	800d102 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <dir_find+0x4e>
 800d0b0:	2304      	movs	r3, #4
 800d0b2:	75fb      	strb	r3, [r7, #23]
 800d0b4:	e028      	b.n	800d108 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	330b      	adds	r3, #11
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	330b      	adds	r3, #11
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	f003 0308 	and.w	r3, r3, #8
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <dir_find+0x86>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a18      	ldr	r0, [r3, #32]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3324      	adds	r3, #36	@ 0x24
 800d0e0:	220b      	movs	r2, #11
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	f7ff f936 	bl	800c354 <mem_cmp>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00b      	beq.n	800d106 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff fe6e 	bl	800cdd2 <dir_next>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0c5      	beq.n	800d08c <dir_find+0x24>
 800d100:	e002      	b.n	800d108 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d102:	bf00      	nop
 800d104:	e000      	b.n	800d108 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d106:	bf00      	nop

	return res;
 800d108:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d120:	2101      	movs	r1, #1
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff ff1a 	bl	800cf5c <dir_alloc>
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d11c      	bne.n	800d16c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	4619      	mov	r1, r3
 800d138:	68b8      	ldr	r0, [r7, #8]
 800d13a:	f7ff fac1 	bl	800c6c0 <move_window>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d111      	bne.n	800d16c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	2220      	movs	r2, #32
 800d14e:	2100      	movs	r1, #0
 800d150:	4618      	mov	r0, r3
 800d152:	f7ff f8e4 	bl	800c31e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a18      	ldr	r0, [r3, #32]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	3324      	adds	r3, #36	@ 0x24
 800d15e:	220b      	movs	r2, #11
 800d160:	4619      	mov	r1, r3
 800d162:	f7ff f8bb 	bl	800c2dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2201      	movs	r2, #1
 800d16a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b088      	sub	sp, #32
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3324      	adds	r3, #36	@ 0x24
 800d18c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d18e:	220b      	movs	r2, #11
 800d190:	2120      	movs	r1, #32
 800d192:	68b8      	ldr	r0, [r7, #8]
 800d194:	f7ff f8c3 	bl	800c31e <mem_set>
	si = i = 0; ni = 8;
 800d198:	2300      	movs	r3, #0
 800d19a:	613b      	str	r3, [r7, #16]
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	61fb      	str	r3, [r7, #28]
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	61fa      	str	r2, [r7, #28]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d1b2:	7efb      	ldrb	r3, [r7, #27]
 800d1b4:	2b20      	cmp	r3, #32
 800d1b6:	d94e      	bls.n	800d256 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d1b8:	7efb      	ldrb	r3, [r7, #27]
 800d1ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1bc:	d006      	beq.n	800d1cc <create_name+0x54>
 800d1be:	7efb      	ldrb	r3, [r7, #27]
 800d1c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1c2:	d110      	bne.n	800d1e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d1c4:	e002      	b.n	800d1cc <create_name+0x54>
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	61fb      	str	r3, [r7, #28]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1d6:	d0f6      	beq.n	800d1c6 <create_name+0x4e>
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	4413      	add	r3, r2
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1e2:	d0f0      	beq.n	800d1c6 <create_name+0x4e>
			break;
 800d1e4:	e038      	b.n	800d258 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d1e6:	7efb      	ldrb	r3, [r7, #27]
 800d1e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1ea:	d003      	beq.n	800d1f4 <create_name+0x7c>
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d30c      	bcc.n	800d20e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b0b      	cmp	r3, #11
 800d1f8:	d002      	beq.n	800d200 <create_name+0x88>
 800d1fa:	7efb      	ldrb	r3, [r7, #27]
 800d1fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1fe:	d001      	beq.n	800d204 <create_name+0x8c>
 800d200:	2306      	movs	r3, #6
 800d202:	e044      	b.n	800d28e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d204:	2308      	movs	r3, #8
 800d206:	613b      	str	r3, [r7, #16]
 800d208:	230b      	movs	r3, #11
 800d20a:	617b      	str	r3, [r7, #20]
			continue;
 800d20c:	e022      	b.n	800d254 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d20e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d212:	2b00      	cmp	r3, #0
 800d214:	da04      	bge.n	800d220 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d216:	7efb      	ldrb	r3, [r7, #27]
 800d218:	3b80      	subs	r3, #128	@ 0x80
 800d21a:	4a1f      	ldr	r2, [pc, #124]	@ (800d298 <create_name+0x120>)
 800d21c:	5cd3      	ldrb	r3, [r2, r3]
 800d21e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d220:	7efb      	ldrb	r3, [r7, #27]
 800d222:	4619      	mov	r1, r3
 800d224:	481d      	ldr	r0, [pc, #116]	@ (800d29c <create_name+0x124>)
 800d226:	f7ff f8bc 	bl	800c3a2 <chk_chr>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d001      	beq.n	800d234 <create_name+0xbc>
 800d230:	2306      	movs	r3, #6
 800d232:	e02c      	b.n	800d28e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d234:	7efb      	ldrb	r3, [r7, #27]
 800d236:	2b60      	cmp	r3, #96	@ 0x60
 800d238:	d905      	bls.n	800d246 <create_name+0xce>
 800d23a:	7efb      	ldrb	r3, [r7, #27]
 800d23c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d23e:	d802      	bhi.n	800d246 <create_name+0xce>
 800d240:	7efb      	ldrb	r3, [r7, #27]
 800d242:	3b20      	subs	r3, #32
 800d244:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	613a      	str	r2, [r7, #16]
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	4413      	add	r3, r2
 800d250:	7efa      	ldrb	r2, [r7, #27]
 800d252:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d254:	e7a6      	b.n	800d1a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d256:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	441a      	add	r2, r3
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <create_name+0xf4>
 800d268:	2306      	movs	r3, #6
 800d26a:	e010      	b.n	800d28e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2be5      	cmp	r3, #229	@ 0xe5
 800d272:	d102      	bne.n	800d27a <create_name+0x102>
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2205      	movs	r2, #5
 800d278:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d27a:	7efb      	ldrb	r3, [r7, #27]
 800d27c:	2b20      	cmp	r3, #32
 800d27e:	d801      	bhi.n	800d284 <create_name+0x10c>
 800d280:	2204      	movs	r2, #4
 800d282:	e000      	b.n	800d286 <create_name+0x10e>
 800d284:	2200      	movs	r2, #0
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	330b      	adds	r3, #11
 800d28a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d28c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3720      	adds	r7, #32
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	0800ec40 	.word	0x0800ec40
 800d29c:	0800e950 	.word	0x0800e950

0800d2a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d2b4:	e002      	b.n	800d2bc <follow_path+0x1c>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	603b      	str	r3, [r7, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d2c2:	d0f8      	beq.n	800d2b6 <follow_path+0x16>
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d2ca:	d0f4      	beq.n	800d2b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b1f      	cmp	r3, #31
 800d2d8:	d80a      	bhi.n	800d2f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2280      	movs	r2, #128	@ 0x80
 800d2de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff fcf9 	bl	800ccdc <dir_sdi>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	75fb      	strb	r3, [r7, #23]
 800d2ee:	e043      	b.n	800d378 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2f0:	463b      	mov	r3, r7
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff ff3f 	bl	800d178 <create_name>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d2fe:	7dfb      	ldrb	r3, [r7, #23]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d134      	bne.n	800d36e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7ff feaf 	bl	800d068 <dir_find>
 800d30a:	4603      	mov	r3, r0
 800d30c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d314:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00a      	beq.n	800d332 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d31c:	7dfb      	ldrb	r3, [r7, #23]
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d127      	bne.n	800d372 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d322:	7afb      	ldrb	r3, [r7, #11]
 800d324:	f003 0304 	and.w	r3, r3, #4
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d122      	bne.n	800d372 <follow_path+0xd2>
 800d32c:	2305      	movs	r3, #5
 800d32e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d330:	e01f      	b.n	800d372 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d332:	7afb      	ldrb	r3, [r7, #11]
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d11c      	bne.n	800d376 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	799b      	ldrb	r3, [r3, #6]
 800d340:	f003 0310 	and.w	r3, r3, #16
 800d344:	2b00      	cmp	r3, #0
 800d346:	d102      	bne.n	800d34e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d348:	2305      	movs	r3, #5
 800d34a:	75fb      	strb	r3, [r7, #23]
 800d34c:	e014      	b.n	800d378 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35c:	4413      	add	r3, r2
 800d35e:	4619      	mov	r1, r3
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff fe42 	bl	800cfea <ld_clust>
 800d366:	4602      	mov	r2, r0
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d36c:	e7c0      	b.n	800d2f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d36e:	bf00      	nop
 800d370:	e002      	b.n	800d378 <follow_path+0xd8>
				break;
 800d372:	bf00      	nop
 800d374:	e000      	b.n	800d378 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d376:	bf00      	nop
			}
		}
	}

	return res;
 800d378:	7dfb      	ldrb	r3, [r7, #23]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d382:	b480      	push	{r7}
 800d384:	b087      	sub	sp, #28
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d38a:	f04f 33ff 	mov.w	r3, #4294967295
 800d38e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d031      	beq.n	800d3fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	617b      	str	r3, [r7, #20]
 800d39e:	e002      	b.n	800d3a6 <get_ldnumber+0x24>
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	617b      	str	r3, [r7, #20]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	d903      	bls.n	800d3b6 <get_ldnumber+0x34>
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800d3b4:	d1f4      	bne.n	800d3a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800d3bc:	d11c      	bne.n	800d3f8 <get_ldnumber+0x76>
			tp = *path;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	60fa      	str	r2, [r7, #12]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	3b30      	subs	r3, #48	@ 0x30
 800d3ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b09      	cmp	r3, #9
 800d3d4:	d80e      	bhi.n	800d3f4 <get_ldnumber+0x72>
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d10a      	bne.n	800d3f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d107      	bne.n	800d3f4 <get_ldnumber+0x72>
					vol = (int)i;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	617b      	str	r3, [r7, #20]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	e002      	b.n	800d3fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d3fc:	693b      	ldr	r3, [r7, #16]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
	...

0800d40c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	70da      	strb	r2, [r3, #3]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f04f 32ff 	mov.w	r2, #4294967295
 800d422:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff f94a 	bl	800c6c0 <move_window>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d001      	beq.n	800d436 <check_fs+0x2a>
 800d432:	2304      	movs	r3, #4
 800d434:	e038      	b.n	800d4a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3330      	adds	r3, #48	@ 0x30
 800d43a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe feca 	bl	800c1d8 <ld_word>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d001      	beq.n	800d454 <check_fs+0x48>
 800d450:	2303      	movs	r3, #3
 800d452:	e029      	b.n	800d4a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d45a:	2be9      	cmp	r3, #233	@ 0xe9
 800d45c:	d009      	beq.n	800d472 <check_fs+0x66>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d464:	2beb      	cmp	r3, #235	@ 0xeb
 800d466:	d11e      	bne.n	800d4a6 <check_fs+0x9a>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d46e:	2b90      	cmp	r3, #144	@ 0x90
 800d470:	d119      	bne.n	800d4a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	3330      	adds	r3, #48	@ 0x30
 800d476:	3336      	adds	r3, #54	@ 0x36
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fe fec5 	bl	800c208 <ld_dword>
 800d47e:	4603      	mov	r3, r0
 800d480:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d484:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b0 <check_fs+0xa4>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d101      	bne.n	800d48e <check_fs+0x82>
 800d48a:	2300      	movs	r3, #0
 800d48c:	e00c      	b.n	800d4a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	3330      	adds	r3, #48	@ 0x30
 800d492:	3352      	adds	r3, #82	@ 0x52
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe feb7 	bl	800c208 <ld_dword>
 800d49a:	4603      	mov	r3, r0
 800d49c:	4a05      	ldr	r2, [pc, #20]	@ (800d4b4 <check_fs+0xa8>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d101      	bne.n	800d4a6 <check_fs+0x9a>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e000      	b.n	800d4a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d4a6:	2302      	movs	r3, #2
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	00544146 	.word	0x00544146
 800d4b4:	33544146 	.word	0x33544146

0800d4b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b096      	sub	sp, #88	@ 0x58
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7ff ff58 	bl	800d382 <get_ldnumber>
 800d4d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da01      	bge.n	800d4de <find_volume+0x26>
 800d4da:	230b      	movs	r3, #11
 800d4dc:	e22d      	b.n	800d93a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d4de:	4aa1      	ldr	r2, [pc, #644]	@ (800d764 <find_volume+0x2ac>)
 800d4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <find_volume+0x3a>
 800d4ee:	230c      	movs	r3, #12
 800d4f0:	e223      	b.n	800d93a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d4f8:	79fb      	ldrb	r3, [r7, #7]
 800d4fa:	f023 0301 	bic.w	r3, r3, #1
 800d4fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d01a      	beq.n	800d53e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50a:	785b      	ldrb	r3, [r3, #1]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fe fde1 	bl	800c0d4 <disk_status>
 800d512:	4603      	mov	r3, r0
 800d514:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d51c:	f003 0301 	and.w	r3, r3, #1
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10c      	bne.n	800d53e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d007      	beq.n	800d53a <find_volume+0x82>
 800d52a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d52e:	f003 0304 	and.w	r3, r3, #4
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d536:	230a      	movs	r3, #10
 800d538:	e1ff      	b.n	800d93a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d53a:	2300      	movs	r3, #0
 800d53c:	e1fd      	b.n	800d93a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d540:	2200      	movs	r2, #0
 800d542:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d546:	b2da      	uxtb	r2, r3
 800d548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	785b      	ldrb	r3, [r3, #1]
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe fdd9 	bl	800c108 <disk_initialize>
 800d556:	4603      	mov	r3, r0
 800d558:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d55c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d560:	f003 0301 	and.w	r3, r3, #1
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d568:	2303      	movs	r3, #3
 800d56a:	e1e6      	b.n	800d93a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d007      	beq.n	800d582 <find_volume+0xca>
 800d572:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d576:	f003 0304 	and.w	r3, r3, #4
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d57e:	230a      	movs	r3, #10
 800d580:	e1db      	b.n	800d93a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d582:	2300      	movs	r3, #0
 800d584:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d586:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d588:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d58a:	f7ff ff3f 	bl	800d40c <check_fs>
 800d58e:	4603      	mov	r3, r0
 800d590:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d149      	bne.n	800d630 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d59c:	2300      	movs	r3, #0
 800d59e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5a0:	e01e      	b.n	800d5e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5aa:	011b      	lsls	r3, r3, #4
 800d5ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d5b0:	4413      	add	r3, r2
 800d5b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d006      	beq.n	800d5cc <find_volume+0x114>
 800d5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fe fe20 	bl	800c208 <ld_dword>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	e000      	b.n	800d5ce <find_volume+0x116>
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	3358      	adds	r3, #88	@ 0x58
 800d5d4:	443b      	add	r3, r7
 800d5d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5dc:	3301      	adds	r3, #1
 800d5de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d9dd      	bls.n	800d5a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <find_volume+0x13e>
 800d5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d5f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	3358      	adds	r3, #88	@ 0x58
 800d5fc:	443b      	add	r3, r7
 800d5fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d602:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d606:	2b00      	cmp	r3, #0
 800d608:	d005      	beq.n	800d616 <find_volume+0x15e>
 800d60a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d60c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d60e:	f7ff fefd 	bl	800d40c <check_fs>
 800d612:	4603      	mov	r3, r0
 800d614:	e000      	b.n	800d618 <find_volume+0x160>
 800d616:	2303      	movs	r3, #3
 800d618:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d61c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d620:	2b01      	cmp	r3, #1
 800d622:	d905      	bls.n	800d630 <find_volume+0x178>
 800d624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d626:	3301      	adds	r3, #1
 800d628:	643b      	str	r3, [r7, #64]	@ 0x40
 800d62a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d9e2      	bls.n	800d5f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d634:	2b04      	cmp	r3, #4
 800d636:	d101      	bne.n	800d63c <find_volume+0x184>
 800d638:	2301      	movs	r3, #1
 800d63a:	e17e      	b.n	800d93a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d63c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d640:	2b01      	cmp	r3, #1
 800d642:	d901      	bls.n	800d648 <find_volume+0x190>
 800d644:	230d      	movs	r3, #13
 800d646:	e178      	b.n	800d93a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	3330      	adds	r3, #48	@ 0x30
 800d64c:	330b      	adds	r3, #11
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fdc2 	bl	800c1d8 <ld_word>
 800d654:	4603      	mov	r3, r0
 800d656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d65a:	d001      	beq.n	800d660 <find_volume+0x1a8>
 800d65c:	230d      	movs	r3, #13
 800d65e:	e16c      	b.n	800d93a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	3330      	adds	r3, #48	@ 0x30
 800d664:	3316      	adds	r3, #22
 800d666:	4618      	mov	r0, r3
 800d668:	f7fe fdb6 	bl	800c1d8 <ld_word>
 800d66c:	4603      	mov	r3, r0
 800d66e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <find_volume+0x1cc>
 800d676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d678:	3330      	adds	r3, #48	@ 0x30
 800d67a:	3324      	adds	r3, #36	@ 0x24
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fe fdc3 	bl	800c208 <ld_dword>
 800d682:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d688:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d692:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d696:	789b      	ldrb	r3, [r3, #2]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d005      	beq.n	800d6a8 <find_volume+0x1f0>
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	789b      	ldrb	r3, [r3, #2]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d001      	beq.n	800d6a8 <find_volume+0x1f0>
 800d6a4:	230d      	movs	r3, #13
 800d6a6:	e148      	b.n	800d93a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6aa:	789b      	ldrb	r3, [r3, #2]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6b0:	fb02 f303 	mul.w	r3, r2, r3
 800d6b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	895b      	ldrh	r3, [r3, #10]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d008      	beq.n	800d6dc <find_volume+0x224>
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6cc:	895b      	ldrh	r3, [r3, #10]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d2:	895b      	ldrh	r3, [r3, #10]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <find_volume+0x228>
 800d6dc:	230d      	movs	r3, #13
 800d6de:	e12c      	b.n	800d93a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	3330      	adds	r3, #48	@ 0x30
 800d6e4:	3311      	adds	r3, #17
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fd76 	bl	800c1d8 <ld_word>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f6:	891b      	ldrh	r3, [r3, #8]
 800d6f8:	f003 030f 	and.w	r3, r3, #15
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <find_volume+0x24e>
 800d702:	230d      	movs	r3, #13
 800d704:	e119      	b.n	800d93a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	3330      	adds	r3, #48	@ 0x30
 800d70a:	3313      	adds	r3, #19
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe fd63 	bl	800c1d8 <ld_word>
 800d712:	4603      	mov	r3, r0
 800d714:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <find_volume+0x272>
 800d71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71e:	3330      	adds	r3, #48	@ 0x30
 800d720:	3320      	adds	r3, #32
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe fd70 	bl	800c208 <ld_dword>
 800d728:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72c:	3330      	adds	r3, #48	@ 0x30
 800d72e:	330e      	adds	r3, #14
 800d730:	4618      	mov	r0, r3
 800d732:	f7fe fd51 	bl	800c1d8 <ld_word>
 800d736:	4603      	mov	r3, r0
 800d738:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d73a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d101      	bne.n	800d744 <find_volume+0x28c>
 800d740:	230d      	movs	r3, #13
 800d742:	e0fa      	b.n	800d93a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d744:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d748:	4413      	add	r3, r2
 800d74a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d74c:	8912      	ldrh	r2, [r2, #8]
 800d74e:	0912      	lsrs	r2, r2, #4
 800d750:	b292      	uxth	r2, r2
 800d752:	4413      	add	r3, r2
 800d754:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d204      	bcs.n	800d768 <find_volume+0x2b0>
 800d75e:	230d      	movs	r3, #13
 800d760:	e0eb      	b.n	800d93a <find_volume+0x482>
 800d762:	bf00      	nop
 800d764:	2400177c 	.word	0x2400177c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d770:	8952      	ldrh	r2, [r2, #10]
 800d772:	fbb3 f3f2 	udiv	r3, r3, r2
 800d776:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <find_volume+0x2ca>
 800d77e:	230d      	movs	r3, #13
 800d780:	e0db      	b.n	800d93a <find_volume+0x482>
		fmt = FS_FAT32;
 800d782:	2303      	movs	r3, #3
 800d784:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d78e:	4293      	cmp	r3, r2
 800d790:	d802      	bhi.n	800d798 <find_volume+0x2e0>
 800d792:	2302      	movs	r3, #2
 800d794:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d802      	bhi.n	800d7a8 <find_volume+0x2f0>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7aa:	1c9a      	adds	r2, r3, #2
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d7b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7ba:	441a      	add	r2, r3
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d7c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c4:	441a      	add	r2, r3
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d7ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d11e      	bne.n	800d810 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d4:	3330      	adds	r3, #48	@ 0x30
 800d7d6:	332a      	adds	r3, #42	@ 0x2a
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fcfd 	bl	800c1d8 <ld_word>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d001      	beq.n	800d7e8 <find_volume+0x330>
 800d7e4:	230d      	movs	r3, #13
 800d7e6:	e0a8      	b.n	800d93a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ea:	891b      	ldrh	r3, [r3, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <find_volume+0x33c>
 800d7f0:	230d      	movs	r3, #13
 800d7f2:	e0a2      	b.n	800d93a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f6:	3330      	adds	r3, #48	@ 0x30
 800d7f8:	332c      	adds	r3, #44	@ 0x2c
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fe fd04 	bl	800c208 <ld_dword>
 800d800:	4602      	mov	r2, r0
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d80e:	e01f      	b.n	800d850 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d812:	891b      	ldrh	r3, [r3, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <find_volume+0x364>
 800d818:	230d      	movs	r3, #13
 800d81a:	e08e      	b.n	800d93a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81e:	6a1a      	ldr	r2, [r3, #32]
 800d820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d822:	441a      	add	r2, r3
 800d824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d826:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d828:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d103      	bne.n	800d838 <find_volume+0x380>
 800d830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	e00a      	b.n	800d84e <find_volume+0x396>
 800d838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83a:	695a      	ldr	r2, [r3, #20]
 800d83c:	4613      	mov	r3, r2
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	4413      	add	r3, r2
 800d842:	085a      	lsrs	r2, r3, #1
 800d844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d84e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d852:	699a      	ldr	r2, [r3, #24]
 800d854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d856:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d85a:	0a5b      	lsrs	r3, r3, #9
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d201      	bcs.n	800d864 <find_volume+0x3ac>
 800d860:	230d      	movs	r3, #13
 800d862:	e06a      	b.n	800d93a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d866:	f04f 32ff 	mov.w	r2, #4294967295
 800d86a:	611a      	str	r2, [r3, #16]
 800d86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d872:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d876:	2280      	movs	r2, #128	@ 0x80
 800d878:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d87a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d149      	bne.n	800d916 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d884:	3330      	adds	r3, #48	@ 0x30
 800d886:	3330      	adds	r3, #48	@ 0x30
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fe fca5 	bl	800c1d8 <ld_word>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b01      	cmp	r3, #1
 800d892:	d140      	bne.n	800d916 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d896:	3301      	adds	r3, #1
 800d898:	4619      	mov	r1, r3
 800d89a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d89c:	f7fe ff10 	bl	800c6c0 <move_window>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d137      	bne.n	800d916 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ae:	3330      	adds	r3, #48	@ 0x30
 800d8b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fe fc8f 	bl	800c1d8 <ld_word>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	461a      	mov	r2, r3
 800d8be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d127      	bne.n	800d916 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	3330      	adds	r3, #48	@ 0x30
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fc9c 	bl	800c208 <ld_dword>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	4a1c      	ldr	r2, [pc, #112]	@ (800d944 <find_volume+0x48c>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d11e      	bne.n	800d916 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8da:	3330      	adds	r3, #48	@ 0x30
 800d8dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fe fc91 	bl	800c208 <ld_dword>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	4a17      	ldr	r2, [pc, #92]	@ (800d948 <find_volume+0x490>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d113      	bne.n	800d916 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f0:	3330      	adds	r3, #48	@ 0x30
 800d8f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fe fc86 	bl	800c208 <ld_dword>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d900:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d904:	3330      	adds	r3, #48	@ 0x30
 800d906:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fc7c 	bl	800c208 <ld_dword>
 800d910:	4602      	mov	r2, r0
 800d912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d914:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d918:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d91c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d91e:	4b0b      	ldr	r3, [pc, #44]	@ (800d94c <find_volume+0x494>)
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	3301      	adds	r3, #1
 800d924:	b29a      	uxth	r2, r3
 800d926:	4b09      	ldr	r3, [pc, #36]	@ (800d94c <find_volume+0x494>)
 800d928:	801a      	strh	r2, [r3, #0]
 800d92a:	4b08      	ldr	r3, [pc, #32]	@ (800d94c <find_volume+0x494>)
 800d92c:	881a      	ldrh	r2, [r3, #0]
 800d92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d930:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d934:	f7fe fe5c 	bl	800c5f0 <clear_lock>
#endif
	return FR_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3758      	adds	r7, #88	@ 0x58
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	41615252 	.word	0x41615252
 800d948:	61417272 	.word	0x61417272
 800d94c:	24001780 	.word	0x24001780

0800d950 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d95a:	2309      	movs	r3, #9
 800d95c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d01c      	beq.n	800d99e <validate+0x4e>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d018      	beq.n	800d99e <validate+0x4e>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d013      	beq.n	800d99e <validate+0x4e>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	889a      	ldrh	r2, [r3, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	88db      	ldrh	r3, [r3, #6]
 800d980:	429a      	cmp	r2, r3
 800d982:	d10c      	bne.n	800d99e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	785b      	ldrb	r3, [r3, #1]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fba2 	bl	800c0d4 <disk_status>
 800d990:	4603      	mov	r3, r0
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	2b00      	cmp	r3, #0
 800d998:	d101      	bne.n	800d99e <validate+0x4e>
			res = FR_OK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <validate+0x5a>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	e000      	b.n	800d9ac <validate+0x5c>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	6013      	str	r3, [r2, #0]
	return res;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
	...

0800d9bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d9ce:	f107 0310 	add.w	r3, r7, #16
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fcd5 	bl	800d382 <get_ldnumber>
 800d9d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	da01      	bge.n	800d9e4 <f_mount+0x28>
 800d9e0:	230b      	movs	r3, #11
 800d9e2:	e02b      	b.n	800da3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d9e4:	4a17      	ldr	r2, [pc, #92]	@ (800da44 <f_mount+0x88>)
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d005      	beq.n	800da00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d9f4:	69b8      	ldr	r0, [r7, #24]
 800d9f6:	f7fe fdfb 	bl	800c5f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d002      	beq.n	800da0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	490d      	ldr	r1, [pc, #52]	@ (800da44 <f_mount+0x88>)
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <f_mount+0x66>
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d001      	beq.n	800da26 <f_mount+0x6a>
 800da22:	2300      	movs	r3, #0
 800da24:	e00a      	b.n	800da3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800da26:	f107 010c 	add.w	r1, r7, #12
 800da2a:	f107 0308 	add.w	r3, r7, #8
 800da2e:	2200      	movs	r2, #0
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fd41 	bl	800d4b8 <find_volume>
 800da36:	4603      	mov	r3, r0
 800da38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3720      	adds	r7, #32
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	2400177c 	.word	0x2400177c

0800da48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b098      	sub	sp, #96	@ 0x60
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	4613      	mov	r3, r2
 800da54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <f_open+0x18>
 800da5c:	2309      	movs	r3, #9
 800da5e:	e1a9      	b.n	800ddb4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800da68:	79fa      	ldrb	r2, [r7, #7]
 800da6a:	f107 0110 	add.w	r1, r7, #16
 800da6e:	f107 0308 	add.w	r3, r7, #8
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff fd20 	bl	800d4b8 <find_volume>
 800da78:	4603      	mov	r3, r0
 800da7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800da7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da82:	2b00      	cmp	r3, #0
 800da84:	f040 818d 	bne.w	800dda2 <f_open+0x35a>
		dj.obj.fs = fs;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	f107 0314 	add.w	r3, r7, #20
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff fc03 	bl	800d2a0 <follow_path>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800daa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d118      	bne.n	800dada <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800daa8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800daac:	b25b      	sxtb	r3, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	da03      	bge.n	800daba <f_open+0x72>
				res = FR_INVALID_NAME;
 800dab2:	2306      	movs	r3, #6
 800dab4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dab8:	e00f      	b.n	800dada <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800daba:	79fb      	ldrb	r3, [r7, #7]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	bf8c      	ite	hi
 800dac0:	2301      	movhi	r3, #1
 800dac2:	2300      	movls	r3, #0
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	461a      	mov	r2, r3
 800dac8:	f107 0314 	add.w	r3, r7, #20
 800dacc:	4611      	mov	r1, r2
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe fc82 	bl	800c3d8 <chk_lock>
 800dad4:	4603      	mov	r3, r0
 800dad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	f003 031c 	and.w	r3, r3, #28
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d07f      	beq.n	800dbe4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800dae4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d017      	beq.n	800db1c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800daec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800daf0:	2b04      	cmp	r3, #4
 800daf2:	d10e      	bne.n	800db12 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800daf4:	f7fe fccc 	bl	800c490 <enq_lock>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d006      	beq.n	800db0c <f_open+0xc4>
 800dafe:	f107 0314 	add.w	r3, r7, #20
 800db02:	4618      	mov	r0, r3
 800db04:	f7ff fb05 	bl	800d112 <dir_register>
 800db08:	4603      	mov	r3, r0
 800db0a:	e000      	b.n	800db0e <f_open+0xc6>
 800db0c:	2312      	movs	r3, #18
 800db0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	f043 0308 	orr.w	r3, r3, #8
 800db18:	71fb      	strb	r3, [r7, #7]
 800db1a:	e010      	b.n	800db3e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800db1c:	7ebb      	ldrb	r3, [r7, #26]
 800db1e:	f003 0311 	and.w	r3, r3, #17
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <f_open+0xe6>
					res = FR_DENIED;
 800db26:	2307      	movs	r3, #7
 800db28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db2c:	e007      	b.n	800db3e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <f_open+0xf6>
 800db38:	2308      	movs	r3, #8
 800db3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db42:	2b00      	cmp	r3, #0
 800db44:	d168      	bne.n	800dc18 <f_open+0x1d0>
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	f003 0308 	and.w	r3, r3, #8
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d063      	beq.n	800dc18 <f_open+0x1d0>
				dw = GET_FATTIME();
 800db50:	f7fe f87a 	bl	800bc48 <get_fattime>
 800db54:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800db56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db58:	330e      	adds	r3, #14
 800db5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe fb91 	bl	800c284 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800db62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db64:	3316      	adds	r3, #22
 800db66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fe fb8b 	bl	800c284 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db70:	330b      	adds	r3, #11
 800db72:	2220      	movs	r2, #32
 800db74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fa34 	bl	800cfea <ld_clust>
 800db82:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800db88:	2200      	movs	r2, #0
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff fa4c 	bl	800d028 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db92:	331c      	adds	r3, #28
 800db94:	2100      	movs	r1, #0
 800db96:	4618      	mov	r0, r3
 800db98:	f7fe fb74 	bl	800c284 <st_dword>
					fs->wflag = 1;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2201      	movs	r2, #1
 800dba0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d037      	beq.n	800dc18 <f_open+0x1d0>
						dw = fs->winsect;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dbae:	f107 0314 	add.w	r3, r7, #20
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe ff5f 	bl	800ca7a <remove_chain>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800dbc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d126      	bne.n	800dc18 <f_open+0x1d0>
							res = move_window(fs, dw);
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe fd76 	bl	800c6c0 <move_window>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbde:	3a01      	subs	r2, #1
 800dbe0:	60da      	str	r2, [r3, #12]
 800dbe2:	e019      	b.n	800dc18 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dbe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d115      	bne.n	800dc18 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dbec:	7ebb      	ldrb	r3, [r7, #26]
 800dbee:	f003 0310 	and.w	r3, r3, #16
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d003      	beq.n	800dbfe <f_open+0x1b6>
					res = FR_NO_FILE;
 800dbf6:	2304      	movs	r3, #4
 800dbf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dbfc:	e00c      	b.n	800dc18 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	f003 0302 	and.w	r3, r3, #2
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d007      	beq.n	800dc18 <f_open+0x1d0>
 800dc08:	7ebb      	ldrb	r3, [r7, #26]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <f_open+0x1d0>
						res = FR_DENIED;
 800dc12:	2307      	movs	r3, #7
 800dc14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dc18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d126      	bne.n	800dc6e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	f003 0308 	and.w	r3, r3, #8
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800dc2a:	79fb      	ldrb	r3, [r7, #7]
 800dc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dc3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	bf8c      	ite	hi
 800dc46:	2301      	movhi	r3, #1
 800dc48:	2300      	movls	r3, #0
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	f107 0314 	add.w	r3, r7, #20
 800dc52:	4611      	mov	r1, r2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe fc3d 	bl	800c4d4 <inc_lock>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <f_open+0x226>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f040 8095 	bne.w	800dda2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff f9b3 	bl	800cfea <ld_clust>
 800dc84:	4602      	mov	r2, r0
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc8c:	331c      	adds	r3, #28
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fe faba 	bl	800c208 <ld_dword>
 800dc94:	4602      	mov	r2, r0
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	88da      	ldrh	r2, [r3, #6]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	79fa      	ldrb	r2, [r7, #7]
 800dcb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3330      	adds	r3, #48	@ 0x30
 800dcca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe fb24 	bl	800c31e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	f003 0320 	and.w	r3, r3, #32
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d060      	beq.n	800dda2 <f_open+0x35a>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d05c      	beq.n	800dda2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	68da      	ldr	r2, [r3, #12]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	895b      	ldrh	r3, [r3, #10]
 800dcf4:	025b      	lsls	r3, r3, #9
 800dcf6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd04:	e016      	b.n	800dd34 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fe fd24 	bl	800c758 <get_fat>
 800dd10:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dd12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d802      	bhi.n	800dd1e <f_open+0x2d6>
 800dd18:	2302      	movs	r3, #2
 800dd1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dd1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd24:	d102      	bne.n	800dd2c <f_open+0x2e4>
 800dd26:	2301      	movs	r3, #1
 800dd28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d103      	bne.n	800dd44 <f_open+0x2fc>
 800dd3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d8e0      	bhi.n	800dd06 <f_open+0x2be>
				}
				fp->clust = clst;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dd48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d127      	bne.n	800dda2 <f_open+0x35a>
 800dd52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d022      	beq.n	800dda2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe fcda 	bl	800c71a <clust2sect>
 800dd66:	6478      	str	r0, [r7, #68]	@ 0x44
 800dd68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d103      	bne.n	800dd76 <f_open+0x32e>
						res = FR_INT_ERR;
 800dd6e:	2302      	movs	r3, #2
 800dd70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dd74:	e015      	b.n	800dda2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd78:	0a5a      	lsrs	r2, r3, #9
 800dd7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd7c:	441a      	add	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	7858      	ldrb	r0, [r3, #1]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a1a      	ldr	r2, [r3, #32]
 800dd90:	2301      	movs	r3, #1
 800dd92:	f7fe f9e1 	bl	800c158 <disk_read>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <f_open+0x35a>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dda2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d002      	beq.n	800ddb0 <f_open+0x368>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2200      	movs	r2, #0
 800ddae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ddb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3760      	adds	r7, #96	@ 0x60
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08e      	sub	sp, #56	@ 0x38
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f107 0214 	add.w	r2, r7, #20
 800ddda:	4611      	mov	r1, r2
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff fdb7 	bl	800d950 <validate>
 800dde2:	4603      	mov	r3, r0
 800dde4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dde8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d107      	bne.n	800de00 <f_read+0x44>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	7d5b      	ldrb	r3, [r3, #21]
 800ddf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ddf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <f_read+0x4a>
 800de00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de04:	e115      	b.n	800e032 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	7d1b      	ldrb	r3, [r3, #20]
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <f_read+0x5a>
 800de12:	2307      	movs	r3, #7
 800de14:	e10d      	b.n	800e032 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	68da      	ldr	r2, [r3, #12]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	429a      	cmp	r2, r3
 800de28:	f240 80fe 	bls.w	800e028 <f_read+0x26c>
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800de30:	e0fa      	b.n	800e028 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f040 80c6 	bne.w	800dfcc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	0a5b      	lsrs	r3, r3, #9
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	8952      	ldrh	r2, [r2, #10]
 800de4a:	3a01      	subs	r2, #1
 800de4c:	4013      	ands	r3, r2
 800de4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d12f      	bne.n	800deb6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d103      	bne.n	800de66 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	633b      	str	r3, [r7, #48]	@ 0x30
 800de64:	e013      	b.n	800de8e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d007      	beq.n	800de7e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	4619      	mov	r1, r3
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7fe fefd 	bl	800cc74 <clmt_clust>
 800de7a:	6338      	str	r0, [r7, #48]	@ 0x30
 800de7c:	e007      	b.n	800de8e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	69db      	ldr	r3, [r3, #28]
 800de84:	4619      	mov	r1, r3
 800de86:	4610      	mov	r0, r2
 800de88:	f7fe fc66 	bl	800c758 <get_fat>
 800de8c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800de8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de90:	2b01      	cmp	r3, #1
 800de92:	d804      	bhi.n	800de9e <f_read+0xe2>
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2202      	movs	r2, #2
 800de98:	755a      	strb	r2, [r3, #21]
 800de9a:	2302      	movs	r3, #2
 800de9c:	e0c9      	b.n	800e032 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea4:	d104      	bne.n	800deb0 <f_read+0xf4>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2201      	movs	r2, #1
 800deaa:	755a      	strb	r2, [r3, #21]
 800deac:	2301      	movs	r3, #1
 800deae:	e0c0      	b.n	800e032 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fc2b 	bl	800c71a <clust2sect>
 800dec4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d104      	bne.n	800ded6 <f_read+0x11a>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2202      	movs	r2, #2
 800ded0:	755a      	strb	r2, [r3, #21]
 800ded2:	2302      	movs	r3, #2
 800ded4:	e0ad      	b.n	800e032 <f_read+0x276>
			sect += csect;
 800ded6:	69ba      	ldr	r2, [r7, #24]
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	4413      	add	r3, r2
 800dedc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	0a5b      	lsrs	r3, r3, #9
 800dee2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d039      	beq.n	800df5e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800deea:	69fa      	ldr	r2, [r7, #28]
 800deec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deee:	4413      	add	r3, r2
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	8952      	ldrh	r2, [r2, #10]
 800def4:	4293      	cmp	r3, r2
 800def6:	d905      	bls.n	800df04 <f_read+0x148>
					cc = fs->csize - csect;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	895b      	ldrh	r3, [r3, #10]
 800defc:	461a      	mov	r2, r3
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	7858      	ldrb	r0, [r3, #1]
 800df08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0a:	69ba      	ldr	r2, [r7, #24]
 800df0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df0e:	f7fe f923 	bl	800c158 <disk_read>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <f_read+0x166>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2201      	movs	r2, #1
 800df1c:	755a      	strb	r2, [r3, #21]
 800df1e:	2301      	movs	r3, #1
 800df20:	e087      	b.n	800e032 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	7d1b      	ldrb	r3, [r3, #20]
 800df26:	b25b      	sxtb	r3, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	da14      	bge.n	800df56 <f_read+0x19a>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6a1a      	ldr	r2, [r3, #32]
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df36:	429a      	cmp	r2, r3
 800df38:	d90d      	bls.n	800df56 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6a1a      	ldr	r2, [r3, #32]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	025b      	lsls	r3, r3, #9
 800df44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df46:	18d0      	adds	r0, r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3330      	adds	r3, #48	@ 0x30
 800df4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df50:	4619      	mov	r1, r3
 800df52:	f7fe f9c3 	bl	800c2dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800df56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df58:	025b      	lsls	r3, r3, #9
 800df5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800df5c:	e050      	b.n	800e000 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	69ba      	ldr	r2, [r7, #24]
 800df64:	429a      	cmp	r2, r3
 800df66:	d02e      	beq.n	800dfc6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	7d1b      	ldrb	r3, [r3, #20]
 800df6c:	b25b      	sxtb	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da18      	bge.n	800dfa4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	7858      	ldrb	r0, [r3, #1]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6a1a      	ldr	r2, [r3, #32]
 800df80:	2301      	movs	r3, #1
 800df82:	f7fe f909 	bl	800c198 <disk_write>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d004      	beq.n	800df96 <f_read+0x1da>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2201      	movs	r2, #1
 800df90:	755a      	strb	r2, [r3, #21]
 800df92:	2301      	movs	r3, #1
 800df94:	e04d      	b.n	800e032 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	7d1b      	ldrb	r3, [r3, #20]
 800df9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	7858      	ldrb	r0, [r3, #1]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfae:	2301      	movs	r3, #1
 800dfb0:	69ba      	ldr	r2, [r7, #24]
 800dfb2:	f7fe f8d1 	bl	800c158 <disk_read>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <f_read+0x20a>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	755a      	strb	r2, [r3, #21]
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e035      	b.n	800e032 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	69ba      	ldr	r2, [r7, #24]
 800dfca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	699b      	ldr	r3, [r3, #24]
 800dfd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dfd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dfda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d901      	bls.n	800dfe6 <f_read+0x22a>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dff4:	4413      	add	r3, r2
 800dff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff8:	4619      	mov	r1, r3
 800dffa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dffc:	f7fe f96e 	bl	800c2dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e004:	4413      	add	r3, r2
 800e006:	627b      	str	r3, [r7, #36]	@ 0x24
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	699a      	ldr	r2, [r3, #24]
 800e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00e:	441a      	add	r2, r3
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	619a      	str	r2, [r3, #24]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e01a:	441a      	add	r2, r3
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f47f af01 	bne.w	800de32 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3738      	adds	r7, #56	@ 0x38
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b090      	sub	sp, #64	@ 0x40
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f107 0208 	add.w	r2, r7, #8
 800e04a:	4611      	mov	r1, r2
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff fc7f 	bl	800d950 <validate>
 800e052:	4603      	mov	r3, r0
 800e054:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e058:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d103      	bne.n	800e068 <f_lseek+0x2e>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	7d5b      	ldrb	r3, [r3, #21]
 800e064:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e068:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <f_lseek+0x3c>
 800e070:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e074:	e1e6      	b.n	800e444 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 80d1 	beq.w	800e222 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e086:	d15a      	bne.n	800e13e <f_lseek+0x104>
			tbl = fp->cltbl;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e08c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e090:	1d1a      	adds	r2, r3, #4
 800e092:	627a      	str	r2, [r7, #36]	@ 0x24
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	2302      	movs	r3, #2
 800e09a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d03a      	beq.n	800e11e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0aa:	613b      	str	r3, [r7, #16]
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b2:	3302      	adds	r3, #2
 800e0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0bc:	3301      	adds	r3, #1
 800e0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fe fb47 	bl	800c758 <get_fat>
 800e0ca:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d804      	bhi.n	800e0dc <f_lseek+0xa2>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	755a      	strb	r2, [r3, #21]
 800e0d8:	2302      	movs	r3, #2
 800e0da:	e1b3      	b.n	800e444 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d104      	bne.n	800e0ee <f_lseek+0xb4>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	755a      	strb	r2, [r3, #21]
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e1aa      	b.n	800e444 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d0de      	beq.n	800e0b6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e0f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d809      	bhi.n	800e114 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	1d1a      	adds	r2, r3, #4
 800e104:	627a      	str	r2, [r7, #36]	@ 0x24
 800e106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10c:	1d1a      	adds	r2, r3, #4
 800e10e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d3c4      	bcc.n	800e0a8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e124:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d803      	bhi.n	800e136 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e130:	2200      	movs	r2, #0
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	e184      	b.n	800e440 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e136:	2311      	movs	r3, #17
 800e138:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e13c:	e180      	b.n	800e440 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	429a      	cmp	r2, r3
 800e146:	d902      	bls.n	800e14e <f_lseek+0x114>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 8172 	beq.w	800e440 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	3b01      	subs	r3, #1
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7fe fd86 	bl	800cc74 <clmt_clust>
 800e168:	4602      	mov	r2, r0
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	69db      	ldr	r3, [r3, #28]
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f7fe facf 	bl	800c71a <clust2sect>
 800e17c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d104      	bne.n	800e18e <f_lseek+0x154>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2202      	movs	r2, #2
 800e188:	755a      	strb	r2, [r3, #21]
 800e18a:	2302      	movs	r3, #2
 800e18c:	e15a      	b.n	800e444 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	3b01      	subs	r3, #1
 800e192:	0a5b      	lsrs	r3, r3, #9
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	8952      	ldrh	r2, [r2, #10]
 800e198:	3a01      	subs	r2, #1
 800e19a:	4013      	ands	r3, r2
 800e19c:	69ba      	ldr	r2, [r7, #24]
 800e19e:	4413      	add	r3, r2
 800e1a0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 8148 	beq.w	800e440 <f_lseek+0x406>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a1b      	ldr	r3, [r3, #32]
 800e1b4:	69ba      	ldr	r2, [r7, #24]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	f000 8142 	beq.w	800e440 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7d1b      	ldrb	r3, [r3, #20]
 800e1c0:	b25b      	sxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	da18      	bge.n	800e1f8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	7858      	ldrb	r0, [r3, #1]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a1a      	ldr	r2, [r3, #32]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	f7fd ffdf 	bl	800c198 <disk_write>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <f_lseek+0x1b0>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	755a      	strb	r2, [r3, #21]
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e12c      	b.n	800e444 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7d1b      	ldrb	r3, [r3, #20]
 800e1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	7858      	ldrb	r0, [r3, #1]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e202:	2301      	movs	r3, #1
 800e204:	69ba      	ldr	r2, [r7, #24]
 800e206:	f7fd ffa7 	bl	800c158 <disk_read>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d004      	beq.n	800e21a <f_lseek+0x1e0>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	755a      	strb	r2, [r3, #21]
 800e216:	2301      	movs	r3, #1
 800e218:	e114      	b.n	800e444 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	621a      	str	r2, [r3, #32]
 800e220:	e10e      	b.n	800e440 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d908      	bls.n	800e23e <f_lseek+0x204>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	7d1b      	ldrb	r3, [r3, #20]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	699b      	ldr	r3, [r3, #24]
 800e242:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e244:	2300      	movs	r3, #0
 800e246:	637b      	str	r3, [r7, #52]	@ 0x34
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e24c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 80a7 	beq.w	800e3a4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	895b      	ldrh	r3, [r3, #10]
 800e25a:	025b      	lsls	r3, r3, #9
 800e25c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d01b      	beq.n	800e29c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	1e5a      	subs	r2, r3, #1
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	1e59      	subs	r1, r3, #1
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e278:	429a      	cmp	r2, r3
 800e27a:	d30f      	bcc.n	800e29c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e27c:	6a3b      	ldr	r3, [r7, #32]
 800e27e:	1e5a      	subs	r2, r3, #1
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	425b      	negs	r3, r3
 800e284:	401a      	ands	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e29a:	e022      	b.n	800e2e2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d119      	bne.n	800e2dc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fe fc49 	bl	800cb44 <create_chain>
 800e2b2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d104      	bne.n	800e2c4 <f_lseek+0x28a>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2202      	movs	r2, #2
 800e2be:	755a      	strb	r2, [r3, #21]
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	e0bf      	b.n	800e444 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ca:	d104      	bne.n	800e2d6 <f_lseek+0x29c>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	755a      	strb	r2, [r3, #21]
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e0b6      	b.n	800e444 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2da:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2e0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d05d      	beq.n	800e3a4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e2e8:	e03a      	b.n	800e360 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	603b      	str	r3, [r7, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	699a      	ldr	r2, [r3, #24]
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	441a      	add	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	7d1b      	ldrb	r3, [r3, #20]
 800e302:	f003 0302 	and.w	r3, r3, #2
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00b      	beq.n	800e322 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe fc18 	bl	800cb44 <create_chain>
 800e314:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d108      	bne.n	800e32e <f_lseek+0x2f4>
							ofs = 0; break;
 800e31c:	2300      	movs	r3, #0
 800e31e:	603b      	str	r3, [r7, #0]
 800e320:	e022      	b.n	800e368 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe fa16 	bl	800c758 <get_fat>
 800e32c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e334:	d104      	bne.n	800e340 <f_lseek+0x306>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2201      	movs	r2, #1
 800e33a:	755a      	strb	r2, [r3, #21]
 800e33c:	2301      	movs	r3, #1
 800e33e:	e081      	b.n	800e444 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e342:	2b01      	cmp	r3, #1
 800e344:	d904      	bls.n	800e350 <f_lseek+0x316>
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d304      	bcc.n	800e35a <f_lseek+0x320>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2202      	movs	r2, #2
 800e354:	755a      	strb	r2, [r3, #21]
 800e356:	2302      	movs	r3, #2
 800e358:	e074      	b.n	800e444 <f_lseek+0x40a>
					fp->clust = clst;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e35e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	429a      	cmp	r2, r3
 800e366:	d8c0      	bhi.n	800e2ea <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	699a      	ldr	r2, [r3, #24]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	441a      	add	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d012      	beq.n	800e3a4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe f9c9 	bl	800c71a <clust2sect>
 800e388:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d104      	bne.n	800e39a <f_lseek+0x360>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2202      	movs	r2, #2
 800e394:	755a      	strb	r2, [r3, #21]
 800e396:	2302      	movs	r3, #2
 800e398:	e054      	b.n	800e444 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	0a5b      	lsrs	r3, r3, #9
 800e39e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3a0:	4413      	add	r3, r2
 800e3a2:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	699a      	ldr	r2, [r3, #24]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d90a      	bls.n	800e3c6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	699a      	ldr	r2, [r3, #24]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7d1b      	ldrb	r3, [r3, #20]
 800e3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3c0:	b2da      	uxtb	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d036      	beq.n	800e440 <f_lseek+0x406>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d031      	beq.n	800e440 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	7d1b      	ldrb	r3, [r3, #20]
 800e3e0:	b25b      	sxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	da18      	bge.n	800e418 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	7858      	ldrb	r0, [r3, #1]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a1a      	ldr	r2, [r3, #32]
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	f7fd fecf 	bl	800c198 <disk_write>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <f_lseek+0x3d0>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	755a      	strb	r2, [r3, #21]
 800e406:	2301      	movs	r3, #1
 800e408:	e01c      	b.n	800e444 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	7d1b      	ldrb	r3, [r3, #20]
 800e40e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e412:	b2da      	uxtb	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	7858      	ldrb	r0, [r3, #1]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e422:	2301      	movs	r3, #1
 800e424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e426:	f7fd fe97 	bl	800c158 <disk_read>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d004      	beq.n	800e43a <f_lseek+0x400>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	755a      	strb	r2, [r3, #21]
 800e436:	2301      	movs	r3, #1
 800e438:	e004      	b.n	800e444 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e43e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e440:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e444:	4618      	mov	r0, r3
 800e446:	3740      	adds	r7, #64	@ 0x40
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b087      	sub	sp, #28
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	4613      	mov	r3, r2
 800e458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e45a:	2301      	movs	r3, #1
 800e45c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e462:	4b1f      	ldr	r3, [pc, #124]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e464:	7a5b      	ldrb	r3, [r3, #9]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d131      	bne.n	800e4d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e46c:	4b1c      	ldr	r3, [pc, #112]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e46e:	7a5b      	ldrb	r3, [r3, #9]
 800e470:	b2db      	uxtb	r3, r3
 800e472:	461a      	mov	r2, r3
 800e474:	4b1a      	ldr	r3, [pc, #104]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e476:	2100      	movs	r1, #0
 800e478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e47a:	4b19      	ldr	r3, [pc, #100]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e47c:	7a5b      	ldrb	r3, [r3, #9]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	4a17      	ldr	r2, [pc, #92]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e48a:	4b15      	ldr	r3, [pc, #84]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e48c:	7a5b      	ldrb	r3, [r3, #9]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	461a      	mov	r2, r3
 800e492:	4b13      	ldr	r3, [pc, #76]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e494:	4413      	add	r3, r2
 800e496:	79fa      	ldrb	r2, [r7, #7]
 800e498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e49a:	4b11      	ldr	r3, [pc, #68]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e49c:	7a5b      	ldrb	r3, [r3, #9]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	b2d1      	uxtb	r1, r2
 800e4a4:	4a0e      	ldr	r2, [pc, #56]	@ (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e4a6:	7251      	strb	r1, [r2, #9]
 800e4a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e4aa:	7dbb      	ldrb	r3, [r7, #22]
 800e4ac:	3330      	adds	r3, #48	@ 0x30
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	223a      	movs	r2, #58	@ 0x3a
 800e4ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	3302      	adds	r3, #2
 800e4c0:	222f      	movs	r2, #47	@ 0x2f
 800e4c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3303      	adds	r3, #3
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	371c      	adds	r7, #28
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	240017a4 	.word	0x240017a4

0800e4e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff ffaa 	bl	800e44c <FATFS_LinkDriverEx>
 800e4f8:	4603      	mov	r3, r0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800e50a:	2300      	movs	r3, #0
 800e50c:	607b      	str	r3, [r7, #4]
 800e50e:	e02e      	b.n	800e56e <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3b80      	subs	r3, #128	@ 0x80
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800e51e:	fb02 f303 	mul.w	r3, r2, r3
 800e522:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e526:	141a      	asrs	r2, r3, #16
 800e528:	4916      	ldr	r1, [pc, #88]	@ (800e584 <JPEG_InitPostProcColorTables+0x80>)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800e536:	fb02 f303 	mul.w	r3, r2, r3
 800e53a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e53e:	141a      	asrs	r2, r3, #16
 800e540:	4911      	ldr	r1, [pc, #68]	@ (800e588 <JPEG_InitPostProcColorTables+0x84>)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	4a10      	ldr	r2, [pc, #64]	@ (800e58c <JPEG_InitPostProcColorTables+0x88>)
 800e54c:	fb03 f202 	mul.w	r2, r3, r2
 800e550:	490f      	ldr	r1, [pc, #60]	@ (800e590 <JPEG_InitPostProcColorTables+0x8c>)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	4a0e      	ldr	r2, [pc, #56]	@ (800e594 <JPEG_InitPostProcColorTables+0x90>)
 800e55c:	fb03 f202 	mul.w	r2, r3, r2
 800e560:	490d      	ldr	r1, [pc, #52]	@ (800e598 <JPEG_InitPostProcColorTables+0x94>)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3301      	adds	r3, #1
 800e56c:	607b      	str	r3, [r7, #4]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2bff      	cmp	r3, #255	@ 0xff
 800e572:	ddcd      	ble.n	800e510 <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800e574:	bf00      	nop
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	240017b0 	.word	0x240017b0
 800e588:	24001bb0 	.word	0x24001bb0
 800e58c:	ffffa498 	.word	0xffffa498
 800e590:	24001fb0 	.word	0x24001fb0
 800e594:	ffffd3f4 	.word	0xffffd3f4
 800e598:	240023b0 	.word	0x240023b0

0800e59c <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  JPEG_InitPreProcColorTables();
 800e5a0:	f000 f806 	bl	800e5b0 <JPEG_InitPreProcColorTables>
  JPEG_Init_MCU_LUT();
 800e5a4:	f000 f888 	bl	800e6b8 <JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800e5a8:	f7ff ffac 	bl	800e504 <JPEG_InitPostProcColorTables>
#endif

}
 800e5ac:	bf00      	nop
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPreProcColorTables(void)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
  int32_t i; 

  for (i = 0; i <= 255; i++) 
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	e05a      	b.n	800e672 <JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f644 428b 	movw	r2, #19595	@ 0x4c8b
 800e5c2:	fb02 f303 	mul.w	r3, r2, r3
 800e5c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e5ca:	141a      	asrs	r2, r3, #16
 800e5cc:	492e      	ldr	r1, [pc, #184]	@ (800e688 <JPEG_InitPreProcColorTables+0xd8>)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f249 6245 	movw	r2, #38469	@ 0x9645
 800e5da:	fb02 f303 	mul.w	r3, r2, r3
 800e5de:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e5e2:	141a      	asrs	r2, r3, #16
 800e5e4:	4929      	ldr	r1, [pc, #164]	@ (800e68c <JPEG_InitPreProcColorTables+0xdc>)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 800e5f2:	fb02 f303 	mul.w	r3, r2, r3
 800e5f6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e5fa:	141a      	asrs	r2, r3, #16
 800e5fc:	4924      	ldr	r1, [pc, #144]	@ (800e690 <JPEG_InitPreProcColorTables+0xe0>)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                          
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4a23      	ldr	r2, [pc, #140]	@ (800e694 <JPEG_InitPreProcColorTables+0xe4>)
 800e608:	fb02 f303 	mul.w	r3, r2, r3
 800e60c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e610:	141a      	asrs	r2, r3, #16
 800e612:	4921      	ldr	r1, [pc, #132]	@ (800e698 <JPEG_InitPreProcColorTables+0xe8>)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a1f      	ldr	r2, [pc, #124]	@ (800e69c <JPEG_InitPreProcColorTables+0xec>)
 800e61e:	fb02 f303 	mul.w	r3, r2, r3
 800e622:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e626:	141a      	asrs	r2, r3, #16
 800e628:	491d      	ldr	r1, [pc, #116]	@ (800e6a0 <JPEG_InitPreProcColorTables+0xf0>)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3301      	adds	r3, #1
 800e634:	03db      	lsls	r3, r3, #15
 800e636:	141a      	asrs	r2, r3, #16
 800e638:	491a      	ldr	r1, [pc, #104]	@ (800e6a4 <JPEG_InitPreProcColorTables+0xf4>)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a19      	ldr	r2, [pc, #100]	@ (800e6a8 <JPEG_InitPreProcColorTables+0xf8>)
 800e644:	fb02 f303 	mul.w	r3, r2, r3
 800e648:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e64c:	141a      	asrs	r2, r3, #16
 800e64e:	4917      	ldr	r1, [pc, #92]	@ (800e6ac <JPEG_InitPreProcColorTables+0xfc>)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a15      	ldr	r2, [pc, #84]	@ (800e6b0 <JPEG_InitPreProcColorTables+0x100>)
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
 800e65e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e662:	141a      	asrs	r2, r3, #16
 800e664:	4913      	ldr	r1, [pc, #76]	@ (800e6b4 <JPEG_InitPreProcColorTables+0x104>)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3301      	adds	r3, #1
 800e670:	607b      	str	r3, [r7, #4]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2bff      	cmp	r3, #255	@ 0xff
 800e676:	dda1      	ble.n	800e5bc <JPEG_InitPreProcColorTables+0xc>
  }  
}
 800e678:	bf00      	nop
 800e67a:	bf00      	nop
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	240027b0 	.word	0x240027b0
 800e68c:	240033b0 	.word	0x240033b0
 800e690:	24003fb0 	.word	0x24003fb0
 800e694:	ffffd4d1 	.word	0xffffd4d1
 800e698:	24002bb0 	.word	0x24002bb0
 800e69c:	ffffab30 	.word	0xffffab30
 800e6a0:	24003bb0 	.word	0x24003bb0
 800e6a4:	24002fb0 	.word	0x24002fb0
 800e6a8:	ffff94d1 	.word	0xffff94d1
 800e6ac:	240037b0 	.word	0x240037b0
 800e6b0:	ffffeb30 	.word	0xffffeb30
 800e6b4:	240043b0 	.word	0x240043b0

0800e6b8 <JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_Init_MCU_LUT(void)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;
  
  /*Y LUT */
  for(i = 0; i < 16; i++)
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	e036      	b.n	800e732 <JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	60bb      	str	r3, [r7, #8]
 800e6c8:	e02d      	b.n	800e726 <JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);  
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	00db      	lsls	r3, r3, #3
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2b07      	cmp	r3, #7
 800e6d8:	d906      	bls.n	800e6e8 <JPEG_Init_MCU_LUT+0x30>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	d903      	bls.n	800e6e8 <JPEG_Init_MCU_LUT+0x30>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	3378      	adds	r3, #120	@ 0x78
 800e6e4:	607b      	str	r3, [r7, #4]
 800e6e6:	e012      	b.n	800e70e <JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	d906      	bls.n	800e6fc <JPEG_Init_MCU_LUT+0x44>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b07      	cmp	r3, #7
 800e6f2:	d803      	bhi.n	800e6fc <JPEG_Init_MCU_LUT+0x44>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3338      	adds	r3, #56	@ 0x38
 800e6f8:	607b      	str	r3, [r7, #4]
 800e6fa:	e008      	b.n	800e70e <JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	2b07      	cmp	r3, #7
 800e700:	d805      	bhi.n	800e70e <JPEG_Init_MCU_LUT+0x56>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b07      	cmp	r3, #7
 800e706:	d902      	bls.n	800e70e <JPEG_Init_MCU_LUT+0x56>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	3340      	adds	r3, #64	@ 0x40
 800e70c:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	011a      	lsls	r2, r3, #4
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	4413      	add	r3, r2
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	b291      	uxth	r1, r2
 800e71a:	4a62      	ldr	r2, [pc, #392]	@ (800e8a4 <JPEG_Init_MCU_LUT+0x1ec>)
 800e71c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	3301      	adds	r3, #1
 800e724:	60bb      	str	r3, [r7, #8]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b0f      	cmp	r3, #15
 800e72a:	d9ce      	bls.n	800e6ca <JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	3301      	adds	r3, #1
 800e730:	60fb      	str	r3, [r7, #12]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b0f      	cmp	r3, #15
 800e736:	d9c5      	bls.n	800e6c4 <JPEG_Init_MCU_LUT+0xc>
    }
  }
  
  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 800e738:	2300      	movs	r3, #0
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	e072      	b.n	800e824 <JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 800e73e:	2300      	movs	r3, #0
 800e740:	60bb      	str	r3, [r7, #8]
 800e742:	e069      	b.n	800e818 <JPEG_Init_MCU_LUT+0x160>
    {      
      offset = i*16 + j;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	011b      	lsls	r3, r3, #4
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	4413      	add	r3, r2
 800e74c:	607b      	str	r3, [r7, #4]
      
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	085b      	lsrs	r3, r3, #1
 800e752:	b29a      	uxth	r2, r3
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	085b      	lsrs	r3, r3, #1
 800e758:	b29b      	uxth	r3, r3
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	4413      	add	r3, r2
 800e760:	b29b      	uxth	r3, r3
 800e762:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e766:	b299      	uxth	r1, r3
 800e768:	4a4f      	ldr	r2, [pc, #316]	@ (800e8a8 <JPEG_Init_MCU_LUT+0x1f0>)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	085b      	lsrs	r3, r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	4413      	add	r3, r2
 800e780:	b29b      	uxth	r3, r3
 800e782:	3380      	adds	r3, #128	@ 0x80
 800e784:	b299      	uxth	r1, r3
 800e786:	4a49      	ldr	r2, [pc, #292]	@ (800e8ac <JPEG_Init_MCU_LUT+0x1f4>)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	085b      	lsrs	r3, r3, #1
 800e792:	b29a      	uxth	r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	085b      	lsrs	r3, r3, #1
 800e798:	b29b      	uxth	r3, r3
 800e79a:	00db      	lsls	r3, r3, #3
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	4413      	add	r3, r2
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800e7a6:	b299      	uxth	r1, r3
 800e7a8:	4a41      	ldr	r2, [pc, #260]	@ (800e8b0 <JPEG_Init_MCU_LUT+0x1f8>)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	085b      	lsrs	r3, r3, #1
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	00db      	lsls	r3, r3, #3
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	4413      	add	r3, r2
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	33c0      	adds	r3, #192	@ 0xc0
 800e7c4:	b299      	uxth	r1, r3
 800e7c6:	4a3b      	ldr	r2, [pc, #236]	@ (800e8b4 <JPEG_Init_MCU_LUT+0x1fc>)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	085b      	lsrs	r3, r3, #1
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	085b      	lsrs	r3, r3, #1
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	4413      	add	r3, r2
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e7e6:	b299      	uxth	r1, r3
 800e7e8:	4a33      	ldr	r2, [pc, #204]	@ (800e8b8 <JPEG_Init_MCU_LUT+0x200>)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	085b      	lsrs	r3, r3, #1
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	085b      	lsrs	r3, r3, #1
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	4413      	add	r3, r2
 800e802:	b29b      	uxth	r3, r3
 800e804:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e808:	b299      	uxth	r1, r3
 800e80a:	4a2c      	ldr	r2, [pc, #176]	@ (800e8bc <JPEG_Init_MCU_LUT+0x204>)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	3301      	adds	r3, #1
 800e816:	60bb      	str	r3, [r7, #8]
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b0f      	cmp	r3, #15
 800e81c:	d992      	bls.n	800e744 <JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3301      	adds	r3, #1
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b0f      	cmp	r3, #15
 800e828:	d989      	bls.n	800e73e <JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 800e82a:	2300      	movs	r3, #0
 800e82c:	60fb      	str	r3, [r7, #12]
 800e82e:	e02e      	b.n	800e88e <JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 800e830:	2300      	movs	r3, #0
 800e832:	60bb      	str	r3, [r7, #8]
 800e834:	e025      	b.n	800e882 <JPEG_Init_MCU_LUT+0x1ca>
    {      
      offset = i*8 + j;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	00db      	lsls	r3, r3, #3
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	4413      	add	r3, r2
 800e83e:	607b      	str	r3, [r7, #4]
      
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	b299      	uxth	r1, r3
 800e844:	4a1e      	ldr	r2, [pc, #120]	@ (800e8c0 <JPEG_Init_MCU_LUT+0x208>)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	3340      	adds	r3, #64	@ 0x40
 800e852:	b299      	uxth	r1, r3
 800e854:	4a1b      	ldr	r2, [pc, #108]	@ (800e8c4 <JPEG_Init_MCU_LUT+0x20c>)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3380      	adds	r3, #128	@ 0x80
 800e862:	b299      	uxth	r1, r3
 800e864:	4a18      	ldr	r2, [pc, #96]	@ (800e8c8 <JPEG_Init_MCU_LUT+0x210>)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	33c0      	adds	r3, #192	@ 0xc0
 800e872:	b299      	uxth	r1, r3
 800e874:	4a15      	ldr	r2, [pc, #84]	@ (800e8cc <JPEG_Init_MCU_LUT+0x214>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	3301      	adds	r3, #1
 800e880:	60bb      	str	r3, [r7, #8]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	2b07      	cmp	r3, #7
 800e886:	d9d6      	bls.n	800e836 <JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3301      	adds	r3, #1
 800e88c:	60fb      	str	r3, [r7, #12]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b07      	cmp	r3, #7
 800e892:	d9cd      	bls.n	800e830 <JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	3714      	adds	r7, #20
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	240047b0 	.word	0x240047b0
 800e8a8:	24004a30 	.word	0x24004a30
 800e8ac:	24004c30 	.word	0x24004c30
 800e8b0:	24004eb0 	.word	0x24004eb0
 800e8b4:	240050b0 	.word	0x240050b0
 800e8b8:	24005330 	.word	0x24005330
 800e8bc:	24005530 	.word	0x24005530
 800e8c0:	240049b0 	.word	0x240049b0
 800e8c4:	24004e30 	.word	0x24004e30
 800e8c8:	240052b0 	.word	0x240052b0
 800e8cc:	24005730 	.word	0x24005730

0800e8d0 <memset>:
 800e8d0:	4402      	add	r2, r0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d100      	bne.n	800e8da <memset+0xa>
 800e8d8:	4770      	bx	lr
 800e8da:	f803 1b01 	strb.w	r1, [r3], #1
 800e8de:	e7f9      	b.n	800e8d4 <memset+0x4>

0800e8e0 <__libc_init_array>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	4d0d      	ldr	r5, [pc, #52]	@ (800e918 <__libc_init_array+0x38>)
 800e8e4:	4c0d      	ldr	r4, [pc, #52]	@ (800e91c <__libc_init_array+0x3c>)
 800e8e6:	1b64      	subs	r4, r4, r5
 800e8e8:	10a4      	asrs	r4, r4, #2
 800e8ea:	2600      	movs	r6, #0
 800e8ec:	42a6      	cmp	r6, r4
 800e8ee:	d109      	bne.n	800e904 <__libc_init_array+0x24>
 800e8f0:	4d0b      	ldr	r5, [pc, #44]	@ (800e920 <__libc_init_array+0x40>)
 800e8f2:	4c0c      	ldr	r4, [pc, #48]	@ (800e924 <__libc_init_array+0x44>)
 800e8f4:	f000 f818 	bl	800e928 <_init>
 800e8f8:	1b64      	subs	r4, r4, r5
 800e8fa:	10a4      	asrs	r4, r4, #2
 800e8fc:	2600      	movs	r6, #0
 800e8fe:	42a6      	cmp	r6, r4
 800e900:	d105      	bne.n	800e90e <__libc_init_array+0x2e>
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	f855 3b04 	ldr.w	r3, [r5], #4
 800e908:	4798      	blx	r3
 800e90a:	3601      	adds	r6, #1
 800e90c:	e7ee      	b.n	800e8ec <__libc_init_array+0xc>
 800e90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e912:	4798      	blx	r3
 800e914:	3601      	adds	r6, #1
 800e916:	e7f2      	b.n	800e8fe <__libc_init_array+0x1e>
 800e918:	0800ecc8 	.word	0x0800ecc8
 800e91c:	0800ecc8 	.word	0x0800ecc8
 800e920:	0800ecc8 	.word	0x0800ecc8
 800e924:	0800eccc 	.word	0x0800eccc

0800e928 <_init>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	bf00      	nop
 800e92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e92e:	bc08      	pop	{r3}
 800e930:	469e      	mov	lr, r3
 800e932:	4770      	bx	lr

0800e934 <_fini>:
 800e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e936:	bf00      	nop
 800e938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e93a:	bc08      	pop	{r3}
 800e93c:	469e      	mov	lr, r3
 800e93e:	4770      	bx	lr
