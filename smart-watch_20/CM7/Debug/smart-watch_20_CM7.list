
smart-watch_20_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e778  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800ea10  0800ea10  0000fa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f090  0800f090  00011018  2**0
                  CONTENTS
  4 .ARM          00000008  0800f090  0800f090  00010090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f098  0800f098  00011018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f098  0800f098  00010098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f09c  0800f09c  0001009c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  24000000  0800f0a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003277c  24000018  0800f0b8  00011018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24032794  0800f0b8  00011794  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e43  00000000  00000000  00011046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004356  00000000  00000000  00032e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  000371e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001323  00000000  00000000  00038ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043e21  00000000  00000000  00039ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026aca  00000000  00000000  0007dbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a5887  00000000  00000000  000a46c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00249f4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a4  00000000  00000000  00249f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00250734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e9f8 	.word	0x0800e9f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800e9f8 	.word	0x0800e9f8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <GC9A01_set_reset+0x30>)
 800070a:	f001 fefb 	bl	8002504 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800070e:	e004      	b.n	800071a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <GC9A01_set_reset+0x30>)
 8000716:	f001 fef5 	bl	8002504 <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58022400 	.word	0x58022400

08000728 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	@ 0x40
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800073e:	f001 fee1 	bl	8002504 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000742:	e004      	b.n	800074e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2140      	movs	r1, #64	@ 0x40
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <GC9A01_set_data_command+0x30>)
 800074a:	f001 fedb 	bl	8002504 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58022400 	.word	0x58022400

0800075c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2102      	movs	r1, #2
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <GC9A01_set_chip_select+0x30>)
 8000772:	f001 fec7 	bl	8002504 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000776:	e004      	b.n	8000782 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <GC9A01_set_chip_select+0x30>)
 800077e:	f001 fec1 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58022800 	.word	0x58022800

08000790 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffc4 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ffdb 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fa92 	bl	8000cd4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffd3 	bl	800075c <GC9A01_set_chip_select>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ffad 	bl	8000728 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ffc4 	bl	800075c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 fa7a 	bl	8000cd4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ffbb 	bl	800075c <GC9A01_set_chip_select>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffde 	bl	80007be <GC9A01_write_data>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000814:	202c      	movs	r0, #44	@ 0x2c
 8000816:	f7ff ffbb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800081a:	6839      	ldr	r1, [r7, #0]
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffce 	bl	80007be <GC9A01_write_data>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000834:	203c      	movs	r0, #60	@ 0x3c
 8000836:	f7ff ffab 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffbe 	bl	80007be <GC9A01_write_data>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <GC9A01_init>:

void GC9A01_init(void) {
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff84 	bl	800075c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000854:	2005      	movs	r0, #5
 8000856:	f001 fa3b 	bl	8001cd0 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff4a 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 fa35 	bl	8001cd0 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ff44 	bl	80006f4 <GC9A01_set_reset>
    HAL_Delay(120);
 800086c:	2078      	movs	r0, #120	@ 0x78
 800086e:	f001 fa2f 	bl	8001cd0 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000872:	20ef      	movs	r0, #239	@ 0xef
 8000874:	f7ff ff8c 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000878:	20eb      	movs	r0, #235	@ 0xeb
 800087a:	f7ff ff89 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800087e:	2014      	movs	r0, #20
 8000880:	f7ff ffb5 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000884:	20fe      	movs	r0, #254	@ 0xfe
 8000886:	f7ff ff83 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800088a:	20ef      	movs	r0, #239	@ 0xef
 800088c:	f7ff ff80 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000890:	20eb      	movs	r0, #235	@ 0xeb
 8000892:	f7ff ff7d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000896:	2014      	movs	r0, #20
 8000898:	f7ff ffa9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800089c:	2084      	movs	r0, #132	@ 0x84
 800089e:	f7ff ff77 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80008a2:	2040      	movs	r0, #64	@ 0x40
 80008a4:	f7ff ffa3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80008a8:	2085      	movs	r0, #133	@ 0x85
 80008aa:	f7ff ff71 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008ae:	20ff      	movs	r0, #255	@ 0xff
 80008b0:	f7ff ff9d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80008b4:	2086      	movs	r0, #134	@ 0x86
 80008b6:	f7ff ff6b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008ba:	20ff      	movs	r0, #255	@ 0xff
 80008bc:	f7ff ff97 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80008c0:	2087      	movs	r0, #135	@ 0x87
 80008c2:	f7ff ff65 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80008c6:	20ff      	movs	r0, #255	@ 0xff
 80008c8:	f7ff ff91 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80008cc:	2088      	movs	r0, #136	@ 0x88
 80008ce:	f7ff ff5f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f7ff ff8b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80008d8:	2089      	movs	r0, #137	@ 0x89
 80008da:	f7ff ff59 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80008de:	2021      	movs	r0, #33	@ 0x21
 80008e0:	f7ff ff85 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80008e4:	208a      	movs	r0, #138	@ 0x8a
 80008e6:	f7ff ff53 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff7f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 80008f0:	208b      	movs	r0, #139	@ 0x8b
 80008f2:	f7ff ff4d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 80008f6:	2080      	movs	r0, #128	@ 0x80
 80008f8:	f7ff ff79 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 80008fc:	208c      	movs	r0, #140	@ 0x8c
 80008fe:	f7ff ff47 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff73 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000908:	208d      	movs	r0, #141	@ 0x8d
 800090a:	f7ff ff41 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff6d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000914:	208e      	movs	r0, #142	@ 0x8e
 8000916:	f7ff ff3b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800091a:	20ff      	movs	r0, #255	@ 0xff
 800091c:	f7ff ff67 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000920:	208f      	movs	r0, #143	@ 0x8f
 8000922:	f7ff ff35 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000926:	20ff      	movs	r0, #255	@ 0xff
 8000928:	f7ff ff61 	bl	80007ee <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800092c:	20b6      	movs	r0, #182	@ 0xb6
 800092e:	f7ff ff2f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff5b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff58 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800093e:	2036      	movs	r0, #54	@ 0x36
 8000940:	f7ff ff26 	bl	8000790 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000944:	2048      	movs	r0, #72	@ 0x48
 8000946:	f7ff ff52 	bl	80007ee <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800094a:	203a      	movs	r0, #58	@ 0x3a
 800094c:	f7ff ff20 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000950:	2005      	movs	r0, #5
 8000952:	f7ff ff4c 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000956:	2090      	movs	r0, #144	@ 0x90
 8000958:	f7ff ff1a 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800095c:	2008      	movs	r0, #8
 800095e:	f7ff ff46 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000962:	2008      	movs	r0, #8
 8000964:	f7ff ff43 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000968:	2008      	movs	r0, #8
 800096a:	f7ff ff40 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800096e:	2008      	movs	r0, #8
 8000970:	f7ff ff3d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000974:	20bd      	movs	r0, #189	@ 0xbd
 8000976:	f7ff ff0b 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff ff37 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000980:	20bc      	movs	r0, #188	@ 0xbc
 8000982:	f7ff ff05 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff31 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800098c:	20ff      	movs	r0, #255	@ 0xff
 800098e:	f7ff feff 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000992:	2060      	movs	r0, #96	@ 0x60
 8000994:	f7ff ff2b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff28 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800099e:	2004      	movs	r0, #4
 80009a0:	f7ff ff25 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80009a4:	20c3      	movs	r0, #195	@ 0xc3
 80009a6:	f7ff fef3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80009aa:	2013      	movs	r0, #19
 80009ac:	f7ff ff1f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80009b0:	20c4      	movs	r0, #196	@ 0xc4
 80009b2:	f7ff feed 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80009b6:	2013      	movs	r0, #19
 80009b8:	f7ff ff19 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80009bc:	20c9      	movs	r0, #201	@ 0xc9
 80009be:	f7ff fee7 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80009c2:	2022      	movs	r0, #34	@ 0x22
 80009c4:	f7ff ff13 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80009c8:	20be      	movs	r0, #190	@ 0xbe
 80009ca:	f7ff fee1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80009ce:	2011      	movs	r0, #17
 80009d0:	f7ff ff0d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80009d4:	20e1      	movs	r0, #225	@ 0xe1
 80009d6:	f7ff fedb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80009da:	2010      	movs	r0, #16
 80009dc:	f7ff ff07 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80009e0:	200e      	movs	r0, #14
 80009e2:	f7ff ff04 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80009e6:	20df      	movs	r0, #223	@ 0xdf
 80009e8:	f7ff fed2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80009ec:	2021      	movs	r0, #33	@ 0x21
 80009ee:	f7ff fefe 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 80009f2:	200c      	movs	r0, #12
 80009f4:	f7ff fefb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fef8 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 80009fe:	20f0      	movs	r0, #240	@ 0xf0
 8000a00:	f7ff fec6 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a04:	2045      	movs	r0, #69	@ 0x45
 8000a06:	f7ff fef2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a0a:	2009      	movs	r0, #9
 8000a0c:	f7ff feef 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a10:	2008      	movs	r0, #8
 8000a12:	f7ff feec 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a16:	2008      	movs	r0, #8
 8000a18:	f7ff fee9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a1c:	2026      	movs	r0, #38	@ 0x26
 8000a1e:	f7ff fee6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a22:	202a      	movs	r0, #42	@ 0x2a
 8000a24:	f7ff fee3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000a28:	20f1      	movs	r0, #241	@ 0xf1
 8000a2a:	f7ff feb1 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a2e:	2043      	movs	r0, #67	@ 0x43
 8000a30:	f7ff fedd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a34:	2070      	movs	r0, #112	@ 0x70
 8000a36:	f7ff feda 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a3a:	2072      	movs	r0, #114	@ 0x72
 8000a3c:	f7ff fed7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a40:	2036      	movs	r0, #54	@ 0x36
 8000a42:	f7ff fed4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a46:	2037      	movs	r0, #55	@ 0x37
 8000a48:	f7ff fed1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000a4c:	206f      	movs	r0, #111	@ 0x6f
 8000a4e:	f7ff fece 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000a52:	20f2      	movs	r0, #242	@ 0xf2
 8000a54:	f7ff fe9c 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000a58:	2045      	movs	r0, #69	@ 0x45
 8000a5a:	f7ff fec8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fec5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a64:	2008      	movs	r0, #8
 8000a66:	f7ff fec2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000a6a:	2008      	movs	r0, #8
 8000a6c:	f7ff febf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000a70:	2026      	movs	r0, #38	@ 0x26
 8000a72:	f7ff febc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000a76:	202a      	movs	r0, #42	@ 0x2a
 8000a78:	f7ff feb9 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000a7c:	20f3      	movs	r0, #243	@ 0xf3
 8000a7e:	f7ff fe87 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000a82:	2043      	movs	r0, #67	@ 0x43
 8000a84:	f7ff feb3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000a88:	2070      	movs	r0, #112	@ 0x70
 8000a8a:	f7ff feb0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000a8e:	2072      	movs	r0, #114	@ 0x72
 8000a90:	f7ff fead 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000a94:	2036      	movs	r0, #54	@ 0x36
 8000a96:	f7ff feaa 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000a9a:	2037      	movs	r0, #55	@ 0x37
 8000a9c:	f7ff fea7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000aa0:	206f      	movs	r0, #111	@ 0x6f
 8000aa2:	f7ff fea4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000aa6:	20ed      	movs	r0, #237	@ 0xed
 8000aa8:	f7ff fe72 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000aac:	201b      	movs	r0, #27
 8000aae:	f7ff fe9e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f7ff fe9b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000ab8:	20ae      	movs	r0, #174	@ 0xae
 8000aba:	f7ff fe69 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000abe:	2077      	movs	r0, #119	@ 0x77
 8000ac0:	f7ff fe95 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000ac4:	20cd      	movs	r0, #205	@ 0xcd
 8000ac6:	f7ff fe63 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000aca:	2063      	movs	r0, #99	@ 0x63
 8000acc:	f7ff fe8f 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000ad0:	2070      	movs	r0, #112	@ 0x70
 8000ad2:	f7ff fe5d 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff fe89 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000adc:	2007      	movs	r0, #7
 8000ade:	f7ff fe86 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	f7ff fe83 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000ae8:	200e      	movs	r0, #14
 8000aea:	f7ff fe80 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff fe7d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000af4:	2009      	movs	r0, #9
 8000af6:	f7ff fe7a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f7ff fe77 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000b00:	2008      	movs	r0, #8
 8000b02:	f7ff fe74 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f7ff fe71 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000b0c:	20e8      	movs	r0, #232	@ 0xe8
 8000b0e:	f7ff fe3f 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000b12:	2034      	movs	r0, #52	@ 0x34
 8000b14:	f7ff fe6b 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000b18:	2062      	movs	r0, #98	@ 0x62
 8000b1a:	f7ff fe39 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b1e:	2018      	movs	r0, #24
 8000b20:	f7ff fe65 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f7ff fe62 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b2a:	2071      	movs	r0, #113	@ 0x71
 8000b2c:	f7ff fe5f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000b30:	20ed      	movs	r0, #237	@ 0xed
 8000b32:	f7ff fe5c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b36:	2070      	movs	r0, #112	@ 0x70
 8000b38:	f7ff fe59 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b3c:	2070      	movs	r0, #112	@ 0x70
 8000b3e:	f7ff fe56 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b42:	2018      	movs	r0, #24
 8000b44:	f7ff fe53 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000b48:	200f      	movs	r0, #15
 8000b4a:	f7ff fe50 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b4e:	2071      	movs	r0, #113	@ 0x71
 8000b50:	f7ff fe4d 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000b54:	20ef      	movs	r0, #239	@ 0xef
 8000b56:	f7ff fe4a 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b5a:	2070      	movs	r0, #112	@ 0x70
 8000b5c:	f7ff fe47 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b60:	2070      	movs	r0, #112	@ 0x70
 8000b62:	f7ff fe44 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000b66:	2063      	movs	r0, #99	@ 0x63
 8000b68:	f7ff fe12 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000b6c:	2018      	movs	r0, #24
 8000b6e:	f7ff fe3e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000b72:	2011      	movs	r0, #17
 8000b74:	f7ff fe3b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b78:	2071      	movs	r0, #113	@ 0x71
 8000b7a:	f7ff fe38 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000b7e:	20f1      	movs	r0, #241	@ 0xf1
 8000b80:	f7ff fe35 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b84:	2070      	movs	r0, #112	@ 0x70
 8000b86:	f7ff fe32 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000b8a:	2070      	movs	r0, #112	@ 0x70
 8000b8c:	f7ff fe2f 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000b90:	2018      	movs	r0, #24
 8000b92:	f7ff fe2c 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000b96:	2013      	movs	r0, #19
 8000b98:	f7ff fe29 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000b9c:	2071      	movs	r0, #113	@ 0x71
 8000b9e:	f7ff fe26 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000ba2:	20f3      	movs	r0, #243	@ 0xf3
 8000ba4:	f7ff fe23 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000ba8:	2070      	movs	r0, #112	@ 0x70
 8000baa:	f7ff fe20 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000bae:	2070      	movs	r0, #112	@ 0x70
 8000bb0:	f7ff fe1d 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f7ff fdeb 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000bba:	2028      	movs	r0, #40	@ 0x28
 8000bbc:	f7ff fe17 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000bc0:	2029      	movs	r0, #41	@ 0x29
 8000bc2:	f7ff fe14 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000bc6:	20f1      	movs	r0, #241	@ 0xf1
 8000bc8:	f7ff fe11 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fe0e 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000bd2:	20f1      	movs	r0, #241	@ 0xf1
 8000bd4:	f7ff fe0b 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fe08 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f7ff fe05 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000be4:	2066      	movs	r0, #102	@ 0x66
 8000be6:	f7ff fdd3 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000bea:	203c      	movs	r0, #60	@ 0x3c
 8000bec:	f7ff fdff 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fdfc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000bf6:	20cd      	movs	r0, #205	@ 0xcd
 8000bf8:	f7ff fdf9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000bfc:	2067      	movs	r0, #103	@ 0x67
 8000bfe:	f7ff fdf6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000c02:	2045      	movs	r0, #69	@ 0x45
 8000c04:	f7ff fdf3 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000c08:	2045      	movs	r0, #69	@ 0x45
 8000c0a:	f7ff fdf0 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f7ff fded 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fdea 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fde7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fde4 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000c26:	2067      	movs	r0, #103	@ 0x67
 8000c28:	f7ff fdb2 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdde 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000c32:	203c      	movs	r0, #60	@ 0x3c
 8000c34:	f7ff fddb 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fdd8 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fdd5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fdd2 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdcf 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000c50:	2054      	movs	r0, #84	@ 0x54
 8000c52:	f7ff fdcc 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff fdc9 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000c5c:	2032      	movs	r0, #50	@ 0x32
 8000c5e:	f7ff fdc6 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000c62:	2098      	movs	r0, #152	@ 0x98
 8000c64:	f7ff fdc3 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000c68:	2074      	movs	r0, #116	@ 0x74
 8000c6a:	f7ff fd91 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f7ff fdbd 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000c74:	2085      	movs	r0, #133	@ 0x85
 8000c76:	f7ff fdba 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000c7a:	2080      	movs	r0, #128	@ 0x80
 8000c7c:	f7ff fdb7 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fdb4 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fdb1 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000c8c:	204e      	movs	r0, #78	@ 0x4e
 8000c8e:	f7ff fdae 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fdab 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000c98:	2098      	movs	r0, #152	@ 0x98
 8000c9a:	f7ff fd79 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000c9e:	203e      	movs	r0, #62	@ 0x3e
 8000ca0:	f7ff fda5 	bl	80007ee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f7ff fda2 	bl	80007ee <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000caa:	2035      	movs	r0, #53	@ 0x35
 8000cac:	f7ff fd70 	bl	8000790 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000cb0:	2021      	movs	r0, #33	@ 0x21
 8000cb2:	f7ff fd6d 	bl	8000790 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000cb6:	2011      	movs	r0, #17
 8000cb8:	f7ff fd6a 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(120);
 8000cbc:	2078      	movs	r0, #120	@ 0x78
 8000cbe:	f001 f807 	bl	8001cd0 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000cc2:	2029      	movs	r0, #41	@ 0x29
 8000cc4:	f7ff fd64 	bl	8000790 <GC9A01_write_command>
    HAL_Delay(20);
 8000cc8:	2014      	movs	r0, #20
 8000cca:	f001 f801 	bl	8001cd0 <HAL_Delay>
    
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <GC9A01_spi_tx+0x30>)
 8000cea:	f008 fafb 	bl	80092e4 <HAL_SPI_Transmit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <GC9A01_spi_tx+0x34>)
 8000cf4:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <GC9A01_spi_tx+0x34>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
		return;

}
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	240315f0 	.word	0x240315f0
 8000d08:	24000034 	.word	0x24000034

08000d0c <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, FIL *file, uint32_t DestAddress)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]

  MCU_TotalNb = 0;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <JPEG_DecodePolling+0x7c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
  MCU_BlockIndex = 0;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <JPEG_DecodePolling+0x80>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
  Inputfile_Offset = 0;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <JPEG_DecodePolling+0x84>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
  Jpeg_Decoding_End = 0;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <JPEG_DecodePolling+0x88>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

  pFile = file;
 8000d30:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <JPEG_DecodePolling+0x8c>)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8000d36:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <JPEG_DecodePolling+0x90>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6013      	str	r3, [r2, #0]

  /* Read from JPG file and fill the input buffer */
  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) != FR_OK)
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <JPEG_DecodePolling+0x8c>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <JPEG_DecodePolling+0x94>)
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <JPEG_DecodePolling+0x98>)
 8000d46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d4a:	f00c fd15 	bl	800d778 <f_read>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <JPEG_DecodePolling+0x4c>
  {
    while(1);
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <JPEG_DecodePolling+0x48>
  }

  /* Update the file Offset*/
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <JPEG_DecodePolling+0x94>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <JPEG_DecodePolling+0x84>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* Start JPEG decoding with polling (Blocking) method */
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,MCU_Data_OutBuffer ,CHUNK_SIZE_OUT,HAL_MAX_DELAY);
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <JPEG_DecodePolling+0x94>)
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <JPEG_DecodePolling+0x94>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <JPEG_DecodePolling+0x9c>)
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f001 fd23 	bl	80027c2 <HAL_JPEG_Decode>

  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24031040 	.word	0x24031040
 8000d8c:	24031044 	.word	0x24031044
 8000d90:	24031048 	.word	0x24031048
 8000d94:	2403104c 	.word	0x2403104c
 8000d98:	2400003c 	.word	0x2400003c
 8000d9c:	24031050 	.word	0x24031050
 8000da0:	24000008 	.word	0x24000008
 8000da4:	2400000c 	.word	0x2400000c
 8000da8:	24000040 	.word	0x24000040

08000dac <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]

	pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d11b      	bne.n	8000dfc <HAL_JPEG_InfoReadyCallback+0x50>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d007      	beq.n	8000de0 <HAL_JPEG_InfoReadyCallback+0x34>
    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	f023 030f 	bic.w	r3, r3, #15
 8000dd8:	f103 0210 	add.w	r2, r3, #16
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d007      	beq.n	8000dfc <HAL_JPEG_InfoReadyCallback+0x50>
    pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f023 030f 	bic.w	r3, r3, #15
 8000df4:	f103 0210 	add.w	r2, r3, #16
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	609a      	str	r2, [r3, #8]
  }

  if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d11b      	bne.n	8000e3c <HAL_JPEG_InfoReadyCallback+0x90>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d007      	beq.n	8000e20 <HAL_JPEG_InfoReadyCallback+0x74>
    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f023 030f 	bic.w	r3, r3, #15
 8000e18:	f103 0210 	add.w	r2, r3, #16
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 8) != 0)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <HAL_JPEG_InfoReadyCallback+0x90>
    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f023 0307 	bic.w	r3, r3, #7
 8000e34:	f103 0208 	add.w	r2, r3, #8
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	609a      	str	r2, [r3, #8]
  }

  if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d11b      	bne.n	8000e7c <HAL_JPEG_InfoReadyCallback+0xd0>
  {
    if((pInfo->ImageWidth % 8) != 0)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_JPEG_InfoReadyCallback+0xb4>
    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f023 0307 	bic.w	r3, r3, #7
 8000e58:	f103 0208 	add.w	r2, r3, #8
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 8) != 0)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <HAL_JPEG_InfoReadyCallback+0xd0>
    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f023 0307 	bic.w	r3, r3, #7
 8000e74:	f103 0208 	add.w	r2, r3, #8
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	609a      	str	r2, [r3, #8]
  }

  if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK)
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_JPEG_InfoReadyCallback+0xec>)
 8000e7e:	4907      	ldr	r1, [pc, #28]	@ (8000e9c <HAL_JPEG_InfoReadyCallback+0xf0>)
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f00d fc83 	bl	800e78c <JPEG_GetDecodeColorConvertFunc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_JPEG_InfoReadyCallback+0xe4>
  {
    while(1);
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HAL_JPEG_InfoReadyCallback+0xe0>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24031040 	.word	0x24031040
 8000e9c:	24000038 	.word	0x24000038

08000ea0 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  if(NbDecodedData != JPEG_InBuffer.DataBufferSize)
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <HAL_JPEG_GetDataCallback+0x78>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d010      	beq.n	8000ed6 <HAL_JPEG_GetDataCallback+0x36>
  {
    Inputfile_Offset = Inputfile_Offset - JPEG_InBuffer.DataBufferSize + NbDecodedData;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_JPEG_GetDataCallback+0x78>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000ec4:	6013      	str	r3, [r2, #0]
    f_lseek(pFile,Inputfile_Offset);
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_JPEG_GetDataCallback+0x80>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00c fd90 	bl	800d9f6 <f_lseek>
  }

  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) == FR_OK)
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_JPEG_GetDataCallback+0x80>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_JPEG_GetDataCallback+0x78>)
 8000edc:	6819      	ldr	r1, [r3, #0]
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_JPEG_GetDataCallback+0x84>)
 8000ee0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ee4:	f00c fc48 	bl	800d778 <f_read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10f      	bne.n	8000f0e <HAL_JPEG_GetDataCallback+0x6e>
  {
    Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_JPEG_GetDataCallback+0x78>)
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <HAL_JPEG_GetDataCallback+0x7c>)
 8000efa:	6013      	str	r3, [r2, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_JPEG_GetDataCallback+0x78>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <HAL_JPEG_GetDataCallback+0x78>)
 8000f02:	6852      	ldr	r2, [r2, #4]
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f001 fd3b 	bl	8002982 <HAL_JPEG_ConfigInputBuffer>
  }
  else
  {
    while(1);
  }
}
 8000f0c:	e000      	b.n	8000f10 <HAL_JPEG_GetDataCallback+0x70>
    while(1);
 8000f0e:	e7fe      	b.n	8000f0e <HAL_JPEG_GetDataCallback+0x6e>
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	24000008 	.word	0x24000008
 8000f1c:	24031048 	.word	0x24031048
 8000f20:	2400003c 	.word	0x2400003c
 8000f24:	2400000c 	.word	0x2400000c

08000f28 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t ConvertedDataCount;

  MCU_BlockIndex += pConvert_Function(pDataOut, (uint8_t *)FrameBufferAddress, MCU_BlockIndex, OutDataLength, &ConvertedDataCount);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_JPEG_DataReadyCallback+0x48>)
 8000f36:	681c      	ldr	r4, [r3, #0]
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_JPEG_DataReadyCallback+0x4c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <HAL_JPEG_DataReadyCallback+0x50>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	47a0      	blx	r4
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_JPEG_DataReadyCallback+0x50>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_JPEG_DataReadyCallback+0x50>)
 8000f58:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, MCU_Data_OutBuffer, CHUNK_SIZE_OUT);
 8000f5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f5e:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <HAL_JPEG_DataReadyCallback+0x54>)
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f001 fd20 	bl	80029a6 <HAL_JPEG_ConfigOutputBuffer>
}
 8000f66:	bf00      	nop
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	24000038 	.word	0x24000038
 8000f74:	24031050 	.word	0x24031050
 8000f78:	24031044 	.word	0x24031044
 8000f7c:	24000040 	.word	0x24000040

08000f80 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  Jpeg_Decoding_End = 1;
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2403104c 	.word	0x2403104c

08000fa0 <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

	GC9A01_init();
 8000fa4:	f7ff fc51 	bl	800084a <GC9A01_init>
	sd_init();
 8000fa8:	f000 f8a8 	bl	80010fc <sd_init>

	//JPEG_InitColorTables();
	//bmp_init(bmp, &file, fName, lcd_draw);

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <lcd_process>:


void lcd_process(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	jpeg_demo();
 8000fb4:	f000 f842 	bl	800103c <jpeg_demo>

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4623      	mov	r3, r4
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e022      	b.n	8001026 <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	e016      	b.n	8001014 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d108      	bne.n	8001000 <lcd_draw+0x44>
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d104      	bne.n	8001000 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	6a38      	ldr	r0, [r7, #32]
 8000ffa:	f7ff fc06 	bl	800080a <GC9A01_write>
 8000ffe:	e003      	b.n	8001008 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8001000:	2102      	movs	r1, #2
 8001002:	6a38      	ldr	r0, [r7, #32]
 8001004:	f7ff fc11 	bl	800082a <GC9A01_write_continue>

			}

			data += 2;
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	3302      	adds	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3301      	adds	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	883a      	ldrh	r2, [r7, #0]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbe2      	blt.n	8000fe6 <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4413      	add	r3, r2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbd6      	blt.n	8000fe0 <lcd_draw+0x24>

		}

	}

}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}

0800103c <jpeg_demo>:


void jpeg_demo(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	f5ad 3d61 	sub.w	sp, sp, #230400	@ 0x38400
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af02      	add	r7, sp, #8

    JPEG_ConfTypeDef JPEG_Info;

    if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 8001046:	2201      	movs	r2, #1
 8001048:	4922      	ldr	r1, [pc, #136]	@ (80010d4 <jpeg_demo+0x98>)
 800104a:	4823      	ldr	r0, [pc, #140]	@ (80010d8 <jpeg_demo+0x9c>)
 800104c:	f00c f9da 	bl	800d404 <f_open>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <jpeg_demo+0x1e>
    	while(1);
 8001056:	bf00      	nop
 8001058:	e7fd      	b.n	8001056 <jpeg_demo+0x1a>

    uint8_t JPEG_OutputBuffer[240*240*2]; 		// RAW buffer
    uint8_t DECODED_OutputBuffer[240*240*2];	// Decoded buffer

    // Decodifica JPEG
    JPEG_DecodePolling(&hjpeg, &file, (uint32_t)JPEG_OutputBuffer);
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <jpeg_demo+0xa0>)
 800105c:	f503 3361 	add.w	r3, r3, #230400	@ 0x38400
 8001060:	f103 0320 	add.w	r3, r3, #32
 8001064:	443b      	add	r3, r7
 8001066:	461a      	mov	r2, r3
 8001068:	491b      	ldr	r1, [pc, #108]	@ (80010d8 <jpeg_demo+0x9c>)
 800106a:	481d      	ldr	r0, [pc, #116]	@ (80010e0 <jpeg_demo+0xa4>)
 800106c:	f7ff fe4e 	bl	8000d0c <JPEG_DecodePolling>

    while(!Jpeg_Decoding_End);
 8001070:	bf00      	nop
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <jpeg_demo+0xa8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0fb      	beq.n	8001072 <jpeg_demo+0x36>

    // Ottieni informazioni sull'immagine JPEG
    HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 800107a:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <jpeg_demo+0xac>)
 800107c:	443b      	add	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4817      	ldr	r0, [pc, #92]	@ (80010e0 <jpeg_demo+0xa4>)
 8001082:	f001 fb09 	bl	8002698 <HAL_JPEG_GetInfo>

    uint32_t width = JPEG_Info.ImageWidth;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <jpeg_demo+0xb0>)
 8001088:	443b      	add	r3, r7
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a18      	ldr	r2, [pc, #96]	@ (80010f0 <jpeg_demo+0xb4>)
 800108e:	443a      	add	r2, r7
 8001090:	6013      	str	r3, [r2, #0]
    uint32_t height = JPEG_Info.ImageHeight;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <jpeg_demo+0xb8>)
 8001094:	443b      	add	r3, r7
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <jpeg_demo+0xbc>)
 800109a:	443a      	add	r2, r7
 800109c:	6013      	str	r3, [r2, #0]

    //DMA2D_CopyBuffer((uint32_t *)JPEG_OutputBuffer, (uint32_t *)DECODED_OutputBuffer, 0, 0, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, 0);

    lcd_draw(0, 0, width, height, JPEG_OutputBuffer);
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <jpeg_demo+0xb4>)
 80010a0:	443b      	add	r3, r7
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <jpeg_demo+0xbc>)
 80010a8:	443b      	add	r3, r7
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <jpeg_demo+0xa0>)
 80010b0:	f503 3361 	add.w	r3, r3, #230400	@ 0x38400
 80010b4:	f103 0320 	add.w	r3, r3, #32
 80010b8:	443b      	add	r3, r7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	460b      	mov	r3, r1
 80010be:	2100      	movs	r1, #0
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ff7b 	bl	8000fbc <lcd_draw>

}
 80010c6:	bf00      	nop
 80010c8:	f507 3761 	add.w	r7, r7, #230400	@ 0x38400
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0800ea10 	.word	0x0800ea10
 80010d8:	24031284 	.word	0x24031284
 80010dc:	fffe3de4 	.word	0xfffe3de4
 80010e0:	2403151c 	.word	0x2403151c
 80010e4:	2403104c 	.word	0x2403104c
 80010e8:	00038404 	.word	0x00038404
 80010ec:	00038410 	.word	0x00038410
 80010f0:	0003841c 	.word	0x0003841c
 80010f4:	0003840c 	.word	0x0003840c
 80010f8:	00038418 	.word	0x00038418

080010fc <sd_init>:


// SD

static void sd_init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8001100:	2201      	movs	r2, #1
 8001102:	4905      	ldr	r1, [pc, #20]	@ (8001118 <sd_init+0x1c>)
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <sd_init+0x20>)
 8001106:	f00c f937 	bl	800d378 <f_mount>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <sd_init+0x18>
    	sd_error_handler();
 8001110:	f000 f806 	bl	8001120 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800ea1c 	.word	0x0800ea1c
 800111c:	24031054 	.word	0x24031054

08001120 <sd_error_handler>:


static void sd_error_handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

	while(1);
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <sd_error_handler+0x4>

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800112e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001132:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001134:	bf00      	nop
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <main+0xb8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d004      	beq.n	800114c <main+0x24>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dcf4      	bgt.n	8001136 <main+0xe>
  if ( timeout < 0 )
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da01      	bge.n	8001156 <main+0x2e>
  {
  Error_Handler();
 8001152:	f000 fad3 	bl	80016fc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f000 fd29 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f843 	bl	80011e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800115e:	f000 f8c5 	bl	80012ec <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <main+0xb8>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	4a1d      	ldr	r2, [pc, #116]	@ (80011e0 <main+0xb8>)
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <main+0xb8>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001180:	2000      	movs	r0, #0
 8001182:	f001 f9d9 	bl	8002538 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001186:	2100      	movs	r1, #0
 8001188:	2000      	movs	r0, #0
 800118a:	f001 f9ef 	bl	800256c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800118e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001192:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001194:	bf00      	nop
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <main+0xb8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <main+0x84>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dcf4      	bgt.n	8001196 <main+0x6e>
if ( timeout < 0 )
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da01      	bge.n	80011b6 <main+0x8e>
{
Error_Handler();
 80011b2:	f000 faa3 	bl	80016fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f000 f9db 	bl	8001570 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80011ba:	f000 f8c7 	bl	800134c <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 80011be:	f000 f913 	bl	80013e8 <MX_SDMMC1_SD_Init>
  MX_SPI5_Init();
 80011c2:	f000 f935 	bl	8001430 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80011c6:	f000 f987 	bl	80014d8 <MX_USART1_UART_Init>
  MX_JPEG_Init();
 80011ca:	f000 f8f9 	bl	80013c0 <MX_JPEG_Init>
  MX_FATFS_Init();
 80011ce:	f00a fa07 	bl	800b5e0 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 80011d2:	f00a fc55 	bl	800ba80 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80011d6:	f7ff fee3 	bl	8000fa0 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 80011da:	f7ff fee9 	bl	8000fb0 <lcd_process>
 80011de:	e7fc      	b.n	80011da <main+0xb2>
 80011e0:	58024400 	.word	0x58024400

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09c      	sub	sp, #112	@ 0x70
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	224c      	movs	r2, #76	@ 0x4c
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00d fbd4 	bl	800e9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2220      	movs	r2, #32
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00d fbce 	bl	800e9a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001204:	2004      	movs	r0, #4
 8001206:	f002 fcfd 	bl	8003c04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b35      	ldr	r3, [pc, #212]	@ (80012e4 <SystemClock_Config+0x100>)
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	4a34      	ldr	r2, [pc, #208]	@ (80012e4 <SystemClock_Config+0x100>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800121a:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <SystemClock_Config+0x100>)
 800121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <SystemClock_Config+0x104>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a2f      	ldr	r2, [pc, #188]	@ (80012e8 <SystemClock_Config+0x104>)
 800122a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <SystemClock_Config+0x104>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800123c:	bf00      	nop
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <SystemClock_Config+0x104>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800124a:	d1f8      	bne.n	800123e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800124c:	230a      	movs	r3, #10
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001250:	2301      	movs	r3, #1
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2340      	movs	r3, #64	@ 0x40
 8001256:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001268:	230c      	movs	r3, #12
 800126a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001278:	230c      	movs	r3, #12
 800127a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800127c:	2300      	movs	r3, #0
 800127e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fd14 	bl	8003cb8 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001296:	f000 fa31 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	233f      	movs	r3, #63	@ 0x3f
 800129c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	2303      	movs	r3, #3
 80012a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012aa:	2340      	movs	r3, #64	@ 0x40
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012ae:	2340      	movs	r3, #64	@ 0x40
 80012b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f953 	bl	800456c <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80012cc:	f000 fa16 	bl	80016fc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80012d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f003 fafe 	bl	80048d8 <HAL_RCC_MCOConfig>
}
 80012dc:	bf00      	nop
 80012de:	3770      	adds	r7, #112	@ 0x70
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	58000400 	.word	0x58000400
 80012e8:	58024800 	.word	0x58024800

080012ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0b2      	sub	sp, #200	@ 0xc8
 80012f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	22c8      	movs	r2, #200	@ 0xc8
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00d fb51 	bl	800e9a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800130a:	2304      	movs	r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800130e:	2309      	movs	r3, #9
 8001310:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800131e:	23c0      	movs	r3, #192	@ 0xc0
 8001320:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001322:	2320      	movs	r3, #32
 8001324:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001326:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fd0f 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001340:	f000 f9dc 	bl	80016fc <Error_Handler>
  }
}
 8001344:	bf00      	nop
 8001346:	37c8      	adds	r7, #200	@ 0xc8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001352:	4a1a      	ldr	r2, [pc, #104]	@ (80013bc <MX_DMA2D_Init+0x70>)
 8001354:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 800135e:	2202      	movs	r2, #2
 8001360:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001370:	2202      	movs	r2, #2
 8001372:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 800137c:	2200      	movs	r2, #0
 800137e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001382:	2200      	movs	r2, #0
 8001384:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001388:	2200      	movs	r2, #0
 800138a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 800138e:	2200      	movs	r2, #0
 8001390:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 8001394:	f000 fddc 	bl	8001f50 <HAL_DMA2D_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800139e:	f000 f9ad 	bl	80016fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013a2:	2101      	movs	r1, #1
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_DMA2D_Init+0x6c>)
 80013a6:	f000 fe37 	bl	8002018 <HAL_DMA2D_ConfigLayer>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80013b0:	f000 f9a4 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	240314b4 	.word	0x240314b4
 80013bc:	52001000 	.word	0x52001000

080013c0 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_JPEG_Init+0x20>)
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <MX_JPEG_Init+0x24>)
 80013c8:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_JPEG_Init+0x20>)
 80013cc:	f001 f8e2 	bl	8002594 <HAL_JPEG_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80013d6:	f000 f991 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2403151c 	.word	0x2403151c
 80013e4:	52003000 	.word	0x52003000

080013e8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 80013ee:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <MX_SDMMC1_SD_Init+0x44>)
 80013f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 8001400:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001404:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_SDMMC1_SD_Init+0x40>)
 8001414:	f006 f9de 	bl	80077d4 <HAL_SD_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800141e:	f000 f96d 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	24031574 	.word	0x24031574
 800142c:	52007000 	.word	0x52007000

08001430 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001434:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001436:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <MX_SPI5_Init+0xa4>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800143c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001440:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001448:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800144a:	2207      	movs	r2, #7
 800144c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800145c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001460:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001488:	2200      	movs	r2, #0
 800148a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800148e:	2200      	movs	r2, #0
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 8001494:	2200      	movs	r2, #0
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 800149a:	2200      	movs	r2, #0
 800149c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <MX_SPI5_Init+0xa0>)
 80014be:	f007 fded 	bl	800909c <HAL_SPI_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 80014c8:	f000 f918 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	240315f0 	.word	0x240315f0
 80014d4:	40015000 	.word	0x40015000

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014de:	4a23      	ldr	r2, [pc, #140]	@ (800156c <MX_USART1_UART_Init+0x94>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001520:	4811      	ldr	r0, [pc, #68]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001522:	f008 f9b6 	bl	8009892 <HAL_UART_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800152c:	f000 f8e6 	bl	80016fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	480d      	ldr	r0, [pc, #52]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001534:	f009 f9bf 	bl	800a8b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800153e:	f000 f8dd 	bl	80016fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4808      	ldr	r0, [pc, #32]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001546:	f009 f9f4 	bl	800a932 <HAL_UARTEx_SetRxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001550:	f000 f8d4 	bl	80016fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001556:	f009 f975 	bl	800a844 <HAL_UARTEx_DisableFifoMode>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001560:	f000 f8cc 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24031678 	.word	0x24031678
 800156c:	40011000 	.word	0x40011000

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b58      	ldr	r3, [pc, #352]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158c:	4a56      	ldr	r2, [pc, #344]	@ (80016e8 <MX_GPIO_Init+0x178>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001596:	4b54      	ldr	r3, [pc, #336]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b50      	ldr	r3, [pc, #320]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015aa:	4a4f      	ldr	r2, [pc, #316]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b4:	4b4c      	ldr	r3, [pc, #304]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b49      	ldr	r3, [pc, #292]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c8:	4a47      	ldr	r2, [pc, #284]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d2:	4b45      	ldr	r3, [pc, #276]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015e0:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e6:	4a40      	ldr	r2, [pc, #256]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f0:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <MX_GPIO_Init+0x178>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	4a38      	ldr	r2, [pc, #224]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160e:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800161c:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <MX_GPIO_Init+0x178>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001622:	4a31      	ldr	r2, [pc, #196]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <MX_GPIO_Init+0x178>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <MX_GPIO_Init+0x178>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001640:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <MX_GPIO_Init+0x178>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800164a:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <MX_GPIO_Init+0x178>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	4823      	ldr	r0, [pc, #140]	@ (80016ec <MX_GPIO_Init+0x17c>)
 800165e:	f000 ff51 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2161      	movs	r1, #97	@ 0x61
 8001666:	4822      	ldr	r0, [pc, #136]	@ (80016f0 <MX_GPIO_Init+0x180>)
 8001668:	f000 ff4c 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800166c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	481c      	ldr	r0, [pc, #112]	@ (80016f4 <MX_GPIO_Init+0x184>)
 8001682:	f000 fd77 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4815      	ldr	r0, [pc, #84]	@ (80016f8 <MX_GPIO_Init+0x188>)
 80016a4:	f000 fd66 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	@ (80016ec <MX_GPIO_Init+0x17c>)
 80016c0:	f000 fd58 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 80016c4:	2361      	movs	r3, #97	@ 0x61
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_GPIO_Init+0x180>)
 80016dc:	f000 fd4a 	bl	8002174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	@ 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58024400 	.word	0x58024400
 80016ec:	58022800 	.word	0x58022800
 80016f0:	58022400 	.word	0x58022400
 80016f4:	58022000 	.word	0x58022000
 80016f8:	58020000 	.word	0x58020000

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <Error_Handler+0x8>

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_MspInit+0x30>)
 8001710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001714:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_MspInit+0x30>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_MspInit+0x30>)
 8001720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	58024400 	.word	0x58024400

0800173c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <HAL_DMA2D_MspInit+0x3c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10e      	bne.n	800176c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_DMA2D_MspInit+0x40>)
 8001750:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001754:	4a09      	ldr	r2, [pc, #36]	@ (800177c <HAL_DMA2D_MspInit+0x40>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <HAL_DMA2D_MspInit+0x40>)
 8001760:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	52001000 	.word	0x52001000
 800177c:	58024400 	.word	0x58024400

08001780 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <HAL_JPEG_MspInit+0x3c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10e      	bne.n	80017b0 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_JPEG_MspInit+0x40>)
 8001794:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001798:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <HAL_JPEG_MspInit+0x40>)
 800179a:	f043 0320 	orr.w	r3, r3, #32
 800179e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <HAL_JPEG_MspInit+0x40>)
 80017a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	52003000 	.word	0x52003000
 80017c0:	58024400 	.word	0x58024400

080017c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0be      	sub	sp, #248	@ 0xf8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	22c8      	movs	r2, #200	@ 0xc8
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00d f8db 	bl	800e9a0 <memset>
  if(hsd->Instance==SDMMC1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a3c      	ldr	r2, [pc, #240]	@ (80018e0 <HAL_SD_MspInit+0x11c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d171      	bne.n	80018d8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80017f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001800:	2300      	movs	r3, #0
 8001802:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f003 faa5 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001814:	f7ff ff72 	bl	80016fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001818:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 800181a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800181e:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001824:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 800182a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800182e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183c:	4a29      	ldr	r2, [pc, #164]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HAL_SD_MspInit+0x120>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001872:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800188c:	230c      	movs	r3, #12
 800188e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001896:	4619      	mov	r1, r3
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <HAL_SD_MspInit+0x124>)
 800189a:	f000 fc6b 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800189e:	2304      	movs	r3, #4
 80018a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018b6:	230c      	movs	r3, #12
 80018b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018c0:	4619      	mov	r1, r3
 80018c2:	480a      	ldr	r0, [pc, #40]	@ (80018ec <HAL_SD_MspInit+0x128>)
 80018c4:	f000 fc56 	bl	8002174 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2031      	movs	r0, #49	@ 0x31
 80018ce:	f000 fb0a 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80018d2:	2031      	movs	r0, #49	@ 0x31
 80018d4:	f000 fb21 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	37f8      	adds	r7, #248	@ 0xf8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	52007000 	.word	0x52007000
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020800 	.word	0x58020800
 80018ec:	58020c00 	.word	0x58020c00

080018f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0be      	sub	sp, #248	@ 0xf8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	22c8      	movs	r2, #200	@ 0xc8
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f00d f845 	bl	800e9a0 <memset>
  if(hspi->Instance==SPI5)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a39      	ldr	r2, [pc, #228]	@ (8001a00 <HAL_SPI_MspInit+0x110>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d16a      	bne.n	80019f6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fa0e 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001942:	f7ff fedb 	bl	80016fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001946:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 8001948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800194c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 800194e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001952:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 8001958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800195c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196a:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 800196c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001974:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001988:	4a1e      	ldr	r2, [pc, #120]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <HAL_SPI_MspInit+0x114>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019b8:	2305      	movs	r3, #5
 80019ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4810      	ldr	r0, [pc, #64]	@ (8001a08 <HAL_SPI_MspInit+0x118>)
 80019c6:	f000 fbd5 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80019ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019e4:	2305      	movs	r3, #5
 80019e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4806      	ldr	r0, [pc, #24]	@ (8001a0c <HAL_SPI_MspInit+0x11c>)
 80019f2:	f000 fbbf 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	37f8      	adds	r7, #248	@ 0xf8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40015000 	.word	0x40015000
 8001a04:	58024400 	.word	0x58024400
 8001a08:	58022800 	.word	0x58022800
 8001a0c:	58022400 	.word	0x58022400

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0bc      	sub	sp, #240	@ 0xf0
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	22c8      	movs	r2, #200	@ 0xc8
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00c ffb5 	bl	800e9a0 <memset>
  if(huart->Instance==USART1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d146      	bne.n	8001ace <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a40:	f04f 0201 	mov.w	r2, #1
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 f97e 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a62:	f7ff fe4b 	bl	80016fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_UART_MspInit+0xcc>)
 8001a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_UART_MspInit+0xcc>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_UART_MspInit+0xcc>)
 8001a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_UART_MspInit+0xcc>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <HAL_UART_MspInit+0xcc>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_UART_MspInit+0xcc>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001aa2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001abc:	2307      	movs	r3, #7
 8001abe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <HAL_UART_MspInit+0xd0>)
 8001aca:	f000 fb53 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	37f0      	adds	r7, #240	@ 0xf0
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58020000 	.word	0x58020000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <NMI_Handler+0x4>

08001aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <MemManage_Handler+0x4>

08001afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3a:	f000 f8a9 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <SDMMC1_IRQHandler+0x10>)
 8001b4a:	f006 f8b3 	bl	8007cb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	24031574 	.word	0x24031574

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b5c:	f7fe fd34 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	@ (8001b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f00c ff13 	bl	800e9b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff facd 	bl	8001128 <main>
  bx  lr
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b98:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001b9c:	0800f0a0 	.word	0x0800f0a0
  ldr r2, =_sbss
 8001ba0:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001ba4:	24032794 	.word	0x24032794

08001ba8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC3_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f000 f98c 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb8:	f002 fef8 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_Init+0x68>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	4913      	ldr	r1, [pc, #76]	@ (8001c18 <HAL_Init+0x6c>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_Init+0x68>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_Init+0x6c>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <HAL_Init+0x70>)
 8001bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <HAL_Init+0x74>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f814 	bl	8001c24 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e002      	b.n	8001c0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c06:	f7ff fd7f 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58024400 	.word	0x58024400
 8001c18:	0800ea64 	.word	0x0800ea64
 8001c1c:	24000004 	.word	0x24000004
 8001c20:	24000000 	.word	0x24000000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_InitTick+0x60>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e021      	b.n	8001c7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_InitTick+0x64>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f971 	bl	8001f36 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 f93b 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_InitTick+0x68>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	24000014 	.word	0x24000014
 8001c88:	24000000 	.word	0x24000000
 8001c8c:	24000010 	.word	0x24000010

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	24000014 	.word	0x24000014
 8001cb4:	2403170c 	.word	0x2403170c

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2403170c 	.word	0x2403170c

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	24000014 	.word	0x24000014

08001d18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_GetREVID+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1b      	lsrs	r3, r3, #16
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	5c001000 	.word	0x5c001000

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	05fa0000 	.word	0x05fa0000

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	@ (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff40 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff90 	bl	8001e24 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff33 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa4 	bl	8001e8c <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e04f      	b.n	8002002 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fbe0 	bl	800173c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_DMA2D_Init+0xbc>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6851      	ldr	r1, [r2, #4]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	69d2      	ldr	r2, [r2, #28]
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_DMA2D_Init+0xc0>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6891      	ldr	r1, [r2, #8]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6992      	ldr	r2, [r2, #24]
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fc2:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_DMA2D_Init+0xc4>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68d1      	ldr	r1, [r2, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	051a      	lsls	r2, r3, #20
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	055b      	lsls	r3, r3, #21
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	fff8ffbf 	.word	0xfff8ffbf
 8002010:	fffffef8 	.word	0xfffffef8
 8002014:	ffff0000 	.word	0xffff0000

08002018 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_DMA2D_ConfigLayer+0x24>
 8002038:	2302      	movs	r3, #2
 800203a:	e092      	b.n	8002162 <HAL_DMA2D_ConfigLayer+0x14a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3328      	adds	r3, #40	@ 0x28
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002070:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800207c:	4b3c      	ldr	r3, [pc, #240]	@ (8002170 <HAL_DMA2D_ConfigLayer+0x158>)
 800207e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b0a      	cmp	r3, #10
 8002086:	d003      	beq.n	8002090 <HAL_DMA2D_ConfigLayer+0x78>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d107      	bne.n	80020a0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e005      	b.n	80020ac <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d120      	bne.n	80020f4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	ea02 0103 	and.w	r1, r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b0a      	cmp	r3, #10
 80020da:	d003      	beq.n	80020e4 <HAL_DMA2D_ConfigLayer+0xcc>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b09      	cmp	r3, #9
 80020e2:	d135      	bne.n	8002150 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80020f2:	e02d      	b.n	8002150 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b0b      	cmp	r3, #11
 80020fa:	d109      	bne.n	8002110 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	049b      	lsls	r3, r3, #18
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800210e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	43db      	mvns	r3, r3
 800211a:	ea02 0103 	and.w	r1, r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	430a      	orrs	r2, r1
 8002126:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d003      	beq.n	8002142 <HAL_DMA2D_ConfigLayer+0x12a>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b09      	cmp	r3, #9
 8002140:	d106      	bne.n	8002150 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800214e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	ff33000f 	.word	0xff33000f

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002182:	4b89      	ldr	r3, [pc, #548]	@ (80023a8 <HAL_GPIO_Init+0x234>)
 8002184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002186:	e194      	b.n	80024b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8186 	beq.w	80024ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d005      	beq.n	80021b8 <HAL_GPIO_Init+0x44>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d130      	bne.n	800221a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ee:	2201      	movs	r2, #1
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 0201 	and.w	r2, r3, #1
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b03      	cmp	r3, #3
 8002224:	d017      	beq.n	8002256 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d123      	bne.n	80022aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80e0 	beq.w	80024ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_GPIO_Init+0x238>)
 80022ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022f2:	4a2e      	ldr	r2, [pc, #184]	@ (80023ac <HAL_GPIO_Init+0x238>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022fc:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_GPIO_Init+0x238>)
 80022fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230a:	4a29      	ldr	r2, [pc, #164]	@ (80023b0 <HAL_GPIO_Init+0x23c>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a20      	ldr	r2, [pc, #128]	@ (80023b4 <HAL_GPIO_Init+0x240>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d052      	beq.n	80023dc <HAL_GPIO_Init+0x268>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <HAL_GPIO_Init+0x244>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <HAL_GPIO_Init+0x22e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1e      	ldr	r2, [pc, #120]	@ (80023bc <HAL_GPIO_Init+0x248>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <HAL_GPIO_Init+0x22a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_GPIO_Init+0x24c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x226>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1c      	ldr	r2, [pc, #112]	@ (80023c4 <HAL_GPIO_Init+0x250>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x222>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <HAL_GPIO_Init+0x254>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x21e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_GPIO_Init+0x258>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x21a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <HAL_GPIO_Init+0x25c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x216>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a18      	ldr	r2, [pc, #96]	@ (80023d4 <HAL_GPIO_Init+0x260>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x212>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a17      	ldr	r2, [pc, #92]	@ (80023d8 <HAL_GPIO_Init+0x264>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x20e>
 800237e:	2309      	movs	r3, #9
 8002380:	e02d      	b.n	80023de <HAL_GPIO_Init+0x26a>
 8002382:	230a      	movs	r3, #10
 8002384:	e02b      	b.n	80023de <HAL_GPIO_Init+0x26a>
 8002386:	2308      	movs	r3, #8
 8002388:	e029      	b.n	80023de <HAL_GPIO_Init+0x26a>
 800238a:	2307      	movs	r3, #7
 800238c:	e027      	b.n	80023de <HAL_GPIO_Init+0x26a>
 800238e:	2306      	movs	r3, #6
 8002390:	e025      	b.n	80023de <HAL_GPIO_Init+0x26a>
 8002392:	2305      	movs	r3, #5
 8002394:	e023      	b.n	80023de <HAL_GPIO_Init+0x26a>
 8002396:	2304      	movs	r3, #4
 8002398:	e021      	b.n	80023de <HAL_GPIO_Init+0x26a>
 800239a:	2303      	movs	r3, #3
 800239c:	e01f      	b.n	80023de <HAL_GPIO_Init+0x26a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e01d      	b.n	80023de <HAL_GPIO_Init+0x26a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e01b      	b.n	80023de <HAL_GPIO_Init+0x26a>
 80023a6:	bf00      	nop
 80023a8:	58000080 	.word	0x58000080
 80023ac:	58024400 	.word	0x58024400
 80023b0:	58000400 	.word	0x58000400
 80023b4:	58020000 	.word	0x58020000
 80023b8:	58020400 	.word	0x58020400
 80023bc:	58020800 	.word	0x58020800
 80023c0:	58020c00 	.word	0x58020c00
 80023c4:	58021000 	.word	0x58021000
 80023c8:	58021400 	.word	0x58021400
 80023cc:	58021800 	.word	0x58021800
 80023d0:	58021c00 	.word	0x58021c00
 80023d4:	58022000 	.word	0x58022000
 80023d8:	58022400 	.word	0x58022400
 80023dc:	2300      	movs	r3, #0
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ee:	4938      	ldr	r1, [pc, #224]	@ (80024d0 <HAL_GPIO_Init+0x35c>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	3301      	adds	r3, #1
 80024b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f ae63 	bne.w	8002188 <HAL_GPIO_Init+0x14>
  }
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	3724      	adds	r7, #36	@ 0x24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	58000400 	.word	0x58000400

080024d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e001      	b.n	80024f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002540:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <HAL_HSEM_FastTake+0x2c>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3320      	adds	r3, #32
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_HSEM_FastTake+0x30>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	58026400 	.word	0x58026400
 8002568:	80000300 	.word	0x80000300

0800256c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002576:	4906      	ldr	r1, [pc, #24]	@ (8002590 <HAL_HSEM_Release+0x24>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	58026400 	.word	0x58026400

08002594 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e070      	b.n	8002688 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff f8e0 	bl	8001780 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_JPEG_Init+0xfc>)
 800262c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_JPEG_Init+0x100>)
 8002632:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fcdb 	bl	8002ffc <JPEG_Set_HuffEnc_Mem>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e018      	b.n	8002688 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002664:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	0800ec54 	.word	0x0800ec54
 8002694:	0800ec94 	.word	0x0800ec94

08002698 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_JPEG_GetInfo+0x16>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e083      	b.n	80027ba <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d103      	bne.n	80026c8 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2210      	movs	r2, #16
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e017      	b.n	80026f8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e00c      	b.n	80026f8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d103      	bne.n	80026f4 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2230      	movs	r2, #48	@ 0x30
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e001      	b.n	80026f8 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e060      	b.n	80027ba <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	b29a      	uxth	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	b29a      	uxth	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b10      	cmp	r3, #16
 800271a:	d003      	beq.n	8002724 <HAL_JPEG_GetInfo+0x8c>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b30      	cmp	r3, #48	@ 0x30
 8002722:	d140      	bne.n	80027a6 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d109      	bne.n	8002768 <HAL_JPEG_GetInfo+0xd0>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_JPEG_GetInfo+0xd0>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e01d      	b.n	80027a4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_JPEG_GetInfo+0xea>
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_JPEG_GetInfo+0xea>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e010      	b.n	80027a4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d109      	bne.n	800279c <HAL_JPEG_GetInfo+0x104>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_JPEG_GetInfo+0x104>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	e003      	b.n	80027a4 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80027a2:	e003      	b.n	80027ac <HAL_JPEG_GetInfo+0x114>
 80027a4:	e002      	b.n	80027ac <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f001 f9cb 	bl	8003b48 <JPEG_GetQuality>
 80027b2:	4602      	mov	r2, r0
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_JPEG_Decode+0x20>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_JPEG_Decode+0x20>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e071      	b.n	80028ca <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_JPEG_Decode+0x32>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e06a      	b.n	80028ca <HAL_JPEG_Decode+0x108>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fc:	f7ff fa5c 	bl	8001cb8 <HAL_GetTick>
 8002800:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d158      	bne.n	80028c0 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2204      	movs	r2, #4
 8002812:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	f023 020f 	bic.w	r2, r3, #15
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	f043 0206 	orr.w	r2, r3, #6
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f023 0203 	bic.w	r2, r3, #3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fe50 	bl	8003500 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002860:	e01e      	b.n	80028a0 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d01a      	beq.n	80028a0 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800286a:	f7ff fa25 	bl	8001cb8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <HAL_JPEG_Decode+0xbe>
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	f043 0208 	orr.w	r2, r3, #8
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e014      	b.n	80028ca <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fea1 	bl	80035e8 <JPEG_Process>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0da      	beq.n	8002862 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e004      	b.n	80028ca <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d116      	bne.n	800291a <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d033      	beq.n	8002974 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
 8002918:	e02c      	b.n	8002974 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d126      	bne.n	8002974 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f043 0306 	orr.w	r3, r3, #6
 8002942:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002952:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002960:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43da      	mvns	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	400a      	ands	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80029de:	b480      	push	{r7}
 80029e0:	b08b      	sub	sp, #44	@ 0x2c
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e020      	b.n	8002a38 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	4413      	add	r3, r2
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0a:	d90f      	bls.n	8002a2c <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e055      	b.n	8002abc <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	440b      	add	r3, r1
 8002a1a:	3201      	adds	r2, #1
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
      p++;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	3301      	adds	r3, #1
 8002a24:	623b      	str	r3, [r7, #32]
      i--;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ee      	bne.n	8002a10 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	d9db      	bls.n	80029f6 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	4413      	add	r3, r2
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	617b      	str	r3, [r7, #20]
  p = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8002a5c:	e027      	b.n	8002aae <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	601a      	str	r2, [r3, #0]
      p++;
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	623b      	str	r3, [r7, #32]
      code++;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d0eb      	beq.n	8002a5e <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b1f      	cmp	r3, #31
 8002a8a:	d901      	bls.n	8002a90 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e015      	b.n	8002abc <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002a90:	2201      	movs	r2, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d301      	bcc.n	8002aa2 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00c      	b.n	8002abc <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
    si++;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1dd      	bne.n	8002a76 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	372c      	adds	r7, #44	@ 0x2c
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002ad4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002ad8:	6018      	str	r0, [r3, #0]
 8002ada:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002ade:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002ae2:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002ae4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002ae8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	f107 020c 	add.w	r2, r7, #12
 8002af6:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8002afa:	f7ff ff70 	bl	80029de <JPEG_Bits_To_SizeCodes>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002b04:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002b0c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002b10:	e075      	b.n	8002bfe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8002b18:	e067      	b.n	8002bea <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002b1a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002b1e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002b28:	4413      	add	r3, r2
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002b32:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002b3a:	23a0      	movs	r3, #160	@ 0xa0
 8002b3c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002b40:	e021      	b.n	8002b86 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002b42:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002b46:	2bf0      	cmp	r3, #240	@ 0xf0
 8002b48:	d103      	bne.n	8002b52 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8002b4a:	23a1      	movs	r3, #161	@ 0xa1
 8002b4c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002b50:	e019      	b.n	8002b86 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002b52:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8002b60:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8002b6c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b01      	subs	r3, #1
 8002b82:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002b86:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002b8a:	2ba1      	cmp	r3, #161	@ 0xa1
 8002b8c:	d901      	bls.n	8002b92 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e035      	b.n	8002bfe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002b92:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002b96:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002b9a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002b9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ba2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002ba6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002bb0:	3328      	adds	r3, #40	@ 0x28
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002bb8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002bbc:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002bc0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002bc4:	4413      	add	r3, r2
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002bd0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002bda:	4413      	add	r3, r2
 8002bdc:	460a      	mov	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
      k++;
 8002be0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8002bea:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002bee:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d38e      	bcc.n	8002b1a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002c14:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002c18:	6018      	str	r0, [r3, #0]
 8002c1a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002c1e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002c22:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002c24:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002c28:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002c32:	f107 0208 	add.w	r2, r7, #8
 8002c36:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8002c3a:	f7ff fed0 	bl	80029de <JPEG_Bits_To_SizeCodes>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002c44:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002c4c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002c50:	e048      	b.n	8002ce4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8002c58:	e03d      	b.n	8002cd6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002c5a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002c5e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002c68:	4413      	add	r3, r2
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002c72:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002c76:	2b0b      	cmp	r3, #11
 8002c78:	d901      	bls.n	8002c7e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e032      	b.n	8002ce4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002c7e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002c82:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002c86:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002c8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c8e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002c92:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002c96:	6819      	ldr	r1, [r3, #0]
 8002c98:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002ca4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002ca8:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002cac:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b2d9      	uxtb	r1, r3
 8002cb8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002cbc:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002cc6:	4413      	add	r3, r2
 8002cc8:	460a      	mov	r2, r1
 8002cca:	701a      	strb	r2, [r3, #0]
      k++;
 8002ccc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8002cd6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8002cda:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3bb      	bcc.n	8002c5a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b09a      	sub	sp, #104	@ 0x68
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d106      	bne.n	8002d16 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002d10:	3318      	adds	r3, #24
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d14:	e00f      	b.n	8002d36 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d106      	bne.n	8002d32 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d30:	e001      	b.n	8002d36 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e059      	b.n	8002dea <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d055      	beq.n	8002de8 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	68b8      	ldr	r0, [r7, #8]
 8002d44:	f7ff ff60 	bl	8002c08 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8002d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002d56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d5a:	e046      	b.n	8002dea <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8002d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d62:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002d66:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d70:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002d74:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002d76:	230c      	movs	r3, #12
 8002d78:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8002d7a:	e032      	b.n	8002de2 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8002d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d84:	3b04      	subs	r3, #4
 8002d86:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002d88:	f107 0214 	add.w	r2, r7, #20
 8002d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	3368      	adds	r3, #104	@ 0x68
 8002da0:	443b      	add	r3, r7
 8002da2:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4313      	orrs	r3, r2
 8002daa:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8002dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dae:	3b01      	subs	r3, #1
 8002db0:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002db2:	f107 0214 	add.w	r2, r7, #20
 8002db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3368      	adds	r3, #104	@ 0x68
 8002dca:	443b      	add	r3, r7
 8002dcc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d8c9      	bhi.n	8002d7c <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3768      	adds	r7, #104	@ 0x68
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e00:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002e04:	6018      	str	r0, [r3, #0]
 8002e06:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e0a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002e0e:	6019      	str	r1, [r3, #0]
 8002e10:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e14:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002e18:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002e1a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e1e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002e2e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10c      	bne.n	8002e52 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002e38:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e3c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e48:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002e4c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002e50:	e01d      	b.n	8002e8e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002e52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e56:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002e62:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002e66:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d10c      	bne.n	8002e8a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002e70:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e74:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002e80:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002e84:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002e88:	e001      	b.n	8002e8e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0a8      	b.n	8002fe0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8002e8e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e92:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a0 	beq.w	8002fde <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002e9e:	f107 0214 	add.w	r2, r7, #20
 8002ea2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002ea6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002eaa:	4611      	mov	r1, r2
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	f7ff fe0b 	bl	8002ac8 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8002eb8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8002ec0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002ec4:	e08c      	b.n	8002fe0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002ec6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002eca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002ed4:	e00e      	b.n	8002ef4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8002ed6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002eda:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002ede:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002ee0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002eea:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002ef4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d9ec      	bls.n	8002ed6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002efc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f00:	4a3a      	ldr	r2, [pc, #232]	@ (8002fec <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002f02:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002f04:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f08:	3304      	adds	r3, #4
 8002f0a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8002f0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f12:	4a37      	ldr	r2, [pc, #220]	@ (8002ff0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002f14:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002f16:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002f20:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f24:	4a33      	ldr	r2, [pc, #204]	@ (8002ff4 <JPEG_Set_HuffAC_Mem+0x200>)
 8002f26:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002f28:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8002f32:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002f36:	4a30      	ldr	r2, [pc, #192]	@ (8002ff8 <JPEG_Set_HuffAC_Mem+0x204>)
 8002f38:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002f3a:	23a2      	movs	r3, #162	@ 0xa2
 8002f3c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8002f40:	e049      	b.n	8002fd6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8002f42:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8002f4c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002f50:	3b04      	subs	r3, #4
 8002f52:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002f56:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002f5a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002f5e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002f6c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002f70:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002f74:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f78:	3328      	adds	r3, #40	@ 0x28
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002f88:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002f92:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002f96:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002f9a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f9e:	4413      	add	r3, r2
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002fa8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002fac:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002fb0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002fb4:	3328      	adds	r3, #40	@ 0x28
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002fc4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002fd4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002fd6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d8b1      	bhi.n	8002f42 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	0fd10fd0 	.word	0x0fd10fd0
 8002ff0:	0fd30fd2 	.word	0x0fd30fd2
 8002ff4:	0fd50fd4 	.word	0x0fd50fd4
 8002ff8:	0fd70fd6 	.word	0x0fd70fd6

08002ffc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f84d 	bl	80030a4 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003012:	461a      	mov	r2, r3
 8003014:	491f      	ldr	r1, [pc, #124]	@ (8003094 <JPEG_Set_HuffEnc_Mem+0x98>)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff feec 	bl	8002df4 <JPEG_Set_HuffAC_Mem>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	e030      	b.n	800308c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003032:	461a      	mov	r2, r3
 8003034:	4918      	ldr	r1, [pc, #96]	@ (8003098 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fedc 	bl	8002df4 <JPEG_Set_HuffAC_Mem>
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	e020      	b.n	800308c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003052:	461a      	mov	r2, r3
 8003054:	4911      	ldr	r1, [pc, #68]	@ (800309c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fe49 	bl	8002cee <JPEG_Set_HuffDC_Mem>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	e010      	b.n	800308c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003072:	461a      	mov	r2, r3
 8003074:	490a      	ldr	r1, [pc, #40]	@ (80030a0 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fe39 	bl	8002cee <JPEG_Set_HuffDC_Mem>
 800307c:	4603      	mov	r3, r0
 800307e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	e000      	b.n	800308c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800eaac 	.word	0x0800eaac
 8003098:	0800eb60 	.word	0x0800eb60
 800309c:	0800ea74 	.word	0x0800ea74
 80030a0:	0800ea90 	.word	0x0800ea90

080030a4 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	@ 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80030ac:	4b80      	ldr	r3, [pc, #512]	@ (80032b0 <JPEG_Set_Huff_DHTMem+0x20c>)
 80030ae:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80030b0:	4b80      	ldr	r3, [pc, #512]	@ (80032b4 <JPEG_Set_Huff_DHTMem+0x210>)
 80030b2:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80030b4:	4b80      	ldr	r3, [pc, #512]	@ (80032b8 <JPEG_Set_Huff_DHTMem+0x214>)
 80030b6:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80030b8:	4b80      	ldr	r3, [pc, #512]	@ (80032bc <JPEG_Set_Huff_DHTMem+0x218>)
 80030ba:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80030c4:	330c      	adds	r3, #12
 80030c6:	623b      	str	r3, [r7, #32]
  index = 16;
 80030c8:	2310      	movs	r3, #16
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80030cc:	e01d      	b.n	800310a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	3b01      	subs	r3, #1
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	3b02      	subs	r3, #2
 80030dc:	6979      	ldr	r1, [r7, #20]
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030e2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	3b03      	subs	r3, #3
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80030ee:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	3a04      	subs	r2, #4
 80030f4:	6979      	ldr	r1, [r7, #20]
 80030f6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80030f8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	601a      	str	r2, [r3, #0]
    address--;
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	3b04      	subs	r3, #4
 8003102:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	3b04      	subs	r3, #4
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	2b03      	cmp	r3, #3
 800310e:	d8de      	bhi.n	80030ce <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003118:	3318      	adds	r3, #24
 800311a:	623b      	str	r3, [r7, #32]
  index = 12;
 800311c:	230c      	movs	r3, #12
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003120:	e021      	b.n	8003166 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	3b01      	subs	r3, #1
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4413      	add	r3, r2
 800312a:	7c1b      	ldrb	r3, [r3, #16]
 800312c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	3b02      	subs	r3, #2
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	440b      	add	r3, r1
 8003136:	7c1b      	ldrb	r3, [r3, #16]
 8003138:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800313a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	3b03      	subs	r3, #3
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	440b      	add	r3, r1
 8003144:	7c1b      	ldrb	r3, [r3, #16]
 8003146:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003148:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	3a04      	subs	r2, #4
 800314e:	6979      	ldr	r1, [r7, #20]
 8003150:	440a      	add	r2, r1
 8003152:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003154:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	601a      	str	r2, [r3, #0]
    address--;
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	3b04      	subs	r3, #4
 800315e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	3b04      	subs	r3, #4
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	2b03      	cmp	r3, #3
 800316a:	d8da      	bhi.n	8003122 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003174:	3328      	adds	r3, #40	@ 0x28
 8003176:	623b      	str	r3, [r7, #32]
  index = 16;
 8003178:	2310      	movs	r3, #16
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800317c:	e01d      	b.n	80031ba <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	3b01      	subs	r3, #1
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	3b02      	subs	r3, #2
 800318c:	69f9      	ldr	r1, [r7, #28]
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003192:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	3b03      	subs	r3, #3
 8003198:	69f9      	ldr	r1, [r7, #28]
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800319e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80031a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a2:	3a04      	subs	r2, #4
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80031a8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	601a      	str	r2, [r3, #0]
    address--;
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	3b04      	subs	r3, #4
 80031b2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	3b04      	subs	r3, #4
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d8de      	bhi.n	800317e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80031c8:	33cc      	adds	r3, #204	@ 0xcc
 80031ca:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <JPEG_Set_Huff_DHTMem+0x21c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  *address = value;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	3b04      	subs	r3, #4
 80031f6:	623b      	str	r3, [r7, #32]
  index = 160;
 80031f8:	23a0      	movs	r3, #160	@ 0xa0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80031fc:	e021      	b.n	8003242 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	3b01      	subs	r3, #1
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	7c1b      	ldrb	r3, [r3, #16]
 8003208:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	3b02      	subs	r3, #2
 800320e:	69f9      	ldr	r1, [r7, #28]
 8003210:	440b      	add	r3, r1
 8003212:	7c1b      	ldrb	r3, [r3, #16]
 8003214:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003216:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	3b03      	subs	r3, #3
 800321c:	69f9      	ldr	r1, [r7, #28]
 800321e:	440b      	add	r3, r1
 8003220:	7c1b      	ldrb	r3, [r3, #16]
 8003222:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003224:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8003226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003228:	3a04      	subs	r2, #4
 800322a:	69f9      	ldr	r1, [r7, #28]
 800322c:	440a      	add	r2, r1
 800322e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003230:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	601a      	str	r2, [r3, #0]
    address--;
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	3b04      	subs	r3, #4
 800323a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	3b04      	subs	r3, #4
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	2b03      	cmp	r3, #3
 8003246:	d8da      	bhi.n	80031fe <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003250:	33cc      	adds	r3, #204	@ 0xcc
 8003252:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	061a      	lsls	r2, r3, #24
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	431a      	orrs	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800327e:	33dc      	adds	r3, #220	@ 0xdc
 8003280:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	7bdb      	ldrb	r3, [r3, #15]
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	7b92      	ldrb	r2, [r2, #14]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	3b04      	subs	r3, #4
 80032a8:	623b      	str	r3, [r7, #32]
  index = 12;
 80032aa:	230c      	movs	r3, #12
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80032ae:	e027      	b.n	8003300 <JPEG_Set_Huff_DHTMem+0x25c>
 80032b0:	0800eaac 	.word	0x0800eaac
 80032b4:	0800eb60 	.word	0x0800eb60
 80032b8:	0800ea74 	.word	0x0800ea74
 80032bc:	0800ea90 	.word	0x0800ea90
 80032c0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	3301      	adds	r3, #1
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80032ce:	6939      	ldr	r1, [r7, #16]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	440b      	add	r3, r1
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80032d8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	3b01      	subs	r3, #1
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80032e4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80032e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e8:	3a02      	subs	r2, #2
 80032ea:	6939      	ldr	r1, [r7, #16]
 80032ec:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80032ee:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	601a      	str	r2, [r3, #0]
    address--;
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	3b04      	subs	r3, #4
 80032f8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	3b04      	subs	r3, #4
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	2b03      	cmp	r3, #3
 8003304:	d8de      	bhi.n	80032c4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800330e:	33dc      	adds	r3, #220	@ 0xdc
 8003310:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	7c5b      	ldrb	r3, [r3, #17]
 800331e:	061a      	lsls	r2, r3, #24
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	431a      	orrs	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	7c1b      	ldrb	r3, [r3, #16]
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800333c:	33e8      	adds	r3, #232	@ 0xe8
 800333e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b6d      	ldr	r3, [pc, #436]	@ (80034fc <JPEG_Set_Huff_DHTMem+0x458>)
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	7edb      	ldrb	r3, [r3, #27]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	7e92      	ldrb	r2, [r2, #26]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	3b04      	subs	r3, #4
 8003366:	623b      	str	r3, [r7, #32]
  index = 8;
 8003368:	2308      	movs	r3, #8
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800336c:	e021      	b.n	80033b2 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	3301      	adds	r3, #1
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	7c1b      	ldrb	r3, [r3, #16]
 8003378:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800337a:	6939      	ldr	r1, [r7, #16]
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	440b      	add	r3, r1
 8003380:	3310      	adds	r3, #16
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003386:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	3b01      	subs	r3, #1
 800338c:	6939      	ldr	r1, [r7, #16]
 800338e:	440b      	add	r3, r1
 8003390:	7c1b      	ldrb	r3, [r3, #16]
 8003392:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003394:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003398:	3a02      	subs	r2, #2
 800339a:	6939      	ldr	r1, [r7, #16]
 800339c:	440a      	add	r2, r1
 800339e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80033a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	601a      	str	r2, [r3, #0]
    address--;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	3b04      	subs	r3, #4
 80033aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	3b04      	subs	r3, #4
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d8da      	bhi.n	800336e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80033c0:	33e8      	adds	r3, #232	@ 0xe8
 80033c2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	061a      	lsls	r2, r3, #24
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  *address = value;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80033ee:	33f8      	adds	r3, #248	@ 0xf8
 80033f0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b41      	ldr	r3, [pc, #260]	@ (80034fc <JPEG_Set_Huff_DHTMem+0x458>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	7bdb      	ldrb	r3, [r3, #15]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	7b92      	ldrb	r2, [r2, #14]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	3b04      	subs	r3, #4
 8003418:	623b      	str	r3, [r7, #32]
  index = 12;
 800341a:	230c      	movs	r3, #12
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800341e:	e01d      	b.n	800345c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	3301      	adds	r3, #1
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	440b      	add	r3, r1
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003434:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	3b01      	subs	r3, #1
 800343a:	69b9      	ldr	r1, [r7, #24]
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003440:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8003442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003444:	3a02      	subs	r2, #2
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800344a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	601a      	str	r2, [r3, #0]
    address--;
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	3b04      	subs	r3, #4
 8003454:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	3b04      	subs	r3, #4
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	2b03      	cmp	r3, #3
 8003460:	d8de      	bhi.n	8003420 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800346a:	33f8      	adds	r3, #248	@ 0xf8
 800346c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	7c5b      	ldrb	r3, [r3, #17]
 800347a:	061a      	lsls	r2, r3, #24
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	431a      	orrs	r2, r3
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	7c1b      	ldrb	r3, [r3, #16]
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003498:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800349c:	623b      	str	r3, [r7, #32]
  index = 160;
 800349e:	23a0      	movs	r3, #160	@ 0xa0
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80034a2:	e021      	b.n	80034e8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	3301      	adds	r3, #1
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	7c1b      	ldrb	r3, [r3, #16]
 80034ae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80034b0:	69b9      	ldr	r1, [r7, #24]
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	440b      	add	r3, r1
 80034b6:	3310      	adds	r3, #16
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80034bc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	3b01      	subs	r3, #1
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	440b      	add	r3, r1
 80034c6:	7c1b      	ldrb	r3, [r3, #16]
 80034c8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80034ca:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80034cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ce:	3a02      	subs	r2, #2
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	440a      	add	r2, r1
 80034d4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80034d6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	601a      	str	r2, [r3, #0]
    address--;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	3b04      	subs	r3, #4
 80034e0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	3b04      	subs	r3, #4
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d8da      	bhi.n	80034a4 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	372c      	adds	r7, #44	@ 0x2c
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	ffff0000 	.word	0xffff0000

08003500 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d108      	bne.n	8003532 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	e007      	b.n	8003542 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003580:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d108      	bne.n	80035c0 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80035be:	e00d      	b.n	80035dc <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d107      	bne.n	80035dc <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d125      	bne.n	8003648 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01e      	beq.n	8003648 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff f841 	bl	8002698 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fbc2 	bl	8000dac <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003662:	2108      	movs	r1, #8
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f988 	bl	800397a <JPEG_ReadInputData>
 800366a:	e00a      	b.n	8003682 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800367a:	2101      	movs	r1, #1
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f97c 	bl	800397a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800369c:	2108      	movs	r1, #8
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f864 	bl	800376c <JPEG_StoreOutputData>
 80036a4:	e00a      	b.n	80036bc <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80036b4:	2101      	movs	r1, #1
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f858 	bl	800376c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d14b      	bne.n	8003762 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d107      	bne.n	80036f6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69d9      	ldr	r1, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	461a      	mov	r2, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fd fc05 	bl	8000f28 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d103      	bne.n	8003758 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd fc15 	bl	8000f80 <HAL_JPEG_DecodeCpltCallback>
 8003756:	e002      	b.n	800375e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff f936 	bl	80029ca <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	429a      	cmp	r2, r3
 8003786:	d34b      	bcc.n	8003820 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e031      	b.n	80037f2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003794:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	4413      	add	r3, r2
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	0a19      	lsrs	r1, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	3301      	adds	r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	b2ca      	uxtb	r2, r1
 80037b8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0c19      	lsrs	r1, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	3302      	adds	r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	b2ca      	uxtb	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	0e19      	lsrs	r1, r3, #24
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	3303      	adds	r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	b2ca      	uxtb	r2, r1
 80037e0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d3c9      	bcc.n	800378e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	429a      	cmp	r2, r3
 8003804:	f040 80b5 	bne.w	8003972 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	461a      	mov	r2, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fb88 	bl	8000f28 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800381e:	e0a8      	b.n	8003972 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	429a      	cmp	r2, r3
 800382a:	f240 80a2 	bls.w	8003972 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e031      	b.n	80038a6 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	4413      	add	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	0a19      	lsrs	r1, r3, #8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	3301      	adds	r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	b2ca      	uxtb	r2, r1
 800386c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0c19      	lsrs	r1, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	3302      	adds	r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	b2ca      	uxtb	r2, r1
 8003880:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0e19      	lsrs	r1, r3, #24
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	3303      	adds	r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3c9      	bcc.n	8003842 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d10b      	bne.n	80038d2 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69d9      	ldr	r1, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	461a      	mov	r2, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fd fb2f 	bl	8000f28 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038d0:	e04f      	b.n	8003972 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e015      	b.n	8003918 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	fa22 f103 	lsr.w	r1, r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	4413      	add	r3, r2
 8003904:	b2ca      	uxtb	r2, r1
 8003906:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3301      	adds	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d3e5      	bcc.n	80038ec <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	461a      	mov	r2, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fafc 	bl	8000f28 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f1c3 0304 	rsb	r3, r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e013      	b.n	800396c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	fa22 f103 	lsr.w	r1, r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	4413      	add	r3, r2
 8003958:	b2ca      	uxtb	r2, r1
 800395a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d9e8      	bls.n	8003944 <JPEG_StoreOutputData+0x1d8>
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b088      	sub	sp, #32
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <JPEG_ReadInputData+0x1c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8003996:	2101      	movs	r1, #1
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fe ff9a 	bl	80028d2 <HAL_JPEG_Pause>
 800399e:	e028      	b.n	80039f2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d906      	bls.n	80039ba <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	e01b      	b.n	80039f2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d115      	bne.n	80039f2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd fa67 	bl	8000ea0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d905      	bls.n	80039e6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 809f 	bne.w	8003b3e <JPEG_ReadInputData+0x1c4>
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 809b 	beq.w	8003b3e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d335      	bcc.n	8003a82 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e02d      	b.n	8003a78 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4413      	add	r3, r2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3301      	adds	r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a3c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6999      	ldr	r1, [r3, #24]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3302      	adds	r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003a4e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3303      	adds	r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003a64:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a66:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3301      	adds	r3, #1
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d3cd      	bcc.n	8003a1c <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8003a80:	e05d      	b.n	8003b3e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d035      	beq.n	8003af4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e02d      	b.n	8003aea <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003aae:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3302      	adds	r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003ac0:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3303      	adds	r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003ad6:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003ad8:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d3cd      	bcc.n	8003a8e <JPEG_ReadInputData+0x114>
}
 8003af2:	e024      	b.n	8003b3e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e017      	b.n	8003b2e <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d3e3      	bcc.n	8003afe <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003b3e:	bf00      	nop
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b08b      	sub	sp, #44	@ 0x2c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3350      	adds	r3, #80	@ 0x50
 8003b5a:	61bb      	str	r3, [r7, #24]

  i = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003b60:	e042      	b.n	8003be8 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	e033      	b.n	8003bd6 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d103      	bne.n	8003b8a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	3364      	adds	r3, #100	@ 0x64
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	e022      	b.n	8003bd0 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2264      	movs	r2, #100	@ 0x64
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b96:	6a38      	ldr	r0, [r7, #32]
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	4401      	add	r1, r0
 8003b9c:	4818      	ldr	r0, [pc, #96]	@ (8003c00 <JPEG_GetQuality+0xb8>)
 8003b9e:	5c41      	ldrb	r1, [r0, r1]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b64      	cmp	r3, #100	@ 0x64
 8003bae:	d807      	bhi.n	8003bc0 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bba:	4413      	add	r3, r2
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e007      	b.n	8003bd0 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bcc:	4413      	add	r3, r2
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d9c8      	bls.n	8003b6e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	3304      	adds	r3, #4
 8003be0:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	3304      	adds	r3, #4
 8003be6:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	2b3c      	cmp	r3, #60	@ 0x3c
 8003bec:	d9b9      	bls.n	8003b62 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	099b      	lsrs	r3, r3, #6
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	372c      	adds	r7, #44	@ 0x2c
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	0800ec14 	.word	0x0800ec14

08003c04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c0c:	4b29      	ldr	r3, [pc, #164]	@ (8003cb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d00a      	beq.n	8003c2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c18:	4b26      	ldr	r3, [pc, #152]	@ (8003cb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e040      	b.n	8003cac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e03e      	b.n	8003cac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c2e:	4b21      	ldr	r3, [pc, #132]	@ (8003cb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003c36:	491f      	ldr	r1, [pc, #124]	@ (8003cb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c3e:	f7fe f83b 	bl	8001cb8 <HAL_GetTick>
 8003c42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c44:	e009      	b.n	8003c5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c46:	f7fe f837 	bl	8001cb8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c54:	d901      	bls.n	8003c5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e028      	b.n	8003cac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c5a:	4b16      	ldr	r3, [pc, #88]	@ (8003cb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c66:	d1ee      	bne.n	8003c46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b1e      	cmp	r3, #30
 8003c6c:	d008      	beq.n	8003c80 <HAL_PWREx_ConfigSupply+0x7c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c72:	d005      	beq.n	8003c80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b1d      	cmp	r3, #29
 8003c78:	d002      	beq.n	8003c80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b2d      	cmp	r3, #45	@ 0x2d
 8003c7e:	d114      	bne.n	8003caa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003c80:	f7fe f81a 	bl	8001cb8 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c86:	e009      	b.n	8003c9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c88:	f7fe f816 	bl	8001cb8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c96:	d901      	bls.n	8003c9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e007      	b.n	8003cac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c9c:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	58024800 	.word	0x58024800

08003cb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	@ 0x30
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f000 bc48 	b.w	800455c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8088 	beq.w	8003dea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cda:	4b99      	ldr	r3, [pc, #612]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ce4:	4b96      	ldr	r3, [pc, #600]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d007      	beq.n	8003d00 <HAL_RCC_OscConfig+0x48>
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf2:	2b18      	cmp	r3, #24
 8003cf4:	d111      	bne.n	8003d1a <HAL_RCC_OscConfig+0x62>
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d10c      	bne.n	8003d1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	4b8f      	ldr	r3, [pc, #572]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d06d      	beq.n	8003de8 <HAL_RCC_OscConfig+0x130>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d169      	bne.n	8003de8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f000 bc21 	b.w	800455c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x7a>
 8003d24:	4b86      	ldr	r3, [pc, #536]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a85      	ldr	r2, [pc, #532]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	e02e      	b.n	8003d90 <HAL_RCC_OscConfig+0xd8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x9c>
 8003d3a:	4b81      	ldr	r3, [pc, #516]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a80      	ldr	r2, [pc, #512]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b7e      	ldr	r3, [pc, #504]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e01d      	b.n	8003d90 <HAL_RCC_OscConfig+0xd8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0xc0>
 8003d5e:	4b78      	ldr	r3, [pc, #480]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a77      	ldr	r2, [pc, #476]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b75      	ldr	r3, [pc, #468]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a74      	ldr	r2, [pc, #464]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0xd8>
 8003d78:	4b71      	ldr	r3, [pc, #452]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a70      	ldr	r2, [pc, #448]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b6e      	ldr	r3, [pc, #440]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6d      	ldr	r2, [pc, #436]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d013      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd ff8e 	bl	8001cb8 <HAL_GetTick>
 8003d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fd ff8a 	bl	8001cb8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	@ 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e3d4      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003db2:	4b63      	ldr	r3, [pc, #396]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe8>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd ff7a 	bl	8001cb8 <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd ff76 	bl	8001cb8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	@ 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e3c0      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dda:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x110>
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80ca 	beq.w	8003f8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df8:	4b51      	ldr	r3, [pc, #324]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e02:	4b4f      	ldr	r3, [pc, #316]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_RCC_OscConfig+0x166>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2b18      	cmp	r3, #24
 8003e12:	d156      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x20a>
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d151      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e1e:	4b48      	ldr	r3, [pc, #288]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e392      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e36:	4b42      	ldr	r3, [pc, #264]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0219 	bic.w	r2, r3, #25
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	493f      	ldr	r1, [pc, #252]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd ff36 	bl	8001cb8 <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fd ff32 	bl	8001cb8 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e37c      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e62:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	f7fd ff53 	bl	8001d18 <HAL_GetREVID>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d817      	bhi.n	8003eac <HAL_RCC_OscConfig+0x1f4>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b40      	cmp	r3, #64	@ 0x40
 8003e82:	d108      	bne.n	8003e96 <HAL_RCC_OscConfig+0x1de>
 8003e84:	4b2e      	ldr	r3, [pc, #184]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e94:	e07a      	b.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	4926      	ldr	r1, [pc, #152]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eaa:	e06f      	b.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	4921      	ldr	r1, [pc, #132]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec0:	e064      	b.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d047      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eca:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0219 	bic.w	r2, r3, #25
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	491a      	ldr	r1, [pc, #104]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd feec 	bl	8001cb8 <HAL_GetTick>
 8003ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fee8 	bl	8001cb8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e332      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ef6:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	f7fd ff09 	bl	8001d18 <HAL_GetREVID>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d819      	bhi.n	8003f44 <HAL_RCC_OscConfig+0x28c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b40      	cmp	r3, #64	@ 0x40
 8003f16:	d108      	bne.n	8003f2a <HAL_RCC_OscConfig+0x272>
 8003f18:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f20:	4a07      	ldr	r2, [pc, #28]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f26:	6053      	str	r3, [r2, #4]
 8003f28:	e030      	b.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	031b      	lsls	r3, r3, #12
 8003f38:	4901      	ldr	r1, [pc, #4]	@ (8003f40 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
 8003f3e:	e025      	b.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
 8003f40:	58024400 	.word	0x58024400
 8003f44:	4b9a      	ldr	r3, [pc, #616]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	4997      	ldr	r1, [pc, #604]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
 8003f58:	e018      	b.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5a:	4b95      	ldr	r3, [pc, #596]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a94      	ldr	r2, [pc, #592]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fd fea7 	bl	8001cb8 <HAL_GetTick>
 8003f6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6e:	f7fd fea3 	bl	8001cb8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e2ed      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f80:	4b8b      	ldr	r3, [pc, #556]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a9 	beq.w	80040ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9a:	4b85      	ldr	r3, [pc, #532]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fa2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fa4:	4b82      	ldr	r3, [pc, #520]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d007      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x308>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b18      	cmp	r3, #24
 8003fb4:	d13a      	bne.n	800402c <HAL_RCC_OscConfig+0x374>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d135      	bne.n	800402c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x320>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	2b80      	cmp	r3, #128	@ 0x80
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e2c1      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fd8:	f7fd fe9e 	bl	8001d18 <HAL_GetREVID>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d817      	bhi.n	8004016 <HAL_RCC_OscConfig+0x35e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d108      	bne.n	8004000 <HAL_RCC_OscConfig+0x348>
 8003fee:	4b70      	ldr	r3, [pc, #448]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8003ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ffc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ffe:	e075      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004000:	4b6b      	ldr	r3, [pc, #428]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	069b      	lsls	r3, r3, #26
 800400e:	4968      	ldr	r1, [pc, #416]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004014:	e06a      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004016:	4b66      	ldr	r3, [pc, #408]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4962      	ldr	r1, [pc, #392]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800402a:	e05f      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d042      	beq.n	80040ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004034:	4b5e      	ldr	r3, [pc, #376]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a5d      	ldr	r2, [pc, #372]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800403a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fe3a 	bl	8001cb8 <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004048:	f7fd fe36 	bl	8001cb8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e280      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800405a:	4b55      	ldr	r3, [pc, #340]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004066:	f7fd fe57 	bl	8001d18 <HAL_GetREVID>
 800406a:	4603      	mov	r3, r0
 800406c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004070:	4293      	cmp	r3, r2
 8004072:	d817      	bhi.n	80040a4 <HAL_RCC_OscConfig+0x3ec>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	2b20      	cmp	r3, #32
 800407a:	d108      	bne.n	800408e <HAL_RCC_OscConfig+0x3d6>
 800407c:	4b4c      	ldr	r3, [pc, #304]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004084:	4a4a      	ldr	r2, [pc, #296]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004086:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800408a:	6053      	str	r3, [r2, #4]
 800408c:	e02e      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
 800408e:	4b48      	ldr	r3, [pc, #288]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	069b      	lsls	r3, r3, #26
 800409c:	4944      	ldr	r1, [pc, #272]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
 80040a2:	e023      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
 80040a4:	4b42      	ldr	r3, [pc, #264]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	493f      	ldr	r1, [pc, #252]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
 80040b8:	e018      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040ba:	4b3d      	ldr	r3, [pc, #244]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3c      	ldr	r2, [pc, #240]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 80040c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd fdf7 	bl	8001cb8 <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040ce:	f7fd fdf3 	bl	8001cb8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e23d      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040e0:	4b33      	ldr	r3, [pc, #204]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d036      	beq.n	8004166 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d019      	beq.n	8004134 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004100:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004104:	4a2a      	ldr	r2, [pc, #168]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fdd4 	bl	8001cb8 <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd fdd0 	bl	8001cb8 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e21a      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004126:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x45c>
 8004132:	e018      	b.n	8004166 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fd fdba 	bl	8001cb8 <HAL_GetTick>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004148:	f7fd fdb6 	bl	8001cb8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e200      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800415a:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d039      	beq.n	80041e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800417a:	4b0d      	ldr	r3, [pc, #52]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a0c      	ldr	r2, [pc, #48]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004186:	f7fd fd97 	bl	8001cb8 <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800418e:	f7fd fd93 	bl	8001cb8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1dd      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x4d6>
 80041ac:	e01b      	b.n	80041e6 <HAL_RCC_OscConfig+0x52e>
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041b4:	4b9b      	ldr	r3, [pc, #620]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a9a      	ldr	r2, [pc, #616]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80041ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041c0:	f7fd fd7a 	bl	8001cb8 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c8:	f7fd fd76 	bl	8001cb8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1c0      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041da:	4b92      	ldr	r3, [pc, #584]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8081 	beq.w	80042f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004428 <HAL_RCC_OscConfig+0x770>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a8b      	ldr	r2, [pc, #556]	@ (8004428 <HAL_RCC_OscConfig+0x770>)
 80041fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004200:	f7fd fd5a 	bl	8001cb8 <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004208:	f7fd fd56 	bl	8001cb8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1a0      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421a:	4b83      	ldr	r3, [pc, #524]	@ (8004428 <HAL_RCC_OscConfig+0x770>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d106      	bne.n	800423c <HAL_RCC_OscConfig+0x584>
 800422e:	4b7d      	ldr	r3, [pc, #500]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004232:	4a7c      	ldr	r2, [pc, #496]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6713      	str	r3, [r2, #112]	@ 0x70
 800423a:	e02d      	b.n	8004298 <HAL_RCC_OscConfig+0x5e0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10c      	bne.n	800425e <HAL_RCC_OscConfig+0x5a6>
 8004244:	4b77      	ldr	r3, [pc, #476]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004248:	4a76      	ldr	r2, [pc, #472]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004250:	4b74      	ldr	r3, [pc, #464]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004254:	4a73      	ldr	r2, [pc, #460]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	@ 0x70
 800425c:	e01c      	b.n	8004298 <HAL_RCC_OscConfig+0x5e0>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x5c8>
 8004266:	4b6f      	ldr	r3, [pc, #444]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426a:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6713      	str	r3, [r2, #112]	@ 0x70
 8004272:	4b6c      	ldr	r3, [pc, #432]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	4a6b      	ldr	r2, [pc, #428]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6713      	str	r3, [r2, #112]	@ 0x70
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0x5e0>
 8004280:	4b68      	ldr	r3, [pc, #416]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004284:	4a67      	ldr	r2, [pc, #412]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	6713      	str	r3, [r2, #112]	@ 0x70
 800428c:	4b65      	ldr	r3, [pc, #404]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004290:	4a64      	ldr	r2, [pc, #400]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004292:	f023 0304 	bic.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fd fd0a 	bl	8001cb8 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fd fd06 	bl	8001cb8 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e14e      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042be:	4b59      	ldr	r3, [pc, #356]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <HAL_RCC_OscConfig+0x5f0>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd fcf4 	bl	8001cb8 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fd fcf0 	bl	8001cb8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e138      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ee      	bne.n	80042d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 812d 	beq.w	800455a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004300:	4b48      	ldr	r3, [pc, #288]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004308:	2b18      	cmp	r3, #24
 800430a:	f000 80bd 	beq.w	8004488 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	2b02      	cmp	r3, #2
 8004314:	f040 809e 	bne.w	8004454 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b42      	ldr	r3, [pc, #264]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a41      	ldr	r2, [pc, #260]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fcc8 	bl	8001cb8 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd fcc4 	bl	8001cb8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e10e      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800433e:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434a:	4b36      	ldr	r3, [pc, #216]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800434c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800434e:	4b37      	ldr	r3, [pc, #220]	@ (800442c <HAL_RCC_OscConfig+0x774>)
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	430a      	orrs	r2, r1
 800435e:	4931      	ldr	r1, [pc, #196]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	628b      	str	r3, [r1, #40]	@ 0x28
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	3b01      	subs	r3, #1
 800436a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004372:	3b01      	subs	r3, #1
 8004374:	025b      	lsls	r3, r3, #9
 8004376:	b29b      	uxth	r3, r3
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	3b01      	subs	r3, #1
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438c:	3b01      	subs	r3, #1
 800438e:	061b      	lsls	r3, r3, #24
 8004390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004394:	4923      	ldr	r1, [pc, #140]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004396:	4313      	orrs	r3, r2
 8004398:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800439a:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	4a21      	ldr	r2, [pc, #132]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_RCC_OscConfig+0x778>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043b2:	00d2      	lsls	r2, r2, #3
 80043b4:	491b      	ldr	r1, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	f023 020c 	bic.w	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	4917      	ldr	r1, [pc, #92]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043cc:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	f023 0202 	bic.w	r2, r3, #2
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d8:	4912      	ldr	r1, [pc, #72]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043de:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	4a10      	ldr	r2, [pc, #64]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004402:	4b08      	ldr	r3, [pc, #32]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	4a07      	ldr	r2, [pc, #28]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440e:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <HAL_RCC_OscConfig+0x76c>)
 8004414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fd fc4d 	bl	8001cb8 <HAL_GetTick>
 800441e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004420:	e011      	b.n	8004446 <HAL_RCC_OscConfig+0x78e>
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
 8004428:	58024800 	.word	0x58024800
 800442c:	fffffc0c 	.word	0xfffffc0c
 8004430:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fc40 	bl	8001cb8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e08a      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004446:	4b47      	ldr	r3, [pc, #284]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x77c>
 8004452:	e082      	b.n	800455a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004454:	4b43      	ldr	r3, [pc, #268]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a42      	ldr	r2, [pc, #264]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 800445a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fc2a 	bl	8001cb8 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fc26 	bl	8001cb8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e070      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800447a:	4b3a      	ldr	r3, [pc, #232]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x7b0>
 8004486:	e068      	b.n	800455a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004488:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800448e:	4b35      	ldr	r3, [pc, #212]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	2b01      	cmp	r3, #1
 800449a:	d031      	beq.n	8004500 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d12a      	bne.n	8004500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d122      	bne.n	8004500 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d11a      	bne.n	8004500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	0a5b      	lsrs	r3, r3, #9
 80044ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d111      	bne.n	8004500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d108      	bne.n	8004500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0e1b      	lsrs	r3, r3, #24
 80044f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e02b      	b.n	800455c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004504:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800450e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d01f      	beq.n	800455a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800451a:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004526:	f7fd fbc7 	bl	8001cb8 <HAL_GetTick>
 800452a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800452c:	bf00      	nop
 800452e:	f7fd fbc3 	bl	8001cb8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	4293      	cmp	r3, r2
 8004538:	d0f9      	beq.n	800452e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800453a:	4b0a      	ldr	r3, [pc, #40]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 800453c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453e:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <HAL_RCC_OscConfig+0x8b0>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004546:	00d2      	lsls	r2, r2, #3
 8004548:	4906      	ldr	r1, [pc, #24]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 800454a:	4313      	orrs	r3, r2
 800454c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800454e:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	4a04      	ldr	r2, [pc, #16]	@ (8004564 <HAL_RCC_OscConfig+0x8ac>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3730      	adds	r7, #48	@ 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	58024400 	.word	0x58024400
 8004568:	ffff0007 	.word	0xffff0007

0800456c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e19c      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b8a      	ldr	r3, [pc, #552]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d910      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b87      	ldr	r3, [pc, #540]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 020f 	bic.w	r2, r3, #15
 8004596:	4985      	ldr	r1, [pc, #532]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b83      	ldr	r3, [pc, #524]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e184      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	4b7b      	ldr	r3, [pc, #492]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d908      	bls.n	80045de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045cc:	4b78      	ldr	r3, [pc, #480]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4975      	ldr	r1, [pc, #468]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	4b70      	ldr	r3, [pc, #448]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d908      	bls.n	800460c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045fa:	4b6d      	ldr	r3, [pc, #436]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	496a      	ldr	r1, [pc, #424]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004608:	4313      	orrs	r3, r2
 800460a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	4b64      	ldr	r3, [pc, #400]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004624:	429a      	cmp	r2, r3
 8004626:	d908      	bls.n	800463a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004628:	4b61      	ldr	r3, [pc, #388]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	495e      	ldr	r1, [pc, #376]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004636:	4313      	orrs	r3, r2
 8004638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	4b59      	ldr	r3, [pc, #356]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004652:	429a      	cmp	r2, r3
 8004654:	d908      	bls.n	8004668 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004656:	4b56      	ldr	r3, [pc, #344]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4953      	ldr	r1, [pc, #332]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004664:	4313      	orrs	r3, r2
 8004666:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d010      	beq.n	8004696 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	4b4d      	ldr	r3, [pc, #308]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	429a      	cmp	r2, r3
 8004682:	d908      	bls.n	8004696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b4a      	ldr	r3, [pc, #296]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f023 020f 	bic.w	r2, r3, #15
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4947      	ldr	r1, [pc, #284]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004692:	4313      	orrs	r3, r2
 8004694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d055      	beq.n	800474e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046a2:	4b43      	ldr	r3, [pc, #268]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4940      	ldr	r1, [pc, #256]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046bc:	4b3c      	ldr	r3, [pc, #240]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d121      	bne.n	800470c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0f6      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d4:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d115      	bne.n	800470c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0ea      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046ec:	4b30      	ldr	r3, [pc, #192]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0de      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046fc:	4b2c      	ldr	r3, [pc, #176]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0d6      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800470c:	4b28      	ldr	r3, [pc, #160]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f023 0207 	bic.w	r2, r3, #7
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4925      	ldr	r1, [pc, #148]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471e:	f7fd facb 	bl	8001cb8 <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004724:	e00a      	b.n	800473c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004726:	f7fd fac7 	bl	8001cb8 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0be      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473c:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	429a      	cmp	r2, r3
 800474c:	d1eb      	bne.n	8004726 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d010      	beq.n	800477c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	429a      	cmp	r2, r3
 8004768:	d208      	bcs.n	800477c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476a:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f023 020f 	bic.w	r2, r3, #15
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	490e      	ldr	r1, [pc, #56]	@ (80047b0 <HAL_RCC_ClockConfig+0x244>)
 8004778:	4313      	orrs	r3, r2
 800477a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d214      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 020f 	bic.w	r2, r3, #15
 8004792:	4906      	ldr	r1, [pc, #24]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <HAL_RCC_ClockConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e086      	b.n	80048ba <HAL_RCC_ClockConfig+0x34e>
 80047ac:	52002000 	.word	0x52002000
 80047b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d010      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	4b3f      	ldr	r3, [pc, #252]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d208      	bcs.n	80047e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047d0:	4b3c      	ldr	r3, [pc, #240]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	4939      	ldr	r1, [pc, #228]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d010      	beq.n	8004810 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	4b34      	ldr	r3, [pc, #208]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d208      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047fe:	4b31      	ldr	r3, [pc, #196]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	492e      	ldr	r1, [pc, #184]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 800480c:	4313      	orrs	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004828:	429a      	cmp	r2, r3
 800482a:	d208      	bcs.n	800483e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	4922      	ldr	r1, [pc, #136]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 800483a:	4313      	orrs	r3, r2
 800483c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d010      	beq.n	800486c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004856:	429a      	cmp	r2, r3
 8004858:	d208      	bcs.n	800486c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800485a:	4b1a      	ldr	r3, [pc, #104]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4917      	ldr	r1, [pc, #92]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 8004868:	4313      	orrs	r3, r2
 800486a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800486c:	f000 f89e 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	4912      	ldr	r1, [pc, #72]	@ (80048c8 <HAL_RCC_ClockConfig+0x35c>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800488a:	4b0e      	ldr	r3, [pc, #56]	@ (80048c4 <HAL_RCC_ClockConfig+0x358>)
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	4a0d      	ldr	r2, [pc, #52]	@ (80048c8 <HAL_RCC_ClockConfig+0x35c>)
 8004894:	5cd3      	ldrb	r3, [r2, r3]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	4a0a      	ldr	r2, [pc, #40]	@ (80048cc <HAL_RCC_ClockConfig+0x360>)
 80048a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a4:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <HAL_RCC_ClockConfig+0x364>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <HAL_RCC_ClockConfig+0x368>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd f9b8 	bl	8001c24 <HAL_InitTick>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400
 80048c8:	0800ea64 	.word	0x0800ea64
 80048cc:	24000004 	.word	0x24000004
 80048d0:	24000000 	.word	0x24000000
 80048d4:	24000010 	.word	0x24000010

080048d8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	@ 0x30
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12a      	bne.n	8004940 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80048ea:	4b2d      	ldr	r3, [pc, #180]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 80048ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048f0:	4a2b      	ldr	r2, [pc, #172]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048fa:	4b29      	ldr	r3, [pc, #164]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 80048fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800490c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490e:	2302      	movs	r3, #2
 8004910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004912:	2303      	movs	r3, #3
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800491a:	2300      	movs	r3, #0
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800491e:	f107 031c 	add.w	r3, r7, #28
 8004922:	4619      	mov	r1, r3
 8004924:	481f      	ldr	r0, [pc, #124]	@ (80049a4 <HAL_RCC_MCOConfig+0xcc>)
 8004926:	f7fd fc25 	bl	8002174 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800492a:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	430b      	orrs	r3, r1
 8004938:	4919      	ldr	r1, [pc, #100]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800493e:	e02a      	b.n	8004996 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004940:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 8004942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004946:	4a16      	ldr	r2, [pc, #88]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004950:	4b13      	ldr	r3, [pc, #76]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 8004952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800495e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004964:	2302      	movs	r3, #2
 8004966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004968:	2303      	movs	r3, #3
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004970:	2300      	movs	r3, #0
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4619      	mov	r1, r3
 800497a:	480b      	ldr	r0, [pc, #44]	@ (80049a8 <HAL_RCC_MCOConfig+0xd0>)
 800497c:	f7fd fbfa 	bl	8002174 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	01d9      	lsls	r1, r3, #7
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	430b      	orrs	r3, r1
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <HAL_RCC_MCOConfig+0xc8>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
}
 8004996:	bf00      	nop
 8004998:	3730      	adds	r7, #48	@ 0x30
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400
 80049a4:	58020000 	.word	0x58020000
 80049a8:	58020800 	.word	0x58020800

080049ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	@ 0x24
 80049b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b2:	4bb3      	ldr	r3, [pc, #716]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ba:	2b18      	cmp	r3, #24
 80049bc:	f200 8155 	bhi.w	8004c6a <HAL_RCC_GetSysClockFreq+0x2be>
 80049c0:	a201      	add	r2, pc, #4	@ (adr r2, 80049c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004c6b 	.word	0x08004c6b
 80049d0:	08004c6b 	.word	0x08004c6b
 80049d4:	08004c6b 	.word	0x08004c6b
 80049d8:	08004c6b 	.word	0x08004c6b
 80049dc:	08004c6b 	.word	0x08004c6b
 80049e0:	08004c6b 	.word	0x08004c6b
 80049e4:	08004c6b 	.word	0x08004c6b
 80049e8:	08004a53 	.word	0x08004a53
 80049ec:	08004c6b 	.word	0x08004c6b
 80049f0:	08004c6b 	.word	0x08004c6b
 80049f4:	08004c6b 	.word	0x08004c6b
 80049f8:	08004c6b 	.word	0x08004c6b
 80049fc:	08004c6b 	.word	0x08004c6b
 8004a00:	08004c6b 	.word	0x08004c6b
 8004a04:	08004c6b 	.word	0x08004c6b
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	08004c6b 	.word	0x08004c6b
 8004a10:	08004c6b 	.word	0x08004c6b
 8004a14:	08004c6b 	.word	0x08004c6b
 8004a18:	08004c6b 	.word	0x08004c6b
 8004a1c:	08004c6b 	.word	0x08004c6b
 8004a20:	08004c6b 	.word	0x08004c6b
 8004a24:	08004c6b 	.word	0x08004c6b
 8004a28:	08004a5f 	.word	0x08004a5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2c:	4b94      	ldr	r3, [pc, #592]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a38:	4b91      	ldr	r3, [pc, #580]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	4a90      	ldr	r2, [pc, #576]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a4a:	e111      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a4c:	4b8d      	ldr	r3, [pc, #564]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a4e:	61bb      	str	r3, [r7, #24]
      break;
 8004a50:	e10e      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a52:	4b8d      	ldr	r3, [pc, #564]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a54:	61bb      	str	r3, [r7, #24]
      break;
 8004a56:	e10b      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a58:	4b8c      	ldr	r3, [pc, #560]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a5a:	61bb      	str	r3, [r7, #24]
      break;
 8004a5c:	e108      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a5e:	4b88      	ldr	r3, [pc, #544]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a68:	4b85      	ldr	r3, [pc, #532]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a74:	4b82      	ldr	r3, [pc, #520]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a7e:	4b80      	ldr	r3, [pc, #512]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80e1 	beq.w	8004c64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f000 8083 	beq.w	8004bb0 <HAL_RCC_GetSysClockFreq+0x204>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	f200 80a1 	bhi.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x114>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d056      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004abe:	e099      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02d      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004acc:	4b6c      	ldr	r3, [pc, #432]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b62      	ldr	r3, [pc, #392]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b26:	e087      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004c94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b51      	ldr	r3, [pc, #324]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b6a:	e065      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b40      	ldr	r3, [pc, #256]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bae:	e043      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bf2:	e021      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c38:	4b11      	ldr	r3, [pc, #68]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c42:	3301      	adds	r3, #1
 8004c44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5c:	ee17 3a90 	vmov	r3, s15
 8004c60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c6a:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c6c:	61bb      	str	r3, [r7, #24]
      break;
 8004c6e:	bf00      	nop
  }

  return sysclockfreq;
 8004c70:	69bb      	ldr	r3, [r7, #24]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3724      	adds	r7, #36	@ 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400
 8004c84:	03d09000 	.word	0x03d09000
 8004c88:	003d0900 	.word	0x003d0900
 8004c8c:	017d7840 	.word	0x017d7840
 8004c90:	46000000 	.word	0x46000000
 8004c94:	4c742400 	.word	0x4c742400
 8004c98:	4a742400 	.word	0x4a742400
 8004c9c:	4bbebc20 	.word	0x4bbebc20

08004ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ca6:	f7ff fe81 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	490f      	ldr	r1, [pc, #60]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cb8:	5ccb      	ldrb	r3, [r1, r3]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cce:	5cd3      	ldrb	r3, [r2, r3]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a07      	ldr	r2, [pc, #28]	@ (8004cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cde:	4a07      	ldr	r2, [pc, #28]	@ (8004cfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ce4:	4b04      	ldr	r3, [pc, #16]	@ (8004cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	0800ea64 	.word	0x0800ea64
 8004cf8:	24000004 	.word	0x24000004
 8004cfc:	24000000 	.word	0x24000000

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d04:	f7ff ffcc 	bl	8004ca0 <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	58024400 	.word	0x58024400
 8004d28:	0800ea64 	.word	0x0800ea64

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d30:	f7ff ffb6 	bl	8004ca0 <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4904      	ldr	r1, [pc, #16]	@ (8004d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	58024400 	.word	0x58024400
 8004d54:	0800ea64 	.word	0x0800ea64

08004d58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b0cc      	sub	sp, #304	@ 0x130
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	ea54 0305 	orrs.w	r3, r4, r5
 8004d82:	d049      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d8e:	d02f      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d94:	d828      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d9a:	d01a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004da0:	d822      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004daa:	d007      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dac:	e01c      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dae:	4bb8      	ldr	r3, [pc, #736]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	4ab7      	ldr	r2, [pc, #732]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dba:	e01a      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f002 fba1 	bl	800750c <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dd0:	e00f      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dd6:	3328      	adds	r3, #40	@ 0x28
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f002 fc48 	bl	8007670 <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004de6:	e004      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004dee:	e000      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dfa:	4ba5      	ldr	r3, [pc, #660]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e08:	4aa1      	ldr	r2, [pc, #644]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e0e:	e003      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e14:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e24:	f04f 0900 	mov.w	r9, #0
 8004e28:	ea58 0309 	orrs.w	r3, r8, r9
 8004e2c:	d047      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d82a      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e38:	a201      	add	r2, pc, #4	@ (adr r2, 8004e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e55 	.word	0x08004e55
 8004e44:	08004e63 	.word	0x08004e63
 8004e48:	08004e79 	.word	0x08004e79
 8004e4c:	08004e97 	.word	0x08004e97
 8004e50:	08004e97 	.word	0x08004e97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e54:	4b8e      	ldr	r3, [pc, #568]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	4a8d      	ldr	r2, [pc, #564]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e60:	e01a      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e66:	3308      	adds	r3, #8
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f002 fb4e 	bl	800750c <RCCEx_PLL2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e76:	e00f      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e7c:	3328      	adds	r3, #40	@ 0x28
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f002 fbf5 	bl	8007670 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e8c:	e004      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea0:	4b7b      	ldr	r3, [pc, #492]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea4:	f023 0107 	bic.w	r1, r3, #7
 8004ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eae:	4a78      	ldr	r2, [pc, #480]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eb4:	e003      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004eba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004eca:	f04f 0b00 	mov.w	fp, #0
 8004ece:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ed2:	d04c      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ede:	d030      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee4:	d829      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ee8:	d02d      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eec:	d825      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d018      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d821      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d007      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004efe:	e01c      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f00:	4b63      	ldr	r3, [pc, #396]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	4a62      	ldr	r2, [pc, #392]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f0c:	e01c      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f12:	3308      	adds	r3, #8
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f002 faf8 	bl	800750c <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f22:	e011      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f28:	3328      	adds	r3, #40	@ 0x28
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f002 fb9f 	bl	8007670 <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f38:	e006      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f50:	4b4f      	ldr	r3, [pc, #316]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f54:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004f84:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	d053      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f9a:	d035      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fa0:	d82e      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fa2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fa6:	d031      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004fa8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fac:	d828      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb2:	d01a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb8:	d822      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004fbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fc2:	d007      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004fc4:	e01c      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc6:	4b32      	ldr	r3, [pc, #200]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	4a31      	ldr	r2, [pc, #196]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fd2:	e01c      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f002 fa95 	bl	800750c <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fe8:	e011      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fee:	3328      	adds	r3, #40	@ 0x28
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 fb3c 	bl	8007670 <RCCEx_PLL3_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ffe:	e006      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005006:	e002      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800500c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005016:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800501e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005026:	4a1a      	ldr	r2, [pc, #104]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005028:	430b      	orrs	r3, r1
 800502a:	6593      	str	r3, [r2, #88]	@ 0x58
 800502c:	e003      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005032:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005042:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005046:	2300      	movs	r3, #0
 8005048:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800504c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005050:	460b      	mov	r3, r1
 8005052:	4313      	orrs	r3, r2
 8005054:	d056      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800505a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800505e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005062:	d038      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005064:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005068:	d831      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800506a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800506e:	d034      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005070:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005074:	d82b      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800507a:	d01d      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800507c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005080:	d825      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800508c:	e01f      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005094:	4ba2      	ldr	r3, [pc, #648]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4aa1      	ldr	r2, [pc, #644]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800509a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800509e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050a0:	e01c      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050a6:	3308      	adds	r3, #8
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 fa2e 	bl	800750c <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050b6:	e011      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050bc:	3328      	adds	r3, #40	@ 0x28
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f002 fad5 	bl	8007670 <RCCEx_PLL3_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050f4:	4a8a      	ldr	r2, [pc, #552]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fa:	e003      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005100:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005110:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800511a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d03a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512a:	2b30      	cmp	r3, #48	@ 0x30
 800512c:	d01f      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800512e:	2b30      	cmp	r3, #48	@ 0x30
 8005130:	d819      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005132:	2b20      	cmp	r3, #32
 8005134:	d00c      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005136:	2b20      	cmp	r3, #32
 8005138:	d815      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d019      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800513e:	2b10      	cmp	r3, #16
 8005140:	d111      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005142:	4b77      	ldr	r3, [pc, #476]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	4a76      	ldr	r2, [pc, #472]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800514e:	e011      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005154:	3308      	adds	r3, #8
 8005156:	2102      	movs	r1, #2
 8005158:	4618      	mov	r0, r3
 800515a:	f002 f9d7 	bl	800750c <RCCEx_PLL2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005174:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800517c:	4b68      	ldr	r3, [pc, #416]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518a:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800518c:	430b      	orrs	r3, r1
 800518e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005190:	e003      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005192:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005196:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800519a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051aa:	2300      	movs	r3, #0
 80051ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051b0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051b4:	460b      	mov	r3, r1
 80051b6:	4313      	orrs	r3, r2
 80051b8:	d051      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051c4:	d035      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ca:	d82e      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051d0:	d031      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051d6:	d828      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051dc:	d01a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e2:	d822      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ec:	d007      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051ee:	e01c      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051fc:	e01c      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005202:	3308      	adds	r3, #8
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f002 f980 	bl	800750c <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005212:	e011      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005218:	3328      	adds	r3, #40	@ 0x28
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f002 fa27 	bl	8007670 <RCCEx_PLL3_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005228:	e006      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005238:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005240:	4b37      	ldr	r3, [pc, #220]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005244:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800524c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800524e:	4a34      	ldr	r2, [pc, #208]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005250:	430b      	orrs	r3, r1
 8005252:	6513      	str	r3, [r2, #80]	@ 0x50
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800525a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800525e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800526a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800526e:	2300      	movs	r3, #0
 8005270:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005274:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	d056      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800527e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005288:	d033      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800528a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800528e:	d82c      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005290:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005294:	d02f      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005296:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800529a:	d826      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800529c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052a0:	d02b      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80052a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052a6:	d820      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ac:	d012      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80052ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b2:	d81a      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d022      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052bc:	d115      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c2:	3308      	adds	r3, #8
 80052c4:	2101      	movs	r1, #1
 80052c6:	4618      	mov	r0, r3
 80052c8:	f002 f920 	bl	800750c <RCCEx_PLL2_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052d2:	e015      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052d8:	3328      	adds	r3, #40	@ 0x28
 80052da:	2101      	movs	r1, #1
 80052dc:	4618      	mov	r0, r3
 80052de:	f002 f9c7 	bl	8007670 <RCCEx_PLL3_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052e8:	e00a      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052f0:	e006      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052f2:	bf00      	nop
 80052f4:	e004      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052f6:	bf00      	nop
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005300:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005308:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005316:	4a02      	ldr	r2, [pc, #8]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6513      	str	r3, [r2, #80]	@ 0x50
 800531c:	e006      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800531e:	bf00      	nop
 8005320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005328:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800532c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005338:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800533c:	2300      	movs	r3, #0
 800533e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005342:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005346:	460b      	mov	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	d055      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800534c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005350:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005358:	d033      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800535a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800535e:	d82c      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005364:	d02f      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536a:	d826      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800536c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005370:	d02b      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005372:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005376:	d820      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800537c:	d012      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800537e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005382:	d81a      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d022      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800538c:	d115      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800538e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005392:	3308      	adds	r3, #8
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f002 f8b8 	bl	800750c <RCCEx_PLL2_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053a2:	e015      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053a8:	3328      	adds	r3, #40	@ 0x28
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f002 f95f 	bl	8007670 <RCCEx_PLL3_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053b8:	e00a      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053c0:	e006      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053c2:	bf00      	nop
 80053c4:	e004      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053c6:	bf00      	nop
 80053c8:	e002      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053d8:	4bb6      	ldr	r3, [pc, #728]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053e8:	4ab2      	ldr	r2, [pc, #712]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ee:	e003      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80053f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800540e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d02a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800541e:	2b00      	cmp	r3, #0
 8005420:	d011      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005426:	d10a      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800542c:	3308      	adds	r3, #8
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f002 f86b 	bl	800750c <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800543c:	e004      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005444:	e000      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005450:	4b98      	ldr	r3, [pc, #608]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005454:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800545c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545e:	4a95      	ldr	r2, [pc, #596]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005460:	430b      	orrs	r3, r1
 8005462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800546a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800546e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800547a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800547e:	2300      	movs	r3, #0
 8005480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005484:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005488:	460b      	mov	r3, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	d037      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800548e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005498:	d00e      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800549a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800549e:	d816      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d018      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80054a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054a8:	d111      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054aa:	4b82      	ldr	r3, [pc, #520]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	4a81      	ldr	r2, [pc, #516]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054b6:	e00f      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054bc:	3308      	adds	r3, #8
 80054be:	2101      	movs	r1, #1
 80054c0:	4618      	mov	r0, r3
 80054c2:	f002 f823 	bl	800750c <RCCEx_PLL2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054cc:	e004      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80054d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054e0:	4b74      	ldr	r3, [pc, #464]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	4a71      	ldr	r2, [pc, #452]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80054f4:	e003      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800550a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005514:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005518:	460b      	mov	r3, r1
 800551a:	4313      	orrs	r3, r2
 800551c:	d03a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800551e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005524:	2b03      	cmp	r3, #3
 8005526:	d81d      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005528:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	0800556d 	.word	0x0800556d
 8005534:	08005541 	.word	0x08005541
 8005538:	0800554f 	.word	0x0800554f
 800553c:	0800556d 	.word	0x0800556d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005540:	4b5c      	ldr	r3, [pc, #368]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	4a5b      	ldr	r2, [pc, #364]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800554c:	e00f      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800554e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005552:	3308      	adds	r3, #8
 8005554:	2102      	movs	r1, #2
 8005556:	4618      	mov	r0, r3
 8005558:	f001 ffd8 	bl	800750c <RCCEx_PLL2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005562:	e004      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800556c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005576:	4b4f      	ldr	r3, [pc, #316]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557a:	f023 0103 	bic.w	r1, r3, #3
 800557e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005584:	4a4b      	ldr	r2, [pc, #300]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005586:	430b      	orrs	r3, r1
 8005588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800558a:	e003      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005590:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f000 80a0 	beq.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b6:	4b40      	ldr	r3, [pc, #256]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3f      	ldr	r2, [pc, #252]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055c2:	f7fc fb79 	bl	8001cb8 <HAL_GetTick>
 80055c6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ca:	e00b      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055cc:	f7fc fb74 	bl	8001cb8 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b64      	cmp	r3, #100	@ 0x64
 80055da:	d903      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e4:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ed      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80055f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d17a      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055f8:	4b2e      	ldr	r3, [pc, #184]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005604:	4053      	eors	r3, r2
 8005606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d015      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800560e:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005616:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800561a:	4b26      	ldr	r3, [pc, #152]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561e:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005624:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005626:	4b23      	ldr	r3, [pc, #140]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562a:	4a22      	ldr	r2, [pc, #136]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800562c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005630:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005632:	4a20      	ldr	r2, [pc, #128]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005634:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005638:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800563a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800563e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d118      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc fb36 	bl	8001cb8 <HAL_GetTick>
 800564c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005650:	e00d      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fc fb31 	bl	8001cb8 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005662:	429a      	cmp	r2, r3
 8005664:	d903      	bls.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800566c:	e005      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800566e:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0eb      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800567a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800567e:	2b00      	cmp	r3, #0
 8005680:	d130      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005686:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800568a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005692:	d115      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005694:	4b07      	ldr	r3, [pc, #28]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800569c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80056a4:	091a      	lsrs	r2, r3, #4
 80056a6:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	4a02      	ldr	r2, [pc, #8]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6113      	str	r3, [r2, #16]
 80056b0:	e00c      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	58024800 	.word	0x58024800
 80056bc:	00ffffcf 	.word	0x00ffffcf
 80056c0:	4bd4      	ldr	r3, [pc, #848]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4ad3      	ldr	r2, [pc, #844]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056ca:	6113      	str	r3, [r2, #16]
 80056cc:	4bd1      	ldr	r3, [pc, #836]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056ce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80056d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80056d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056dc:	4acd      	ldr	r2, [pc, #820]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056e2:	e008      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 0301 	and.w	r3, r2, #1
 8005702:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800570c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	f000 808b 	beq.w	800582e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800571c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005720:	2b28      	cmp	r3, #40	@ 0x28
 8005722:	d86b      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005724:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005805 	.word	0x08005805
 8005730:	080057fd 	.word	0x080057fd
 8005734:	080057fd 	.word	0x080057fd
 8005738:	080057fd 	.word	0x080057fd
 800573c:	080057fd 	.word	0x080057fd
 8005740:	080057fd 	.word	0x080057fd
 8005744:	080057fd 	.word	0x080057fd
 8005748:	080057fd 	.word	0x080057fd
 800574c:	080057d1 	.word	0x080057d1
 8005750:	080057fd 	.word	0x080057fd
 8005754:	080057fd 	.word	0x080057fd
 8005758:	080057fd 	.word	0x080057fd
 800575c:	080057fd 	.word	0x080057fd
 8005760:	080057fd 	.word	0x080057fd
 8005764:	080057fd 	.word	0x080057fd
 8005768:	080057fd 	.word	0x080057fd
 800576c:	080057e7 	.word	0x080057e7
 8005770:	080057fd 	.word	0x080057fd
 8005774:	080057fd 	.word	0x080057fd
 8005778:	080057fd 	.word	0x080057fd
 800577c:	080057fd 	.word	0x080057fd
 8005780:	080057fd 	.word	0x080057fd
 8005784:	080057fd 	.word	0x080057fd
 8005788:	080057fd 	.word	0x080057fd
 800578c:	08005805 	.word	0x08005805
 8005790:	080057fd 	.word	0x080057fd
 8005794:	080057fd 	.word	0x080057fd
 8005798:	080057fd 	.word	0x080057fd
 800579c:	080057fd 	.word	0x080057fd
 80057a0:	080057fd 	.word	0x080057fd
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005805 	.word	0x08005805
 80057b0:	080057fd 	.word	0x080057fd
 80057b4:	080057fd 	.word	0x080057fd
 80057b8:	080057fd 	.word	0x080057fd
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	080057fd 	.word	0x080057fd
 80057c4:	080057fd 	.word	0x080057fd
 80057c8:	080057fd 	.word	0x080057fd
 80057cc:	08005805 	.word	0x08005805
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057d4:	3308      	adds	r3, #8
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 fe97 	bl	800750c <RCCEx_PLL2_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057e4:	e00f      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ea:	3328      	adds	r3, #40	@ 0x28
 80057ec:	2101      	movs	r1, #1
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 ff3e 	bl	8007670 <RCCEx_PLL3_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057fa:	e004      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005802:	e000      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005806:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800580e:	4b81      	ldr	r3, [pc, #516]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005812:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005820:	430b      	orrs	r3, r1
 8005822:	6553      	str	r3, [r2, #84]	@ 0x54
 8005824:	e003      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005826:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800582a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800582e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f002 0302 	and.w	r3, r2, #2
 800583a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800583e:	2300      	movs	r3, #0
 8005840:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005844:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005848:	460b      	mov	r3, r1
 800584a:	4313      	orrs	r3, r2
 800584c:	d042      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800584e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005854:	2b05      	cmp	r3, #5
 8005856:	d825      	bhi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005858:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	080058ad 	.word	0x080058ad
 8005864:	08005879 	.word	0x08005879
 8005868:	0800588f 	.word	0x0800588f
 800586c:	080058ad 	.word	0x080058ad
 8005870:	080058ad 	.word	0x080058ad
 8005874:	080058ad 	.word	0x080058ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800587c:	3308      	adds	r3, #8
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fe43 	bl	800750c <RCCEx_PLL2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800588c:	e00f      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800588e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005892:	3328      	adds	r3, #40	@ 0x28
 8005894:	2101      	movs	r1, #1
 8005896:	4618      	mov	r0, r3
 8005898:	f001 feea 	bl	8007670 <RCCEx_PLL3_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058a2:	e004      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058aa:	e000      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80058ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058b6:	4b57      	ldr	r3, [pc, #348]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	f023 0107 	bic.w	r1, r3, #7
 80058be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c4:	4a53      	ldr	r2, [pc, #332]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058c6:	430b      	orrs	r3, r1
 80058c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80058ca:	e003      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f002 0304 	and.w	r3, r2, #4
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d044      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d825      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005900:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005955 	.word	0x08005955
 800590c:	08005921 	.word	0x08005921
 8005910:	08005937 	.word	0x08005937
 8005914:	08005955 	.word	0x08005955
 8005918:	08005955 	.word	0x08005955
 800591c:	08005955 	.word	0x08005955
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005920:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005924:	3308      	adds	r3, #8
 8005926:	2101      	movs	r1, #1
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fdef 	bl	800750c <RCCEx_PLL2_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005934:	e00f      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800593a:	3328      	adds	r3, #40	@ 0x28
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fe96 	bl	8007670 <RCCEx_PLL3_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800594a:	e004      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005956:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800595e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005962:	f023 0107 	bic.w	r1, r3, #7
 8005966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800596a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800596e:	4a29      	ldr	r2, [pc, #164]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005970:	430b      	orrs	r3, r1
 8005972:	6593      	str	r3, [r2, #88]	@ 0x58
 8005974:	e003      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800597a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800597e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f002 0320 	and.w	r3, r2, #32
 800598a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d057      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800599e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059aa:	d035      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80059ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059b0:	d82c      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b6:	d031      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059bc:	d826      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80059be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059c2:	d02d      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80059c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059c8:	d820      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80059ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ce:	d012      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80059d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d4:	d81a      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d024      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80059da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059de:	d115      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059e4:	3308      	adds	r3, #8
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 fd8f 	bl	800750c <RCCEx_PLL2_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059f4:	e017      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059fa:	3328      	adds	r3, #40	@ 0x28
 80059fc:	2102      	movs	r1, #2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 fe36 	bl	8007670 <RCCEx_PLL3_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a0a:	e00c      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a12:	e008      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005a14:	58024400 	.word	0x58024400
        break;
 8005a18:	bf00      	nop
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a2e:	4bc2      	ldr	r3, [pc, #776]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	4abe      	ldr	r2, [pc, #760]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a44:	e003      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	d055      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a7a:	d033      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005a7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a80:	d82c      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a86:	d02f      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8c:	d826      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a92:	d02b      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005a94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a98:	d820      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a9e:	d012      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa4:	d81a      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d022      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aae:	d115      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fd27 	bl	800750c <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e015      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aca:	3328      	adds	r3, #40	@ 0x28
 8005acc:	2102      	movs	r1, #2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 fdce 	bl	8007670 <RCCEx_PLL3_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ada:	e00a      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ae2:	e006      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ae4:	bf00      	nop
 8005ae6:	e004      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ae8:	bf00      	nop
 8005aea:	e002      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005afa:	4b8f      	ldr	r3, [pc, #572]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b0a:	4a8b      	ldr	r2, [pc, #556]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b10:	e003      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b16:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b30:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d055      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b42:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b46:	d033      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005b48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b4c:	d82c      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b52:	d02f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b58:	d826      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b5e:	d02b      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005b60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b64:	d820      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b6a:	d012      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b70:	d81a      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d022      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7a:	d115      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b80:	3308      	adds	r3, #8
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 fcc1 	bl	800750c <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b90:	e015      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b96:	3328      	adds	r3, #40	@ 0x28
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fd68 	bl	8007670 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bae:	e006      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005bb0:	bf00      	nop
 8005bb2:	e004      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005bb4:	bf00      	nop
 8005bb6:	e002      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005bb8:	bf00      	nop
 8005bba:	e000      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bd6:	4a58      	ldr	r2, [pc, #352]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bdc:	e003      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005be2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f002 0308 	and.w	r3, r2, #8
 8005bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bfc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c00:	460b      	mov	r3, r1
 8005c02:	4313      	orrs	r3, r2
 8005c04:	d01e      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c12:	d10c      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c18:	3328      	adds	r3, #40	@ 0x28
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fd27 	bl	8007670 <RCCEx_PLL3_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c2e:	4b42      	ldr	r3, [pc, #264]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f002 0310 	and.w	r3, r2, #16
 8005c50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c5a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d01e      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c76:	3328      	adds	r3, #40	@ 0x28
 8005c78:	2102      	movs	r1, #2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 fcf8 	bl	8007670 <RCCEx_PLL3_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c9c:	4a26      	ldr	r2, [pc, #152]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cb8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	d040      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cce:	d022      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd4:	d81b      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cde:	d00b      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005ce0:	e015      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fc0e 	bl	800750c <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cf6:	e00f      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cfc:	3328      	adds	r3, #40	@ 0x28
 8005cfe:	2102      	movs	r1, #2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fcb5 	bl	8007670 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d0c:	e004      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d14:	e000      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d20:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d24:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d30:	4a01      	ldr	r2, [pc, #4]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d32:	430b      	orrs	r3, r1
 8005d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d36:	e005      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d52:	2300      	movs	r3, #0
 8005d54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d56:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	d03b      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d6c:	d01f      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005d6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d72:	d818      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005d74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d78:	d003      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d7e:	d007      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005d80:	e011      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d82:	4b64      	ldr	r3, [pc, #400]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	4a63      	ldr	r2, [pc, #396]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d8e:	e00f      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d94:	3328      	adds	r3, #40	@ 0x28
 8005d96:	2101      	movs	r1, #1
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fc69 	bl	8007670 <RCCEx_PLL3_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005da4:	e004      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db8:	4b56      	ldr	r3, [pc, #344]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc8:	4a52      	ldr	r2, [pc, #328]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dd4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005de4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005de6:	2300      	movs	r3, #0
 8005de8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dea:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d031      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e02:	d007      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005e04:	e011      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e06:	4b43      	ldr	r3, [pc, #268]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	4a42      	ldr	r2, [pc, #264]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e12:	e00e      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e18:	3308      	adds	r3, #8
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fb75 	bl	800750c <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e28:	e003      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e3a:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e48:	4a32      	ldr	r2, [pc, #200]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e4e:	e003      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e66:	2300      	movs	r3, #0
 8005e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d00c      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e78:	3328      	adds	r3, #40	@ 0x28
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fbf7 	bl	8007670 <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ea0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	d03a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d018      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ebc:	d811      	bhi.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec2:	d014      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec8:	d80b      	bhi.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ee8:	e004      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005eea:	bf00      	nop
 8005eec:	e002      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f0c:	4a01      	ldr	r2, [pc, #4]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f12:	e005      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f2e:	2300      	movs	r3, #0
 8005f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f36:	460b      	mov	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f3c:	4baa      	ldr	r3, [pc, #680]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f4a:	4aa7      	ldr	r2, [pc, #668]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f5e:	2300      	movs	r3, #0
 8005f60:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d00a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f6c:	4b9e      	ldr	r3, [pc, #632]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f7c:	4a9a      	ldr	r2, [pc, #616]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f90:	2300      	movs	r3, #0
 8005f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f9e:	4b92      	ldr	r3, [pc, #584]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fac:	4a8e      	ldr	r2, [pc, #568]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fce:	4b86      	ldr	r3, [pc, #536]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	4a85      	ldr	r2, [pc, #532]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fd8:	6113      	str	r3, [r2, #16]
 8005fda:	4b83      	ldr	r3, [pc, #524]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fdc:	6919      	ldr	r1, [r3, #16]
 8005fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fe6:	4a80      	ldr	r2, [pc, #512]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ffe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006002:	460b      	mov	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006008:	4b77      	ldr	r3, [pc, #476]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800600a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	4a74      	ldr	r2, [pc, #464]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006018:	430b      	orrs	r3, r1
 800601a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800601c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006028:	633b      	str	r3, [r7, #48]	@ 0x30
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
 800602e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006038:	4b6b      	ldr	r3, [pc, #428]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006048:	4a67      	ldr	r2, [pc, #412]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800604a:	430b      	orrs	r3, r1
 800604c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800604e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	2100      	movs	r1, #0
 8006058:	62b9      	str	r1, [r7, #40]	@ 0x28
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006060:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006064:	460b      	mov	r3, r1
 8006066:	4313      	orrs	r3, r2
 8006068:	d011      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800606a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800606e:	3308      	adds	r3, #8
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f001 fa4a 	bl	800750c <RCCEx_PLL2_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800607e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800608a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800608e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	2100      	movs	r1, #0
 8006098:	6239      	str	r1, [r7, #32]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060a4:	460b      	mov	r3, r1
 80060a6:	4313      	orrs	r3, r2
 80060a8:	d011      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ae:	3308      	adds	r3, #8
 80060b0:	2101      	movs	r1, #1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fa2a 	bl	800750c <RCCEx_PLL2_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80060be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	2100      	movs	r1, #0
 80060d8:	61b9      	str	r1, [r7, #24]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060e4:	460b      	mov	r3, r1
 80060e6:	4313      	orrs	r3, r2
 80060e8:	d011      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ee:	3308      	adds	r3, #8
 80060f0:	2102      	movs	r1, #2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fa0a 	bl	800750c <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80060fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006106:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800610a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800610e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	2100      	movs	r1, #0
 8006118:	6139      	str	r1, [r7, #16]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006124:	460b      	mov	r3, r1
 8006126:	4313      	orrs	r3, r2
 8006128:	d011      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612e:	3328      	adds	r3, #40	@ 0x28
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f001 fa9c 	bl	8007670 <RCCEx_PLL3_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800613e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006146:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800614a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800614e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	2100      	movs	r1, #0
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d011      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800616a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616e:	3328      	adds	r3, #40	@ 0x28
 8006170:	2101      	movs	r1, #1
 8006172:	4618      	mov	r0, r3
 8006174:	f001 fa7c 	bl	8007670 <RCCEx_PLL3_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800617e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800618a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800618e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	2100      	movs	r1, #0
 8006198:	6039      	str	r1, [r7, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	607b      	str	r3, [r7, #4]
 80061a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d011      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ae:	3328      	adds	r3, #40	@ 0x28
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fa5c 	bl	8007670 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80061be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80061ce:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
}
 80061dc:	4618      	mov	r0, r3
 80061de:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80061e2:	46bd      	mov	sp, r7
 80061e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e8:	58024400 	.word	0x58024400

080061ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b090      	sub	sp, #64	@ 0x40
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80061fe:	430b      	orrs	r3, r1
 8006200:	f040 8094 	bne.w	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006204:	4b9e      	ldr	r3, [pc, #632]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	2b04      	cmp	r3, #4
 8006212:	f200 8087 	bhi.w	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006216:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006231 	.word	0x08006231
 8006220:	08006259 	.word	0x08006259
 8006224:	08006281 	.word	0x08006281
 8006228:	0800631d 	.word	0x0800631d
 800622c:	080062a9 	.word	0x080062a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006230:	4b93      	ldr	r3, [pc, #588]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800623c:	d108      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800623e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006242:	4618      	mov	r0, r3
 8006244:	f001 f810 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624c:	f000 bd45 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006254:	f000 bd41 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006258:	4b89      	ldr	r3, [pc, #548]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006264:	d108      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006266:	f107 0318 	add.w	r3, r7, #24
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fd54 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006274:	f000 bd31 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627c:	f000 bd2d 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006280:	4b7f      	ldr	r3, [pc, #508]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628c:	d108      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800628e:	f107 030c 	add.w	r3, r7, #12
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fe94 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800629c:	f000 bd1d 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a4:	f000 bd19 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062a8:	4b75      	ldr	r3, [pc, #468]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062b2:	4b73      	ldr	r3, [pc, #460]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d10c      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80062be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062c4:	4b6e      	ldr	r3, [pc, #440]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	08db      	lsrs	r3, r3, #3
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d6:	e01f      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062d8:	4b69      	ldr	r3, [pc, #420]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e4:	d106      	bne.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80062e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ec:	d102      	bne.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062ee:	4b66      	ldr	r3, [pc, #408]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80062f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f2:	e011      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062f4:	4b62      	ldr	r3, [pc, #392]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006300:	d106      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006308:	d102      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800630a:	4b60      	ldr	r3, [pc, #384]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800630c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006314:	f000 bce1 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006318:	f000 bcdf 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800631c:	4b5c      	ldr	r3, [pc, #368]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006320:	f000 bcdb 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006328:	f000 bcd7 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800632c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006330:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006334:	430b      	orrs	r3, r1
 8006336:	f040 80ad 	bne.w	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800633a:	4b51      	ldr	r3, [pc, #324]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800633c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006342:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634a:	d056      	beq.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006352:	f200 8090 	bhi.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2bc0      	cmp	r3, #192	@ 0xc0
 800635a:	f000 8088 	beq.w	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	2bc0      	cmp	r3, #192	@ 0xc0
 8006362:	f200 8088 	bhi.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d032      	beq.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	2b80      	cmp	r3, #128	@ 0x80
 8006370:	f200 8081 	bhi.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d014      	beq.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006380:	e079      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006382:	4b3f      	ldr	r3, [pc, #252]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800638e:	d108      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff67 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800639e:	f000 bc9c 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a6:	f000 bc98 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063aa:	4b35      	ldr	r3, [pc, #212]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b6:	d108      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b8:	f107 0318 	add.w	r3, r7, #24
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fcab 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063c6:	f000 bc88 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ce:	f000 bc84 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063de:	d108      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e0:	f107 030c 	add.w	r3, r7, #12
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fdeb 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ee:	f000 bc74 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f6:	f000 bc70 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063fa:	4b21      	ldr	r3, [pc, #132]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006404:	4b1e      	ldr	r3, [pc, #120]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d10c      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006416:	4b1a      	ldr	r3, [pc, #104]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a18      	ldr	r2, [pc, #96]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006428:	e01f      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800642a:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006436:	d106      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800643e:	d102      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006440:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006444:	e011      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006446:	4b0e      	ldr	r3, [pc, #56]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006452:	d106      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645a:	d102      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006460:	e003      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006466:	f000 bc38 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800646a:	f000 bc36 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800646e:	4b08      	ldr	r3, [pc, #32]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006472:	f000 bc32 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800647a:	f000 bc2e 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800647e:	bf00      	nop
 8006480:	58024400 	.word	0x58024400
 8006484:	03d09000 	.word	0x03d09000
 8006488:	003d0900 	.word	0x003d0900
 800648c:	017d7840 	.word	0x017d7840
 8006490:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006498:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800649c:	430b      	orrs	r3, r1
 800649e:	f040 809c 	bne.w	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80064a2:	4b9e      	ldr	r3, [pc, #632]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064b2:	d054      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064ba:	f200 808b 	bhi.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064c4:	f000 8083 	beq.w	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064ce:	f200 8081 	bhi.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064d8:	d02f      	beq.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064e0:	d878      	bhi.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064ee:	d012      	beq.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80064f0:	e070      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f2:	4b8a      	ldr	r3, [pc, #552]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064fe:	d107      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006504:	4618      	mov	r0, r3
 8006506:	f000 feaf 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800650e:	e3e4      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006514:	e3e1      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006516:	4b81      	ldr	r3, [pc, #516]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800651e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006522:	d107      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006524:	f107 0318 	add.w	r3, r7, #24
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fbf5 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006532:	e3d2      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006538:	e3cf      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800653a:	4b78      	ldr	r3, [pc, #480]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006546:	d107      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fd37 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006556:	e3c0      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655c:	e3bd      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800655e:	4b6f      	ldr	r3, [pc, #444]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006566:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006568:	4b6c      	ldr	r3, [pc, #432]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b04      	cmp	r3, #4
 8006572:	d10c      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800657a:	4b68      	ldr	r3, [pc, #416]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	08db      	lsrs	r3, r3, #3
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	4a66      	ldr	r2, [pc, #408]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658c:	e01e      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800658e:	4b63      	ldr	r3, [pc, #396]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659a:	d106      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a2:	d102      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065a4:	4b5f      	ldr	r3, [pc, #380]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80065a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a8:	e010      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065aa:	4b5c      	ldr	r3, [pc, #368]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b6:	d106      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065be:	d102      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065c0:	4b59      	ldr	r3, [pc, #356]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065ca:	e386      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065cc:	e385      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065ce:	4b57      	ldr	r3, [pc, #348]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80065d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d2:	e382      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d8:	e37f      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80065e2:	430b      	orrs	r3, r1
 80065e4:	f040 80a7 	bne.w	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80065e8:	4b4c      	ldr	r3, [pc, #304]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80065f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065f8:	d055      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006600:	f200 8096 	bhi.w	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800660a:	f000 8084 	beq.w	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006614:	f200 808c 	bhi.w	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800661e:	d030      	beq.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006626:	f200 8083 	bhi.w	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006636:	d012      	beq.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006638:	e07a      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800663a:	4b38      	ldr	r3, [pc, #224]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006642:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fe0b 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006656:	e340      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665c:	e33d      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800665e:	4b2f      	ldr	r3, [pc, #188]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666a:	d107      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666c:	f107 0318 	add.w	r3, r7, #24
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fb51 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667a:	e32e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006680:	e32b      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006682:	4b26      	ldr	r3, [pc, #152]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800668a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800668e:	d107      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006690:	f107 030c 	add.w	r3, r7, #12
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fc93 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800669e:	e31c      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a4:	e319      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066a6:	4b1d      	ldr	r3, [pc, #116]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066b0:	4b1a      	ldr	r3, [pc, #104]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d10c      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c2:	4b16      	ldr	r3, [pc, #88]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	08db      	lsrs	r3, r3, #3
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	4a14      	ldr	r2, [pc, #80]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80066ce:	fa22 f303 	lsr.w	r3, r2, r3
 80066d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d4:	e01e      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066d6:	4b11      	ldr	r3, [pc, #68]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e2:	d106      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80066e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ea:	d102      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f0:	e010      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066fe:	d106      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006706:	d102      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006708:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800670a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800670c:	e002      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006712:	e2e2      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006714:	e2e1      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006716:	4b05      	ldr	r3, [pc, #20]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671a:	e2de      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800671c:	58024400 	.word	0x58024400
 8006720:	03d09000 	.word	0x03d09000
 8006724:	003d0900 	.word	0x003d0900
 8006728:	017d7840 	.word	0x017d7840
 800672c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006734:	e2d1      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800673e:	430b      	orrs	r3, r1
 8006740:	f040 809c 	bne.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006744:	4b93      	ldr	r3, [pc, #588]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006748:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800674c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006754:	d054      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800675c:	f200 808b 	bhi.w	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006766:	f000 8083 	beq.w	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006770:	f200 8081 	bhi.w	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800677a:	d02f      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800677c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006782:	d878      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006790:	d012      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006792:	e070      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006794:	4b7f      	ldr	r3, [pc, #508]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067a0:	d107      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fd5e 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067b0:	e293      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b6:	e290      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067b8:	4b76      	ldr	r3, [pc, #472]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067c4:	d107      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c6:	f107 0318 	add.w	r3, r7, #24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 faa4 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d4:	e281      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067da:	e27e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067dc:	4b6d      	ldr	r3, [pc, #436]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e8:	d107      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fbe6 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f8:	e26f      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067fe:	e26c      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006800:	4b64      	ldr	r3, [pc, #400]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006808:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800680a:	4b62      	ldr	r3, [pc, #392]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b04      	cmp	r3, #4
 8006814:	d10c      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800681c:	4b5d      	ldr	r3, [pc, #372]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	08db      	lsrs	r3, r3, #3
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	4a5c      	ldr	r2, [pc, #368]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006828:	fa22 f303 	lsr.w	r3, r2, r3
 800682c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800682e:	e01e      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006830:	4b58      	ldr	r3, [pc, #352]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683c:	d106      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800683e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006844:	d102      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006846:	4b55      	ldr	r3, [pc, #340]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800684a:	e010      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800684c:	4b51      	ldr	r3, [pc, #324]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006858:	d106      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800685a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006860:	d102      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006862:	4b4f      	ldr	r3, [pc, #316]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006866:	e002      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800686c:	e235      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800686e:	e234      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006870:	4b4c      	ldr	r3, [pc, #304]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006874:	e231      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800687a:	e22e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800687c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006880:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006884:	430b      	orrs	r3, r1
 8006886:	f040 808f 	bne.w	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800688a:	4b42      	ldr	r3, [pc, #264]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800688c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800688e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006892:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006896:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800689a:	d06b      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068a2:	d874      	bhi.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80068a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068aa:	d056      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80068ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068b2:	d86c      	bhi.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068ba:	d03b      	beq.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068c2:	d864      	bhi.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80068c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ca:	d021      	beq.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d2:	d85c      	bhi.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e0:	d004      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80068e2:	e054      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe fa0c 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80068e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068ea:	e1f6      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068ec:	4b29      	ldr	r3, [pc, #164]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f8:	d107      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068fa:	f107 0318 	add.w	r3, r7, #24
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fa0a 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006908:	e1e7      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690e:	e1e4      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006910:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800691c:	d107      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800691e:	f107 030c 	add.w	r3, r7, #12
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fb4c 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800692c:	e1d5      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006932:	e1d2      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006934:	4b17      	ldr	r3, [pc, #92]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b04      	cmp	r3, #4
 800693e:	d109      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006940:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	08db      	lsrs	r3, r3, #3
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	4a13      	ldr	r2, [pc, #76]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006952:	e1c2      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006958:	e1bf      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800695a:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006966:	d102      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006968:	4b0c      	ldr	r3, [pc, #48]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696c:	e1b5      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006972:	e1b2      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006974:	4b07      	ldr	r3, [pc, #28]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006980:	d102      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006982:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006986:	e1a8      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698c:	e1a5      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006992:	e1a2      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006994:	58024400 	.word	0x58024400
 8006998:	03d09000 	.word	0x03d09000
 800699c:	003d0900 	.word	0x003d0900
 80069a0:	017d7840 	.word	0x017d7840
 80069a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80069a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80069b0:	430b      	orrs	r3, r1
 80069b2:	d173      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80069b4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c4:	d02f      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069cc:	d863      	bhi.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069da:	d012      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80069dc:	e05b      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069de:	4b92      	ldr	r3, [pc, #584]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ec:	f107 0318 	add.w	r3, r7, #24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 f991 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fa:	e16e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a00:	e16b      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a02:	4b89      	ldr	r3, [pc, #548]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fad3 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1e:	e15c      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a24:	e159      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a26:	4b80      	ldr	r3, [pc, #512]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a30:	4b7d      	ldr	r3, [pc, #500]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d10c      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a42:	4b79      	ldr	r3, [pc, #484]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	4a77      	ldr	r2, [pc, #476]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a54:	e01e      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a56:	4b74      	ldr	r3, [pc, #464]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a6c:	4b70      	ldr	r3, [pc, #448]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a70:	e010      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a72:	4b6d      	ldr	r3, [pc, #436]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a86:	d102      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a88:	4b6a      	ldr	r3, [pc, #424]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8c:	e002      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a92:	e122      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a94:	e121      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9a:	e11e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	d133      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006abe:	d012      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006ac0:	e023      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ac2:	4b59      	ldr	r3, [pc, #356]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fbc7 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ade:	e0fc      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae4:	e0f9      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ae6:	4b50      	ldr	r3, [pc, #320]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006af2:	d107      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af4:	f107 0318 	add.w	r3, r7, #24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 f90d 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b02:	e0ea      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b08:	e0e7      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b0e:	e0e4      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b14:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	f040 808d 	bne.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006b1e:	4b42      	ldr	r3, [pc, #264]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b22:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006b26:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b2e:	d06b      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b36:	d874      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b3e:	d056      	beq.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b46:	d86c      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b4e:	d03b      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b56:	d864      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b5e:	d021      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b66:	d85c      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b74:	d004      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006b76:	e054      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006b78:	f000 f8b8 	bl	8006cec <HAL_RCCEx_GetD3PCLK1Freq>
 8006b7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b7e:	e0ac      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b80:	4b29      	ldr	r3, [pc, #164]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8e:	f107 0318 	add.w	r3, r7, #24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f8c0 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b9c:	e09d      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba2:	e09a      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ba4:	4b20      	ldr	r3, [pc, #128]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb2:	f107 030c 	add.w	r3, r7, #12
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fa02 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc0:	e08b      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc6:	e088      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bc8:	4b17      	ldr	r3, [pc, #92]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d109      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd4:	4b14      	ldr	r3, [pc, #80]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	08db      	lsrs	r3, r3, #3
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	4a13      	ldr	r2, [pc, #76]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be6:	e078      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bec:	e075      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006bee:	4b0e      	ldr	r3, [pc, #56]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfa:	d102      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c00:	e06b      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c06:	e068      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c08:	4b07      	ldr	r3, [pc, #28]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c14:	d102      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006c16:	4b07      	ldr	r3, [pc, #28]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1a:	e05e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c20:	e05b      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c26:	e058      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	03d09000 	.word	0x03d09000
 8006c30:	003d0900 	.word	0x003d0900
 8006c34:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006c40:	430b      	orrs	r3, r1
 8006c42:	d148      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006c44:	4b27      	ldr	r3, [pc, #156]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c54:	d02a      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c5c:	d838      	bhi.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c6a:	d00d      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006c6c:	e030      	b.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7a:	d102      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c80:	e02b      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c86:	e028      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c88:	4b16      	ldr	r3, [pc, #88]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fae4 	bl	8007268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca4:	e019      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006caa:	e016      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cba:	f107 0318 	add.w	r3, r7, #24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f82a 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc8:	e007      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd4:	e001      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3740      	adds	r7, #64	@ 0x40
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	017d7840 	.word	0x017d7840

08006cec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006cf0:	f7fd ffd6 	bl	8004ca0 <HAL_RCC_GetHCLKFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4904      	ldr	r1, [pc, #16]	@ (8006d14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	0800ea64 	.word	0x0800ea64

08006d18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b089      	sub	sp, #36	@ 0x24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d20:	4ba1      	ldr	r3, [pc, #644]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d2a:	4b9f      	ldr	r3, [pc, #636]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2e:	0b1b      	lsrs	r3, r3, #12
 8006d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d36:	4b9c      	ldr	r3, [pc, #624]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006d42:	4b99      	ldr	r3, [pc, #612]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	fb02 f303 	mul.w	r3, r2, r3
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8111 	beq.w	8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	f000 8083 	beq.w	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	f200 80a1 	bhi.w	8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d056      	beq.n	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d82:	e099      	b.n	8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d84:	4b88      	ldr	r3, [pc, #544]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d02d      	beq.n	8006dec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d90:	4b85      	ldr	r3, [pc, #532]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	4a84      	ldr	r2, [pc, #528]	@ (8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006da0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dea:	e087      	b.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2e:	e065      	b.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b59      	ldr	r3, [pc, #356]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e72:	e043      	b.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b48      	ldr	r3, [pc, #288]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb6:	e021      	b.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b37      	ldr	r3, [pc, #220]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006efc:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	0a5b      	lsrs	r3, r3, #9
 8006f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f22:	ee17 2a90 	vmov	r2, s15
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f50:	ee17 2a90 	vmov	r2, s15
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f58:	4b13      	ldr	r3, [pc, #76]	@ (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5c:	0e1b      	lsrs	r3, r3, #24
 8006f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7e:	ee17 2a90 	vmov	r2, s15
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f86:	e008      	b.n	8006f9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	609a      	str	r2, [r3, #8]
}
 8006f9a:	bf00      	nop
 8006f9c:	3724      	adds	r7, #36	@ 0x24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	03d09000 	.word	0x03d09000
 8006fb0:	46000000 	.word	0x46000000
 8006fb4:	4c742400 	.word	0x4c742400
 8006fb8:	4a742400 	.word	0x4a742400
 8006fbc:	4bbebc20 	.word	0x4bbebc20

08006fc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	@ 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fc8:	4ba1      	ldr	r3, [pc, #644]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006fd2:	4b9f      	ldr	r3, [pc, #636]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	0d1b      	lsrs	r3, r3, #20
 8006fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006fde:	4b9c      	ldr	r3, [pc, #624]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006fea:	4b99      	ldr	r3, [pc, #612]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	08db      	lsrs	r3, r3, #3
 8006ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8111 	beq.w	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b02      	cmp	r3, #2
 8007012:	f000 8083 	beq.w	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b02      	cmp	r3, #2
 800701a:	f200 80a1 	bhi.w	8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d056      	beq.n	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800702a:	e099      	b.n	8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800702c:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0320 	and.w	r3, r3, #32
 8007034:	2b00      	cmp	r3, #0
 8007036:	d02d      	beq.n	8007094 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007038:	4b85      	ldr	r3, [pc, #532]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	4a84      	ldr	r2, [pc, #528]	@ (8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007044:	fa22 f303 	lsr.w	r3, r2, r3
 8007048:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	ee07 3a90 	vmov	s15, r3
 8007050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b7b      	ldr	r3, [pc, #492]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a03 	vldr	s12, [r7, #12]
 8007076:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007092:	e087      	b.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800725c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d6:	e065      	b.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b59      	ldr	r3, [pc, #356]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711a:	e043      	b.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800712a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712e:	4b48      	ldr	r3, [pc, #288]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007142:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715e:	e021      	b.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800716e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007172:	4b37      	ldr	r3, [pc, #220]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	ed97 6a03 	vldr	s12, [r7, #12]
 8007186:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800718a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80071a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	0a5b      	lsrs	r3, r3, #9
 80071aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071be:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 2a90 	vmov	r2, s15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80071d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	0c1b      	lsrs	r3, r3, #16
 80071d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f8:	ee17 2a90 	vmov	r2, s15
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007200:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	0e1b      	lsrs	r3, r3, #24
 8007206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800721a:	edd7 6a07 	vldr	s13, [r7, #28]
 800721e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007226:	ee17 2a90 	vmov	r2, s15
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800722e:	e008      	b.n	8007242 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	609a      	str	r2, [r3, #8]
}
 8007242:	bf00      	nop
 8007244:	3724      	adds	r7, #36	@ 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400
 8007254:	03d09000 	.word	0x03d09000
 8007258:	46000000 	.word	0x46000000
 800725c:	4c742400 	.word	0x4c742400
 8007260:	4a742400 	.word	0x4a742400
 8007264:	4bbebc20 	.word	0x4bbebc20

08007268 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007268:	b480      	push	{r7}
 800726a:	b089      	sub	sp, #36	@ 0x24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007270:	4ba0      	ldr	r3, [pc, #640]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800727a:	4b9e      	ldr	r3, [pc, #632]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007284:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007286:	4b9b      	ldr	r3, [pc, #620]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007290:	4b98      	ldr	r3, [pc, #608]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007294:	08db      	lsrs	r3, r3, #3
 8007296:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	fb02 f303 	mul.w	r3, r2, r3
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 8111 	beq.w	80074d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	f000 8083 	beq.w	80073c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	f200 80a1 	bhi.w	8007406 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d056      	beq.n	800737e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80072d0:	e099      	b.n	8007406 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d2:	4b88      	ldr	r3, [pc, #544]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d02d      	beq.n	800733a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072de:	4b85      	ldr	r3, [pc, #532]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	4a83      	ldr	r2, [pc, #524]	@ (80074f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80072ea:	fa22 f303 	lsr.w	r3, r2, r3
 80072ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007308:	4b7a      	ldr	r3, [pc, #488]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800730a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007318:	ed97 6a03 	vldr	s12, [r7, #12]
 800731c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800732c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007334:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007338:	e087      	b.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007344:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007500 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734c:	4b69      	ldr	r3, [pc, #420]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007360:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737c:	e065      	b.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007388:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007504 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800738c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007390:	4b58      	ldr	r3, [pc, #352]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c0:	e043      	b.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073cc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007508 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80073d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d4:	4b47      	ldr	r3, [pc, #284]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073dc:	ee07 3a90 	vmov	s15, r3
 80073e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007404:	e021      	b.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007410:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007500 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007418:	4b36      	ldr	r3, [pc, #216]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007428:	ed97 6a03 	vldr	s12, [r7, #12]
 800742c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800743c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007448:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800744a:	4b2a      	ldr	r3, [pc, #168]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744e:	0a5b      	lsrs	r3, r3, #9
 8007450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007464:	edd7 6a07 	vldr	s13, [r7, #28]
 8007468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007470:	ee17 2a90 	vmov	r2, s15
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007478:	4b1e      	ldr	r3, [pc, #120]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800747a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800748e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007492:	edd7 6a07 	vldr	s13, [r7, #28]
 8007496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800749a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749e:	ee17 2a90 	vmov	r2, s15
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074aa:	0e1b      	lsrs	r3, r3, #24
 80074ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074cc:	ee17 2a90 	vmov	r2, s15
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80074d4:	e008      	b.n	80074e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	609a      	str	r2, [r3, #8]
}
 80074e8:	bf00      	nop
 80074ea:	3724      	adds	r7, #36	@ 0x24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	58024400 	.word	0x58024400
 80074f8:	03d09000 	.word	0x03d09000
 80074fc:	46000000 	.word	0x46000000
 8007500:	4c742400 	.word	0x4c742400
 8007504:	4a742400 	.word	0x4a742400
 8007508:	4bbebc20 	.word	0x4bbebc20

0800750c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800751a:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b03      	cmp	r3, #3
 8007524:	d101      	bne.n	800752a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e099      	b.n	800765e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800752a:	4b4f      	ldr	r3, [pc, #316]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4e      	ldr	r2, [pc, #312]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007530:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007536:	f7fa fbbf 	bl	8001cb8 <HAL_GetTick>
 800753a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800753c:	e008      	b.n	8007550 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800753e:	f7fa fbbb 	bl	8001cb8 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e086      	b.n	800765e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007550:	4b45      	ldr	r3, [pc, #276]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800755c:	4b42      	ldr	r3, [pc, #264]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	031b      	lsls	r3, r3, #12
 800756a:	493f      	ldr	r1, [pc, #252]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 800756c:	4313      	orrs	r3, r2
 800756e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	3b01      	subs	r3, #1
 8007576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	3b01      	subs	r3, #1
 8007580:	025b      	lsls	r3, r3, #9
 8007582:	b29b      	uxth	r3, r3
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	3b01      	subs	r3, #1
 800758c:	041b      	lsls	r3, r3, #16
 800758e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	3b01      	subs	r3, #1
 800759a:	061b      	lsls	r3, r3, #24
 800759c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075a0:	4931      	ldr	r1, [pc, #196]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075a6:	4b30      	ldr	r3, [pc, #192]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	492d      	ldr	r1, [pc, #180]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	f023 0220 	bic.w	r2, r3, #32
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	4928      	ldr	r1, [pc, #160]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075ca:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	4a26      	ldr	r2, [pc, #152]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075d0:	f023 0310 	bic.w	r3, r3, #16
 80075d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075d6:	4b24      	ldr	r3, [pc, #144]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075da:	4b24      	ldr	r3, [pc, #144]	@ (800766c <RCCEx_PLL2_Config+0x160>)
 80075dc:	4013      	ands	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	69d2      	ldr	r2, [r2, #28]
 80075e2:	00d2      	lsls	r2, r2, #3
 80075e4:	4920      	ldr	r1, [pc, #128]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075f0:	f043 0310 	orr.w	r3, r3, #16
 80075f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	4a19      	ldr	r2, [pc, #100]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007602:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007608:	e00f      	b.n	800762a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d106      	bne.n	800761e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007610:	4b15      	ldr	r3, [pc, #84]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4a14      	ldr	r2, [pc, #80]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800761c:	e005      	b.n	800762a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800761e:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007628:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800762a:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a0e      	ldr	r2, [pc, #56]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007630:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007636:	f7fa fb3f 	bl	8001cb8 <HAL_GetTick>
 800763a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800763c:	e008      	b.n	8007650 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800763e:	f7fa fb3b 	bl	8001cb8 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e006      	b.n	800765e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <RCCEx_PLL2_Config+0x15c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	58024400 	.word	0x58024400
 800766c:	ffff0007 	.word	0xffff0007

08007670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800767e:	4b53      	ldr	r3, [pc, #332]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b03      	cmp	r3, #3
 8007688:	d101      	bne.n	800768e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e099      	b.n	80077c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800768e:	4b4f      	ldr	r3, [pc, #316]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a4e      	ldr	r2, [pc, #312]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800769a:	f7fa fb0d 	bl	8001cb8 <HAL_GetTick>
 800769e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076a0:	e008      	b.n	80076b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076a2:	f7fa fb09 	bl	8001cb8 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d901      	bls.n	80076b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e086      	b.n	80077c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076b4:	4b45      	ldr	r3, [pc, #276]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1f0      	bne.n	80076a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076c0:	4b42      	ldr	r3, [pc, #264]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	051b      	lsls	r3, r3, #20
 80076ce:	493f      	ldr	r1, [pc, #252]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	3b01      	subs	r3, #1
 80076da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	025b      	lsls	r3, r3, #9
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	041b      	lsls	r3, r3, #16
 80076f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	061b      	lsls	r3, r3, #24
 8007700:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007704:	4931      	ldr	r1, [pc, #196]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800770a:	4b30      	ldr	r3, [pc, #192]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	492d      	ldr	r1, [pc, #180]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007718:	4313      	orrs	r3, r2
 800771a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800771c:	4b2b      	ldr	r3, [pc, #172]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	4928      	ldr	r1, [pc, #160]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 800772a:	4313      	orrs	r3, r2
 800772c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800772e:	4b27      	ldr	r3, [pc, #156]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	4a26      	ldr	r2, [pc, #152]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800773a:	4b24      	ldr	r3, [pc, #144]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 800773c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800773e:	4b24      	ldr	r3, [pc, #144]	@ (80077d0 <RCCEx_PLL3_Config+0x160>)
 8007740:	4013      	ands	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	69d2      	ldr	r2, [r2, #28]
 8007746:	00d2      	lsls	r2, r2, #3
 8007748:	4920      	ldr	r1, [pc, #128]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800774e:	4b1f      	ldr	r3, [pc, #124]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	4a1e      	ldr	r2, [pc, #120]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007758:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007760:	4b1a      	ldr	r3, [pc, #104]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007764:	4a19      	ldr	r2, [pc, #100]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007766:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800776a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800776c:	e00f      	b.n	800778e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d106      	bne.n	8007782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007774:	4b15      	ldr	r3, [pc, #84]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 800777a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800777e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007780:	e005      	b.n	800778e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007782:	4b12      	ldr	r3, [pc, #72]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	4a11      	ldr	r2, [pc, #68]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800778c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800778e:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a0e      	ldr	r2, [pc, #56]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 8007794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779a:	f7fa fa8d 	bl	8001cb8 <HAL_GetTick>
 800779e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077a0:	e008      	b.n	80077b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077a2:	f7fa fa89 	bl	8001cb8 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d901      	bls.n	80077b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e006      	b.n	80077c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077b4:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <RCCEx_PLL3_Config+0x15c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0f0      	beq.n	80077a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400
 80077d0:	ffff0007 	.word	0xffff0007

080077d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	@ 0x28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e075      	b.n	80078d2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7f9 ffe3 	bl	80017c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2204      	movs	r2, #4
 8007802:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f868 	bl	80078dc <HAL_SD_InitCard>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e05d      	b.n	80078d2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007816:	f107 0308 	add.w	r3, r7, #8
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fdaf 	bl	8008380 <HAL_SD_GetCardStatus>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e052      	b.n	80078d2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800782c:	7e3b      	ldrb	r3, [r7, #24]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007832:	7e7b      	ldrb	r3, [r7, #25]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10a      	bne.n	8007856 <HAL_SD_Init+0x82>
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <HAL_SD_Init+0x78>
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007852:	659a      	str	r2, [r3, #88]	@ 0x58
 8007854:	e00b      	b.n	800786e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	2b01      	cmp	r3, #1
 800785c:	d104      	bne.n	8007868 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007864:	659a      	str	r2, [r3, #88]	@ 0x58
 8007866:	e002      	b.n	800786e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fe6d 	bl	8008554 <HAL_SD_ConfigWideBusOperation>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e026      	b.n	80078d2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007884:	f7fa fa18 	bl	8001cb8 <HAL_GetTick>
 8007888:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800788a:	e011      	b.n	80078b0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800788c:	f7fa fa14 	bl	8001cb8 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d109      	bne.n	80078b0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e010      	b.n	80078d2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ff61 	bl	8008778 <HAL_SD_GetCardState>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d1e7      	bne.n	800788c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	@ 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b08d      	sub	sp, #52	@ 0x34
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80078f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80078f8:	f04f 0100 	mov.w	r1, #0
 80078fc:	f7fe fc76 	bl	80061ec <HAL_RCCEx_GetPeriphCLKFreq>
 8007900:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007916:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e070      	b.n	80079fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	4a39      	ldr	r2, [pc, #228]	@ (8007a08 <HAL_SD_InitCard+0x12c>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681c      	ldr	r4, [r3, #0]
 800792e:	466a      	mov	r2, sp
 8007930:	f107 0318 	add.w	r3, r7, #24
 8007934:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007938:	e882 0003 	stmia.w	r2, {r0, r1}
 800793c:	f107 030c 	add.w	r3, r7, #12
 8007940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007942:	4620      	mov	r0, r4
 8007944:	f003 f882 	bl	800aa4c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f003 f8c5 	bl	800aadc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007962:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800796a:	4a28      	ldr	r2, [pc, #160]	@ (8007a0c <HAL_SD_InitCard+0x130>)
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	3301      	adds	r3, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f7fa f9ab 	bl	8001cd0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 ffea 	bl	8008954 <SD_PowerON>
 8007980:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e02e      	b.n	80079fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 ff09 	bl	80087b8 <SD_InitCard>
 80079a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e01b      	b.n	80079fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80079ce:	4618      	mov	r0, r3
 80079d0:	f003 f91a 	bl	800ac08 <SDMMC_CmdBlockLength>
 80079d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00f      	beq.n	80079fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007a10 <HAL_SD_InitCard+0x134>)
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	372c      	adds	r7, #44	@ 0x2c
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	bf00      	nop
 8007a08:	014f8b59 	.word	0x014f8b59
 8007a0c:	00012110 	.word	0x00012110
 8007a10:	1fe00fff 	.word	0x1fe00fff

08007a14 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	@ 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d107      	bne.n	8007a3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a30:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e08d      	b.n	8007b58 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	f040 8086 	bne.w	8007b56 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	441a      	add	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d907      	bls.n	8007a6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a62:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e074      	b.n	8007b58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2203      	movs	r2, #3
 8007a72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	025a      	lsls	r2, r3, #9
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	025b      	lsls	r3, r3, #9
 8007a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	025b      	lsls	r3, r3, #9
 8007aa4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007aa6:	2390      	movs	r3, #144	@ 0x90
 8007aa8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f107 0210 	add.w	r2, r7, #16
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f003 f875 	bl	800abb0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ad4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d90a      	bls.n	8007b02 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2282      	movs	r2, #130	@ 0x82
 8007af0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007af8:	4618      	mov	r0, r3
 8007afa:	f003 f8cb 	bl	800ac94 <SDMMC_CmdReadMultiBlock>
 8007afe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007b00:	e009      	b.n	8007b16 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2281      	movs	r2, #129	@ 0x81
 8007b06:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f003 f89d 	bl	800ac4e <SDMMC_CmdReadSingleBlock>
 8007b14:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d012      	beq.n	8007b42 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0f      	ldr	r2, [pc, #60]	@ (8007b60 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007b22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e00a      	b.n	8007b58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007b50:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3730      	adds	r7, #48	@ 0x30
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	1fe00fff 	.word	0x1fe00fff

08007b64 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	@ 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d107      	bne.n	8007b8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b80:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e08d      	b.n	8007ca8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	f040 8086 	bne.w	8007ca6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	441a      	add	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d907      	bls.n	8007bbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e074      	b.n	8007ca8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	025a      	lsls	r2, r3, #9
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d002      	beq.n	8007bea <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	025b      	lsls	r3, r3, #9
 8007be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295
 8007bee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	025b      	lsls	r3, r3, #9
 8007bf4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007bf6:	2390      	movs	r3, #144	@ 0x90
 8007bf8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f107 0210 	add.w	r2, r7, #16
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 ffcd 	bl	800abb0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c24:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2201      	movs	r2, #1
 8007c34:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d90a      	bls.n	8007c52 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	22a0      	movs	r2, #160	@ 0xa0
 8007c40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f003 f869 	bl	800ad20 <SDMMC_CmdWriteMultiBlock>
 8007c4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007c50:	e009      	b.n	8007c66 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2290      	movs	r2, #144	@ 0x90
 8007c56:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f003 f83b 	bl	800acda <SDMMC_CmdWriteSingleBlock>
 8007c64:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d012      	beq.n	8007c92 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0f      	ldr	r2, [pc, #60]	@ (8007cb0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007c72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e00a      	b.n	8007ca8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3730      	adds	r7, #48	@ 0x30
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	1fe00fff 	.word	0x1fe00fff

08007cb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <HAL_SD_IRQHandler+0x2e>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 f926 	bl	8008f2c <SD_Read_IT>
 8007ce0:	e19a      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80ac 	beq.w	8007e4a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cfa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b59      	ldr	r3, [pc, #356]	@ (8007e6c <HAL_SD_IRQHandler+0x1b8>)
 8007d08:	400b      	ands	r3, r1
 8007d0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d2a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d038      	beq.n	8007da8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <HAL_SD_IRQHandler+0x96>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d011      	beq.n	8007d6e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f003 f80a 	bl	800ad68 <SDMMC_CmdStopTransfer>
 8007d54:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f95b 	bl	8008024 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a3f      	ldr	r2, [pc, #252]	@ (8007e70 <HAL_SD_IRQHandler+0x1bc>)
 8007d74:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <HAL_SD_IRQHandler+0xe4>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f003 fcbd 	bl	800b718 <HAL_SD_RxCpltCallback>
 8007d9e:	e13b      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f003 fcaf 	bl	800b704 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007da6:	e137      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8132 	beq.w	8008018 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <HAL_SD_IRQHandler+0x12c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d011      	beq.n	8007e04 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f002 ffbf 	bl	800ad68 <SDMMC_CmdStopTransfer>
 8007dea:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f910 	bl	8008024 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <HAL_SD_IRQHandler+0x172>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f003 fc6c 	bl	800b704 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <HAL_SD_IRQHandler+0x18e>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80eb 	beq.w	8008018 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f003 fc68 	bl	800b718 <HAL_SD_RxCpltCallback>
}
 8007e48:	e0e6      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00d      	beq.n	8007e74 <HAL_SD_IRQHandler+0x1c0>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f003 0308 	and.w	r3, r3, #8
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f8a8 	bl	8008fb8 <SD_Write_IT>
 8007e68:	e0d6      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
 8007e6a:	bf00      	nop
 8007e6c:	ffff3ec5 	.word	0xffff3ec5
 8007e70:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 809d 	beq.w	8007fbe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e96:	f043 0202 	orr.w	r2, r3, #2
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb0:	f043 0208 	orr.w	r2, r3, #8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eca:	f043 0220 	orr.w	r2, r3, #32
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee4:	f043 0210 	orr.w	r2, r3, #16
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8008020 <HAL_SD_IRQHandler+0x36c>)
 8007ef2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007f02:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f12:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f32:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 ff15 	bl	800ad68 <SDMMC_CmdStopTransfer>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f58:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f62:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f851 	bl	8008024 <HAL_SD_ErrorCallback>
}
 8007f82:	e049      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d044      	beq.n	8008018 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d040      	beq.n	8008018 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f834 	bl	8008024 <HAL_SD_ErrorCallback>
}
 8007fbc:	e02c      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d025      	beq.n	8008018 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10c      	bne.n	8007ffe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 f84a 	bl	8009088 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007ff4:	e010      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f832 	bl	8009060 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007ffc:	e00c      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f833 	bl	8009074 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800800e:	e003      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f81b 	bl	800904c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008016:	e7ff      	b.n	8008018 <HAL_SD_IRQHandler+0x364>
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	18000f3a 	.word	0x18000f3a

08008024 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008046:	0f9b      	lsrs	r3, r3, #30
 8008048:	b2da      	uxtb	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008052:	0e9b      	lsrs	r3, r3, #26
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008064:	0e1b      	lsrs	r3, r3, #24
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	b2da      	uxtb	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	b2da      	uxtb	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	b2da      	uxtb	r2, r3
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008098:	0d1b      	lsrs	r3, r3, #20
 800809a:	b29a      	uxth	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080a4:	0c1b      	lsrs	r3, r3, #16
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080b6:	0bdb      	lsrs	r3, r3, #15
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c8:	0b9b      	lsrs	r3, r3, #14
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080da:	0b5b      	lsrs	r3, r3, #13
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ec:	0b1b      	lsrs	r3, r3, #12
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	d163      	bne.n	80081d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800810c:	009a      	lsls	r2, r3, #2
 800810e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008112:	4013      	ands	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008118:	0f92      	lsrs	r2, r2, #30
 800811a:	431a      	orrs	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008124:	0edb      	lsrs	r3, r3, #27
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	b2da      	uxtb	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008136:	0e1b      	lsrs	r3, r3, #24
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008148:	0d5b      	lsrs	r3, r3, #21
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	b2da      	uxtb	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800815a:	0c9b      	lsrs	r3, r3, #18
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800816c:	0bdb      	lsrs	r3, r3, #15
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	b2da      	uxtb	r2, r3
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	7e1b      	ldrb	r3, [r3, #24]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	3302      	adds	r3, #2
 8008190:	2201      	movs	r2, #1
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800819a:	fb03 f202 	mul.w	r2, r3, r2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	7a1b      	ldrb	r3, [r3, #8]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	2201      	movs	r2, #1
 80081ae:	409a      	lsls	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081bc:	0a52      	lsrs	r2, r2, #9
 80081be:	fb03 f202 	mul.w	r2, r3, r2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80081ce:	e031      	b.n	8008234 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d11d      	bne.n	8008214 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081dc:	041b      	lsls	r3, r3, #16
 80081de:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081e6:	0c1b      	lsrs	r3, r3, #16
 80081e8:	431a      	orrs	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	3301      	adds	r3, #1
 80081f4:	029a      	lsls	r2, r3, #10
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008208:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	655a      	str	r2, [r3, #84]	@ 0x54
 8008212:	e00f      	b.n	8008234 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a58      	ldr	r2, [pc, #352]	@ (800837c <HAL_SD_GetCardCSD+0x344>)
 800821a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008220:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e09d      	b.n	8008370 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008238:	0b9b      	lsrs	r3, r3, #14
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	b2da      	uxtb	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800824a:	09db      	lsrs	r3, r3, #7
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800826c:	0fdb      	lsrs	r3, r3, #31
 800826e:	b2da      	uxtb	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008278:	0f5b      	lsrs	r3, r3, #29
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	b2da      	uxtb	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800828a:	0e9b      	lsrs	r3, r3, #26
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800829c:	0d9b      	lsrs	r3, r3, #22
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ae:	0d5b      	lsrs	r3, r3, #21
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ca:	0c1b      	lsrs	r3, r3, #16
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082de:	0bdb      	lsrs	r3, r3, #15
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082f2:	0b9b      	lsrs	r3, r3, #14
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008306:	0b5b      	lsrs	r3, r3, #13
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	b2da      	uxtb	r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800831a:	0b1b      	lsrs	r3, r3, #12
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800832e:	0a9b      	lsrs	r3, r3, #10
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	b2da      	uxtb	r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	b2da      	uxtb	r2, r3
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008356:	085b      	lsrs	r3, r3, #1
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800835e:	b2da      	uxtb	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	1fe00fff 	.word	0x1fe00fff

08008380 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b094      	sub	sp, #80	@ 0x50
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b03      	cmp	r3, #3
 800839a:	d101      	bne.n	80083a0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e0a7      	b.n	80084f0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80083a0:	f107 0308 	add.w	r3, r7, #8
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fb62 	bl	8008a70 <SD_SendSDStatus>
 80083ac:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80083ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d011      	beq.n	80083d8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a4f      	ldr	r2, [pc, #316]	@ (80084f8 <HAL_SD_GetCardStatus+0x178>)
 80083ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80083d6:	e070      	b.n	80084ba <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	099b      	lsrs	r3, r3, #6
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008402:	b29a      	uxth	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	0e1b      	lsrs	r3, r3, #24
 8008408:	b29b      	uxth	r3, r3
 800840a:	4313      	orrs	r3, r2
 800840c:	b29a      	uxth	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	061a      	lsls	r2, r3, #24
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800841e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008428:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	0e1b      	lsrs	r3, r3, #24
 800842e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	0a1b      	lsrs	r3, r3, #8
 8008440:	b2da      	uxtb	r2, r3
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	0d1b      	lsrs	r3, r3, #20
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	b2da      	uxtb	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	0c1b      	lsrs	r3, r3, #16
 800845a:	b29b      	uxth	r3, r3
 800845c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008460:	b29a      	uxth	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	b29b      	uxth	r3, r3
 8008466:	b2db      	uxtb	r3, r3
 8008468:	b29b      	uxth	r3, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	b29a      	uxth	r2, r3
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	0a9b      	lsrs	r3, r3, #10
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800847c:	b2da      	uxtb	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	0a1b      	lsrs	r3, r3, #8
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	b2da      	uxtb	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	091b      	lsrs	r3, r3, #4
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	b2da      	uxtb	r2, r3
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	0e1b      	lsrs	r3, r3, #24
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80084c2:	4618      	mov	r0, r3
 80084c4:	f002 fba0 	bl	800ac08 <SDMMC_CmdBlockLength>
 80084c8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80084ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00d      	beq.n	80084ec <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a08      	ldr	r2, [pc, #32]	@ (80084f8 <HAL_SD_GetCardStatus+0x178>)
 80084d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084dc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80084ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3750      	adds	r7, #80	@ 0x50
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	1fe00fff 	.word	0x1fe00fff

080084fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b08d      	sub	sp, #52	@ 0x34
 8008558:	af02      	add	r7, sp, #8
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2203      	movs	r2, #3
 8008568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	2b03      	cmp	r3, #3
 8008572:	d02e      	beq.n	80085d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857a:	d106      	bne.n	800858a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008580:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	635a      	str	r2, [r3, #52]	@ 0x34
 8008588:	e029      	b.n	80085de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008590:	d10a      	bne.n	80085a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fb64 	bl	8008c60 <SD_WideBus_Enable>
 8008598:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80085a6:	e01a      	b.n	80085de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fba1 	bl	8008cf6 <SD_WideBus_Disable>
 80085b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80085c2:	e00c      	b.n	80085de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80085d0:	e005      	b.n	80085de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a5f      	ldr	r2, [pc, #380]	@ (8008768 <HAL_SD_ConfigWideBusOperation+0x214>)
 80085ec:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085f4:	e096      	b.n	8008724 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80085f6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80085fa:	f04f 0100 	mov.w	r1, #0
 80085fe:	f7fd fdf5 	bl	80061ec <HAL_RCCEx_GetPeriphCLKFreq>
 8008602:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 8083 	beq.w	8008712 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695a      	ldr	r2, [r3, #20]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4950      	ldr	r1, [pc, #320]	@ (800876c <HAL_SD_ConfigWideBusOperation+0x218>)
 800862a:	fba1 1303 	umull	r1, r3, r1, r3
 800862e:	0e1b      	lsrs	r3, r3, #24
 8008630:	429a      	cmp	r2, r3
 8008632:	d303      	bcc.n	800863c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	e05a      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008644:	d103      	bne.n	800864e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	e051      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008656:	d126      	bne.n	80086a6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10e      	bne.n	800867e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	4a43      	ldr	r2, [pc, #268]	@ (8008770 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d906      	bls.n	8008676 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4a40      	ldr	r2, [pc, #256]	@ (800876c <HAL_SD_ConfigWideBusOperation+0x218>)
 800866c:	fba2 2303 	umull	r2, r3, r2, r3
 8008670:	0e5b      	lsrs	r3, r3, #25
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	e03d      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	61bb      	str	r3, [r7, #24]
 800867c:	e039      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	fbb2 f3f3 	udiv	r3, r2, r3
 800868a:	4a39      	ldr	r2, [pc, #228]	@ (8008770 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d906      	bls.n	800869e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	4a36      	ldr	r2, [pc, #216]	@ (800876c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008694:	fba2 2303 	umull	r2, r3, r2, r3
 8008698:	0e5b      	lsrs	r3, r3, #25
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	e029      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	61bb      	str	r3, [r7, #24]
 80086a4:	e025      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10e      	bne.n	80086cc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	4a30      	ldr	r2, [pc, #192]	@ (8008774 <HAL_SD_ConfigWideBusOperation+0x220>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d906      	bls.n	80086c4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4a2c      	ldr	r2, [pc, #176]	@ (800876c <HAL_SD_ConfigWideBusOperation+0x218>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	0e1b      	lsrs	r3, r3, #24
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	e016      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e012      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d8:	4a26      	ldr	r2, [pc, #152]	@ (8008774 <HAL_SD_ConfigWideBusOperation+0x220>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d906      	bls.n	80086ec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4a22      	ldr	r2, [pc, #136]	@ (800876c <HAL_SD_ConfigWideBusOperation+0x218>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	0e1b      	lsrs	r3, r3, #24
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	e002      	b.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681c      	ldr	r4, [r3, #0]
 80086f6:	466a      	mov	r2, sp
 80086f8:	f107 0314 	add.w	r3, r7, #20
 80086fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008700:	e882 0003 	stmia.w	r2, {r0, r1}
 8008704:	f107 0308 	add.w	r3, r7, #8
 8008708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800870a:	4620      	mov	r0, r4
 800870c:	f002 f99e 	bl	800aa4c <SDMMC_Init>
 8008710:	e008      	b.n	8008724 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008716:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800872c:	4618      	mov	r0, r3
 800872e:	f002 fa6b 	bl	800ac08 <SDMMC_CmdBlockLength>
 8008732:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a0a      	ldr	r2, [pc, #40]	@ (8008768 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008740:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800875c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008760:	4618      	mov	r0, r3
 8008762:	372c      	adds	r7, #44	@ 0x2c
 8008764:	46bd      	mov	sp, r7
 8008766:	bd90      	pop	{r4, r7, pc}
 8008768:	1fe00fff 	.word	0x1fe00fff
 800876c:	55e63b89 	.word	0x55e63b89
 8008770:	02faf080 	.word	0x02faf080
 8008774:	017d7840 	.word	0x017d7840

08008778 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008784:	f107 030c 	add.w	r3, r7, #12
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa40 	bl	8008c10 <SD_SendStatus>
 8008790:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	0a5b      	lsrs	r3, r3, #9
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80087ae:	693b      	ldr	r3, [r7, #16]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b090      	sub	sp, #64	@ 0x40
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80087c4:	f7f9 fa78 	bl	8001cb8 <HAL_GetTick>
 80087c8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f002 f995 	bl	800aafe <SDMMC_GetPowerState>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80087de:	e0b5      	b.n	800894c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d02e      	beq.n	8008846 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f002 fbe0 	bl	800afb2 <SDMMC_CmdSendCID>
 80087f2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80087f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <SD_InitCard+0x46>
    {
      return errorstate;
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	e0a6      	b.n	800894c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f002 f9c0 	bl	800ab8a <SDMMC_GetResponse>
 800880a:	4602      	mov	r2, r0
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2104      	movs	r1, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f002 f9b7 	bl	800ab8a <SDMMC_GetResponse>
 800881c:	4602      	mov	r2, r0
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2108      	movs	r1, #8
 8008828:	4618      	mov	r0, r3
 800882a:	f002 f9ae 	bl	800ab8a <SDMMC_GetResponse>
 800882e:	4602      	mov	r2, r0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	210c      	movs	r1, #12
 800883a:	4618      	mov	r0, r3
 800883c:	f002 f9a5 	bl	800ab8a <SDMMC_GetResponse>
 8008840:	4602      	mov	r2, r0
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884a:	2b03      	cmp	r3, #3
 800884c:	d01d      	beq.n	800888a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800884e:	e019      	b.n	8008884 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f107 020a 	add.w	r2, r7, #10
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f002 fbe8 	bl	800b030 <SDMMC_CmdSetRelAdd>
 8008860:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <SD_InitCard+0xb4>
      {
        return errorstate;
 8008868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886a:	e06f      	b.n	800894c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800886c:	f7f9 fa24 	bl	8001cb8 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	f241 3287 	movw	r2, #4999	@ 0x1387
 800887a:	4293      	cmp	r3, r2
 800887c:	d902      	bls.n	8008884 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800887e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008882:	e063      	b.n	800894c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008884:	897b      	ldrh	r3, [r7, #10]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0e2      	beq.n	8008850 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888e:	2b03      	cmp	r3, #3
 8008890:	d036      	beq.n	8008900 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008892:	897b      	ldrh	r3, [r7, #10]
 8008894:	461a      	mov	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f002 fba2 	bl	800aff0 <SDMMC_CmdSendCSD>
 80088ac:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80088ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <SD_InitCard+0x100>
    {
      return errorstate;
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	e049      	b.n	800894c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2100      	movs	r1, #0
 80088be:	4618      	mov	r0, r3
 80088c0:	f002 f963 	bl	800ab8a <SDMMC_GetResponse>
 80088c4:	4602      	mov	r2, r0
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2104      	movs	r1, #4
 80088d0:	4618      	mov	r0, r3
 80088d2:	f002 f95a 	bl	800ab8a <SDMMC_GetResponse>
 80088d6:	4602      	mov	r2, r0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2108      	movs	r1, #8
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 f951 	bl	800ab8a <SDMMC_GetResponse>
 80088e8:	4602      	mov	r2, r0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	210c      	movs	r1, #12
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 f948 	bl	800ab8a <SDMMC_GetResponse>
 80088fa:	4602      	mov	r2, r0
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2104      	movs	r1, #4
 8008906:	4618      	mov	r0, r3
 8008908:	f002 f93f 	bl	800ab8a <SDMMC_GetResponse>
 800890c:	4603      	mov	r3, r0
 800890e:	0d1a      	lsrs	r2, r3, #20
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fb8c 	bl	8008038 <HAL_SD_GetCardCSD>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008926:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800892a:	e00f      	b.n	800894c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008934:	041b      	lsls	r3, r3, #16
 8008936:	4619      	mov	r1, r3
 8008938:	4610      	mov	r0, r2
 800893a:	f002 fa51 	bl	800ade0 <SDMMC_CmdSelDesel>
 800893e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <SD_InitCard+0x192>
  {
    return errorstate;
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	e000      	b.n	800894c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3740      	adds	r7, #64	@ 0x40
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f002 fa5a 	bl	800ae26 <SDMMC_CmdGoIdleState>
 8008972:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <SD_PowerON+0x2a>
  {
    return errorstate;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	e072      	b.n	8008a64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4618      	mov	r0, r3
 8008984:	f002 fa6d 	bl	800ae62 <SDMMC_CmdOperCond>
 8008988:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008990:	d10d      	bne.n	80089ae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4618      	mov	r0, r3
 800899e:	f002 fa42 	bl	800ae26 <SDMMC_CmdGoIdleState>
 80089a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <SD_PowerON+0x60>
    {
      return errorstate;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	e05a      	b.n	8008a64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d137      	bne.n	8008a2c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 fa6d 	bl	800aea2 <SDMMC_CmdAppCommand>
 80089c8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02d      	beq.n	8008a2c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089d4:	e046      	b.n	8008a64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f002 fa60 	bl	800aea2 <SDMMC_CmdAppCommand>
 80089e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <SD_PowerON+0x9a>
    {
      return errorstate;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	e03a      	b.n	8008a64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	491e      	ldr	r1, [pc, #120]	@ (8008a6c <SD_PowerON+0x118>)
 80089f4:	4618      	mov	r0, r3
 80089f6:	f002 fa77 	bl	800aee8 <SDMMC_CmdAppOperCommand>
 80089fa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a02:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a06:	e02d      	b.n	8008a64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f002 f8bb 	bl	800ab8a <SDMMC_GetResponse>
 8008a14:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	0fdb      	lsrs	r3, r3, #31
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <SD_PowerON+0xce>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e000      	b.n	8008a24 <SD_PowerON+0xd0>
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]

    count++;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d802      	bhi.n	8008a3c <SD_PowerON+0xe8>
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0cc      	beq.n	80089d6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d902      	bls.n	8008a4c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a4a:	e00b      	b.n	8008a64 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	c1100000 	.word	0xc1100000

08008a70 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08c      	sub	sp, #48	@ 0x30
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a7a:	f7f9 f91d 	bl	8001cb8 <HAL_GetTick>
 8008a7e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 f87d 	bl	800ab8a <SDMMC_GetResponse>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a9a:	d102      	bne.n	8008aa2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008aa0:	e0b0      	b.n	8008c04 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2140      	movs	r1, #64	@ 0x40
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f002 f8ad 	bl	800ac08 <SDMMC_CmdBlockLength>
 8008aae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	e0a0      	b.n	8008c04 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f002 f9e7 	bl	800aea2 <SDMMC_CmdAppCommand>
 8008ad4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	e08d      	b.n	8008c04 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008aee:	2340      	movs	r3, #64	@ 0x40
 8008af0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008af2:	2360      	movs	r3, #96	@ 0x60
 8008af4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008af6:	2302      	movs	r3, #2
 8008af8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008afe:	2301      	movs	r3, #1
 8008b00:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f107 0208 	add.w	r2, r7, #8
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f002 f84f 	bl	800abb0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f002 facf 	bl	800b0ba <SDMMC_CmdStatusRegister>
 8008b1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d02b      	beq.n	8008b7c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	e069      	b.n	8008c04 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d013      	beq.n	8008b66 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008b3e:	2300      	movs	r3, #0
 8008b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b42:	e00d      	b.n	8008b60 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f001 ffa9 	bl	800aaa0 <SDMMC_ReadFIFO>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	601a      	str	r2, [r3, #0]
        pData++;
 8008b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b56:	3304      	adds	r3, #4
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	2b07      	cmp	r3, #7
 8008b64:	d9ee      	bls.n	8008b44 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b66:	f7f9 f8a7 	bl	8001cb8 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d102      	bne.n	8008b7c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b7a:	e043      	b.n	8008c04 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b82:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0d2      	beq.n	8008b30 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b90:	f003 0308 	and.w	r3, r3, #8
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b98:	2308      	movs	r3, #8
 8008b9a:	e033      	b.n	8008c04 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008baa:	2302      	movs	r3, #2
 8008bac:	e02a      	b.n	8008c04 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d017      	beq.n	8008bec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	e021      	b.n	8008c04 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 ff6b 	bl	800aaa0 <SDMMC_ReadFIFO>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bce:	601a      	str	r2, [r3, #0]
    pData++;
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008bd6:	f7f9 f86f 	bl	8001cb8 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d102      	bne.n	8008bec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008be6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008bea:	e00b      	b.n	8008c04 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e2      	bne.n	8008bc0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a03      	ldr	r2, [pc, #12]	@ (8008c0c <SD_SendSDStatus+0x19c>)
 8008c00:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3730      	adds	r7, #48	@ 0x30
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	18000f3a 	.word	0x18000f3a

08008c10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c24:	e018      	b.n	8008c58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2e:	041b      	lsls	r3, r3, #16
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f002 fa1e 	bl	800b074 <SDMMC_CmdSendStatus>
 8008c38:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	e009      	b.n	8008c58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 ff9d 	bl	800ab8a <SDMMC_GetResponse>
 8008c50:	4602      	mov	r2, r0
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 ff87 	bl	800ab8a <SDMMC_GetResponse>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c86:	d102      	bne.n	8008c8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008c8c:	e02f      	b.n	8008cee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c8e:	f107 030c 	add.w	r3, r7, #12
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f879 	bl	8008d8c <SD_FindSCR>
 8008c9a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	e023      	b.n	8008cee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01c      	beq.n	8008cea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f002 f8f0 	bl	800aea2 <SDMMC_CmdAppCommand>
 8008cc2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	e00f      	b.n	8008cee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2102      	movs	r1, #2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f002 f927 	bl	800af28 <SDMMC_CmdBusWidth>
 8008cda:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	e003      	b.n	8008cee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e001      	b.n	8008cee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	2300      	movs	r3, #0
 8008d04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 ff3c 	bl	800ab8a <SDMMC_GetResponse>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d1c:	d102      	bne.n	8008d24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d22:	e02f      	b.n	8008d84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d24:	f107 030c 	add.w	r3, r7, #12
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f82e 	bl	8008d8c <SD_FindSCR>
 8008d30:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	e023      	b.n	8008d84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d01c      	beq.n	8008d80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4e:	041b      	lsls	r3, r3, #16
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f002 f8a5 	bl	800aea2 <SDMMC_CmdAppCommand>
 8008d58:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	e00f      	b.n	8008d84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 f8dc 	bl	800af28 <SDMMC_CmdBusWidth>
 8008d70:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	e003      	b.n	8008d84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e001      	b.n	8008d84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d80:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08e      	sub	sp, #56	@ 0x38
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d96:	f7f8 ff8f 	bl	8001cb8 <HAL_GetTick>
 8008d9a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008da0:	2300      	movs	r3, #0
 8008da2:	60bb      	str	r3, [r7, #8]
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2108      	movs	r1, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 ff28 	bl	800ac08 <SDMMC_CmdBlockLength>
 8008db8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	e0ad      	b.n	8008f20 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f002 f866 	bl	800aea2 <SDMMC_CmdAppCommand>
 8008dd6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	e09e      	b.n	8008f20 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295
 8008de6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008de8:	2308      	movs	r3, #8
 8008dea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008dec:	2330      	movs	r3, #48	@ 0x30
 8008dee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008df0:	2302      	movs	r3, #2
 8008df2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f107 0210 	add.w	r2, r7, #16
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fed2 	bl	800abb0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 f8ac 	bl	800af6e <SDMMC_CmdSendSCR>
 8008e16:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d027      	beq.n	8008e6e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	e07e      	b.n	8008f20 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d113      	bne.n	8008e58 <SD_FindSCR+0xcc>
 8008e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d110      	bne.n	8008e58 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 fe30 	bl	800aaa0 <SDMMC_ReadFIFO>
 8008e40:	4603      	mov	r3, r0
 8008e42:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fe29 	bl	800aaa0 <SDMMC_ReadFIFO>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	60fb      	str	r3, [r7, #12]
      index++;
 8008e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e54:	3301      	adds	r3, #1
 8008e56:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e58:	f7f8 ff2e 	bl	8001cb8 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d102      	bne.n	8008e6e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e6c:	e058      	b.n	8008f20 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e74:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0d1      	beq.n	8008e22 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2208      	movs	r2, #8
 8008e92:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e94:	2308      	movs	r3, #8
 8008e96:	e043      	b.n	8008f20 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e036      	b.n	8008f20 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008ec8:	2320      	movs	r3, #32
 8008eca:	e029      	b.n	8008f20 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a15      	ldr	r2, [pc, #84]	@ (8008f28 <SD_FindSCR+0x19c>)
 8008ed2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	061a      	lsls	r2, r3, #24
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ee0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	0a1b      	lsrs	r3, r3, #8
 8008ee6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008eea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	0e1b      	lsrs	r3, r3, #24
 8008ef0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	601a      	str	r2, [r3, #0]
    scr++;
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	3304      	adds	r3, #4
 8008efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	061a      	lsls	r2, r3, #24
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	0a1b      	lsrs	r3, r3, #8
 8008f0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008f12:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	0e1b      	lsrs	r3, r3, #24
 8008f18:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3738      	adds	r7, #56	@ 0x38
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	18000f3a 	.word	0x18000f3a

08008f2c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f38:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3e:	2b1f      	cmp	r3, #31
 8008f40:	d936      	bls.n	8008fb0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	e027      	b.n	8008f98 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fda7 	bl	800aaa0 <SDMMC_ReadFIFO>
 8008f52:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	0a1b      	lsrs	r3, r3, #8
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	0c1b      	lsrs	r3, r3, #16
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	3301      	adds	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b07      	cmp	r3, #7
 8008f9c:	d9d4      	bls.n	8008f48 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa8:	f1a3 0220 	sub.w	r2, r3, #32
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	2b1f      	cmp	r3, #31
 8008fcc:	d93a      	bls.n	8009044 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	e02b      	b.n	800902c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	021a      	lsls	r2, r3, #8
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	041a      	lsls	r2, r3, #16
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	3301      	adds	r3, #1
 8009002:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	061a      	lsls	r2, r3, #24
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f107 020c 	add.w	r2, r7, #12
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fd4a 	bl	800aaba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	3301      	adds	r3, #1
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b07      	cmp	r3, #7
 8009030:	d9d0      	bls.n	8008fd4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	f1a3 0220 	sub.w	r2, r3, #32
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	621a      	str	r2, [r3, #32]
  }
}
 8009044:	bf00      	nop
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e10f      	b.n	80092ce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a87      	ldr	r2, [pc, #540]	@ (80092d8 <HAL_SPI_Init+0x23c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00f      	beq.n	80090de <HAL_SPI_Init+0x42>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a86      	ldr	r2, [pc, #536]	@ (80092dc <HAL_SPI_Init+0x240>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00a      	beq.n	80090de <HAL_SPI_Init+0x42>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a84      	ldr	r2, [pc, #528]	@ (80092e0 <HAL_SPI_Init+0x244>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d005      	beq.n	80090de <HAL_SPI_Init+0x42>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2b0f      	cmp	r3, #15
 80090d8:	d901      	bls.n	80090de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e0f7      	b.n	80092ce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fbbc 	bl	800985c <SPI_GetPacketSize>
 80090e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a7b      	ldr	r2, [pc, #492]	@ (80092d8 <HAL_SPI_Init+0x23c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00c      	beq.n	800910a <HAL_SPI_Init+0x6e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a79      	ldr	r2, [pc, #484]	@ (80092dc <HAL_SPI_Init+0x240>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d007      	beq.n	800910a <HAL_SPI_Init+0x6e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a78      	ldr	r2, [pc, #480]	@ (80092e0 <HAL_SPI_Init+0x244>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d002      	beq.n	800910a <HAL_SPI_Init+0x6e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b08      	cmp	r3, #8
 8009108:	d811      	bhi.n	800912e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800910e:	4a72      	ldr	r2, [pc, #456]	@ (80092d8 <HAL_SPI_Init+0x23c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d009      	beq.n	8009128 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a70      	ldr	r2, [pc, #448]	@ (80092dc <HAL_SPI_Init+0x240>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_SPI_Init+0x8c>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a6f      	ldr	r2, [pc, #444]	@ (80092e0 <HAL_SPI_Init+0x244>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d104      	bne.n	8009132 <HAL_SPI_Init+0x96>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b10      	cmp	r3, #16
 800912c:	d901      	bls.n	8009132 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e0cd      	b.n	80092ce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7f8 fbd2 	bl	80018f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0201 	bic.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800916e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009178:	d119      	bne.n	80091ae <HAL_SPI_Init+0x112>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009182:	d103      	bne.n	800918c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009188:	2b00      	cmp	r3, #0
 800918a:	d008      	beq.n	800919e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10c      	bne.n	80091ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800919c:	d107      	bne.n	80091ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80091ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00f      	beq.n	80091da <HAL_SPI_Init+0x13e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d90b      	bls.n	80091da <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	e007      	b.n	80091ea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69da      	ldr	r2, [r3, #28]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f2:	431a      	orrs	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fc:	ea42 0103 	orr.w	r1, r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921a:	431a      	orrs	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	431a      	orrs	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800924a:	ea42 0103 	orr.w	r1, r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d113      	bne.n	800928a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009274:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009288:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0201 	bic.w	r2, r2, #1
 8009298:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40013000 	.word	0x40013000
 80092dc:	40003800 	.word	0x40003800
 80092e0:	40003c00 	.word	0x40003c00

080092e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	4613      	mov	r3, r2
 80092f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3320      	adds	r3, #32
 80092fa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092fc:	f7f8 fcdc 	bl	8001cb8 <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b01      	cmp	r3, #1
 800930c:	d001      	beq.n	8009312 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800930e:	2302      	movs	r3, #2
 8009310:	e1d1      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_SPI_Transmit+0x3a>
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e1c9      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009328:	2b01      	cmp	r3, #1
 800932a:	d101      	bne.n	8009330 <HAL_SPI_Transmit+0x4c>
 800932c:	2302      	movs	r3, #2
 800932e:	e1c2      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2203      	movs	r2, #3
 800933c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	88fa      	ldrh	r2, [r7, #6]
 8009352:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	88fa      	ldrh	r2, [r7, #6]
 800935a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009388:	d108      	bne.n	800939c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e009      	b.n	80093b0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80093ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4b96      	ldr	r3, [pc, #600]	@ (8009610 <HAL_SPI_Transmit+0x32c>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	88f9      	ldrh	r1, [r7, #6]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	430b      	orrs	r3, r1
 80093c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093dc:	d107      	bne.n	80093ee <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2b0f      	cmp	r3, #15
 80093f4:	d947      	bls.n	8009486 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80093f6:	e03f      	b.n	8009478 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b02      	cmp	r3, #2
 8009404:	d114      	bne.n	8009430 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009416:	1d1a      	adds	r2, r3, #4
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009422:	b29b      	uxth	r3, r3
 8009424:	3b01      	subs	r3, #1
 8009426:	b29a      	uxth	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800942e:	e023      	b.n	8009478 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009430:	f7f8 fc42 	bl	8001cb8 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d803      	bhi.n	8009448 <HAL_SPI_Transmit+0x164>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009446:	d102      	bne.n	800944e <HAL_SPI_Transmit+0x16a>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d114      	bne.n	8009478 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f936 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800945a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e11e      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1b9      	bne.n	80093f8 <HAL_SPI_Transmit+0x114>
 8009484:	e0f1      	b.n	800966a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b07      	cmp	r3, #7
 800948c:	f240 80e6 	bls.w	800965c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009490:	e05d      	b.n	800954e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b02      	cmp	r3, #2
 800949e:	d132      	bne.n	8009506 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d918      	bls.n	80094de <HAL_SPI_Transmit+0x1fa>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d014      	beq.n	80094de <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094c4:	1d1a      	adds	r2, r3, #4
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b02      	subs	r3, #2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80094dc:	e037      	b.n	800954e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094e2:	881a      	ldrh	r2, [r3, #0]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094ec:	1c9a      	adds	r2, r3, #2
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009504:	e023      	b.n	800954e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009506:	f7f8 fbd7 	bl	8001cb8 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d803      	bhi.n	800951e <HAL_SPI_Transmit+0x23a>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d102      	bne.n	8009524 <HAL_SPI_Transmit+0x240>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d114      	bne.n	800954e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f8cb 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009530:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e0b3      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d19b      	bne.n	8009492 <HAL_SPI_Transmit+0x1ae>
 800955a:	e086      	b.n	800966a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b02      	cmp	r3, #2
 8009568:	d154      	bne.n	8009614 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009570:	b29b      	uxth	r3, r3
 8009572:	2b03      	cmp	r3, #3
 8009574:	d918      	bls.n	80095a8 <HAL_SPI_Transmit+0x2c4>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	2b40      	cmp	r3, #64	@ 0x40
 800957c:	d914      	bls.n	80095a8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6812      	ldr	r2, [r2, #0]
 8009588:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b04      	subs	r3, #4
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80095a6:	e059      	b.n	800965c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d917      	bls.n	80095e4 <HAL_SPI_Transmit+0x300>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d013      	beq.n	80095e4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095c0:	881a      	ldrh	r2, [r3, #0]
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095ca:	1c9a      	adds	r2, r3, #2
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	3b02      	subs	r3, #2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80095e2:	e03b      	b.n	800965c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3320      	adds	r3, #32
 80095ee:	7812      	ldrb	r2, [r2, #0]
 80095f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800960e:	e025      	b.n	800965c <HAL_SPI_Transmit+0x378>
 8009610:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009614:	f7f8 fb50 	bl	8001cb8 <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d803      	bhi.n	800962c <HAL_SPI_Transmit+0x348>
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d102      	bne.n	8009632 <HAL_SPI_Transmit+0x34e>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d114      	bne.n	800965c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f844 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800963e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e02c      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009662:	b29b      	uxth	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	f47f af79 	bne.w	800955c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	2108      	movs	r1, #8
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 f8c3 	bl	8009800 <SPI_WaitOnFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009686:	f043 0220 	orr.w	r2, r3, #32
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f815 	bl	80096c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
  }
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop

080096c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	699a      	ldr	r2, [r3, #24]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0208 	orr.w	r2, r2, #8
 80096de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0210 	orr.w	r2, r2, #16
 80096ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6919      	ldr	r1, [r3, #16]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b3c      	ldr	r3, [pc, #240]	@ (80097fc <SPI_CloseTransfer+0x13c>)
 800970c:	400b      	ands	r3, r1
 800970e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800971e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b04      	cmp	r3, #4
 800972a:	d014      	beq.n	8009756 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00f      	beq.n	8009756 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800973c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0220 	orr.w	r2, r2, #32
 8009754:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d014      	beq.n	800978c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00f      	beq.n	800978c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009772:	f043 0204 	orr.w	r2, r3, #4
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800978a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00f      	beq.n	80097b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800979c:	f043 0201 	orr.w	r2, r3, #1
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00f      	beq.n	80097e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097c6:	f043 0208 	orr.w	r2, r3, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80097f0:	bf00      	nop
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	fffffc90 	.word	0xfffffc90

08009800 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009810:	e010      	b.n	8009834 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009812:	f7f8 fa51 	bl	8001cb8 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d803      	bhi.n	800982a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d102      	bne.n	8009830 <SPI_WaitOnFlagUntilTimeout+0x30>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e00f      	b.n	8009854 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4013      	ands	r3, r2
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	429a      	cmp	r2, r3
 8009850:	d0df      	beq.n	8009812 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	3301      	adds	r3, #1
 8009874:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3307      	adds	r3, #7
 800987a:	08db      	lsrs	r3, r3, #3
 800987c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	fb02 f303 	mul.w	r3, r2, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e042      	b.n	800992a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f8 f8aa 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2224      	movs	r2, #36	@ 0x24
 80098c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0201 	bic.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fd91 	bl	800a404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f826 	bl	8009934 <UART_SetConfig>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e01b      	b.n	800992a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0201 	orr.w	r2, r2, #1
 8009920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fe10 	bl	800a548 <UART_CheckIdleState>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009938:	b092      	sub	sp, #72	@ 0x48
 800993a:	af00      	add	r7, sp, #0
 800993c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	431a      	orrs	r2, r3
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	431a      	orrs	r2, r3
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	4313      	orrs	r3, r2
 800995a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4bbe      	ldr	r3, [pc, #760]	@ (8009c5c <UART_SetConfig+0x328>)
 8009964:	4013      	ands	r3, r2
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	6812      	ldr	r2, [r2, #0]
 800996a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800996c:	430b      	orrs	r3, r1
 800996e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4ab3      	ldr	r2, [pc, #716]	@ (8009c60 <UART_SetConfig+0x32c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d004      	beq.n	80099a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800999c:	4313      	orrs	r3, r2
 800999e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689a      	ldr	r2, [r3, #8]
 80099a6:	4baf      	ldr	r3, [pc, #700]	@ (8009c64 <UART_SetConfig+0x330>)
 80099a8:	4013      	ands	r3, r2
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	6812      	ldr	r2, [r2, #0]
 80099ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099b0:	430b      	orrs	r3, r1
 80099b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ba:	f023 010f 	bic.w	r1, r3, #15
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4aa6      	ldr	r2, [pc, #664]	@ (8009c68 <UART_SetConfig+0x334>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d177      	bne.n	8009ac4 <UART_SetConfig+0x190>
 80099d4:	4ba5      	ldr	r3, [pc, #660]	@ (8009c6c <UART_SetConfig+0x338>)
 80099d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099dc:	2b28      	cmp	r3, #40	@ 0x28
 80099de:	d86d      	bhi.n	8009abc <UART_SetConfig+0x188>
 80099e0:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <UART_SetConfig+0xb4>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a8d 	.word	0x08009a8d
 80099ec:	08009abd 	.word	0x08009abd
 80099f0:	08009abd 	.word	0x08009abd
 80099f4:	08009abd 	.word	0x08009abd
 80099f8:	08009abd 	.word	0x08009abd
 80099fc:	08009abd 	.word	0x08009abd
 8009a00:	08009abd 	.word	0x08009abd
 8009a04:	08009abd 	.word	0x08009abd
 8009a08:	08009a95 	.word	0x08009a95
 8009a0c:	08009abd 	.word	0x08009abd
 8009a10:	08009abd 	.word	0x08009abd
 8009a14:	08009abd 	.word	0x08009abd
 8009a18:	08009abd 	.word	0x08009abd
 8009a1c:	08009abd 	.word	0x08009abd
 8009a20:	08009abd 	.word	0x08009abd
 8009a24:	08009abd 	.word	0x08009abd
 8009a28:	08009a9d 	.word	0x08009a9d
 8009a2c:	08009abd 	.word	0x08009abd
 8009a30:	08009abd 	.word	0x08009abd
 8009a34:	08009abd 	.word	0x08009abd
 8009a38:	08009abd 	.word	0x08009abd
 8009a3c:	08009abd 	.word	0x08009abd
 8009a40:	08009abd 	.word	0x08009abd
 8009a44:	08009abd 	.word	0x08009abd
 8009a48:	08009aa5 	.word	0x08009aa5
 8009a4c:	08009abd 	.word	0x08009abd
 8009a50:	08009abd 	.word	0x08009abd
 8009a54:	08009abd 	.word	0x08009abd
 8009a58:	08009abd 	.word	0x08009abd
 8009a5c:	08009abd 	.word	0x08009abd
 8009a60:	08009abd 	.word	0x08009abd
 8009a64:	08009abd 	.word	0x08009abd
 8009a68:	08009aad 	.word	0x08009aad
 8009a6c:	08009abd 	.word	0x08009abd
 8009a70:	08009abd 	.word	0x08009abd
 8009a74:	08009abd 	.word	0x08009abd
 8009a78:	08009abd 	.word	0x08009abd
 8009a7c:	08009abd 	.word	0x08009abd
 8009a80:	08009abd 	.word	0x08009abd
 8009a84:	08009abd 	.word	0x08009abd
 8009a88:	08009ab5 	.word	0x08009ab5
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e222      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009a94:	2304      	movs	r3, #4
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e21e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009a9c:	2308      	movs	r3, #8
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e21a      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e216      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009aac:	2320      	movs	r3, #32
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e212      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ab4:	2340      	movs	r3, #64	@ 0x40
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e20e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009abc:	2380      	movs	r3, #128	@ 0x80
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e20a      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a69      	ldr	r2, [pc, #420]	@ (8009c70 <UART_SetConfig+0x33c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d130      	bne.n	8009b30 <UART_SetConfig+0x1fc>
 8009ace:	4b67      	ldr	r3, [pc, #412]	@ (8009c6c <UART_SetConfig+0x338>)
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d826      	bhi.n	8009b28 <UART_SetConfig+0x1f4>
 8009ada:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae0 <UART_SetConfig+0x1ac>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009af9 	.word	0x08009af9
 8009ae4:	08009b01 	.word	0x08009b01
 8009ae8:	08009b09 	.word	0x08009b09
 8009aec:	08009b11 	.word	0x08009b11
 8009af0:	08009b19 	.word	0x08009b19
 8009af4:	08009b21 	.word	0x08009b21
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e1ec      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e1e8      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e1e4      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e1e0      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1e:	e1dc      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b20:	2340      	movs	r3, #64	@ 0x40
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b26:	e1d8      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b28:	2380      	movs	r3, #128	@ 0x80
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2e:	e1d4      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a4f      	ldr	r2, [pc, #316]	@ (8009c74 <UART_SetConfig+0x340>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d130      	bne.n	8009b9c <UART_SetConfig+0x268>
 8009b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8009c6c <UART_SetConfig+0x338>)
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d826      	bhi.n	8009b94 <UART_SetConfig+0x260>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <UART_SetConfig+0x218>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b6d 	.word	0x08009b6d
 8009b54:	08009b75 	.word	0x08009b75
 8009b58:	08009b7d 	.word	0x08009b7d
 8009b5c:	08009b85 	.word	0x08009b85
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6a:	e1b6      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b72:	e1b2      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7a:	e1ae      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e1aa      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b84:	2320      	movs	r3, #32
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e1a6      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b8c:	2340      	movs	r3, #64	@ 0x40
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b92:	e1a2      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b94:	2380      	movs	r3, #128	@ 0x80
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e19e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a35      	ldr	r2, [pc, #212]	@ (8009c78 <UART_SetConfig+0x344>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d130      	bne.n	8009c08 <UART_SetConfig+0x2d4>
 8009ba6:	4b31      	ldr	r3, [pc, #196]	@ (8009c6c <UART_SetConfig+0x338>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d826      	bhi.n	8009c00 <UART_SetConfig+0x2cc>
 8009bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb8 <UART_SetConfig+0x284>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bd1 	.word	0x08009bd1
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009be9 	.word	0x08009be9
 8009bc8:	08009bf1 	.word	0x08009bf1
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd6:	e180      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bde:	e17c      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e178      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e174      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf6:	e170      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009bf8:	2340      	movs	r3, #64	@ 0x40
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfe:	e16c      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c00:	2380      	movs	r3, #128	@ 0x80
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c06:	e168      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8009c7c <UART_SetConfig+0x348>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d142      	bne.n	8009c98 <UART_SetConfig+0x364>
 8009c12:	4b16      	ldr	r3, [pc, #88]	@ (8009c6c <UART_SetConfig+0x338>)
 8009c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d838      	bhi.n	8009c90 <UART_SetConfig+0x35c>
 8009c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <UART_SetConfig+0x2f0>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c81 	.word	0x08009c81
 8009c38:	08009c89 	.word	0x08009c89
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e14a      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e146      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e142      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e13e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c5c:	cfff69f3 	.word	0xcfff69f3
 8009c60:	58000c00 	.word	0x58000c00
 8009c64:	11fff4ff 	.word	0x11fff4ff
 8009c68:	40011000 	.word	0x40011000
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	40004400 	.word	0x40004400
 8009c74:	40004800 	.word	0x40004800
 8009c78:	40004c00 	.word	0x40004c00
 8009c7c:	40005000 	.word	0x40005000
 8009c80:	2320      	movs	r3, #32
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c86:	e128      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c88:	2340      	movs	r3, #64	@ 0x40
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8e:	e124      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c90:	2380      	movs	r3, #128	@ 0x80
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e120      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4acb      	ldr	r2, [pc, #812]	@ (8009fcc <UART_SetConfig+0x698>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d176      	bne.n	8009d90 <UART_SetConfig+0x45c>
 8009ca2:	4bcb      	ldr	r3, [pc, #812]	@ (8009fd0 <UART_SetConfig+0x69c>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009caa:	2b28      	cmp	r3, #40	@ 0x28
 8009cac:	d86c      	bhi.n	8009d88 <UART_SetConfig+0x454>
 8009cae:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <UART_SetConfig+0x380>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009d59 	.word	0x08009d59
 8009cb8:	08009d89 	.word	0x08009d89
 8009cbc:	08009d89 	.word	0x08009d89
 8009cc0:	08009d89 	.word	0x08009d89
 8009cc4:	08009d89 	.word	0x08009d89
 8009cc8:	08009d89 	.word	0x08009d89
 8009ccc:	08009d89 	.word	0x08009d89
 8009cd0:	08009d89 	.word	0x08009d89
 8009cd4:	08009d61 	.word	0x08009d61
 8009cd8:	08009d89 	.word	0x08009d89
 8009cdc:	08009d89 	.word	0x08009d89
 8009ce0:	08009d89 	.word	0x08009d89
 8009ce4:	08009d89 	.word	0x08009d89
 8009ce8:	08009d89 	.word	0x08009d89
 8009cec:	08009d89 	.word	0x08009d89
 8009cf0:	08009d89 	.word	0x08009d89
 8009cf4:	08009d69 	.word	0x08009d69
 8009cf8:	08009d89 	.word	0x08009d89
 8009cfc:	08009d89 	.word	0x08009d89
 8009d00:	08009d89 	.word	0x08009d89
 8009d04:	08009d89 	.word	0x08009d89
 8009d08:	08009d89 	.word	0x08009d89
 8009d0c:	08009d89 	.word	0x08009d89
 8009d10:	08009d89 	.word	0x08009d89
 8009d14:	08009d71 	.word	0x08009d71
 8009d18:	08009d89 	.word	0x08009d89
 8009d1c:	08009d89 	.word	0x08009d89
 8009d20:	08009d89 	.word	0x08009d89
 8009d24:	08009d89 	.word	0x08009d89
 8009d28:	08009d89 	.word	0x08009d89
 8009d2c:	08009d89 	.word	0x08009d89
 8009d30:	08009d89 	.word	0x08009d89
 8009d34:	08009d79 	.word	0x08009d79
 8009d38:	08009d89 	.word	0x08009d89
 8009d3c:	08009d89 	.word	0x08009d89
 8009d40:	08009d89 	.word	0x08009d89
 8009d44:	08009d89 	.word	0x08009d89
 8009d48:	08009d89 	.word	0x08009d89
 8009d4c:	08009d89 	.word	0x08009d89
 8009d50:	08009d89 	.word	0x08009d89
 8009d54:	08009d81 	.word	0x08009d81
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e0bc      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d60:	2304      	movs	r3, #4
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e0b8      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d68:	2308      	movs	r3, #8
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e0b4      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d70:	2310      	movs	r3, #16
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e0b0      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e0ac      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d80:	2340      	movs	r3, #64	@ 0x40
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e0a8      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d88:	2380      	movs	r3, #128	@ 0x80
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e0a4      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a8f      	ldr	r2, [pc, #572]	@ (8009fd4 <UART_SetConfig+0x6a0>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d130      	bne.n	8009dfc <UART_SetConfig+0x4c8>
 8009d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8009fd0 <UART_SetConfig+0x69c>)
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	d826      	bhi.n	8009df4 <UART_SetConfig+0x4c0>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <UART_SetConfig+0x478>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dc5 	.word	0x08009dc5
 8009db0:	08009dcd 	.word	0x08009dcd
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009de5 	.word	0x08009de5
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e086      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e082      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e07e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e07a      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009de4:	2320      	movs	r3, #32
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e076      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009dec:	2340      	movs	r3, #64	@ 0x40
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e072      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009df4:	2380      	movs	r3, #128	@ 0x80
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e06e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a75      	ldr	r2, [pc, #468]	@ (8009fd8 <UART_SetConfig+0x6a4>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d130      	bne.n	8009e68 <UART_SetConfig+0x534>
 8009e06:	4b72      	ldr	r3, [pc, #456]	@ (8009fd0 <UART_SetConfig+0x69c>)
 8009e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	d826      	bhi.n	8009e60 <UART_SetConfig+0x52c>
 8009e12:	a201      	add	r2, pc, #4	@ (adr r2, 8009e18 <UART_SetConfig+0x4e4>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e31 	.word	0x08009e31
 8009e1c:	08009e39 	.word	0x08009e39
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009e49 	.word	0x08009e49
 8009e28:	08009e51 	.word	0x08009e51
 8009e2c:	08009e59 	.word	0x08009e59
 8009e30:	2300      	movs	r3, #0
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e050      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e04c      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e40:	2308      	movs	r3, #8
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e048      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e044      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e040      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e58:	2340      	movs	r3, #64	@ 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e03c      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e60:	2380      	movs	r3, #128	@ 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e038      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a5b      	ldr	r2, [pc, #364]	@ (8009fdc <UART_SetConfig+0x6a8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d130      	bne.n	8009ed4 <UART_SetConfig+0x5a0>
 8009e72:	4b57      	ldr	r3, [pc, #348]	@ (8009fd0 <UART_SetConfig+0x69c>)
 8009e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	2b05      	cmp	r3, #5
 8009e7c:	d826      	bhi.n	8009ecc <UART_SetConfig+0x598>
 8009e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e84 <UART_SetConfig+0x550>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009e9d 	.word	0x08009e9d
 8009e88:	08009ea5 	.word	0x08009ea5
 8009e8c:	08009ead 	.word	0x08009ead
 8009e90:	08009eb5 	.word	0x08009eb5
 8009e94:	08009ebd 	.word	0x08009ebd
 8009e98:	08009ec5 	.word	0x08009ec5
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e01a      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e016      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009eac:	2308      	movs	r3, #8
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e012      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e00e      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ebc:	2320      	movs	r3, #32
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e00a      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ec4:	2340      	movs	r3, #64	@ 0x40
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eca:	e006      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ecc:	2380      	movs	r3, #128	@ 0x80
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e002      	b.n	8009eda <UART_SetConfig+0x5a6>
 8009ed4:	2380      	movs	r3, #128	@ 0x80
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a3f      	ldr	r2, [pc, #252]	@ (8009fdc <UART_SetConfig+0x6a8>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	f040 80f8 	bne.w	800a0d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ee6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	dc46      	bgt.n	8009f7c <UART_SetConfig+0x648>
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	f2c0 8082 	blt.w	8009ff8 <UART_SetConfig+0x6c4>
 8009ef4:	3b02      	subs	r3, #2
 8009ef6:	2b1e      	cmp	r3, #30
 8009ef8:	d87e      	bhi.n	8009ff8 <UART_SetConfig+0x6c4>
 8009efa:	a201      	add	r2, pc, #4	@ (adr r2, 8009f00 <UART_SetConfig+0x5cc>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f83 	.word	0x08009f83
 8009f04:	08009ff9 	.word	0x08009ff9
 8009f08:	08009f8b 	.word	0x08009f8b
 8009f0c:	08009ff9 	.word	0x08009ff9
 8009f10:	08009ff9 	.word	0x08009ff9
 8009f14:	08009ff9 	.word	0x08009ff9
 8009f18:	08009f9b 	.word	0x08009f9b
 8009f1c:	08009ff9 	.word	0x08009ff9
 8009f20:	08009ff9 	.word	0x08009ff9
 8009f24:	08009ff9 	.word	0x08009ff9
 8009f28:	08009ff9 	.word	0x08009ff9
 8009f2c:	08009ff9 	.word	0x08009ff9
 8009f30:	08009ff9 	.word	0x08009ff9
 8009f34:	08009ff9 	.word	0x08009ff9
 8009f38:	08009fab 	.word	0x08009fab
 8009f3c:	08009ff9 	.word	0x08009ff9
 8009f40:	08009ff9 	.word	0x08009ff9
 8009f44:	08009ff9 	.word	0x08009ff9
 8009f48:	08009ff9 	.word	0x08009ff9
 8009f4c:	08009ff9 	.word	0x08009ff9
 8009f50:	08009ff9 	.word	0x08009ff9
 8009f54:	08009ff9 	.word	0x08009ff9
 8009f58:	08009ff9 	.word	0x08009ff9
 8009f5c:	08009ff9 	.word	0x08009ff9
 8009f60:	08009ff9 	.word	0x08009ff9
 8009f64:	08009ff9 	.word	0x08009ff9
 8009f68:	08009ff9 	.word	0x08009ff9
 8009f6c:	08009ff9 	.word	0x08009ff9
 8009f70:	08009ff9 	.word	0x08009ff9
 8009f74:	08009ff9 	.word	0x08009ff9
 8009f78:	08009feb 	.word	0x08009feb
 8009f7c:	2b40      	cmp	r3, #64	@ 0x40
 8009f7e:	d037      	beq.n	8009ff0 <UART_SetConfig+0x6bc>
 8009f80:	e03a      	b.n	8009ff8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f82:	f7fc feb3 	bl	8006cec <HAL_RCCEx_GetD3PCLK1Freq>
 8009f86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f88:	e03c      	b.n	800a004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fc fec2 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f98:	e034      	b.n	800a004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f9a:	f107 0318 	add.w	r3, r7, #24
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fd f80e 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa8:	e02c      	b.n	800a004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009faa:	4b09      	ldr	r3, [pc, #36]	@ (8009fd0 <UART_SetConfig+0x69c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0320 	and.w	r3, r3, #32
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d016      	beq.n	8009fe4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fb6:	4b06      	ldr	r3, [pc, #24]	@ (8009fd0 <UART_SetConfig+0x69c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	08db      	lsrs	r3, r3, #3
 8009fbc:	f003 0303 	and.w	r3, r3, #3
 8009fc0:	4a07      	ldr	r2, [pc, #28]	@ (8009fe0 <UART_SetConfig+0x6ac>)
 8009fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fc8:	e01c      	b.n	800a004 <UART_SetConfig+0x6d0>
 8009fca:	bf00      	nop
 8009fcc:	40011400 	.word	0x40011400
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	40007800 	.word	0x40007800
 8009fd8:	40007c00 	.word	0x40007c00
 8009fdc:	58000c00 	.word	0x58000c00
 8009fe0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800a25c <UART_SetConfig+0x928>)
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe8:	e00c      	b.n	800a004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fea:	4b9d      	ldr	r3, [pc, #628]	@ (800a260 <UART_SetConfig+0x92c>)
 8009fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fee:	e009      	b.n	800a004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff6:	e005      	b.n	800a004 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a002:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 81de 	beq.w	800a3c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a010:	4a94      	ldr	r2, [pc, #592]	@ (800a264 <UART_SetConfig+0x930>)
 800a012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a016:	461a      	mov	r2, r3
 800a018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a01a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a01e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	4413      	add	r3, r2
 800a02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d305      	bcc.n	800a03c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a038:	429a      	cmp	r2, r3
 800a03a:	d903      	bls.n	800a044 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a042:	e1c1      	b.n	800a3c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a046:	2200      	movs	r2, #0
 800a048:	60bb      	str	r3, [r7, #8]
 800a04a:	60fa      	str	r2, [r7, #12]
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a050:	4a84      	ldr	r2, [pc, #528]	@ (800a264 <UART_SetConfig+0x930>)
 800a052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a056:	b29b      	uxth	r3, r3
 800a058:	2200      	movs	r2, #0
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	607a      	str	r2, [r7, #4]
 800a05e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a066:	f7f6 f937 	bl	80002d8 <__aeabi_uldivmod>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4610      	mov	r0, r2
 800a070:	4619      	mov	r1, r3
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	f04f 0300 	mov.w	r3, #0
 800a07a:	020b      	lsls	r3, r1, #8
 800a07c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a080:	0202      	lsls	r2, r0, #8
 800a082:	6979      	ldr	r1, [r7, #20]
 800a084:	6849      	ldr	r1, [r1, #4]
 800a086:	0849      	lsrs	r1, r1, #1
 800a088:	2000      	movs	r0, #0
 800a08a:	460c      	mov	r4, r1
 800a08c:	4605      	mov	r5, r0
 800a08e:	eb12 0804 	adds.w	r8, r2, r4
 800a092:	eb43 0905 	adc.w	r9, r3, r5
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	469a      	mov	sl, r3
 800a09e:	4693      	mov	fp, r2
 800a0a0:	4652      	mov	r2, sl
 800a0a2:	465b      	mov	r3, fp
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	f7f6 f916 	bl	80002d8 <__aeabi_uldivmod>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0ba:	d308      	bcc.n	800a0ce <UART_SetConfig+0x79a>
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0c2:	d204      	bcs.n	800a0ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0ca:	60da      	str	r2, [r3, #12]
 800a0cc:	e17c      	b.n	800a3c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0d4:	e178      	b.n	800a3c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0de:	f040 80c5 	bne.w	800a26c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a0e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	dc48      	bgt.n	800a17c <UART_SetConfig+0x848>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	db7b      	blt.n	800a1e6 <UART_SetConfig+0x8b2>
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d879      	bhi.n	800a1e6 <UART_SetConfig+0x8b2>
 800a0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <UART_SetConfig+0x7c4>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a183 	.word	0x0800a183
 800a0fc:	0800a18b 	.word	0x0800a18b
 800a100:	0800a1e7 	.word	0x0800a1e7
 800a104:	0800a1e7 	.word	0x0800a1e7
 800a108:	0800a193 	.word	0x0800a193
 800a10c:	0800a1e7 	.word	0x0800a1e7
 800a110:	0800a1e7 	.word	0x0800a1e7
 800a114:	0800a1e7 	.word	0x0800a1e7
 800a118:	0800a1a3 	.word	0x0800a1a3
 800a11c:	0800a1e7 	.word	0x0800a1e7
 800a120:	0800a1e7 	.word	0x0800a1e7
 800a124:	0800a1e7 	.word	0x0800a1e7
 800a128:	0800a1e7 	.word	0x0800a1e7
 800a12c:	0800a1e7 	.word	0x0800a1e7
 800a130:	0800a1e7 	.word	0x0800a1e7
 800a134:	0800a1e7 	.word	0x0800a1e7
 800a138:	0800a1b3 	.word	0x0800a1b3
 800a13c:	0800a1e7 	.word	0x0800a1e7
 800a140:	0800a1e7 	.word	0x0800a1e7
 800a144:	0800a1e7 	.word	0x0800a1e7
 800a148:	0800a1e7 	.word	0x0800a1e7
 800a14c:	0800a1e7 	.word	0x0800a1e7
 800a150:	0800a1e7 	.word	0x0800a1e7
 800a154:	0800a1e7 	.word	0x0800a1e7
 800a158:	0800a1e7 	.word	0x0800a1e7
 800a15c:	0800a1e7 	.word	0x0800a1e7
 800a160:	0800a1e7 	.word	0x0800a1e7
 800a164:	0800a1e7 	.word	0x0800a1e7
 800a168:	0800a1e7 	.word	0x0800a1e7
 800a16c:	0800a1e7 	.word	0x0800a1e7
 800a170:	0800a1e7 	.word	0x0800a1e7
 800a174:	0800a1e7 	.word	0x0800a1e7
 800a178:	0800a1d9 	.word	0x0800a1d9
 800a17c:	2b40      	cmp	r3, #64	@ 0x40
 800a17e:	d02e      	beq.n	800a1de <UART_SetConfig+0x8aa>
 800a180:	e031      	b.n	800a1e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a182:	f7fa fdbd 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 800a186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a188:	e033      	b.n	800a1f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a18a:	f7fa fdcf 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 800a18e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a190:	e02f      	b.n	800a1f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a196:	4618      	mov	r0, r3
 800a198:	f7fc fdbe 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	e027      	b.n	800a1f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a2:	f107 0318 	add.w	r3, r7, #24
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fc ff0a 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b0:	e01f      	b.n	800a1f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a268 <UART_SetConfig+0x934>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d009      	beq.n	800a1d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1be:	4b2a      	ldr	r3, [pc, #168]	@ (800a268 <UART_SetConfig+0x934>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	08db      	lsrs	r3, r3, #3
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	4a24      	ldr	r2, [pc, #144]	@ (800a25c <UART_SetConfig+0x928>)
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1d0:	e00f      	b.n	800a1f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a1d2:	4b22      	ldr	r3, [pc, #136]	@ (800a25c <UART_SetConfig+0x928>)
 800a1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d6:	e00c      	b.n	800a1f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1d8:	4b21      	ldr	r3, [pc, #132]	@ (800a260 <UART_SetConfig+0x92c>)
 800a1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1dc:	e009      	b.n	800a1f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e005      	b.n	800a1f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80e7 	beq.w	800a3c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fe:	4a19      	ldr	r2, [pc, #100]	@ (800a264 <UART_SetConfig+0x930>)
 800a200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a204:	461a      	mov	r2, r3
 800a206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a208:	fbb3 f3f2 	udiv	r3, r3, r2
 800a20c:	005a      	lsls	r2, r3, #1
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	085b      	lsrs	r3, r3, #1
 800a214:	441a      	add	r2, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	2b0f      	cmp	r3, #15
 800a224:	d916      	bls.n	800a254 <UART_SetConfig+0x920>
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a22c:	d212      	bcs.n	800a254 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	b29b      	uxth	r3, r3
 800a232:	f023 030f 	bic.w	r3, r3, #15
 800a236:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	085b      	lsrs	r3, r3, #1
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	b29a      	uxth	r2, r3
 800a244:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a246:	4313      	orrs	r3, r2
 800a248:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a250:	60da      	str	r2, [r3, #12]
 800a252:	e0b9      	b.n	800a3c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a25a:	e0b5      	b.n	800a3c8 <UART_SetConfig+0xa94>
 800a25c:	03d09000 	.word	0x03d09000
 800a260:	003d0900 	.word	0x003d0900
 800a264:	0800ecd4 	.word	0x0800ecd4
 800a268:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a26c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a270:	2b20      	cmp	r3, #32
 800a272:	dc49      	bgt.n	800a308 <UART_SetConfig+0x9d4>
 800a274:	2b00      	cmp	r3, #0
 800a276:	db7c      	blt.n	800a372 <UART_SetConfig+0xa3e>
 800a278:	2b20      	cmp	r3, #32
 800a27a:	d87a      	bhi.n	800a372 <UART_SetConfig+0xa3e>
 800a27c:	a201      	add	r2, pc, #4	@ (adr r2, 800a284 <UART_SetConfig+0x950>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a30f 	.word	0x0800a30f
 800a288:	0800a317 	.word	0x0800a317
 800a28c:	0800a373 	.word	0x0800a373
 800a290:	0800a373 	.word	0x0800a373
 800a294:	0800a31f 	.word	0x0800a31f
 800a298:	0800a373 	.word	0x0800a373
 800a29c:	0800a373 	.word	0x0800a373
 800a2a0:	0800a373 	.word	0x0800a373
 800a2a4:	0800a32f 	.word	0x0800a32f
 800a2a8:	0800a373 	.word	0x0800a373
 800a2ac:	0800a373 	.word	0x0800a373
 800a2b0:	0800a373 	.word	0x0800a373
 800a2b4:	0800a373 	.word	0x0800a373
 800a2b8:	0800a373 	.word	0x0800a373
 800a2bc:	0800a373 	.word	0x0800a373
 800a2c0:	0800a373 	.word	0x0800a373
 800a2c4:	0800a33f 	.word	0x0800a33f
 800a2c8:	0800a373 	.word	0x0800a373
 800a2cc:	0800a373 	.word	0x0800a373
 800a2d0:	0800a373 	.word	0x0800a373
 800a2d4:	0800a373 	.word	0x0800a373
 800a2d8:	0800a373 	.word	0x0800a373
 800a2dc:	0800a373 	.word	0x0800a373
 800a2e0:	0800a373 	.word	0x0800a373
 800a2e4:	0800a373 	.word	0x0800a373
 800a2e8:	0800a373 	.word	0x0800a373
 800a2ec:	0800a373 	.word	0x0800a373
 800a2f0:	0800a373 	.word	0x0800a373
 800a2f4:	0800a373 	.word	0x0800a373
 800a2f8:	0800a373 	.word	0x0800a373
 800a2fc:	0800a373 	.word	0x0800a373
 800a300:	0800a373 	.word	0x0800a373
 800a304:	0800a365 	.word	0x0800a365
 800a308:	2b40      	cmp	r3, #64	@ 0x40
 800a30a:	d02e      	beq.n	800a36a <UART_SetConfig+0xa36>
 800a30c:	e031      	b.n	800a372 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a30e:	f7fa fcf7 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 800a312:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a314:	e033      	b.n	800a37e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a316:	f7fa fd09 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 800a31a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a31c:	e02f      	b.n	800a37e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a322:	4618      	mov	r0, r3
 800a324:	f7fc fcf8 	bl	8006d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a32c:	e027      	b.n	800a37e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32e:	f107 0318 	add.w	r3, r7, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f7fc fe44 	bl	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33c:	e01f      	b.n	800a37e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a33e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3f4 <UART_SetConfig+0xac0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	2b00      	cmp	r3, #0
 800a348:	d009      	beq.n	800a35e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a34a:	4b2a      	ldr	r3, [pc, #168]	@ (800a3f4 <UART_SetConfig+0xac0>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	08db      	lsrs	r3, r3, #3
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	4a28      	ldr	r2, [pc, #160]	@ (800a3f8 <UART_SetConfig+0xac4>)
 800a356:	fa22 f303 	lsr.w	r3, r2, r3
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a35c:	e00f      	b.n	800a37e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a35e:	4b26      	ldr	r3, [pc, #152]	@ (800a3f8 <UART_SetConfig+0xac4>)
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a362:	e00c      	b.n	800a37e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a364:	4b25      	ldr	r3, [pc, #148]	@ (800a3fc <UART_SetConfig+0xac8>)
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a368:	e009      	b.n	800a37e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a36a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a370:	e005      	b.n	800a37e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a37c:	bf00      	nop
    }

    if (pclk != 0U)
 800a37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d021      	beq.n	800a3c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a388:	4a1d      	ldr	r2, [pc, #116]	@ (800a400 <UART_SetConfig+0xacc>)
 800a38a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a38e:	461a      	mov	r2, r3
 800a390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a392:	fbb3 f2f2 	udiv	r2, r3, r2
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	085b      	lsrs	r3, r3, #1
 800a39c:	441a      	add	r2, r3
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	2b0f      	cmp	r3, #15
 800a3ac:	d909      	bls.n	800a3c2 <UART_SetConfig+0xa8e>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3b4:	d205      	bcs.n	800a3c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60da      	str	r2, [r3, #12]
 800a3c0:	e002      	b.n	800a3c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3748      	adds	r7, #72	@ 0x48
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3f2:	bf00      	nop
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	03d09000 	.word	0x03d09000
 800a3fc:	003d0900 	.word	0x003d0900
 800a400:	0800ecd4 	.word	0x0800ecd4

0800a404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00a      	beq.n	800a42e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00a      	beq.n	800a450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00a      	beq.n	800a472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	430a      	orrs	r2, r1
 800a492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a498:	f003 0310 	and.w	r3, r3, #16
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d01a      	beq.n	800a51a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a502:	d10a      	bne.n	800a51a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	605a      	str	r2, [r3, #4]
  }
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b098      	sub	sp, #96	@ 0x60
 800a54c:	af02      	add	r7, sp, #8
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a558:	f7f7 fbae 	bl	8001cb8 <HAL_GetTick>
 800a55c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0308 	and.w	r3, r3, #8
 800a568:	2b08      	cmp	r3, #8
 800a56a:	d12f      	bne.n	800a5cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a56c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a574:	2200      	movs	r2, #0
 800a576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f88e 	bl	800a69c <UART_WaitOnFlagUntilTimeout>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d022      	beq.n	800a5cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a59a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e6      	bne.n	800a586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e063      	b.n	800a694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d149      	bne.n	800a66e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f857 	bl	800a69c <UART_WaitOnFlagUntilTimeout>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d03c      	beq.n	800a66e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	623b      	str	r3, [r7, #32]
   return(result);
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a612:	633b      	str	r3, [r7, #48]	@ 0x30
 800a614:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e6      	bne.n	800a5f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	60fb      	str	r3, [r7, #12]
   return(result);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3308      	adds	r3, #8
 800a644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a646:	61fa      	str	r2, [r7, #28]
 800a648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	69b9      	ldr	r1, [r7, #24]
 800a64c:	69fa      	ldr	r2, [r7, #28]
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	617b      	str	r3, [r7, #20]
   return(result);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e5      	bne.n	800a626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e012      	b.n	800a694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2220      	movs	r2, #32
 800a67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3758      	adds	r7, #88	@ 0x58
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ac:	e04f      	b.n	800a74e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b4:	d04b      	beq.n	800a74e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b6:	f7f7 faff 	bl	8001cb8 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d302      	bcc.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e04e      	b.n	800a76e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d037      	beq.n	800a74e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b80      	cmp	r3, #128	@ 0x80
 800a6e2:	d034      	beq.n	800a74e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b40      	cmp	r3, #64	@ 0x40
 800a6e8:	d031      	beq.n	800a74e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69db      	ldr	r3, [r3, #28]
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	d110      	bne.n	800a71a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f839 	bl	800a778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2208      	movs	r2, #8
 800a70a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e029      	b.n	800a76e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a728:	d111      	bne.n	800a74e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 f81f 	bl	800a778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e00f      	b.n	800a76e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	69da      	ldr	r2, [r3, #28]
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4013      	ands	r3, r2
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	bf0c      	ite	eq
 800a75e:	2301      	moveq	r3, #1
 800a760:	2300      	movne	r3, #0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	461a      	mov	r2, r3
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d0a0      	beq.n	800a6ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a778:	b480      	push	{r7}
 800a77a:	b095      	sub	sp, #84	@ 0x54
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a79e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e6      	bne.n	800a780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	e853 3f00 	ldrex	r3, [r3]
 800a7c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a840 <UART_EndRxTransfer+0xc8>)
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7da:	e841 2300 	strex	r3, r2, [r1]
 800a7de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1e5      	bne.n	800a7b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d118      	bne.n	800a820 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f023 0310 	bic.w	r3, r3, #16
 800a802:	647b      	str	r3, [r7, #68]	@ 0x44
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a80c:	61bb      	str	r3, [r7, #24]
 800a80e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6979      	ldr	r1, [r7, #20]
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	613b      	str	r3, [r7, #16]
   return(result);
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e6      	bne.n	800a7ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a834:	bf00      	nop
 800a836:	3754      	adds	r7, #84	@ 0x54
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	effffffe 	.word	0xeffffffe

0800a844 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a852:	2b01      	cmp	r3, #1
 800a854:	d101      	bne.n	800a85a <HAL_UARTEx_DisableFifoMode+0x16>
 800a856:	2302      	movs	r3, #2
 800a858:	e027      	b.n	800a8aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2224      	movs	r2, #36	@ 0x24
 800a866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d101      	bne.n	800a8ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e02d      	b.n	800a92a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2224      	movs	r2, #36	@ 0x24
 800a8da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0201 	bic.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f850 	bl	800a9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a946:	2302      	movs	r3, #2
 800a948:	e02d      	b.n	800a9a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2224      	movs	r2, #36	@ 0x24
 800a956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f812 	bl	800a9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2220      	movs	r2, #32
 800a998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d108      	bne.n	800a9d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9d0:	e031      	b.n	800aa36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9d2:	2310      	movs	r3, #16
 800a9d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9d6:	2310      	movs	r3, #16
 800a9d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	0e5b      	lsrs	r3, r3, #25
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	0f5b      	lsrs	r3, r3, #29
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	7b3a      	ldrb	r2, [r7, #12]
 800a9fe:	4911      	ldr	r1, [pc, #68]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x94>)
 800aa00:	5c8a      	ldrb	r2, [r1, r2]
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa06:	7b3a      	ldrb	r2, [r7, #12]
 800aa08:	490f      	ldr	r1, [pc, #60]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x98>)
 800aa0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	7b7a      	ldrb	r2, [r7, #13]
 800aa1c:	4909      	ldr	r1, [pc, #36]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x94>)
 800aa1e:	5c8a      	ldrb	r2, [r1, r2]
 800aa20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	4908      	ldr	r1, [pc, #32]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x98>)
 800aa28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	0800ecec 	.word	0x0800ecec
 800aa48:	0800ecf4 	.word	0x0800ecf4

0800aa4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	b480      	push	{r7}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	f107 001c 	add.w	r0, r7, #28
 800aa5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800aa62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800aa64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800aa66:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800aa6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800aa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800aa6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800aa72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <SDMMC_Init+0x50>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	431a      	orrs	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	b004      	add	sp, #16
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	ffc02c00 	.word	0xffc02c00

0800aaa0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f043 0203 	orr.w	r2, r3, #3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0303 	and.w	r3, r3, #3
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
	...

0800ab1c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ab40:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ab46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <SDMMC_SendCommand+0x50>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	fffee0c0 	.word	0xfffee0c0

0800ab70 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	b2db      	uxtb	r3, r3
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3314      	adds	r3, #20
 800ab98:	461a      	mov	r2, r3
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abd6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800abdc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800abe2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	431a      	orrs	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0

}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac16:	2310      	movs	r3, #16
 800ac18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac20:	2300      	movs	r3, #0
 800ac22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff ff73 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac3a:	2110      	movs	r1, #16
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fa5f 	bl	800b100 <SDMMC_GetCmdResp1>
 800ac42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac44:	69fb      	ldr	r3, [r7, #28]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b088      	sub	sp, #32
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac5c:	2311      	movs	r3, #17
 800ac5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac66:	2300      	movs	r3, #0
 800ac68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac70:	f107 0308 	add.w	r3, r7, #8
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7ff ff50 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac80:	2111      	movs	r1, #17
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fa3c 	bl	800b100 <SDMMC_GetCmdResp1>
 800ac88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac8a:	69fb      	ldr	r3, [r7, #28]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3720      	adds	r7, #32
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b088      	sub	sp, #32
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aca2:	2312      	movs	r3, #18
 800aca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acac:	2300      	movs	r3, #0
 800acae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800acb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb6:	f107 0308 	add.w	r3, r7, #8
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff ff2d 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acc6:	2112      	movs	r1, #18
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fa19 	bl	800b100 <SDMMC_GetCmdResp1>
 800acce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd0:	69fb      	ldr	r3, [r7, #28]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b088      	sub	sp, #32
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ace8:	2318      	movs	r3, #24
 800acea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800acfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acfc:	f107 0308 	add.w	r3, r7, #8
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff ff0a 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad0c:	2118      	movs	r1, #24
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f9f6 	bl	800b100 <SDMMC_GetCmdResp1>
 800ad14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad16:	69fb      	ldr	r3, [r7, #28]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad2e:	2319      	movs	r3, #25
 800ad30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad42:	f107 0308 	add.w	r3, r7, #8
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fee7 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad52:	2119      	movs	r1, #25
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f9d3 	bl	800b100 <SDMMC_GetCmdResp1>
 800ad5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad74:	230c      	movs	r3, #12
 800ad76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad86:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada0:	f107 0308 	add.w	r3, r7, #8
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff feb8 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800adac:	4a0b      	ldr	r2, [pc, #44]	@ (800addc <SDMMC_CmdStopTransfer+0x74>)
 800adae:	210c      	movs	r1, #12
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f9a5 	bl	800b100 <SDMMC_GetCmdResp1>
 800adb6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adca:	d101      	bne.n	800add0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800add0:	69fb      	ldr	r3, [r7, #28]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3720      	adds	r7, #32
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	05f5e100 	.word	0x05f5e100

0800ade0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800adee:	2307      	movs	r3, #7
 800adf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adf8:	2300      	movs	r3, #0
 800adfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae02:	f107 0308 	add.w	r3, r7, #8
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fe87 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae12:	2107      	movs	r1, #7
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f973 	bl	800b100 <SDMMC_GetCmdResp1>
 800ae1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b088      	sub	sp, #32
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae36:	2300      	movs	r3, #0
 800ae38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae44:	f107 0308 	add.w	r3, r7, #8
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff fe66 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fb97 	bl	800b584 <SDMMC_GetCmdError>
 800ae56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae58:	69fb      	ldr	r3, [r7, #28]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b088      	sub	sp, #32
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae6a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ae6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae70:	2308      	movs	r3, #8
 800ae72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff fe46 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fb29 	bl	800b4e8 <SDMMC_GetCmdResp7>
 800ae96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae98:	69fb      	ldr	r3, [r7, #28]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b088      	sub	sp, #32
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aeb0:	2337      	movs	r3, #55	@ 0x37
 800aeb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aeb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aec4:	f107 0308 	add.w	r3, r7, #8
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7ff fe26 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aed4:	2137      	movs	r1, #55	@ 0x37
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f912 	bl	800b100 <SDMMC_GetCmdResp1>
 800aedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aede:	69fb      	ldr	r3, [r7, #28]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aef6:	2329      	movs	r3, #41	@ 0x29
 800aef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aefa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fe03 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa2e 	bl	800b378 <SDMMC_GetCmdResp3>
 800af1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af1e:	69fb      	ldr	r3, [r7, #28]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3720      	adds	r7, #32
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af36:	2306      	movs	r3, #6
 800af38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af4a:	f107 0308 	add.w	r3, r7, #8
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff fde3 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af5a:	2106      	movs	r1, #6
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f8cf 	bl	800b100 <SDMMC_GetCmdResp1>
 800af62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af64:	69fb      	ldr	r3, [r7, #28]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3720      	adds	r7, #32
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b088      	sub	sp, #32
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af7a:	2333      	movs	r3, #51	@ 0x33
 800af7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af8e:	f107 0308 	add.w	r3, r7, #8
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff fdc1 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800af9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af9e:	2133      	movs	r1, #51	@ 0x33
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f8ad 	bl	800b100 <SDMMC_GetCmdResp1>
 800afa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afa8:	69fb      	ldr	r3, [r7, #28]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3720      	adds	r7, #32
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b088      	sub	sp, #32
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afbe:	2302      	movs	r3, #2
 800afc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800afc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afc8:	2300      	movs	r3, #0
 800afca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd2:	f107 0308 	add.w	r3, r7, #8
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff fd9f 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f980 	bl	800b2e4 <SDMMC_GetCmdResp2>
 800afe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afe6:	69fb      	ldr	r3, [r7, #28]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3720      	adds	r7, #32
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800affe:	2309      	movs	r3, #9
 800b000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b008:	2300      	movs	r3, #0
 800b00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b00c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b012:	f107 0308 	add.w	r3, r7, #8
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff fd7f 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f960 	bl	800b2e4 <SDMMC_GetCmdResp2>
 800b024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b026:	69fb      	ldr	r3, [r7, #28]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3720      	adds	r7, #32
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b03e:	2303      	movs	r3, #3
 800b040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b048:	2300      	movs	r3, #0
 800b04a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b04c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b050:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b052:	f107 0308 	add.w	r3, r7, #8
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff fd5f 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	2103      	movs	r1, #3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f9c8 	bl	800b3f8 <SDMMC_GetCmdResp6>
 800b068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b06a:	69fb      	ldr	r3, [r7, #28]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3720      	adds	r7, #32
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b082:	230d      	movs	r3, #13
 800b084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b08a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b08c:	2300      	movs	r3, #0
 800b08e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b094:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b096:	f107 0308 	add.w	r3, r7, #8
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7ff fd3d 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0a6:	210d      	movs	r1, #13
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f829 	bl	800b100 <SDMMC_GetCmdResp1>
 800b0ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b088      	sub	sp, #32
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b0c6:	230d      	movs	r3, #13
 800b0c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0da:	f107 0308 	add.w	r3, r7, #8
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff fd1b 	bl	800ab1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b0e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ea:	210d      	movs	r1, #13
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f807 	bl	800b100 <SDMMC_GetCmdResp1>
 800b0f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0f4:	69fb      	ldr	r3, [r7, #28]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	460b      	mov	r3, r1
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b10e:	4b70      	ldr	r3, [pc, #448]	@ (800b2d0 <SDMMC_GetCmdResp1+0x1d0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a70      	ldr	r2, [pc, #448]	@ (800b2d4 <SDMMC_GetCmdResp1+0x1d4>)
 800b114:	fba2 2303 	umull	r2, r3, r2, r3
 800b118:	0a5a      	lsrs	r2, r3, #9
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	fb02 f303 	mul.w	r3, r2, r3
 800b120:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	1e5a      	subs	r2, r3, #1
 800b126:	61fa      	str	r2, [r7, #28]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b12c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b130:	e0c9      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b136:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	4b67      	ldr	r3, [pc, #412]	@ (800b2d8 <SDMMC_GetCmdResp1+0x1d8>)
 800b13c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0ef      	beq.n	800b122 <SDMMC_GetCmdResp1+0x22>
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1ea      	bne.n	800b122 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2204      	movs	r2, #4
 800b15c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b15e:	2304      	movs	r3, #4
 800b160:	e0b1      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d004      	beq.n	800b178 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b174:	2301      	movs	r3, #1
 800b176:	e0a6      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4a58      	ldr	r2, [pc, #352]	@ (800b2dc <SDMMC_GetCmdResp1+0x1dc>)
 800b17c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7ff fcf6 	bl	800ab70 <SDMMC_GetCommandResponse>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	7afb      	ldrb	r3, [r7, #11]
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d001      	beq.n	800b192 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b18e:	2301      	movs	r3, #1
 800b190:	e099      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b192:	2100      	movs	r1, #0
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7ff fcf8 	bl	800ab8a <SDMMC_GetResponse>
 800b19a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4b50      	ldr	r3, [pc, #320]	@ (800b2e0 <SDMMC_GetCmdResp1+0x1e0>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e08d      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	da02      	bge.n	800b1b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b1b4:	e087      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1c0:	2340      	movs	r3, #64	@ 0x40
 800b1c2:	e080      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1ce:	2380      	movs	r3, #128	@ 0x80
 800b1d0:	e079      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1e0:	e071      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1f0:	e069      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b200:	e061      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b20c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b210:	e059      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b21c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b220:	e051      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b22c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b230:	e049      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b23c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b240:	e041      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b24c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b250:	e039      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b25c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b260:	e031      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b26c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b270:	e029      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b27c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b280:	e021      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b28c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b290:	e019      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b29c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b2a0:	e011      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b2ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b2b0:	e009      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f003 0308 	and.w	r3, r3, #8
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2bc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b2c0:	e001      	b.n	800b2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3720      	adds	r7, #32
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	24000000 	.word	0x24000000
 800b2d4:	10624dd3 	.word	0x10624dd3
 800b2d8:	00200045 	.word	0x00200045
 800b2dc:	002000c5 	.word	0x002000c5
 800b2e0:	fdffe008 	.word	0xfdffe008

0800b2e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b2ec:	4b1f      	ldr	r3, [pc, #124]	@ (800b36c <SDMMC_GetCmdResp2+0x88>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a1f      	ldr	r2, [pc, #124]	@ (800b370 <SDMMC_GetCmdResp2+0x8c>)
 800b2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f6:	0a5b      	lsrs	r3, r3, #9
 800b2f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2fc:	fb02 f303 	mul.w	r3, r2, r3
 800b300:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	1e5a      	subs	r2, r3, #1
 800b306:	60fa      	str	r2, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d102      	bne.n	800b312 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b30c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b310:	e026      	b.n	800b360 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b316:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0ef      	beq.n	800b302 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1ea      	bne.n	800b302 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2204      	movs	r2, #4
 800b33c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b33e:	2304      	movs	r3, #4
 800b340:	e00e      	b.n	800b360 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b354:	2301      	movs	r3, #1
 800b356:	e003      	b.n	800b360 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a06      	ldr	r2, [pc, #24]	@ (800b374 <SDMMC_GetCmdResp2+0x90>)
 800b35c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	24000000 	.word	0x24000000
 800b370:	10624dd3 	.word	0x10624dd3
 800b374:	002000c5 	.word	0x002000c5

0800b378 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b380:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ec <SDMMC_GetCmdResp3+0x74>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a1a      	ldr	r2, [pc, #104]	@ (800b3f0 <SDMMC_GetCmdResp3+0x78>)
 800b386:	fba2 2303 	umull	r2, r3, r2, r3
 800b38a:	0a5b      	lsrs	r3, r3, #9
 800b38c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b390:	fb02 f303 	mul.w	r3, r2, r3
 800b394:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	1e5a      	subs	r2, r3, #1
 800b39a:	60fa      	str	r2, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3a4:	e01b      	b.n	800b3de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0ef      	beq.n	800b396 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1ea      	bne.n	800b396 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2204      	movs	r2, #4
 800b3d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3d2:	2304      	movs	r3, #4
 800b3d4:	e003      	b.n	800b3de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a06      	ldr	r2, [pc, #24]	@ (800b3f4 <SDMMC_GetCmdResp3+0x7c>)
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	24000000 	.word	0x24000000
 800b3f0:	10624dd3 	.word	0x10624dd3
 800b3f4:	002000c5 	.word	0x002000c5

0800b3f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	460b      	mov	r3, r1
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b406:	4b35      	ldr	r3, [pc, #212]	@ (800b4dc <SDMMC_GetCmdResp6+0xe4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a35      	ldr	r2, [pc, #212]	@ (800b4e0 <SDMMC_GetCmdResp6+0xe8>)
 800b40c:	fba2 2303 	umull	r2, r3, r2, r3
 800b410:	0a5b      	lsrs	r3, r3, #9
 800b412:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b416:	fb02 f303 	mul.w	r3, r2, r3
 800b41a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	1e5a      	subs	r2, r3, #1
 800b420:	61fa      	str	r2, [r7, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b426:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b42a:	e052      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b430:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d0ef      	beq.n	800b41c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1ea      	bne.n	800b41c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b44a:	f003 0304 	and.w	r3, r3, #4
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d004      	beq.n	800b45c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2204      	movs	r2, #4
 800b456:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b458:	2304      	movs	r3, #4
 800b45a:	e03a      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b46e:	2301      	movs	r3, #1
 800b470:	e02f      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff fb7c 	bl	800ab70 <SDMMC_GetCommandResponse>
 800b478:	4603      	mov	r3, r0
 800b47a:	461a      	mov	r2, r3
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	4293      	cmp	r3, r2
 800b480:	d001      	beq.n	800b486 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b482:	2301      	movs	r3, #1
 800b484:	e025      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4a16      	ldr	r2, [pc, #88]	@ (800b4e4 <SDMMC_GetCmdResp6+0xec>)
 800b48a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b48c:	2100      	movs	r1, #0
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff fb7b 	bl	800ab8a <SDMMC_GetResponse>
 800b494:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	0c1b      	lsrs	r3, r3, #16
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e011      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b4bc:	e009      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4cc:	e001      	b.n	800b4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3720      	adds	r7, #32
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	24000000 	.word	0x24000000
 800b4e0:	10624dd3 	.word	0x10624dd3
 800b4e4:	002000c5 	.word	0x002000c5

0800b4e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4f0:	4b22      	ldr	r3, [pc, #136]	@ (800b57c <SDMMC_GetCmdResp7+0x94>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a22      	ldr	r2, [pc, #136]	@ (800b580 <SDMMC_GetCmdResp7+0x98>)
 800b4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fa:	0a5b      	lsrs	r3, r3, #9
 800b4fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b500:	fb02 f303 	mul.w	r3, r2, r3
 800b504:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	1e5a      	subs	r2, r3, #1
 800b50a:	60fa      	str	r2, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b510:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b514:	e02c      	b.n	800b570 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0ef      	beq.n	800b506 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1ea      	bne.n	800b506 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b534:	f003 0304 	and.w	r3, r3, #4
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d004      	beq.n	800b546 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2204      	movs	r2, #4
 800b540:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b542:	2304      	movs	r3, #4
 800b544:	e014      	b.n	800b570 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b558:	2301      	movs	r3, #1
 800b55a:	e009      	b.n	800b570 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2240      	movs	r2, #64	@ 0x40
 800b56c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b56e:	2300      	movs	r3, #0

}
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	24000000 	.word	0x24000000
 800b580:	10624dd3 	.word	0x10624dd3

0800b584 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b58c:	4b11      	ldr	r3, [pc, #68]	@ (800b5d4 <SDMMC_GetCmdError+0x50>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a11      	ldr	r2, [pc, #68]	@ (800b5d8 <SDMMC_GetCmdError+0x54>)
 800b592:	fba2 2303 	umull	r2, r3, r2, r3
 800b596:	0a5b      	lsrs	r3, r3, #9
 800b598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b59c:	fb02 f303 	mul.w	r3, r2, r3
 800b5a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	1e5a      	subs	r2, r3, #1
 800b5a6:	60fa      	str	r2, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d102      	bne.n	800b5b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5b0:	e009      	b.n	800b5c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0f1      	beq.n	800b5a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a06      	ldr	r2, [pc, #24]	@ (800b5dc <SDMMC_GetCmdError+0x58>)
 800b5c2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	24000000 	.word	0x24000000
 800b5d8:	10624dd3 	.word	0x10624dd3
 800b5dc:	002000c5 	.word	0x002000c5

0800b5e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b5e4:	4904      	ldr	r1, [pc, #16]	@ (800b5f8 <MX_FATFS_Init+0x18>)
 800b5e6:	4805      	ldr	r0, [pc, #20]	@ (800b5fc <MX_FATFS_Init+0x1c>)
 800b5e8:	f002 fc5a 	bl	800dea0 <FATFS_LinkDriver>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4b03      	ldr	r3, [pc, #12]	@ (800b600 <MX_FATFS_Init+0x20>)
 800b5f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b5f4:	bf00      	nop
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	24031714 	.word	0x24031714
 800b5fc:	0800ecfc 	.word	0x0800ecfc
 800b600:	24031710 	.word	0x24031710

0800b604 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b604:	b480      	push	{r7}
 800b606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b608:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b61e:	f000 f885 	bl	800b72c <BSP_SD_IsDetected>
 800b622:	4603      	mov	r3, r0
 800b624:	2b01      	cmp	r3, #1
 800b626:	d001      	beq.n	800b62c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b628:	2302      	movs	r3, #2
 800b62a:	e012      	b.n	800b652 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b62c:	480b      	ldr	r0, [pc, #44]	@ (800b65c <BSP_SD_Init+0x48>)
 800b62e:	f7fc f8d1 	bl	80077d4 <HAL_SD_Init>
 800b632:	4603      	mov	r3, r0
 800b634:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d109      	bne.n	800b650 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b63c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b640:	4806      	ldr	r0, [pc, #24]	@ (800b65c <BSP_SD_Init+0x48>)
 800b642:	f7fc ff87 	bl	8008554 <HAL_SD_ConfigWideBusOperation>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b650:	79fb      	ldrb	r3, [r7, #7]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	24031574 	.word	0x24031574

0800b660 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	68f9      	ldr	r1, [r7, #12]
 800b676:	4806      	ldr	r0, [pc, #24]	@ (800b690 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b678:	f7fc f9cc 	bl	8007a14 <HAL_SD_ReadBlocks_DMA>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	24031574 	.word	0x24031574

0800b694 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	68f9      	ldr	r1, [r7, #12]
 800b6aa:	4806      	ldr	r0, [pc, #24]	@ (800b6c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b6ac:	f7fc fa5a 	bl	8007b64 <HAL_SD_WriteBlocks_DMA>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	24031574 	.word	0x24031574

0800b6c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b6cc:	4805      	ldr	r0, [pc, #20]	@ (800b6e4 <BSP_SD_GetCardState+0x1c>)
 800b6ce:	f7fd f853 	bl	8008778 <HAL_SD_GetCardState>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	bf14      	ite	ne
 800b6d8:	2301      	movne	r3, #1
 800b6da:	2300      	moveq	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	24031574 	.word	0x24031574

0800b6e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	4803      	ldr	r0, [pc, #12]	@ (800b700 <BSP_SD_GetCardInfo+0x18>)
 800b6f4:	f7fc ff02 	bl	80084fc <HAL_SD_GetCardInfo>
}
 800b6f8:	bf00      	nop
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	24031574 	.word	0x24031574

0800b704 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b70c:	f000 f9a0 	bl	800ba50 <BSP_SD_WriteCpltCallback>
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b720:	f000 f9a2 	bl	800ba68 <BSP_SD_ReadCpltCallback>
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b732:	2301      	movs	r3, #1
 800b734:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b736:	f000 f80b 	bl	800b750 <BSP_PlatformIsDetected>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b740:	2300      	movs	r3, #0
 800b742:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b744:	79fb      	ldrb	r3, [r7, #7]
 800b746:	b2db      	uxtb	r3, r3
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b756:	2301      	movs	r3, #1
 800b758:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b75a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b75e:	4806      	ldr	r0, [pc, #24]	@ (800b778 <BSP_PlatformIsDetected+0x28>)
 800b760:	f7f6 feb8 	bl	80024d4 <HAL_GPIO_ReadPin>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b76a:	2300      	movs	r3, #0
 800b76c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b76e:	79fb      	ldrb	r3, [r7, #7]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	58022000 	.word	0x58022000

0800b77c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b784:	f7f6 fa98 	bl	8001cb8 <HAL_GetTick>
 800b788:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b78a:	e006      	b.n	800b79a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b78c:	f7ff ff9c 	bl	800b6c8 <BSP_SD_GetCardState>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b796:	2300      	movs	r3, #0
 800b798:	e009      	b.n	800b7ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b79a:	f7f6 fa8d 	bl	8001cb8 <HAL_GetTick>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d8f0      	bhi.n	800b78c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f0 <SD_CheckStatus+0x38>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b7c8:	f7ff ff7e 	bl	800b6c8 <BSP_SD_GetCardState>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d107      	bne.n	800b7e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b7d2:	4b07      	ldr	r3, [pc, #28]	@ (800b7f0 <SD_CheckStatus+0x38>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	f023 0301 	bic.w	r3, r3, #1
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	4b04      	ldr	r3, [pc, #16]	@ (800b7f0 <SD_CheckStatus+0x38>)
 800b7e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b7e2:	4b03      	ldr	r3, [pc, #12]	@ (800b7f0 <SD_CheckStatus+0x38>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	b2db      	uxtb	r3, r3
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	24000015 	.word	0x24000015

0800b7f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b7fe:	f7ff ff09 	bl	800b614 <BSP_SD_Init>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d107      	bne.n	800b818 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff ffd4 	bl	800b7b8 <SD_CheckStatus>
 800b810:	4603      	mov	r3, r0
 800b812:	461a      	mov	r2, r3
 800b814:	4b04      	ldr	r3, [pc, #16]	@ (800b828 <SD_initialize+0x34>)
 800b816:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b818:	4b03      	ldr	r3, [pc, #12]	@ (800b828 <SD_initialize+0x34>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b2db      	uxtb	r3, r3
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	24000015 	.word	0x24000015

0800b82c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff ffbd 	bl	800b7b8 <SD_CheckStatus>
 800b83e:	4603      	mov	r3, r0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60b9      	str	r1, [r7, #8]
 800b850:	607a      	str	r2, [r7, #4]
 800b852:	603b      	str	r3, [r7, #0]
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b85c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b860:	f7ff ff8c 	bl	800b77c <SD_CheckStatusWithTimeout>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	da01      	bge.n	800b86e <SD_read+0x26>
  {
    return res;
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	e03b      	b.n	800b8e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	68b8      	ldr	r0, [r7, #8]
 800b874:	f7ff fef4 	bl	800b660 <BSP_SD_ReadBlocks_DMA>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d132      	bne.n	800b8e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b87e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8f0 <SD_read+0xa8>)
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b884:	f7f6 fa18 	bl	8001cb8 <HAL_GetTick>
 800b888:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b88a:	bf00      	nop
 800b88c:	4b18      	ldr	r3, [pc, #96]	@ (800b8f0 <SD_read+0xa8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d108      	bne.n	800b8a6 <SD_read+0x5e>
 800b894:	f7f6 fa10 	bl	8001cb8 <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d9f2      	bls.n	800b88c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b8a6:	4b12      	ldr	r3, [pc, #72]	@ (800b8f0 <SD_read+0xa8>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d102      	bne.n	800b8b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	75fb      	strb	r3, [r7, #23]
 800b8b2:	e017      	b.n	800b8e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b8f0 <SD_read+0xa8>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b8ba:	f7f6 f9fd 	bl	8001cb8 <HAL_GetTick>
 800b8be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b8c0:	e007      	b.n	800b8d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b8c2:	f7ff ff01 	bl	800b6c8 <BSP_SD_GetCardState>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <SD_read+0x8a>
          {
            res = RES_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b8d0:	e008      	b.n	800b8e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b8d2:	f7f6 f9f1 	bl	8001cb8 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d9ee      	bls.n	800b8c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	2403171c 	.word	0x2403171c

0800b8f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b908:	4b24      	ldr	r3, [pc, #144]	@ (800b99c <SD_write+0xa8>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b90e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b912:	f7ff ff33 	bl	800b77c <SD_CheckStatusWithTimeout>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	da01      	bge.n	800b920 <SD_write+0x2c>
  {
    return res;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	e038      	b.n	800b992 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	68b8      	ldr	r0, [r7, #8]
 800b926:	f7ff feb5 	bl	800b694 <BSP_SD_WriteBlocks_DMA>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d12f      	bne.n	800b990 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b930:	f7f6 f9c2 	bl	8001cb8 <HAL_GetTick>
 800b934:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b936:	bf00      	nop
 800b938:	4b18      	ldr	r3, [pc, #96]	@ (800b99c <SD_write+0xa8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d108      	bne.n	800b952 <SD_write+0x5e>
 800b940:	f7f6 f9ba 	bl	8001cb8 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b94e:	4293      	cmp	r3, r2
 800b950:	d9f2      	bls.n	800b938 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b952:	4b12      	ldr	r3, [pc, #72]	@ (800b99c <SD_write+0xa8>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d102      	bne.n	800b960 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	75fb      	strb	r3, [r7, #23]
 800b95e:	e017      	b.n	800b990 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b960:	4b0e      	ldr	r3, [pc, #56]	@ (800b99c <SD_write+0xa8>)
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b966:	f7f6 f9a7 	bl	8001cb8 <HAL_GetTick>
 800b96a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b96c:	e007      	b.n	800b97e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b96e:	f7ff feab 	bl	800b6c8 <BSP_SD_GetCardState>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <SD_write+0x8a>
          {
            res = RES_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	75fb      	strb	r3, [r7, #23]
            break;
 800b97c:	e008      	b.n	800b990 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b97e:	f7f6 f99b 	bl	8001cb8 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d9ee      	bls.n	800b96e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b990:	7dfb      	ldrb	r3, [r7, #23]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	24031718 	.word	0x24031718

0800b9a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08c      	sub	sp, #48	@ 0x30
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	603a      	str	r2, [r7, #0]
 800b9aa:	71fb      	strb	r3, [r7, #7]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b9b6:	4b25      	ldr	r3, [pc, #148]	@ (800ba4c <SD_ioctl+0xac>)
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <SD_ioctl+0x28>
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e03c      	b.n	800ba42 <SD_ioctl+0xa2>

  switch (cmd)
 800b9c8:	79bb      	ldrb	r3, [r7, #6]
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d834      	bhi.n	800ba38 <SD_ioctl+0x98>
 800b9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d4 <SD_ioctl+0x34>)
 800b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d4:	0800b9e5 	.word	0x0800b9e5
 800b9d8:	0800b9ed 	.word	0x0800b9ed
 800b9dc:	0800ba05 	.word	0x0800ba05
 800b9e0:	0800ba1f 	.word	0x0800ba1f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b9ea:	e028      	b.n	800ba3e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b9ec:	f107 0308 	add.w	r3, r7, #8
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fe79 	bl	800b6e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b9f6:	6a3a      	ldr	r2, [r7, #32]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ba02:	e01c      	b.n	800ba3e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba04:	f107 0308 	add.w	r3, r7, #8
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff fe6d 	bl	800b6e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ba1c:	e00f      	b.n	800ba3e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba1e:	f107 0308 	add.w	r3, r7, #8
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff fe60 	bl	800b6e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	0a5a      	lsrs	r2, r3, #9
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ba36:	e002      	b.n	800ba3e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ba38:	2304      	movs	r3, #4
 800ba3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ba3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3730      	adds	r7, #48	@ 0x30
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	24000015 	.word	0x24000015

0800ba50 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ba50:	b480      	push	{r7}
 800ba52:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ba54:	4b03      	ldr	r3, [pc, #12]	@ (800ba64 <BSP_SD_WriteCpltCallback+0x14>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
}
 800ba5a:	bf00      	nop
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	24031718 	.word	0x24031718

0800ba68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ba6c:	4b03      	ldr	r3, [pc, #12]	@ (800ba7c <BSP_SD_ReadCpltCallback+0x14>)
 800ba6e:	2201      	movs	r2, #1
 800ba70:	601a      	str	r2, [r3, #0]
}
 800ba72:	bf00      	nop
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	2403171c 	.word	0x2403171c

0800ba80 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800ba84:	bf00      	nop
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
	...

0800ba90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	4a08      	ldr	r2, [pc, #32]	@ (800bac0 <disk_status+0x30>)
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	79fa      	ldrb	r2, [r7, #7]
 800baa8:	4905      	ldr	r1, [pc, #20]	@ (800bac0 <disk_status+0x30>)
 800baaa:	440a      	add	r2, r1
 800baac:	7a12      	ldrb	r2, [r2, #8]
 800baae:	4610      	mov	r0, r2
 800bab0:	4798      	blx	r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	24031748 	.word	0x24031748

0800bac4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	4a0e      	ldr	r2, [pc, #56]	@ (800bb10 <disk_initialize+0x4c>)
 800bad6:	5cd3      	ldrb	r3, [r2, r3]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d114      	bne.n	800bb06 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	4a0c      	ldr	r2, [pc, #48]	@ (800bb10 <disk_initialize+0x4c>)
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	79fa      	ldrb	r2, [r7, #7]
 800baea:	4909      	ldr	r1, [pc, #36]	@ (800bb10 <disk_initialize+0x4c>)
 800baec:	440a      	add	r2, r1
 800baee:	7a12      	ldrb	r2, [r2, #8]
 800baf0:	4610      	mov	r0, r2
 800baf2:	4798      	blx	r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d103      	bne.n	800bb06 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	4a03      	ldr	r2, [pc, #12]	@ (800bb10 <disk_initialize+0x4c>)
 800bb02:	2101      	movs	r1, #1
 800bb04:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	24031748 	.word	0x24031748

0800bb14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb14:	b590      	push	{r4, r7, lr}
 800bb16:	b087      	sub	sp, #28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	607a      	str	r2, [r7, #4]
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	4a0a      	ldr	r2, [pc, #40]	@ (800bb50 <disk_read+0x3c>)
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	689c      	ldr	r4, [r3, #8]
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	4a07      	ldr	r2, [pc, #28]	@ (800bb50 <disk_read+0x3c>)
 800bb34:	4413      	add	r3, r2
 800bb36:	7a18      	ldrb	r0, [r3, #8]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	68b9      	ldr	r1, [r7, #8]
 800bb3e:	47a0      	blx	r4
 800bb40:	4603      	mov	r3, r0
 800bb42:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd90      	pop	{r4, r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	24031748 	.word	0x24031748

0800bb54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb54:	b590      	push	{r4, r7, lr}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60b9      	str	r1, [r7, #8]
 800bb5c:	607a      	str	r2, [r7, #4]
 800bb5e:	603b      	str	r3, [r7, #0]
 800bb60:	4603      	mov	r3, r0
 800bb62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	4a0a      	ldr	r2, [pc, #40]	@ (800bb90 <disk_write+0x3c>)
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	68dc      	ldr	r4, [r3, #12]
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
 800bb72:	4a07      	ldr	r2, [pc, #28]	@ (800bb90 <disk_write+0x3c>)
 800bb74:	4413      	add	r3, r2
 800bb76:	7a18      	ldrb	r0, [r3, #8]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	68b9      	ldr	r1, [r7, #8]
 800bb7e:	47a0      	blx	r4
 800bb80:	4603      	mov	r3, r0
 800bb82:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	371c      	adds	r7, #28
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd90      	pop	{r4, r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	24031748 	.word	0x24031748

0800bb94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	b21a      	sxth	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	b21b      	sxth	r3, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	b21b      	sxth	r3, r3
 800bbb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bbb6:	89fb      	ldrh	r3, [r7, #14]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3303      	adds	r3, #3
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	3202      	adds	r2, #2
 800bbdc:	7812      	ldrb	r2, [r2, #0]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	3201      	adds	r2, #1
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	021b      	lsls	r3, r3, #8
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	7812      	ldrb	r2, [r2, #0]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]
	return rv;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	887a      	ldrh	r2, [r7, #2]
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	701a      	strb	r2, [r3, #0]
 800bc22:	887b      	ldrh	r3, [r7, #2]
 800bc24:	0a1b      	lsrs	r3, r3, #8
 800bc26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	607a      	str	r2, [r7, #4]
 800bc2e:	887a      	ldrh	r2, [r7, #2]
 800bc30:	b2d2      	uxtb	r2, r2
 800bc32:	701a      	strb	r2, [r3, #0]
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	1c5a      	adds	r2, r3, #1
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	b2d2      	uxtb	r2, r2
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	0a1b      	lsrs	r3, r3, #8
 800bc5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	607a      	str	r2, [r7, #4]
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	b2d2      	uxtb	r2, r2
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	0a1b      	lsrs	r3, r3, #8
 800bc6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	b2d2      	uxtb	r2, r2
 800bc78:	701a      	strb	r2, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	0a1b      	lsrs	r3, r3, #8
 800bc7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	607a      	str	r2, [r7, #4]
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	b2d2      	uxtb	r2, r2
 800bc8a:	701a      	strb	r2, [r3, #0]
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00d      	beq.n	800bcce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bcb2:	693a      	ldr	r2, [r7, #16]
 800bcb4:	1c53      	adds	r3, r2, #1
 800bcb6:	613b      	str	r3, [r7, #16]
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	1c59      	adds	r1, r3, #1
 800bcbc:	6179      	str	r1, [r7, #20]
 800bcbe:	7812      	ldrb	r2, [r2, #0]
 800bcc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	607b      	str	r3, [r7, #4]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1f1      	bne.n	800bcb2 <mem_cpy+0x1a>
	}
}
 800bcce:	bf00      	nop
 800bcd0:	371c      	adds	r7, #28
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bcda:	b480      	push	{r7}
 800bcdc:	b087      	sub	sp, #28
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	617a      	str	r2, [r7, #20]
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	b2d2      	uxtb	r2, r2
 800bcf4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	607b      	str	r3, [r7, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1f3      	bne.n	800bcea <mem_set+0x10>
}
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd10:	b480      	push	{r7}
 800bd12:	b089      	sub	sp, #36	@ 0x24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	61fa      	str	r2, [r7, #28]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	4619      	mov	r1, r3
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	61ba      	str	r2, [r7, #24]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	1acb      	subs	r3, r1, r3
 800bd3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	607b      	str	r3, [r7, #4]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <mem_cmp+0x40>
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0eb      	beq.n	800bd28 <mem_cmp+0x18>

	return r;
 800bd50:	697b      	ldr	r3, [r7, #20]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3724      	adds	r7, #36	@ 0x24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd68:	e002      	b.n	800bd70 <chk_chr+0x12>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d005      	beq.n	800bd84 <chk_chr+0x26>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d1f2      	bne.n	800bd6a <chk_chr+0xc>
	return *str;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	781b      	ldrb	r3, [r3, #0]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60bb      	str	r3, [r7, #8]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	e029      	b.n	800bdfc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bda8:	4a27      	ldr	r2, [pc, #156]	@ (800be48 <chk_lock+0xb4>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	4413      	add	r3, r2
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01d      	beq.n	800bdf2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bdb6:	4a24      	ldr	r2, [pc, #144]	@ (800be48 <chk_lock+0xb4>)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	4413      	add	r3, r2
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d116      	bne.n	800bdf6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bdc8:	4a1f      	ldr	r2, [pc, #124]	@ (800be48 <chk_lock+0xb4>)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	4413      	add	r3, r2
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d10c      	bne.n	800bdf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bddc:	4a1a      	ldr	r2, [pc, #104]	@ (800be48 <chk_lock+0xb4>)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	011b      	lsls	r3, r3, #4
 800bde2:	4413      	add	r3, r2
 800bde4:	3308      	adds	r3, #8
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d102      	bne.n	800bdf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bdf0:	e007      	b.n	800be02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d9d2      	bls.n	800bda8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d109      	bne.n	800be1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d102      	bne.n	800be14 <chk_lock+0x80>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2b02      	cmp	r3, #2
 800be12:	d101      	bne.n	800be18 <chk_lock+0x84>
 800be14:	2300      	movs	r3, #0
 800be16:	e010      	b.n	800be3a <chk_lock+0xa6>
 800be18:	2312      	movs	r3, #18
 800be1a:	e00e      	b.n	800be3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d108      	bne.n	800be34 <chk_lock+0xa0>
 800be22:	4a09      	ldr	r2, [pc, #36]	@ (800be48 <chk_lock+0xb4>)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	4413      	add	r3, r2
 800be2a:	330c      	adds	r3, #12
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be32:	d101      	bne.n	800be38 <chk_lock+0xa4>
 800be34:	2310      	movs	r3, #16
 800be36:	e000      	b.n	800be3a <chk_lock+0xa6>
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	24031728 	.word	0x24031728

0800be4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be52:	2300      	movs	r3, #0
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	e002      	b.n	800be5e <enq_lock+0x12>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3301      	adds	r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d806      	bhi.n	800be72 <enq_lock+0x26>
 800be64:	4a09      	ldr	r2, [pc, #36]	@ (800be8c <enq_lock+0x40>)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	4413      	add	r3, r2
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1f2      	bne.n	800be58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b02      	cmp	r3, #2
 800be76:	bf14      	ite	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	2300      	moveq	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
}
 800be7e:	4618      	mov	r0, r3
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	24031728 	.word	0x24031728

0800be90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be9a:	2300      	movs	r3, #0
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	e01f      	b.n	800bee0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bea0:	4a41      	ldr	r2, [pc, #260]	@ (800bfa8 <inc_lock+0x118>)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	011b      	lsls	r3, r3, #4
 800bea6:	4413      	add	r3, r2
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d113      	bne.n	800beda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800beb2:	4a3d      	ldr	r2, [pc, #244]	@ (800bfa8 <inc_lock+0x118>)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	4413      	add	r3, r2
 800beba:	3304      	adds	r3, #4
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d109      	bne.n	800beda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bec6:	4a38      	ldr	r2, [pc, #224]	@ (800bfa8 <inc_lock+0x118>)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	4413      	add	r3, r2
 800bece:	3308      	adds	r3, #8
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d006      	beq.n	800bee8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3301      	adds	r3, #1
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d9dc      	bls.n	800bea0 <inc_lock+0x10>
 800bee6:	e000      	b.n	800beea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bee8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d132      	bne.n	800bf56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	e002      	b.n	800befc <inc_lock+0x6c>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3301      	adds	r3, #1
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d806      	bhi.n	800bf10 <inc_lock+0x80>
 800bf02:	4a29      	ldr	r2, [pc, #164]	@ (800bfa8 <inc_lock+0x118>)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	4413      	add	r3, r2
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1f2      	bne.n	800bef6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d101      	bne.n	800bf1a <inc_lock+0x8a>
 800bf16:	2300      	movs	r3, #0
 800bf18:	e040      	b.n	800bf9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	4922      	ldr	r1, [pc, #136]	@ (800bfa8 <inc_lock+0x118>)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	011b      	lsls	r3, r3, #4
 800bf24:	440b      	add	r3, r1
 800bf26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689a      	ldr	r2, [r3, #8]
 800bf2c:	491e      	ldr	r1, [pc, #120]	@ (800bfa8 <inc_lock+0x118>)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	011b      	lsls	r3, r3, #4
 800bf32:	440b      	add	r3, r1
 800bf34:	3304      	adds	r3, #4
 800bf36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	695a      	ldr	r2, [r3, #20]
 800bf3c:	491a      	ldr	r1, [pc, #104]	@ (800bfa8 <inc_lock+0x118>)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	440b      	add	r3, r1
 800bf44:	3308      	adds	r3, #8
 800bf46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bf48:	4a17      	ldr	r2, [pc, #92]	@ (800bfa8 <inc_lock+0x118>)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	011b      	lsls	r3, r3, #4
 800bf4e:	4413      	add	r3, r2
 800bf50:	330c      	adds	r3, #12
 800bf52:	2200      	movs	r2, #0
 800bf54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d009      	beq.n	800bf70 <inc_lock+0xe0>
 800bf5c:	4a12      	ldr	r2, [pc, #72]	@ (800bfa8 <inc_lock+0x118>)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	011b      	lsls	r3, r3, #4
 800bf62:	4413      	add	r3, r2
 800bf64:	330c      	adds	r3, #12
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <inc_lock+0xe0>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	e015      	b.n	800bf9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d108      	bne.n	800bf88 <inc_lock+0xf8>
 800bf76:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa8 <inc_lock+0x118>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	4413      	add	r3, r2
 800bf7e:	330c      	adds	r3, #12
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	e001      	b.n	800bf8c <inc_lock+0xfc>
 800bf88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf8c:	4906      	ldr	r1, [pc, #24]	@ (800bfa8 <inc_lock+0x118>)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	011b      	lsls	r3, r3, #4
 800bf92:	440b      	add	r3, r1
 800bf94:	330c      	adds	r3, #12
 800bf96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3301      	adds	r3, #1
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	24031728 	.word	0x24031728

0800bfac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	e010      	b.n	800bfdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfba:	4a0d      	ldr	r2, [pc, #52]	@ (800bff0 <clear_lock+0x44>)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	4413      	add	r3, r2
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d105      	bne.n	800bfd6 <clear_lock+0x2a>
 800bfca:	4a09      	ldr	r2, [pc, #36]	@ (800bff0 <clear_lock+0x44>)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	011b      	lsls	r3, r3, #4
 800bfd0:	4413      	add	r3, r2
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d9eb      	bls.n	800bfba <clear_lock+0xe>
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	24031728 	.word	0x24031728

0800bff4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	78db      	ldrb	r3, [r3, #3]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d034      	beq.n	800c072 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7858      	ldrb	r0, [r3, #1]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c018:	2301      	movs	r3, #1
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	f7ff fd9a 	bl	800bb54 <disk_write>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c026:	2301      	movs	r3, #1
 800c028:	73fb      	strb	r3, [r7, #15]
 800c02a:	e022      	b.n	800c072 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	1ad2      	subs	r2, r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d217      	bcs.n	800c072 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	789b      	ldrb	r3, [r3, #2]
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	e010      	b.n	800c06c <sync_window+0x78>
					wsect += fs->fsize;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	4413      	add	r3, r2
 800c052:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7858      	ldrb	r0, [r3, #1]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c05e:	2301      	movs	r3, #1
 800c060:	697a      	ldr	r2, [r7, #20]
 800c062:	f7ff fd77 	bl	800bb54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	3b01      	subs	r3, #1
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d8eb      	bhi.n	800c04a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d01b      	beq.n	800c0cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ffad 	bl	800bff4 <sync_window>
 800c09a:	4603      	mov	r3, r0
 800c09c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d113      	bne.n	800c0cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7858      	ldrb	r0, [r3, #1]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	f7ff fd2f 	bl	800bb14 <disk_read>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	3b02      	subs	r3, #2
 800c0e4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	3b02      	subs	r3, #2
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d301      	bcc.n	800c0f6 <clust2sect+0x20>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e008      	b.n	800c108 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	895b      	ldrh	r3, [r3, #10]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	fb03 f202 	mul.w	r2, r3, r2
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c106:	4413      	add	r3, r2
}
 800c108:	4618      	mov	r0, r3
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d904      	bls.n	800c134 <get_fat+0x20>
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d302      	bcc.n	800c13a <get_fat+0x26>
		val = 1;	/* Internal error */
 800c134:	2301      	movs	r3, #1
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e08e      	b.n	800c258 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c13a:	f04f 33ff 	mov.w	r3, #4294967295
 800c13e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b03      	cmp	r3, #3
 800c146:	d061      	beq.n	800c20c <get_fat+0xf8>
 800c148:	2b03      	cmp	r3, #3
 800c14a:	dc7b      	bgt.n	800c244 <get_fat+0x130>
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d002      	beq.n	800c156 <get_fat+0x42>
 800c150:	2b02      	cmp	r3, #2
 800c152:	d041      	beq.n	800c1d8 <get_fat+0xc4>
 800c154:	e076      	b.n	800c244 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	085b      	lsrs	r3, r3, #1
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	4413      	add	r3, r2
 800c162:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6a1a      	ldr	r2, [r3, #32]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	0a5b      	lsrs	r3, r3, #9
 800c16c:	4413      	add	r3, r2
 800c16e:	4619      	mov	r1, r3
 800c170:	6938      	ldr	r0, [r7, #16]
 800c172:	f7ff ff83 	bl	800c07c <move_window>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d166      	bne.n	800c24a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	60fa      	str	r2, [r7, #12]
 800c182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	4413      	add	r3, r2
 800c18a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c18e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6a1a      	ldr	r2, [r3, #32]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	0a5b      	lsrs	r3, r3, #9
 800c198:	4413      	add	r3, r2
 800c19a:	4619      	mov	r1, r3
 800c19c:	6938      	ldr	r0, [r7, #16]
 800c19e:	f7ff ff6d 	bl	800c07c <move_window>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d152      	bne.n	800c24e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1b6:	021b      	lsls	r3, r3, #8
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <get_fat+0xba>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	091b      	lsrs	r3, r3, #4
 800c1cc:	e002      	b.n	800c1d4 <get_fat+0xc0>
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1d4:	617b      	str	r3, [r7, #20]
			break;
 800c1d6:	e03f      	b.n	800c258 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	6a1a      	ldr	r2, [r3, #32]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	0a1b      	lsrs	r3, r3, #8
 800c1e0:	4413      	add	r3, r2
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6938      	ldr	r0, [r7, #16]
 800c1e6:	f7ff ff49 	bl	800c07c <move_window>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d130      	bne.n	800c252 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c1fe:	4413      	add	r3, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fcc7 	bl	800bb94 <ld_word>
 800c206:	4603      	mov	r3, r0
 800c208:	617b      	str	r3, [r7, #20]
			break;
 800c20a:	e025      	b.n	800c258 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6a1a      	ldr	r2, [r3, #32]
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	09db      	lsrs	r3, r3, #7
 800c214:	4413      	add	r3, r2
 800c216:	4619      	mov	r1, r3
 800c218:	6938      	ldr	r0, [r7, #16]
 800c21a:	f7ff ff2f 	bl	800c07c <move_window>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d118      	bne.n	800c256 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c232:	4413      	add	r3, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff fcc5 	bl	800bbc4 <ld_dword>
 800c23a:	4603      	mov	r3, r0
 800c23c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c240:	617b      	str	r3, [r7, #20]
			break;
 800c242:	e009      	b.n	800c258 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c244:	2301      	movs	r3, #1
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e006      	b.n	800c258 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c24a:	bf00      	nop
 800c24c:	e004      	b.n	800c258 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c24e:	bf00      	nop
 800c250:	e002      	b.n	800c258 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c252:	bf00      	nop
 800c254:	e000      	b.n	800c258 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c256:	bf00      	nop
		}
	}

	return val;
 800c258:	697b      	ldr	r3, [r7, #20]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c262:	b590      	push	{r4, r7, lr}
 800c264:	b089      	sub	sp, #36	@ 0x24
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c26e:	2302      	movs	r3, #2
 800c270:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2b01      	cmp	r3, #1
 800c276:	f240 80d9 	bls.w	800c42c <put_fat+0x1ca>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	429a      	cmp	r2, r3
 800c282:	f080 80d3 	bcs.w	800c42c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	f000 8096 	beq.w	800c3bc <put_fat+0x15a>
 800c290:	2b03      	cmp	r3, #3
 800c292:	f300 80cb 	bgt.w	800c42c <put_fat+0x1ca>
 800c296:	2b01      	cmp	r3, #1
 800c298:	d002      	beq.n	800c2a0 <put_fat+0x3e>
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d06e      	beq.n	800c37c <put_fat+0x11a>
 800c29e:	e0c5      	b.n	800c42c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	61bb      	str	r3, [r7, #24]
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	085b      	lsrs	r3, r3, #1
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6a1a      	ldr	r2, [r3, #32]
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	0a5b      	lsrs	r3, r3, #9
 800c2b6:	4413      	add	r3, r2
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f7ff fede 	bl	800c07c <move_window>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2c4:	7ffb      	ldrb	r3, [r7, #31]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f040 80a9 	bne.w	800c41e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	1c59      	adds	r1, r3, #1
 800c2d6:	61b9      	str	r1, [r7, #24]
 800c2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2dc:	4413      	add	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00d      	beq.n	800c306 <put_fat+0xa4>
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	b25b      	sxtb	r3, r3
 800c2f0:	f003 030f 	and.w	r3, r3, #15
 800c2f4:	b25a      	sxtb	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	011b      	lsls	r3, r3, #4
 800c2fc:	b25b      	sxtb	r3, r3
 800c2fe:	4313      	orrs	r3, r2
 800c300:	b25b      	sxtb	r3, r3
 800c302:	b2db      	uxtb	r3, r3
 800c304:	e001      	b.n	800c30a <put_fat+0xa8>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	697a      	ldr	r2, [r7, #20]
 800c30c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2201      	movs	r2, #1
 800c312:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6a1a      	ldr	r2, [r3, #32]
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	0a5b      	lsrs	r3, r3, #9
 800c31c:	4413      	add	r3, r2
 800c31e:	4619      	mov	r1, r3
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7ff feab 	bl	800c07c <move_window>
 800c326:	4603      	mov	r3, r0
 800c328:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c32a:	7ffb      	ldrb	r3, [r7, #31]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d178      	bne.n	800c422 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c33c:	4413      	add	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <put_fat+0xf0>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	091b      	lsrs	r3, r3, #4
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	e00e      	b.n	800c370 <put_fat+0x10e>
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b25b      	sxtb	r3, r3
 800c358:	f023 030f 	bic.w	r3, r3, #15
 800c35c:	b25a      	sxtb	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	0a1b      	lsrs	r3, r3, #8
 800c362:	b25b      	sxtb	r3, r3
 800c364:	f003 030f 	and.w	r3, r3, #15
 800c368:	b25b      	sxtb	r3, r3
 800c36a:	4313      	orrs	r3, r2
 800c36c:	b25b      	sxtb	r3, r3
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	70da      	strb	r2, [r3, #3]
			break;
 800c37a:	e057      	b.n	800c42c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6a1a      	ldr	r2, [r3, #32]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	0a1b      	lsrs	r3, r3, #8
 800c384:	4413      	add	r3, r2
 800c386:	4619      	mov	r1, r3
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fe77 	bl	800c07c <move_window>
 800c38e:	4603      	mov	r3, r0
 800c390:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c392:	7ffb      	ldrb	r3, [r7, #31]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d146      	bne.n	800c426 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c3a6:	4413      	add	r3, r2
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	b292      	uxth	r2, r2
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff fc2b 	bl	800bc0a <st_word>
			fs->wflag = 1;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	70da      	strb	r2, [r3, #3]
			break;
 800c3ba:	e037      	b.n	800c42c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6a1a      	ldr	r2, [r3, #32]
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	09db      	lsrs	r3, r3, #7
 800c3c4:	4413      	add	r3, r2
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7ff fe57 	bl	800c07c <move_window>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3d2:	7ffb      	ldrb	r3, [r7, #31]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d128      	bne.n	800c42a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c3ec:	4413      	add	r3, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fbe8 	bl	800bbc4 <ld_dword>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c3fa:	4323      	orrs	r3, r4
 800c3fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c40c:	4413      	add	r3, r2
 800c40e:	6879      	ldr	r1, [r7, #4]
 800c410:	4618      	mov	r0, r3
 800c412:	f7ff fc15 	bl	800bc40 <st_dword>
			fs->wflag = 1;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	70da      	strb	r2, [r3, #3]
			break;
 800c41c:	e006      	b.n	800c42c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c41e:	bf00      	nop
 800c420:	e004      	b.n	800c42c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c422:	bf00      	nop
 800c424:	e002      	b.n	800c42c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c426:	bf00      	nop
 800c428:	e000      	b.n	800c42c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c42a:	bf00      	nop
		}
	}
	return res;
 800c42c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3724      	adds	r7, #36	@ 0x24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd90      	pop	{r4, r7, pc}

0800c436 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b088      	sub	sp, #32
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d904      	bls.n	800c45c <remove_chain+0x26>
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d301      	bcc.n	800c460 <remove_chain+0x2a>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e04b      	b.n	800c4f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00c      	beq.n	800c480 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c466:	f04f 32ff 	mov.w	r2, #4294967295
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	69b8      	ldr	r0, [r7, #24]
 800c46e:	f7ff fef8 	bl	800c262 <put_fat>
 800c472:	4603      	mov	r3, r0
 800c474:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c476:	7ffb      	ldrb	r3, [r7, #31]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <remove_chain+0x4a>
 800c47c:	7ffb      	ldrb	r3, [r7, #31]
 800c47e:	e03b      	b.n	800c4f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c480:	68b9      	ldr	r1, [r7, #8]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f7ff fe46 	bl	800c114 <get_fat>
 800c488:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d031      	beq.n	800c4f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <remove_chain+0x64>
 800c496:	2302      	movs	r3, #2
 800c498:	e02e      	b.n	800c4f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a0:	d101      	bne.n	800c4a6 <remove_chain+0x70>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e028      	b.n	800c4f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	69b8      	ldr	r0, [r7, #24]
 800c4ac:	f7ff fed9 	bl	800c262 <put_fat>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c4b4:	7ffb      	ldrb	r3, [r7, #31]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <remove_chain+0x88>
 800c4ba:	7ffb      	ldrb	r3, [r7, #31]
 800c4bc:	e01c      	b.n	800c4f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	691a      	ldr	r2, [r3, #16]
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	3b02      	subs	r3, #2
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d20b      	bcs.n	800c4e4 <remove_chain+0xae>
			fs->free_clst++;
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	791b      	ldrb	r3, [r3, #4]
 800c4da:	f043 0301 	orr.w	r3, r3, #1
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d3c6      	bcc.n	800c480 <remove_chain+0x4a>
 800c4f2:	e000      	b.n	800c4f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10d      	bne.n	800c532 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d004      	beq.n	800c52c <create_chain+0x2c>
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d31b      	bcc.n	800c564 <create_chain+0x64>
 800c52c:	2301      	movs	r3, #1
 800c52e:	61bb      	str	r3, [r7, #24]
 800c530:	e018      	b.n	800c564 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff fded 	bl	800c114 <get_fat>
 800c53a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d801      	bhi.n	800c546 <create_chain+0x46>
 800c542:	2301      	movs	r3, #1
 800c544:	e070      	b.n	800c628 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54c:	d101      	bne.n	800c552 <create_chain+0x52>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	e06a      	b.n	800c628 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d201      	bcs.n	800c560 <create_chain+0x60>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	e063      	b.n	800c628 <create_chain+0x128>
		scl = clst;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	3301      	adds	r3, #1
 800c56c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	69fa      	ldr	r2, [r7, #28]
 800c574:	429a      	cmp	r2, r3
 800c576:	d307      	bcc.n	800c588 <create_chain+0x88>
				ncl = 2;
 800c578:	2302      	movs	r3, #2
 800c57a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c57c:	69fa      	ldr	r2, [r7, #28]
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	429a      	cmp	r2, r3
 800c582:	d901      	bls.n	800c588 <create_chain+0x88>
 800c584:	2300      	movs	r3, #0
 800c586:	e04f      	b.n	800c628 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c588:	69f9      	ldr	r1, [r7, #28]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff fdc2 	bl	800c114 <get_fat>
 800c590:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00e      	beq.n	800c5b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d003      	beq.n	800c5a6 <create_chain+0xa6>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a4:	d101      	bne.n	800c5aa <create_chain+0xaa>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	e03e      	b.n	800c628 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c5aa:	69fa      	ldr	r2, [r7, #28]
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d1da      	bne.n	800c568 <create_chain+0x68>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	e038      	b.n	800c628 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c5b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5bc:	69f9      	ldr	r1, [r7, #28]
 800c5be:	6938      	ldr	r0, [r7, #16]
 800c5c0:	f7ff fe4f 	bl	800c262 <put_fat>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d109      	bne.n	800c5e2 <create_chain+0xe2>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d006      	beq.n	800c5e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c5d4:	69fa      	ldr	r2, [r7, #28]
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	6938      	ldr	r0, [r7, #16]
 800c5da:	f7ff fe42 	bl	800c262 <put_fat>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d116      	bne.n	800c616 <create_chain+0x116>
		fs->last_clst = ncl;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	69fa      	ldr	r2, [r7, #28]
 800c5ec:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	691a      	ldr	r2, [r3, #16]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	3b02      	subs	r3, #2
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d804      	bhi.n	800c606 <create_chain+0x106>
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	1e5a      	subs	r2, r3, #1
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	791b      	ldrb	r3, [r3, #4]
 800c60a:	f043 0301 	orr.w	r3, r3, #1
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	711a      	strb	r2, [r3, #4]
 800c614:	e007      	b.n	800c626 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d102      	bne.n	800c622 <create_chain+0x122>
 800c61c:	f04f 33ff 	mov.w	r3, #4294967295
 800c620:	e000      	b.n	800c624 <create_chain+0x124>
 800c622:	2301      	movs	r3, #1
 800c624:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c626:	69fb      	ldr	r3, [r7, #28]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3720      	adds	r7, #32
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c644:	3304      	adds	r3, #4
 800c646:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	0a5b      	lsrs	r3, r3, #9
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	8952      	ldrh	r2, [r2, #10]
 800c650:	fbb3 f3f2 	udiv	r3, r3, r2
 800c654:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	1d1a      	adds	r2, r3, #4
 800c65a:	613a      	str	r2, [r7, #16]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <clmt_clust+0x3a>
 800c666:	2300      	movs	r3, #0
 800c668:	e010      	b.n	800c68c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d307      	bcc.n	800c682 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	3304      	adds	r3, #4
 800c67e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c680:	e7e9      	b.n	800c656 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c682:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	4413      	add	r3, r2
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	371c      	adds	r7, #28
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6ae:	d204      	bcs.n	800c6ba <dir_sdi+0x22>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	f003 031f 	and.w	r3, r3, #31
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <dir_sdi+0x26>
		return FR_INT_ERR;
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e063      	b.n	800c786 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d106      	bne.n	800c6de <dir_sdi+0x46>
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d902      	bls.n	800c6de <dir_sdi+0x46>
		clst = fs->dirbase;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10c      	bne.n	800c6fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	095b      	lsrs	r3, r3, #5
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	8912      	ldrh	r2, [r2, #8]
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d301      	bcc.n	800c6f4 <dir_sdi+0x5c>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e048      	b.n	800c786 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	61da      	str	r2, [r3, #28]
 800c6fc:	e029      	b.n	800c752 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	895b      	ldrh	r3, [r3, #10]
 800c702:	025b      	lsls	r3, r3, #9
 800c704:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c706:	e019      	b.n	800c73c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6979      	ldr	r1, [r7, #20]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7ff fd01 	bl	800c114 <get_fat>
 800c712:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d101      	bne.n	800c720 <dir_sdi+0x88>
 800c71c:	2301      	movs	r3, #1
 800c71e:	e032      	b.n	800c786 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d904      	bls.n	800c730 <dir_sdi+0x98>
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d301      	bcc.n	800c734 <dir_sdi+0x9c>
 800c730:	2302      	movs	r3, #2
 800c732:	e028      	b.n	800c786 <dir_sdi+0xee>
			ofs -= csz;
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	429a      	cmp	r2, r3
 800c742:	d2e1      	bcs.n	800c708 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c744:	6979      	ldr	r1, [r7, #20]
 800c746:	6938      	ldr	r0, [r7, #16]
 800c748:	f7ff fcc5 	bl	800c0d6 <clust2sect>
 800c74c:	4602      	mov	r2, r0
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <dir_sdi+0xcc>
 800c760:	2302      	movs	r3, #2
 800c762:	e010      	b.n	800c786 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	69da      	ldr	r2, [r3, #28]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	0a5b      	lsrs	r3, r3, #9
 800c76c:	441a      	add	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c77e:	441a      	add	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b086      	sub	sp, #24
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	3320      	adds	r3, #32
 800c7a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d003      	beq.n	800c7b6 <dir_next+0x28>
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7b4:	d301      	bcc.n	800c7ba <dir_next+0x2c>
 800c7b6:	2304      	movs	r3, #4
 800c7b8:	e0aa      	b.n	800c910 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f040 8098 	bne.w	800c8f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10b      	bne.n	800c7f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	095b      	lsrs	r3, r3, #5
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	8912      	ldrh	r2, [r2, #8]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	f0c0 8088 	bcc.w	800c8f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	61da      	str	r2, [r3, #28]
 800c7ec:	2304      	movs	r3, #4
 800c7ee:	e08f      	b.n	800c910 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	0a5b      	lsrs	r3, r3, #9
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	8952      	ldrh	r2, [r2, #10]
 800c7f8:	3a01      	subs	r2, #1
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d17a      	bne.n	800c8f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	4619      	mov	r1, r3
 800c808:	4610      	mov	r0, r2
 800c80a:	f7ff fc83 	bl	800c114 <get_fat>
 800c80e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d801      	bhi.n	800c81a <dir_next+0x8c>
 800c816:	2302      	movs	r3, #2
 800c818:	e07a      	b.n	800c910 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c820:	d101      	bne.n	800c826 <dir_next+0x98>
 800c822:	2301      	movs	r3, #1
 800c824:	e074      	b.n	800c910 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d358      	bcc.n	800c8e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d104      	bne.n	800c840 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	61da      	str	r2, [r3, #28]
 800c83c:	2304      	movs	r3, #4
 800c83e:	e067      	b.n	800c910 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	4619      	mov	r1, r3
 800c848:	4610      	mov	r0, r2
 800c84a:	f7ff fe59 	bl	800c500 <create_chain>
 800c84e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d101      	bne.n	800c85a <dir_next+0xcc>
 800c856:	2307      	movs	r3, #7
 800c858:	e05a      	b.n	800c910 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d101      	bne.n	800c864 <dir_next+0xd6>
 800c860:	2302      	movs	r3, #2
 800c862:	e055      	b.n	800c910 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86a:	d101      	bne.n	800c870 <dir_next+0xe2>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e04f      	b.n	800c910 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff fbbf 	bl	800bff4 <sync_window>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <dir_next+0xf2>
 800c87c:	2301      	movs	r3, #1
 800c87e:	e047      	b.n	800c910 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	3330      	adds	r3, #48	@ 0x30
 800c884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c888:	2100      	movs	r1, #0
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff fa25 	bl	800bcda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c890:	2300      	movs	r3, #0
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	6979      	ldr	r1, [r7, #20]
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f7ff fc1d 	bl	800c0d6 <clust2sect>
 800c89c:	4602      	mov	r2, r0
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8a2:	e012      	b.n	800c8ca <dir_next+0x13c>
						fs->wflag = 1;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7ff fba2 	bl	800bff4 <sync_window>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <dir_next+0x12c>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e02a      	b.n	800c910 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	613b      	str	r3, [r7, #16]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	895b      	ldrh	r3, [r3, #10]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d3e6      	bcc.n	800c8a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	1ad2      	subs	r2, r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8e8:	6979      	ldr	r1, [r7, #20]
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff fbf3 	bl	800c0d6 <clust2sect>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c908:	441a      	add	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c928:	2100      	movs	r1, #0
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff feb4 	bl	800c698 <dir_sdi>
 800c930:	4603      	mov	r3, r0
 800c932:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d12b      	bne.n	800c992 <dir_alloc+0x7a>
		n = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	4619      	mov	r1, r3
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f7ff fb99 	bl	800c07c <move_window>
 800c94a:	4603      	mov	r3, r0
 800c94c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d11d      	bne.n	800c990 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2be5      	cmp	r3, #229	@ 0xe5
 800c95c:	d004      	beq.n	800c968 <dir_alloc+0x50>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d107      	bne.n	800c978 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3301      	adds	r3, #1
 800c96c:	613b      	str	r3, [r7, #16]
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	429a      	cmp	r2, r3
 800c974:	d102      	bne.n	800c97c <dir_alloc+0x64>
 800c976:	e00c      	b.n	800c992 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c978:	2300      	movs	r3, #0
 800c97a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c97c:	2101      	movs	r1, #1
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff ff05 	bl	800c78e <dir_next>
 800c984:	4603      	mov	r3, r0
 800c986:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0d7      	beq.n	800c93e <dir_alloc+0x26>
 800c98e:	e000      	b.n	800c992 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c990:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	2b04      	cmp	r3, #4
 800c996:	d101      	bne.n	800c99c <dir_alloc+0x84>
 800c998:	2307      	movs	r3, #7
 800c99a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	331a      	adds	r3, #26
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff f8ed 	bl	800bb94 <ld_word>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d109      	bne.n	800c9da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	3314      	adds	r3, #20
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff f8e2 	bl	800bb94 <ld_word>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	041b      	lsls	r3, r3, #16
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c9da:	68fb      	ldr	r3, [r7, #12]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	331a      	adds	r3, #26
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	b292      	uxth	r2, r2
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff f905 	bl	800bc0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b03      	cmp	r3, #3
 800ca06:	d109      	bne.n	800ca1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	f103 0214 	add.w	r2, r3, #20
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	0c1b      	lsrs	r3, r3, #16
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	4619      	mov	r1, r3
 800ca16:	4610      	mov	r0, r2
 800ca18:	f7ff f8f7 	bl	800bc0a <st_word>
	}
}
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca32:	2100      	movs	r1, #0
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7ff fe2f 	bl	800c698 <dir_sdi>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <dir_find+0x24>
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	e03e      	b.n	800cac6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6938      	ldr	r0, [r7, #16]
 800ca50:	f7ff fb14 	bl	800c07c <move_window>
 800ca54:	4603      	mov	r3, r0
 800ca56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d12f      	bne.n	800cabe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d102      	bne.n	800ca72 <dir_find+0x4e>
 800ca6c:	2304      	movs	r3, #4
 800ca6e:	75fb      	strb	r3, [r7, #23]
 800ca70:	e028      	b.n	800cac4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a1b      	ldr	r3, [r3, #32]
 800ca76:	330b      	adds	r3, #11
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	330b      	adds	r3, #11
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	f003 0308 	and.w	r3, r3, #8
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <dir_find+0x86>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a18      	ldr	r0, [r3, #32]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3324      	adds	r3, #36	@ 0x24
 800ca9c:	220b      	movs	r2, #11
 800ca9e:	4619      	mov	r1, r3
 800caa0:	f7ff f936 	bl	800bd10 <mem_cmp>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00b      	beq.n	800cac2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800caaa:	2100      	movs	r1, #0
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff fe6e 	bl	800c78e <dir_next>
 800cab2:	4603      	mov	r3, r0
 800cab4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0c5      	beq.n	800ca48 <dir_find+0x24>
 800cabc:	e002      	b.n	800cac4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cabe:	bf00      	nop
 800cac0:	e000      	b.n	800cac4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cac2:	bf00      	nop

	return res;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cadc:	2101      	movs	r1, #1
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff ff1a 	bl	800c918 <dir_alloc>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d11c      	bne.n	800cb28 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	4619      	mov	r1, r3
 800caf4:	68b8      	ldr	r0, [r7, #8]
 800caf6:	f7ff fac1 	bl	800c07c <move_window>
 800cafa:	4603      	mov	r3, r0
 800cafc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d111      	bne.n	800cb28 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	2220      	movs	r2, #32
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff f8e4 	bl	800bcda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a18      	ldr	r0, [r3, #32]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3324      	adds	r3, #36	@ 0x24
 800cb1a:	220b      	movs	r2, #11
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f7ff f8bb 	bl	800bc98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2201      	movs	r2, #1
 800cb26:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3324      	adds	r3, #36	@ 0x24
 800cb48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb4a:	220b      	movs	r2, #11
 800cb4c:	2120      	movs	r1, #32
 800cb4e:	68b8      	ldr	r0, [r7, #8]
 800cb50:	f7ff f8c3 	bl	800bcda <mem_set>
	si = i = 0; ni = 8;
 800cb54:	2300      	movs	r3, #0
 800cb56:	613b      	str	r3, [r7, #16]
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	61fb      	str	r3, [r7, #28]
 800cb5c:	2308      	movs	r3, #8
 800cb5e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	61fa      	str	r2, [r7, #28]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	4413      	add	r3, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb6e:	7efb      	ldrb	r3, [r7, #27]
 800cb70:	2b20      	cmp	r3, #32
 800cb72:	d94e      	bls.n	800cc12 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb74:	7efb      	ldrb	r3, [r7, #27]
 800cb76:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb78:	d006      	beq.n	800cb88 <create_name+0x54>
 800cb7a:	7efb      	ldrb	r3, [r7, #27]
 800cb7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb7e:	d110      	bne.n	800cba2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb80:	e002      	b.n	800cb88 <create_name+0x54>
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	3301      	adds	r3, #1
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb92:	d0f6      	beq.n	800cb82 <create_name+0x4e>
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	4413      	add	r3, r2
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb9e:	d0f0      	beq.n	800cb82 <create_name+0x4e>
			break;
 800cba0:	e038      	b.n	800cc14 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cba2:	7efb      	ldrb	r3, [r7, #27]
 800cba4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cba6:	d003      	beq.n	800cbb0 <create_name+0x7c>
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d30c      	bcc.n	800cbca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2b0b      	cmp	r3, #11
 800cbb4:	d002      	beq.n	800cbbc <create_name+0x88>
 800cbb6:	7efb      	ldrb	r3, [r7, #27]
 800cbb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbba:	d001      	beq.n	800cbc0 <create_name+0x8c>
 800cbbc:	2306      	movs	r3, #6
 800cbbe:	e044      	b.n	800cc4a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cbc0:	2308      	movs	r3, #8
 800cbc2:	613b      	str	r3, [r7, #16]
 800cbc4:	230b      	movs	r3, #11
 800cbc6:	617b      	str	r3, [r7, #20]
			continue;
 800cbc8:	e022      	b.n	800cc10 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cbca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da04      	bge.n	800cbdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cbd2:	7efb      	ldrb	r3, [r7, #27]
 800cbd4:	3b80      	subs	r3, #128	@ 0x80
 800cbd6:	4a1f      	ldr	r2, [pc, #124]	@ (800cc54 <create_name+0x120>)
 800cbd8:	5cd3      	ldrb	r3, [r2, r3]
 800cbda:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cbdc:	7efb      	ldrb	r3, [r7, #27]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	481d      	ldr	r0, [pc, #116]	@ (800cc58 <create_name+0x124>)
 800cbe2:	f7ff f8bc 	bl	800bd5e <chk_chr>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <create_name+0xbc>
 800cbec:	2306      	movs	r3, #6
 800cbee:	e02c      	b.n	800cc4a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cbf0:	7efb      	ldrb	r3, [r7, #27]
 800cbf2:	2b60      	cmp	r3, #96	@ 0x60
 800cbf4:	d905      	bls.n	800cc02 <create_name+0xce>
 800cbf6:	7efb      	ldrb	r3, [r7, #27]
 800cbf8:	2b7a      	cmp	r3, #122	@ 0x7a
 800cbfa:	d802      	bhi.n	800cc02 <create_name+0xce>
 800cbfc:	7efb      	ldrb	r3, [r7, #27]
 800cbfe:	3b20      	subs	r3, #32
 800cc00:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	613a      	str	r2, [r7, #16]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	7efa      	ldrb	r2, [r7, #27]
 800cc0e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cc10:	e7a6      	b.n	800cb60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cc12:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	441a      	add	r2, r3
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <create_name+0xf4>
 800cc24:	2306      	movs	r3, #6
 800cc26:	e010      	b.n	800cc4a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2be5      	cmp	r3, #229	@ 0xe5
 800cc2e:	d102      	bne.n	800cc36 <create_name+0x102>
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2205      	movs	r2, #5
 800cc34:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cc36:	7efb      	ldrb	r3, [r7, #27]
 800cc38:	2b20      	cmp	r3, #32
 800cc3a:	d801      	bhi.n	800cc40 <create_name+0x10c>
 800cc3c:	2204      	movs	r2, #4
 800cc3e:	e000      	b.n	800cc42 <create_name+0x10e>
 800cc40:	2200      	movs	r2, #0
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	330b      	adds	r3, #11
 800cc46:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc48:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3720      	adds	r7, #32
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	0800ed10 	.word	0x0800ed10
 800cc58:	0800ea20 	.word	0x0800ea20

0800cc5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc70:	e002      	b.n	800cc78 <follow_path+0x1c>
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	3301      	adds	r3, #1
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc7e:	d0f8      	beq.n	800cc72 <follow_path+0x16>
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b5c      	cmp	r3, #92	@ 0x5c
 800cc86:	d0f4      	beq.n	800cc72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	2b1f      	cmp	r3, #31
 800cc94:	d80a      	bhi.n	800ccac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2280      	movs	r2, #128	@ 0x80
 800cc9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cc9e:	2100      	movs	r1, #0
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7ff fcf9 	bl	800c698 <dir_sdi>
 800cca6:	4603      	mov	r3, r0
 800cca8:	75fb      	strb	r3, [r7, #23]
 800ccaa:	e043      	b.n	800cd34 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccac:	463b      	mov	r3, r7
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff ff3f 	bl	800cb34 <create_name>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d134      	bne.n	800cd2a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff feaf 	bl	800ca24 <dir_find>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ccd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00a      	beq.n	800ccee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	d127      	bne.n	800cd2e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ccde:	7afb      	ldrb	r3, [r7, #11]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d122      	bne.n	800cd2e <follow_path+0xd2>
 800cce8:	2305      	movs	r3, #5
 800ccea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ccec:	e01f      	b.n	800cd2e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccee:	7afb      	ldrb	r3, [r7, #11]
 800ccf0:	f003 0304 	and.w	r3, r3, #4
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d11c      	bne.n	800cd32 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	799b      	ldrb	r3, [r3, #6]
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cd04:	2305      	movs	r3, #5
 800cd06:	75fb      	strb	r3, [r7, #23]
 800cd08:	e014      	b.n	800cd34 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd18:	4413      	add	r3, r2
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff fe42 	bl	800c9a6 <ld_clust>
 800cd22:	4602      	mov	r2, r0
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd28:	e7c0      	b.n	800ccac <follow_path+0x50>
			if (res != FR_OK) break;
 800cd2a:	bf00      	nop
 800cd2c:	e002      	b.n	800cd34 <follow_path+0xd8>
				break;
 800cd2e:	bf00      	nop
 800cd30:	e000      	b.n	800cd34 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd32:	bf00      	nop
			}
		}
	}

	return res;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b087      	sub	sp, #28
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd46:	f04f 33ff 	mov.w	r3, #4294967295
 800cd4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d031      	beq.n	800cdb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	e002      	b.n	800cd62 <get_ldnumber+0x24>
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	2b20      	cmp	r3, #32
 800cd68:	d903      	bls.n	800cd72 <get_ldnumber+0x34>
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd70:	d1f4      	bne.n	800cd5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd78:	d11c      	bne.n	800cdb4 <get_ldnumber+0x76>
			tp = *path;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	60fa      	str	r2, [r7, #12]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	3b30      	subs	r3, #48	@ 0x30
 800cd8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b09      	cmp	r3, #9
 800cd90:	d80e      	bhi.n	800cdb0 <get_ldnumber+0x72>
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d10a      	bne.n	800cdb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d107      	bne.n	800cdb0 <get_ldnumber+0x72>
					vol = (int)i;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	3301      	adds	r3, #1
 800cda8:	617b      	str	r3, [r7, #20]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	e002      	b.n	800cdba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cdb8:	693b      	ldr	r3, [r7, #16]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
	...

0800cdc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	70da      	strb	r2, [r3, #3]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f04f 32ff 	mov.w	r2, #4294967295
 800cdde:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff f94a 	bl	800c07c <move_window>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d001      	beq.n	800cdf2 <check_fs+0x2a>
 800cdee:	2304      	movs	r3, #4
 800cdf0:	e038      	b.n	800ce64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3330      	adds	r3, #48	@ 0x30
 800cdf6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fe feca 	bl	800bb94 <ld_word>
 800ce00:	4603      	mov	r3, r0
 800ce02:	461a      	mov	r2, r3
 800ce04:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d001      	beq.n	800ce10 <check_fs+0x48>
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e029      	b.n	800ce64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce16:	2be9      	cmp	r3, #233	@ 0xe9
 800ce18:	d009      	beq.n	800ce2e <check_fs+0x66>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce20:	2beb      	cmp	r3, #235	@ 0xeb
 800ce22:	d11e      	bne.n	800ce62 <check_fs+0x9a>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ce2a:	2b90      	cmp	r3, #144	@ 0x90
 800ce2c:	d119      	bne.n	800ce62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3330      	adds	r3, #48	@ 0x30
 800ce32:	3336      	adds	r3, #54	@ 0x36
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fe fec5 	bl	800bbc4 <ld_dword>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ce40:	4a0a      	ldr	r2, [pc, #40]	@ (800ce6c <check_fs+0xa4>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d101      	bne.n	800ce4a <check_fs+0x82>
 800ce46:	2300      	movs	r3, #0
 800ce48:	e00c      	b.n	800ce64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3330      	adds	r3, #48	@ 0x30
 800ce4e:	3352      	adds	r3, #82	@ 0x52
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fe feb7 	bl	800bbc4 <ld_dword>
 800ce56:	4603      	mov	r3, r0
 800ce58:	4a05      	ldr	r2, [pc, #20]	@ (800ce70 <check_fs+0xa8>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d101      	bne.n	800ce62 <check_fs+0x9a>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e000      	b.n	800ce64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce62:	2302      	movs	r3, #2
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	00544146 	.word	0x00544146
 800ce70:	33544146 	.word	0x33544146

0800ce74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b096      	sub	sp, #88	@ 0x58
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7ff ff58 	bl	800cd3e <get_ldnumber>
 800ce8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da01      	bge.n	800ce9a <find_volume+0x26>
 800ce96:	230b      	movs	r3, #11
 800ce98:	e22d      	b.n	800d2f6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce9a:	4aa1      	ldr	r2, [pc, #644]	@ (800d120 <find_volume+0x2ac>)
 800ce9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cea2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <find_volume+0x3a>
 800ceaa:	230c      	movs	r3, #12
 800ceac:	e223      	b.n	800d2f6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ceb2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	f023 0301 	bic.w	r3, r3, #1
 800ceba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01a      	beq.n	800cefa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec6:	785b      	ldrb	r3, [r3, #1]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe fde1 	bl	800ba90 <disk_status>
 800cece:	4603      	mov	r3, r0
 800ced0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ced4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10c      	bne.n	800cefa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d007      	beq.n	800cef6 <find_volume+0x82>
 800cee6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ceea:	f003 0304 	and.w	r3, r3, #4
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cef2:	230a      	movs	r3, #10
 800cef4:	e1ff      	b.n	800d2f6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cef6:	2300      	movs	r3, #0
 800cef8:	e1fd      	b.n	800d2f6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cf00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fdd9 	bl	800bac4 <disk_initialize>
 800cf12:	4603      	mov	r3, r0
 800cf14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cf18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cf24:	2303      	movs	r3, #3
 800cf26:	e1e6      	b.n	800d2f6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d007      	beq.n	800cf3e <find_volume+0xca>
 800cf2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf32:	f003 0304 	and.w	r3, r3, #4
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf3a:	230a      	movs	r3, #10
 800cf3c:	e1db      	b.n	800d2f6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf46:	f7ff ff3f 	bl	800cdc8 <check_fs>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d149      	bne.n	800cfec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf58:	2300      	movs	r3, #0
 800cf5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf5c:	e01e      	b.n	800cf9c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cf6c:	4413      	add	r3, r2
 800cf6e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf72:	3304      	adds	r3, #4
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d006      	beq.n	800cf88 <find_volume+0x114>
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe fe20 	bl	800bbc4 <ld_dword>
 800cf84:	4602      	mov	r2, r0
 800cf86:	e000      	b.n	800cf8a <find_volume+0x116>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	3358      	adds	r3, #88	@ 0x58
 800cf90:	443b      	add	r3, r7
 800cf92:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf98:	3301      	adds	r3, #1
 800cf9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d9dd      	bls.n	800cf5e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cfa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <find_volume+0x13e>
 800cfac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cfb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	3358      	adds	r3, #88	@ 0x58
 800cfb8:	443b      	add	r3, r7
 800cfba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cfbe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cfc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <find_volume+0x15e>
 800cfc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cfca:	f7ff fefd 	bl	800cdc8 <check_fs>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	e000      	b.n	800cfd4 <find_volume+0x160>
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cfd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d905      	bls.n	800cfec <find_volume+0x178>
 800cfe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	d9e2      	bls.n	800cfb2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cfec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cff0:	2b04      	cmp	r3, #4
 800cff2:	d101      	bne.n	800cff8 <find_volume+0x184>
 800cff4:	2301      	movs	r3, #1
 800cff6:	e17e      	b.n	800d2f6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cff8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d901      	bls.n	800d004 <find_volume+0x190>
 800d000:	230d      	movs	r3, #13
 800d002:	e178      	b.n	800d2f6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d006:	3330      	adds	r3, #48	@ 0x30
 800d008:	330b      	adds	r3, #11
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fdc2 	bl	800bb94 <ld_word>
 800d010:	4603      	mov	r3, r0
 800d012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d016:	d001      	beq.n	800d01c <find_volume+0x1a8>
 800d018:	230d      	movs	r3, #13
 800d01a:	e16c      	b.n	800d2f6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01e:	3330      	adds	r3, #48	@ 0x30
 800d020:	3316      	adds	r3, #22
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe fdb6 	bl	800bb94 <ld_word>
 800d028:	4603      	mov	r3, r0
 800d02a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d02c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <find_volume+0x1cc>
 800d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d034:	3330      	adds	r3, #48	@ 0x30
 800d036:	3324      	adds	r3, #36	@ 0x24
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fdc3 	bl	800bbc4 <ld_dword>
 800d03e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d044:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d052:	789b      	ldrb	r3, [r3, #2]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d005      	beq.n	800d064 <find_volume+0x1f0>
 800d058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05a:	789b      	ldrb	r3, [r3, #2]
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d001      	beq.n	800d064 <find_volume+0x1f0>
 800d060:	230d      	movs	r3, #13
 800d062:	e148      	b.n	800d2f6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d066:	789b      	ldrb	r3, [r3, #2]
 800d068:	461a      	mov	r2, r3
 800d06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d06c:	fb02 f303 	mul.w	r3, r2, r3
 800d070:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d078:	461a      	mov	r2, r3
 800d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d080:	895b      	ldrh	r3, [r3, #10]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d008      	beq.n	800d098 <find_volume+0x224>
 800d086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d088:	895b      	ldrh	r3, [r3, #10]
 800d08a:	461a      	mov	r2, r3
 800d08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08e:	895b      	ldrh	r3, [r3, #10]
 800d090:	3b01      	subs	r3, #1
 800d092:	4013      	ands	r3, r2
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <find_volume+0x228>
 800d098:	230d      	movs	r3, #13
 800d09a:	e12c      	b.n	800d2f6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09e:	3330      	adds	r3, #48	@ 0x30
 800d0a0:	3311      	adds	r3, #17
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fd76 	bl	800bb94 <ld_word>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	891b      	ldrh	r3, [r3, #8]
 800d0b4:	f003 030f 	and.w	r3, r3, #15
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d001      	beq.n	800d0c2 <find_volume+0x24e>
 800d0be:	230d      	movs	r3, #13
 800d0c0:	e119      	b.n	800d2f6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c4:	3330      	adds	r3, #48	@ 0x30
 800d0c6:	3313      	adds	r3, #19
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fd63 	bl	800bb94 <ld_word>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d0d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <find_volume+0x272>
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0da:	3330      	adds	r3, #48	@ 0x30
 800d0dc:	3320      	adds	r3, #32
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fd70 	bl	800bbc4 <ld_dword>
 800d0e4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e8:	3330      	adds	r3, #48	@ 0x30
 800d0ea:	330e      	adds	r3, #14
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fe fd51 	bl	800bb94 <ld_word>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d0f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <find_volume+0x28c>
 800d0fc:	230d      	movs	r3, #13
 800d0fe:	e0fa      	b.n	800d2f6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d100:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d104:	4413      	add	r3, r2
 800d106:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d108:	8912      	ldrh	r2, [r2, #8]
 800d10a:	0912      	lsrs	r2, r2, #4
 800d10c:	b292      	uxth	r2, r2
 800d10e:	4413      	add	r3, r2
 800d110:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d116:	429a      	cmp	r2, r3
 800d118:	d204      	bcs.n	800d124 <find_volume+0x2b0>
 800d11a:	230d      	movs	r3, #13
 800d11c:	e0eb      	b.n	800d2f6 <find_volume+0x482>
 800d11e:	bf00      	nop
 800d120:	24031720 	.word	0x24031720
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d12c:	8952      	ldrh	r2, [r2, #10]
 800d12e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d132:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <find_volume+0x2ca>
 800d13a:	230d      	movs	r3, #13
 800d13c:	e0db      	b.n	800d2f6 <find_volume+0x482>
		fmt = FS_FAT32;
 800d13e:	2303      	movs	r3, #3
 800d140:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d146:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d802      	bhi.n	800d154 <find_volume+0x2e0>
 800d14e:	2302      	movs	r3, #2
 800d150:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d802      	bhi.n	800d164 <find_volume+0x2f0>
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d166:	1c9a      	adds	r2, r3, #2
 800d168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d170:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d172:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d176:	441a      	add	r2, r3
 800d178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d17c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d180:	441a      	add	r2, r3
 800d182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d184:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d186:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d18a:	2b03      	cmp	r3, #3
 800d18c:	d11e      	bne.n	800d1cc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d190:	3330      	adds	r3, #48	@ 0x30
 800d192:	332a      	adds	r3, #42	@ 0x2a
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe fcfd 	bl	800bb94 <ld_word>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <find_volume+0x330>
 800d1a0:	230d      	movs	r3, #13
 800d1a2:	e0a8      	b.n	800d2f6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a6:	891b      	ldrh	r3, [r3, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <find_volume+0x33c>
 800d1ac:	230d      	movs	r3, #13
 800d1ae:	e0a2      	b.n	800d2f6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b2:	3330      	adds	r3, #48	@ 0x30
 800d1b4:	332c      	adds	r3, #44	@ 0x2c
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fd04 	bl	800bbc4 <ld_dword>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1ca:	e01f      	b.n	800d20c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ce:	891b      	ldrh	r3, [r3, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <find_volume+0x364>
 800d1d4:	230d      	movs	r3, #13
 800d1d6:	e08e      	b.n	800d2f6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1da:	6a1a      	ldr	r2, [r3, #32]
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1de:	441a      	add	r2, r3
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d1e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d103      	bne.n	800d1f4 <find_volume+0x380>
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	e00a      	b.n	800d20a <find_volume+0x396>
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	695a      	ldr	r2, [r3, #20]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	4413      	add	r3, r2
 800d1fe:	085a      	lsrs	r2, r3, #1
 800d200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d20a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20e:	699a      	ldr	r2, [r3, #24]
 800d210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d212:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d216:	0a5b      	lsrs	r3, r3, #9
 800d218:	429a      	cmp	r2, r3
 800d21a:	d201      	bcs.n	800d220 <find_volume+0x3ac>
 800d21c:	230d      	movs	r3, #13
 800d21e:	e06a      	b.n	800d2f6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d222:	f04f 32ff 	mov.w	r2, #4294967295
 800d226:	611a      	str	r2, [r3, #16]
 800d228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22a:	691a      	ldr	r2, [r3, #16]
 800d22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d232:	2280      	movs	r2, #128	@ 0x80
 800d234:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d236:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d23a:	2b03      	cmp	r3, #3
 800d23c:	d149      	bne.n	800d2d2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	3330      	adds	r3, #48	@ 0x30
 800d242:	3330      	adds	r3, #48	@ 0x30
 800d244:	4618      	mov	r0, r3
 800d246:	f7fe fca5 	bl	800bb94 <ld_word>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d140      	bne.n	800d2d2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d252:	3301      	adds	r3, #1
 800d254:	4619      	mov	r1, r3
 800d256:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d258:	f7fe ff10 	bl	800c07c <move_window>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d137      	bne.n	800d2d2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d264:	2200      	movs	r2, #0
 800d266:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26a:	3330      	adds	r3, #48	@ 0x30
 800d26c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fc8f 	bl	800bb94 <ld_word>
 800d276:	4603      	mov	r3, r0
 800d278:	461a      	mov	r2, r3
 800d27a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d27e:	429a      	cmp	r2, r3
 800d280:	d127      	bne.n	800d2d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d284:	3330      	adds	r3, #48	@ 0x30
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fc9c 	bl	800bbc4 <ld_dword>
 800d28c:	4603      	mov	r3, r0
 800d28e:	4a1c      	ldr	r2, [pc, #112]	@ (800d300 <find_volume+0x48c>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d11e      	bne.n	800d2d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d296:	3330      	adds	r3, #48	@ 0x30
 800d298:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fc91 	bl	800bbc4 <ld_dword>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	4a17      	ldr	r2, [pc, #92]	@ (800d304 <find_volume+0x490>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d113      	bne.n	800d2d2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ac:	3330      	adds	r3, #48	@ 0x30
 800d2ae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fc86 	bl	800bbc4 <ld_dword>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c0:	3330      	adds	r3, #48	@ 0x30
 800d2c2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe fc7c 	bl	800bbc4 <ld_dword>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d2d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d2da:	4b0b      	ldr	r3, [pc, #44]	@ (800d308 <find_volume+0x494>)
 800d2dc:	881b      	ldrh	r3, [r3, #0]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	4b09      	ldr	r3, [pc, #36]	@ (800d308 <find_volume+0x494>)
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	4b08      	ldr	r3, [pc, #32]	@ (800d308 <find_volume+0x494>)
 800d2e8:	881a      	ldrh	r2, [r3, #0]
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d2ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d2f0:	f7fe fe5c 	bl	800bfac <clear_lock>
#endif
	return FR_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3758      	adds	r7, #88	@ 0x58
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	41615252 	.word	0x41615252
 800d304:	61417272 	.word	0x61417272
 800d308:	24031724 	.word	0x24031724

0800d30c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d316:	2309      	movs	r3, #9
 800d318:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d01c      	beq.n	800d35a <validate+0x4e>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d018      	beq.n	800d35a <validate+0x4e>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d013      	beq.n	800d35a <validate+0x4e>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	889a      	ldrh	r2, [r3, #4]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	88db      	ldrh	r3, [r3, #6]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d10c      	bne.n	800d35a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	785b      	ldrb	r3, [r3, #1]
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe fba2 	bl	800ba90 <disk_status>
 800d34c:	4603      	mov	r3, r0
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <validate+0x4e>
			res = FR_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d102      	bne.n	800d366 <validate+0x5a>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	e000      	b.n	800d368 <validate+0x5c>
 800d366:	2300      	movs	r3, #0
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	6013      	str	r3, [r2, #0]
	return res;
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d38a:	f107 0310 	add.w	r3, r7, #16
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fcd5 	bl	800cd3e <get_ldnumber>
 800d394:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da01      	bge.n	800d3a0 <f_mount+0x28>
 800d39c:	230b      	movs	r3, #11
 800d39e:	e02b      	b.n	800d3f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d3a0:	4a17      	ldr	r2, [pc, #92]	@ (800d400 <f_mount+0x88>)
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d005      	beq.n	800d3bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d3b0:	69b8      	ldr	r0, [r7, #24]
 800d3b2:	f7fe fdfb 	bl	800bfac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d002      	beq.n	800d3c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	490d      	ldr	r1, [pc, #52]	@ (800d400 <f_mount+0x88>)
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <f_mount+0x66>
 800d3d8:	79fb      	ldrb	r3, [r7, #7]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d001      	beq.n	800d3e2 <f_mount+0x6a>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e00a      	b.n	800d3f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d3e2:	f107 010c 	add.w	r1, r7, #12
 800d3e6:	f107 0308 	add.w	r3, r7, #8
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff fd41 	bl	800ce74 <find_volume>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3720      	adds	r7, #32
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	24031720 	.word	0x24031720

0800d404 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b098      	sub	sp, #96	@ 0x60
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	4613      	mov	r3, r2
 800d410:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <f_open+0x18>
 800d418:	2309      	movs	r3, #9
 800d41a:	e1a9      	b.n	800d770 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d41c:	79fb      	ldrb	r3, [r7, #7]
 800d41e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d422:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d424:	79fa      	ldrb	r2, [r7, #7]
 800d426:	f107 0110 	add.w	r1, r7, #16
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fd20 	bl	800ce74 <find_volume>
 800d434:	4603      	mov	r3, r0
 800d436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d43a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f040 818d 	bne.w	800d75e <f_open+0x35a>
		dj.obj.fs = fs;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	f107 0314 	add.w	r3, r7, #20
 800d44e:	4611      	mov	r1, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fc03 	bl	800cc5c <follow_path>
 800d456:	4603      	mov	r3, r0
 800d458:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d45c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d460:	2b00      	cmp	r3, #0
 800d462:	d118      	bne.n	800d496 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d464:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d468:	b25b      	sxtb	r3, r3
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	da03      	bge.n	800d476 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d46e:	2306      	movs	r3, #6
 800d470:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d474:	e00f      	b.n	800d496 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	bf8c      	ite	hi
 800d47c:	2301      	movhi	r3, #1
 800d47e:	2300      	movls	r3, #0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	461a      	mov	r2, r3
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	4611      	mov	r1, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fc82 	bl	800bd94 <chk_lock>
 800d490:	4603      	mov	r3, r0
 800d492:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	f003 031c 	and.w	r3, r3, #28
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d07f      	beq.n	800d5a0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d4a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d017      	beq.n	800d4d8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d4a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4ac:	2b04      	cmp	r3, #4
 800d4ae:	d10e      	bne.n	800d4ce <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d4b0:	f7fe fccc 	bl	800be4c <enq_lock>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d006      	beq.n	800d4c8 <f_open+0xc4>
 800d4ba:	f107 0314 	add.w	r3, r7, #20
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fb05 	bl	800cace <dir_register>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	e000      	b.n	800d4ca <f_open+0xc6>
 800d4c8:	2312      	movs	r3, #18
 800d4ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d4ce:	79fb      	ldrb	r3, [r7, #7]
 800d4d0:	f043 0308 	orr.w	r3, r3, #8
 800d4d4:	71fb      	strb	r3, [r7, #7]
 800d4d6:	e010      	b.n	800d4fa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d4d8:	7ebb      	ldrb	r3, [r7, #26]
 800d4da:	f003 0311 	and.w	r3, r3, #17
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <f_open+0xe6>
					res = FR_DENIED;
 800d4e2:	2307      	movs	r3, #7
 800d4e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d4e8:	e007      	b.n	800d4fa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	f003 0304 	and.w	r3, r3, #4
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <f_open+0xf6>
 800d4f4:	2308      	movs	r3, #8
 800d4f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d4fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d168      	bne.n	800d5d4 <f_open+0x1d0>
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	f003 0308 	and.w	r3, r3, #8
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d063      	beq.n	800d5d4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d50c:	f7fe f87a 	bl	800b604 <get_fattime>
 800d510:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d514:	330e      	adds	r3, #14
 800d516:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fe fb91 	bl	800bc40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d520:	3316      	adds	r3, #22
 800d522:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe fb8b 	bl	800bc40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d52c:	330b      	adds	r3, #11
 800d52e:	2220      	movs	r2, #32
 800d530:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff fa34 	bl	800c9a6 <ld_clust>
 800d53e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d544:	2200      	movs	r2, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f7ff fa4c 	bl	800c9e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d54e:	331c      	adds	r3, #28
 800d550:	2100      	movs	r1, #0
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fb74 	bl	800bc40 <st_dword>
					fs->wflag = 1;
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	2201      	movs	r2, #1
 800d55c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d55e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d037      	beq.n	800d5d4 <f_open+0x1d0>
						dw = fs->winsect;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d568:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d56a:	f107 0314 	add.w	r3, r7, #20
 800d56e:	2200      	movs	r2, #0
 800d570:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d572:	4618      	mov	r0, r3
 800d574:	f7fe ff5f 	bl	800c436 <remove_chain>
 800d578:	4603      	mov	r3, r0
 800d57a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d57e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d582:	2b00      	cmp	r3, #0
 800d584:	d126      	bne.n	800d5d4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe fd76 	bl	800c07c <move_window>
 800d590:	4603      	mov	r3, r0
 800d592:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d59a:	3a01      	subs	r2, #1
 800d59c:	60da      	str	r2, [r3, #12]
 800d59e:	e019      	b.n	800d5d4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d5a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d115      	bne.n	800d5d4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d5a8:	7ebb      	ldrb	r3, [r7, #26]
 800d5aa:	f003 0310 	and.w	r3, r3, #16
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <f_open+0x1b6>
					res = FR_NO_FILE;
 800d5b2:	2304      	movs	r3, #4
 800d5b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d5b8:	e00c      	b.n	800d5d4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d007      	beq.n	800d5d4 <f_open+0x1d0>
 800d5c4:	7ebb      	ldrb	r3, [r7, #26]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <f_open+0x1d0>
						res = FR_DENIED;
 800d5ce:	2307      	movs	r3, #7
 800d5d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d126      	bne.n	800d62a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	f003 0308 	and.w	r3, r3, #8
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d5f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	bf8c      	ite	hi
 800d602:	2301      	movhi	r3, #1
 800d604:	2300      	movls	r3, #0
 800d606:	b2db      	uxtb	r3, r3
 800d608:	461a      	mov	r2, r3
 800d60a:	f107 0314 	add.w	r3, r7, #20
 800d60e:	4611      	mov	r1, r2
 800d610:	4618      	mov	r0, r3
 800d612:	f7fe fc3d 	bl	800be90 <inc_lock>
 800d616:	4602      	mov	r2, r0
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <f_open+0x226>
 800d624:	2302      	movs	r3, #2
 800d626:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d62a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f040 8095 	bne.w	800d75e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d638:	4611      	mov	r1, r2
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7ff f9b3 	bl	800c9a6 <ld_clust>
 800d640:	4602      	mov	r2, r0
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d648:	331c      	adds	r3, #28
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fe faba 	bl	800bbc4 <ld_dword>
 800d650:	4602      	mov	r2, r0
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	88da      	ldrh	r2, [r3, #6]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	79fa      	ldrb	r2, [r7, #7]
 800d66e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	3330      	adds	r3, #48	@ 0x30
 800d686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d68a:	2100      	movs	r1, #0
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe fb24 	bl	800bcda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	f003 0320 	and.w	r3, r3, #32
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d060      	beq.n	800d75e <f_open+0x35a>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d05c      	beq.n	800d75e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68da      	ldr	r2, [r3, #12]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	895b      	ldrh	r3, [r3, #10]
 800d6b0:	025b      	lsls	r3, r3, #9
 800d6b2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6c0:	e016      	b.n	800d6f0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe fd24 	bl	800c114 <get_fat>
 800d6cc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d6ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d802      	bhi.n	800d6da <f_open+0x2d6>
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d6da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e0:	d102      	bne.n	800d6e8 <f_open+0x2e4>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d6ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d103      	bne.n	800d700 <f_open+0x2fc>
 800d6f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d6fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d8e0      	bhi.n	800d6c2 <f_open+0x2be>
				}
				fp->clust = clst;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d704:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d706:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d127      	bne.n	800d75e <f_open+0x35a>
 800d70e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d714:	2b00      	cmp	r3, #0
 800d716:	d022      	beq.n	800d75e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe fcda 	bl	800c0d6 <clust2sect>
 800d722:	6478      	str	r0, [r7, #68]	@ 0x44
 800d724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d726:	2b00      	cmp	r3, #0
 800d728:	d103      	bne.n	800d732 <f_open+0x32e>
						res = FR_INT_ERR;
 800d72a:	2302      	movs	r3, #2
 800d72c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d730:	e015      	b.n	800d75e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d734:	0a5a      	lsrs	r2, r3, #9
 800d736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d738:	441a      	add	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	7858      	ldrb	r0, [r3, #1]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6a1a      	ldr	r2, [r3, #32]
 800d74c:	2301      	movs	r3, #1
 800d74e:	f7fe f9e1 	bl	800bb14 <disk_read>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <f_open+0x35a>
 800d758:	2301      	movs	r3, #1
 800d75a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d75e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <f_open+0x368>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d76c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d770:	4618      	mov	r0, r3
 800d772:	3760      	adds	r7, #96	@ 0x60
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08e      	sub	sp, #56	@ 0x38
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f107 0214 	add.w	r2, r7, #20
 800d796:	4611      	mov	r1, r2
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff fdb7 	bl	800d30c <validate>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d7a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d107      	bne.n	800d7bc <f_read+0x44>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	7d5b      	ldrb	r3, [r3, #21]
 800d7b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d7b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <f_read+0x4a>
 800d7bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7c0:	e115      	b.n	800d9ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	7d1b      	ldrb	r3, [r3, #20]
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <f_read+0x5a>
 800d7ce:	2307      	movs	r3, #7
 800d7d0:	e10d      	b.n	800d9ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	68da      	ldr	r2, [r3, #12]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	f240 80fe 	bls.w	800d9e4 <f_read+0x26c>
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d7ec:	e0fa      	b.n	800d9e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f040 80c6 	bne.w	800d988 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	0a5b      	lsrs	r3, r3, #9
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	8952      	ldrh	r2, [r2, #10]
 800d806:	3a01      	subs	r2, #1
 800d808:	4013      	ands	r3, r2
 800d80a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d12f      	bne.n	800d872 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	699b      	ldr	r3, [r3, #24]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d103      	bne.n	800d822 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d820:	e013      	b.n	800d84a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d007      	beq.n	800d83a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	4619      	mov	r1, r3
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7fe fefd 	bl	800c630 <clmt_clust>
 800d836:	6338      	str	r0, [r7, #48]	@ 0x30
 800d838:	e007      	b.n	800d84a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	4619      	mov	r1, r3
 800d842:	4610      	mov	r0, r2
 800d844:	f7fe fc66 	bl	800c114 <get_fat>
 800d848:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d804      	bhi.n	800d85a <f_read+0xe2>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2202      	movs	r2, #2
 800d854:	755a      	strb	r2, [r3, #21]
 800d856:	2302      	movs	r3, #2
 800d858:	e0c9      	b.n	800d9ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d860:	d104      	bne.n	800d86c <f_read+0xf4>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2201      	movs	r2, #1
 800d866:	755a      	strb	r2, [r3, #21]
 800d868:	2301      	movs	r3, #1
 800d86a:	e0c0      	b.n	800d9ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d870:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	69db      	ldr	r3, [r3, #28]
 800d878:	4619      	mov	r1, r3
 800d87a:	4610      	mov	r0, r2
 800d87c:	f7fe fc2b 	bl	800c0d6 <clust2sect>
 800d880:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d104      	bne.n	800d892 <f_read+0x11a>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2202      	movs	r2, #2
 800d88c:	755a      	strb	r2, [r3, #21]
 800d88e:	2302      	movs	r3, #2
 800d890:	e0ad      	b.n	800d9ee <f_read+0x276>
			sect += csect;
 800d892:	69ba      	ldr	r2, [r7, #24]
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	4413      	add	r3, r2
 800d898:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	0a5b      	lsrs	r3, r3, #9
 800d89e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d039      	beq.n	800d91a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8aa:	4413      	add	r3, r2
 800d8ac:	697a      	ldr	r2, [r7, #20]
 800d8ae:	8952      	ldrh	r2, [r2, #10]
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d905      	bls.n	800d8c0 <f_read+0x148>
					cc = fs->csize - csect;
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	895b      	ldrh	r3, [r3, #10]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	7858      	ldrb	r0, [r3, #1]
 800d8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8ca:	f7fe f923 	bl	800bb14 <disk_read>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d004      	beq.n	800d8de <f_read+0x166>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	755a      	strb	r2, [r3, #21]
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e087      	b.n	800d9ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	7d1b      	ldrb	r3, [r3, #20]
 800d8e2:	b25b      	sxtb	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	da14      	bge.n	800d912 <f_read+0x19a>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6a1a      	ldr	r2, [r3, #32]
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d90d      	bls.n	800d912 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6a1a      	ldr	r2, [r3, #32]
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	025b      	lsls	r3, r3, #9
 800d900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d902:	18d0      	adds	r0, r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	3330      	adds	r3, #48	@ 0x30
 800d908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7fe f9c3 	bl	800bc98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d914:	025b      	lsls	r3, r3, #9
 800d916:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d918:	e050      	b.n	800d9bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	69ba      	ldr	r2, [r7, #24]
 800d920:	429a      	cmp	r2, r3
 800d922:	d02e      	beq.n	800d982 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	7d1b      	ldrb	r3, [r3, #20]
 800d928:	b25b      	sxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	da18      	bge.n	800d960 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	7858      	ldrb	r0, [r3, #1]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6a1a      	ldr	r2, [r3, #32]
 800d93c:	2301      	movs	r3, #1
 800d93e:	f7fe f909 	bl	800bb54 <disk_write>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d004      	beq.n	800d952 <f_read+0x1da>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2201      	movs	r2, #1
 800d94c:	755a      	strb	r2, [r3, #21]
 800d94e:	2301      	movs	r3, #1
 800d950:	e04d      	b.n	800d9ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	7d1b      	ldrb	r3, [r3, #20]
 800d956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	7858      	ldrb	r0, [r3, #1]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d96a:	2301      	movs	r3, #1
 800d96c:	69ba      	ldr	r2, [r7, #24]
 800d96e:	f7fe f8d1 	bl	800bb14 <disk_read>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d004      	beq.n	800d982 <f_read+0x20a>
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2201      	movs	r2, #1
 800d97c:	755a      	strb	r2, [r3, #21]
 800d97e:	2301      	movs	r3, #1
 800d980:	e035      	b.n	800d9ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	69ba      	ldr	r2, [r7, #24]
 800d986:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	699b      	ldr	r3, [r3, #24]
 800d98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d990:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d994:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d901      	bls.n	800d9a2 <f_read+0x22a>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9b0:	4413      	add	r3, r2
 800d9b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d9b8:	f7fe f96e 	bl	800bc98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d9bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c0:	4413      	add	r3, r2
 800d9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	699a      	ldr	r2, [r3, #24]
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	441a      	add	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	619a      	str	r2, [r3, #24]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d6:	441a      	add	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f47f af01 	bne.w	800d7ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3738      	adds	r7, #56	@ 0x38
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b090      	sub	sp, #64	@ 0x40
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f107 0208 	add.w	r2, r7, #8
 800da06:	4611      	mov	r1, r2
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff fc7f 	bl	800d30c <validate>
 800da0e:	4603      	mov	r3, r0
 800da10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800da14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d103      	bne.n	800da24 <f_lseek+0x2e>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7d5b      	ldrb	r3, [r3, #21]
 800da20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800da24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <f_lseek+0x3c>
 800da2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800da30:	e1e6      	b.n	800de00 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da36:	2b00      	cmp	r3, #0
 800da38:	f000 80d1 	beq.w	800dbde <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da42:	d15a      	bne.n	800dafa <f_lseek+0x104>
			tbl = fp->cltbl;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da48:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800da4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4c:	1d1a      	adds	r2, r3, #4
 800da4e:	627a      	str	r2, [r7, #36]	@ 0x24
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	2302      	movs	r3, #2
 800da56:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da60:	2b00      	cmp	r3, #0
 800da62:	d03a      	beq.n	800dada <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800da64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da66:	613b      	str	r3, [r7, #16]
 800da68:	2300      	movs	r3, #0
 800da6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	3302      	adds	r3, #2
 800da70:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da74:	60fb      	str	r3, [r7, #12]
 800da76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da78:	3301      	adds	r3, #1
 800da7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe fb47 	bl	800c114 <get_fat>
 800da86:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d804      	bhi.n	800da98 <f_lseek+0xa2>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2202      	movs	r2, #2
 800da92:	755a      	strb	r2, [r3, #21]
 800da94:	2302      	movs	r3, #2
 800da96:	e1b3      	b.n	800de00 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d104      	bne.n	800daaa <f_lseek+0xb4>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	755a      	strb	r2, [r3, #21]
 800daa6:	2301      	movs	r3, #1
 800daa8:	e1aa      	b.n	800de00 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3301      	adds	r3, #1
 800daae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d0de      	beq.n	800da72 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d809      	bhi.n	800dad0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dabe:	1d1a      	adds	r2, r3, #4
 800dac0:	627a      	str	r2, [r7, #36]	@ 0x24
 800dac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	1d1a      	adds	r2, r3, #4
 800daca:	627a      	str	r2, [r7, #36]	@ 0x24
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	695b      	ldr	r3, [r3, #20]
 800dad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d3c4      	bcc.n	800da64 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dae0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d803      	bhi.n	800daf2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800daea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daec:	2200      	movs	r2, #0
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e184      	b.n	800ddfc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800daf2:	2311      	movs	r3, #17
 800daf4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800daf8:	e180      	b.n	800ddfc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	429a      	cmp	r2, r3
 800db02:	d902      	bls.n	800db0a <f_lseek+0x114>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 8172 	beq.w	800ddfc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7fe fd86 	bl	800c630 <clmt_clust>
 800db24:	4602      	mov	r2, r0
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69db      	ldr	r3, [r3, #28]
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe facf 	bl	800c0d6 <clust2sect>
 800db38:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d104      	bne.n	800db4a <f_lseek+0x154>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2202      	movs	r2, #2
 800db44:	755a      	strb	r2, [r3, #21]
 800db46:	2302      	movs	r3, #2
 800db48:	e15a      	b.n	800de00 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	0a5b      	lsrs	r3, r3, #9
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	8952      	ldrh	r2, [r2, #10]
 800db54:	3a01      	subs	r2, #1
 800db56:	4013      	ands	r3, r2
 800db58:	69ba      	ldr	r2, [r7, #24]
 800db5a:	4413      	add	r3, r2
 800db5c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db66:	2b00      	cmp	r3, #0
 800db68:	f000 8148 	beq.w	800ddfc <f_lseek+0x406>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a1b      	ldr	r3, [r3, #32]
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	429a      	cmp	r2, r3
 800db74:	f000 8142 	beq.w	800ddfc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	7d1b      	ldrb	r3, [r3, #20]
 800db7c:	b25b      	sxtb	r3, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	da18      	bge.n	800dbb4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	7858      	ldrb	r0, [r3, #1]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a1a      	ldr	r2, [r3, #32]
 800db90:	2301      	movs	r3, #1
 800db92:	f7fd ffdf 	bl	800bb54 <disk_write>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d004      	beq.n	800dba6 <f_lseek+0x1b0>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2201      	movs	r2, #1
 800dba0:	755a      	strb	r2, [r3, #21]
 800dba2:	2301      	movs	r3, #1
 800dba4:	e12c      	b.n	800de00 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	7d1b      	ldrb	r3, [r3, #20]
 800dbaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	7858      	ldrb	r0, [r3, #1]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	69ba      	ldr	r2, [r7, #24]
 800dbc2:	f7fd ffa7 	bl	800bb14 <disk_read>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <f_lseek+0x1e0>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	755a      	strb	r2, [r3, #21]
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e114      	b.n	800de00 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	69ba      	ldr	r2, [r7, #24]
 800dbda:	621a      	str	r2, [r3, #32]
 800dbdc:	e10e      	b.n	800ddfc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d908      	bls.n	800dbfa <f_lseek+0x204>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d102      	bne.n	800dbfa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc08:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 80a7 	beq.w	800dd60 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	895b      	ldrh	r3, [r3, #10]
 800dc16:	025b      	lsls	r3, r3, #9
 800dc18:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d01b      	beq.n	800dc58 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	1e5a      	subs	r2, r3, #1
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	1e59      	subs	r1, r3, #1
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d30f      	bcc.n	800dc58 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dc38:	6a3b      	ldr	r3, [r7, #32]
 800dc3a:	1e5a      	subs	r2, r3, #1
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	425b      	negs	r3, r3
 800dc40:	401a      	ands	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	69db      	ldr	r3, [r3, #28]
 800dc54:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc56:	e022      	b.n	800dc9e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d119      	bne.n	800dc98 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fc49 	bl	800c500 <create_chain>
 800dc6e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d104      	bne.n	800dc80 <f_lseek+0x28a>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2202      	movs	r2, #2
 800dc7a:	755a      	strb	r2, [r3, #21]
 800dc7c:	2302      	movs	r3, #2
 800dc7e:	e0bf      	b.n	800de00 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc86:	d104      	bne.n	800dc92 <f_lseek+0x29c>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	755a      	strb	r2, [r3, #21]
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e0b6      	b.n	800de00 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc96:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc9c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d05d      	beq.n	800dd60 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dca4:	e03a      	b.n	800dd1c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	603b      	str	r3, [r7, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	699a      	ldr	r2, [r3, #24]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	7d1b      	ldrb	r3, [r3, #20]
 800dcbe:	f003 0302 	and.w	r3, r3, #2
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00b      	beq.n	800dcde <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe fc18 	bl	800c500 <create_chain>
 800dcd0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d108      	bne.n	800dcea <f_lseek+0x2f4>
							ofs = 0; break;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	e022      	b.n	800dd24 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fa16 	bl	800c114 <get_fat>
 800dce8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf0:	d104      	bne.n	800dcfc <f_lseek+0x306>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	755a      	strb	r2, [r3, #21]
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e081      	b.n	800de00 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d904      	bls.n	800dd0c <f_lseek+0x316>
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	695b      	ldr	r3, [r3, #20]
 800dd06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d304      	bcc.n	800dd16 <f_lseek+0x320>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	755a      	strb	r2, [r3, #21]
 800dd12:	2302      	movs	r3, #2
 800dd14:	e074      	b.n	800de00 <f_lseek+0x40a>
					fp->clust = clst;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd1a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d8c0      	bhi.n	800dca6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	699a      	ldr	r2, [r3, #24]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	441a      	add	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d012      	beq.n	800dd60 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fe f9c9 	bl	800c0d6 <clust2sect>
 800dd44:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d104      	bne.n	800dd56 <f_lseek+0x360>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	755a      	strb	r2, [r3, #21]
 800dd52:	2302      	movs	r3, #2
 800dd54:	e054      	b.n	800de00 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	0a5b      	lsrs	r3, r3, #9
 800dd5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd5c:	4413      	add	r3, r2
 800dd5e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	699a      	ldr	r2, [r3, #24]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d90a      	bls.n	800dd82 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	699a      	ldr	r2, [r3, #24]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	7d1b      	ldrb	r3, [r3, #20]
 800dd78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d036      	beq.n	800ddfc <f_lseek+0x406>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d031      	beq.n	800ddfc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	7d1b      	ldrb	r3, [r3, #20]
 800dd9c:	b25b      	sxtb	r3, r3
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	da18      	bge.n	800ddd4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	7858      	ldrb	r0, [r3, #1]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a1a      	ldr	r2, [r3, #32]
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	f7fd fecf 	bl	800bb54 <disk_write>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d004      	beq.n	800ddc6 <f_lseek+0x3d0>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	755a      	strb	r2, [r3, #21]
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e01c      	b.n	800de00 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	7d1b      	ldrb	r3, [r3, #20]
 800ddca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	7858      	ldrb	r0, [r3, #1]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddde:	2301      	movs	r3, #1
 800dde0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dde2:	f7fd fe97 	bl	800bb14 <disk_read>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d004      	beq.n	800ddf6 <f_lseek+0x400>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	755a      	strb	r2, [r3, #21]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e004      	b.n	800de00 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddfa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ddfc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800de00:	4618      	mov	r0, r3
 800de02:	3740      	adds	r7, #64	@ 0x40
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de08:	b480      	push	{r7}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	4613      	mov	r3, r2
 800de14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de16:	2301      	movs	r3, #1
 800de18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de1e:	4b1f      	ldr	r3, [pc, #124]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de20:	7a5b      	ldrb	r3, [r3, #9]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d131      	bne.n	800de8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de28:	4b1c      	ldr	r3, [pc, #112]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de2a:	7a5b      	ldrb	r3, [r3, #9]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	461a      	mov	r2, r3
 800de30:	4b1a      	ldr	r3, [pc, #104]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de32:	2100      	movs	r1, #0
 800de34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de36:	4b19      	ldr	r3, [pc, #100]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de38:	7a5b      	ldrb	r3, [r3, #9]
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	4a17      	ldr	r2, [pc, #92]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de46:	4b15      	ldr	r3, [pc, #84]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de48:	7a5b      	ldrb	r3, [r3, #9]
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	461a      	mov	r2, r3
 800de4e:	4b13      	ldr	r3, [pc, #76]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de50:	4413      	add	r3, r2
 800de52:	79fa      	ldrb	r2, [r7, #7]
 800de54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de56:	4b11      	ldr	r3, [pc, #68]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de58:	7a5b      	ldrb	r3, [r3, #9]
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	1c5a      	adds	r2, r3, #1
 800de5e:	b2d1      	uxtb	r1, r2
 800de60:	4a0e      	ldr	r2, [pc, #56]	@ (800de9c <FATFS_LinkDriverEx+0x94>)
 800de62:	7251      	strb	r1, [r2, #9]
 800de64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de66:	7dbb      	ldrb	r3, [r7, #22]
 800de68:	3330      	adds	r3, #48	@ 0x30
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	3301      	adds	r3, #1
 800de74:	223a      	movs	r2, #58	@ 0x3a
 800de76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	3302      	adds	r3, #2
 800de7c:	222f      	movs	r2, #47	@ 0x2f
 800de7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	3303      	adds	r3, #3
 800de84:	2200      	movs	r2, #0
 800de86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	371c      	adds	r7, #28
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	24031748 	.word	0x24031748

0800dea0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800deaa:	2200      	movs	r2, #0
 800deac:	6839      	ldr	r1, [r7, #0]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7ff ffaa 	bl	800de08 <FATFS_LinkDriverEx>
 800deb4:	4603      	mov	r3, r0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800dec0:	b480      	push	{r7}
 800dec2:	b097      	sub	sp, #92	@ 0x5c
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	4a24      	ldr	r2, [pc, #144]	@ (800df64 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa4>)
 800ded2:	fba2 2303 	umull	r2, r3, r2, r3
 800ded6:	0a1b      	lsrs	r3, r3, #8
 800ded8:	633b      	str	r3, [r7, #48]	@ 0x30
  currentMCU = BlockIndex;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	64bb      	str	r3, [r7, #72]	@ 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 800dede:	e148      	b.n	800e172 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800dee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dee2:	011a      	lsls	r2, r3, #4
 800dee4:	4b20      	ldr	r3, [pc, #128]	@ (800df68 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800dee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800deec:	011b      	lsls	r3, r3, #4
 800deee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800def0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800def2:	011b      	lsls	r3, r3, #4
 800def4:	4a1c      	ldr	r2, [pc, #112]	@ (800df68 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800def6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800def8:	fbb3 f1f2 	udiv	r1, r3, r2
 800defc:	fb01 f202 	mul.w	r2, r1, r2
 800df00:	1a9b      	subs	r3, r3, r2
 800df02:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800df04:	4b18      	ldr	r3, [pc, #96]	@ (800df68 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800df06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df0a:	fb03 f202 	mul.w	r2, r3, r2
 800df0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	4413      	add	r3, r2
 800df14:	647b      	str	r3, [r7, #68]	@ 0x44

    currentMCU++;
 800df16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df18:	3301      	adds	r3, #1
 800df1a:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800df22:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    pLum = pInBuffer;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	637b      	str	r3, [r7, #52]	@ 0x34
    
    for(i= 0; i <  16; i+=2)
 800df28:	2300      	movs	r3, #0
 800df2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800df2c:	e119      	b.n	800e162 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a2>
    {
      if(i == 8)
 800df2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df30:	2b08      	cmp	r3, #8
 800df32:	d102      	bne.n	800df3a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      {
        pLum = pInBuffer + 128;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3380      	adds	r3, #128	@ 0x80
 800df38:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800df3a:	4b0b      	ldr	r3, [pc, #44]	@ (800df68 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df40:	429a      	cmp	r2, r3
 800df42:	f080 810b 	bcs.w	800e15c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>
      {
        pOutAddr = pOutBuffer + refline;
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df4a:	4413      	add	r3, r2
 800df4c:	643b      	str	r3, [r7, #64]	@ 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800df4e:	4b06      	ldr	r3, [pc, #24]	@ (800df68 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800df50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df54:	4413      	add	r3, r2
 800df56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        
        for(k= 0; k<2; k++)
 800df58:	2300      	movs	r3, #0
 800df5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df5c:	e0f1      	b.n	800e142 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
        {
          for(j=0; j < 8; j+=2)
 800df5e:	2300      	movs	r3, #0
 800df60:	653b      	str	r3, [r7, #80]	@ 0x50
 800df62:	e0e4      	b.n	800e12e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x26e>
 800df64:	aaaaaaab 	.word	0xaaaaaaab
 800df68:	24031754 	.word	0x24031754
          {           
            cbcomp = (int32_t)(*(pChrom));
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	627b      	str	r3, [r7, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800df72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4a86      	ldr	r2, [pc, #536]	@ (800e190 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d0>)
 800df78:	4413      	add	r3, r2
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800df7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df80:	3340      	adds	r3, #64	@ 0x40
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4a82      	ldr	r2, [pc, #520]	@ (800e194 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d4>)
 800df8c:	4413      	add	r3, r2
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4a80      	ldr	r2, [pc, #512]	@ (800e198 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d8>)
 800df98:	4413      	add	r3, r2
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	497e      	ldr	r1, [pc, #504]	@ (800e19c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2dc>)
 800dfa2:	440b      	add	r3, r1
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	141b      	asrs	r3, r3, #16
 800dfaa:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
          
            ycomp = (int32_t)(*(pLum +j));
 800dfac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfb0:	4413      	add	r3, r2
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800dfc0:	4a77      	ldr	r2, [pc, #476]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800dfc2:	5cd3      	ldrb	r3, [r2, r3]
 800dfc4:	08db      	lsrs	r3, r3, #3
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	02db      	lsls	r3, r3, #11
 800dfca:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dfcc:	6939      	ldr	r1, [r7, #16]
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	440b      	add	r3, r1
 800dfd2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800dfd6:	4972      	ldr	r1, [pc, #456]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800dfd8:	5ccb      	ldrb	r3, [r1, r3]
 800dfda:	089b      	lsrs	r3, r3, #2
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfe0:	b21b      	sxth	r3, r3
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800dfe6:	6939      	ldr	r1, [r7, #16]
 800dfe8:	6a3b      	ldr	r3, [r7, #32]
 800dfea:	440b      	add	r3, r1
 800dfec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800dff0:	496b      	ldr	r1, [pc, #428]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800dff2:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dff4:	08db      	lsrs	r3, r3, #3
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	b21b      	sxth	r3, r3
 800dffa:	4313      	orrs	r3, r2
 800dffc:	b21b      	sxth	r3, r3
 800dffe:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 800e000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e002:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800e004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e006:	3301      	adds	r3, #1
 800e008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e00a:	4413      	add	r3, r2
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	4413      	add	r3, r2
 800e016:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e01a:	4a61      	ldr	r2, [pc, #388]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e01c:	5cd3      	ldrb	r3, [r2, r3]
 800e01e:	08db      	lsrs	r3, r3, #3
 800e020:	b2db      	uxtb	r3, r3
 800e022:	02db      	lsls	r3, r3, #11
 800e024:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e026:	6939      	ldr	r1, [r7, #16]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	440b      	add	r3, r1
 800e02c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e030:	495b      	ldr	r1, [pc, #364]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e032:	5ccb      	ldrb	r3, [r1, r3]
 800e034:	089b      	lsrs	r3, r3, #2
 800e036:	b2db      	uxtb	r3, r3
 800e038:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e03a:	b21b      	sxth	r3, r3
 800e03c:	4313      	orrs	r3, r2
 800e03e:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800e040:	6939      	ldr	r1, [r7, #16]
 800e042:	6a3b      	ldr	r3, [r7, #32]
 800e044:	440b      	add	r3, r1
 800e046:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e04a:	4955      	ldr	r1, [pc, #340]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e04c:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e04e:	08db      	lsrs	r3, r3, #3
 800e050:	b2db      	uxtb	r3, r3
 800e052:	b21b      	sxth	r3, r3
 800e054:	4313      	orrs	r3, r2
 800e056:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800e058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e05a:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e05c:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800e05e:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 800e060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e062:	3308      	adds	r3, #8
 800e064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e066:	4413      	add	r3, r2
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr2 = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	4413      	add	r3, r2
 800e072:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e076:	4a4a      	ldr	r2, [pc, #296]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e078:	5cd3      	ldrb	r3, [r2, r3]
 800e07a:	08db      	lsrs	r3, r3, #3
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	02db      	lsls	r3, r3, #11
 800e080:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e082:	6939      	ldr	r1, [r7, #16]
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	440b      	add	r3, r1
 800e088:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e08c:	4944      	ldr	r1, [pc, #272]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e08e:	5ccb      	ldrb	r3, [r1, r3]
 800e090:	089b      	lsrs	r3, r3, #2
 800e092:	b2db      	uxtb	r3, r3
 800e094:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e096:	b21b      	sxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800e09c:	6939      	ldr	r1, [r7, #16]
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	440b      	add	r3, r1
 800e0a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e0a6:	493e      	ldr	r1, [pc, #248]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e0a8:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e0aa:	08db      	lsrs	r3, r3, #3
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	b21b      	sxth	r3, r3
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	b21b      	sxth	r3, r3
 800e0b4:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 = 
 800e0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b8:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800e0ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0bc:	3309      	adds	r3, #9
 800e0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0c0:	4413      	add	r3, r2
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e0d0:	4a33      	ldr	r2, [pc, #204]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e0d2:	5cd3      	ldrb	r3, [r2, r3]
 800e0d4:	08db      	lsrs	r3, r3, #3
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	02db      	lsls	r3, r3, #11
 800e0da:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e0dc:	6939      	ldr	r1, [r7, #16]
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	440b      	add	r3, r1
 800e0e2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e0e6:	492e      	ldr	r1, [pc, #184]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e0e8:	5ccb      	ldrb	r3, [r1, r3]
 800e0ea:	089b      	lsrs	r3, r3, #2
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e0f0:	b21b      	sxth	r3, r3
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800e0f6:	6939      	ldr	r1, [r7, #16]
 800e0f8:	6a3b      	ldr	r3, [r7, #32]
 800e0fa:	440b      	add	r3, r1
 800e0fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e100:	4927      	ldr	r1, [pc, #156]	@ (800e1a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800e102:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e104:	08db      	lsrs	r3, r3, #3
 800e106:	b2db      	uxtb	r3, r3
 800e108:	b21b      	sxth	r3, r3
 800e10a:	4313      	orrs	r3, r2
 800e10c:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800e10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e110:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e112:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800e114:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800e116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e118:	3304      	adds	r3, #4
 800e11a:	643b      	str	r3, [r7, #64]	@ 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800e11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e11e:	3304      	adds	r3, #4
 800e120:	63fb      	str	r3, [r7, #60]	@ 0x3c
          
            pChrom++;
 800e122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e124:	3301      	adds	r3, #1
 800e126:	63bb      	str	r3, [r7, #56]	@ 0x38
          for(j=0; j < 8; j+=2)
 800e128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e12a:	3302      	adds	r3, #2
 800e12c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e130:	2b07      	cmp	r3, #7
 800e132:	f67f af1b 	bls.w	800df6c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
          }
          pLum += 64;                      
 800e136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e138:	3340      	adds	r3, #64	@ 0x40
 800e13a:	637b      	str	r3, [r7, #52]	@ 0x34
        for(k= 0; k<2; k++)
 800e13c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e13e:	3301      	adds	r3, #1
 800e140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e144:	2b01      	cmp	r3, #1
 800e146:	f67f af0a 	bls.w	800df5e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9e>
        }

        pLum = pLum - 128 + 16;
 800e14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e14c:	3b70      	subs	r3, #112	@ 0x70
 800e14e:	637b      	str	r3, [r7, #52]	@ 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800e150:	4b14      	ldr	r3, [pc, #80]	@ (800e1a4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 800e152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e154:	005b      	lsls	r3, r3, #1
 800e156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e158:	4413      	add	r3, r2
 800e15a:	647b      	str	r3, [r7, #68]	@ 0x44
    for(i= 0; i <  16; i+=2)
 800e15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e15e:	3302      	adds	r3, #2
 800e160:	657b      	str	r3, [r7, #84]	@ 0x54
 800e162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e164:	2b0f      	cmp	r3, #15
 800e166:	f67f aee2 	bls.w	800df2e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e170:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800e172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4413      	add	r3, r2
 800e178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e17a:	429a      	cmp	r2, r3
 800e17c:	f4ff aeb0 	bcc.w	800dee0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800e182:	4618      	mov	r0, r3
 800e184:	375c      	adds	r7, #92	@ 0x5c
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	24031b94 	.word	0x24031b94
 800e194:	24031794 	.word	0x24031794
 800e198:	24031f94 	.word	0x24031f94
 800e19c:	24032394 	.word	0x24032394
 800e1a0:	0800ed90 	.word	0x0800ed90
 800e1a4:	24031754 	.word	0x24031754

0800e1a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800e1a8:	b480      	push	{r7}
 800e1aa:	b097      	sub	sp, #92	@ 0x5c
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
 800e1b4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	0a1b      	lsrs	r3, r3, #8
 800e1ba:	637b      	str	r3, [r7, #52]	@ 0x34
  currentMCU = BlockIndex;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	64bb      	str	r3, [r7, #72]	@ 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 800e1c0:	e0d9      	b.n	800e376 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800e1c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1c4:	011a      	lsls	r2, r3, #4
 800e1c6:	4b73      	ldr	r3, [pc, #460]	@ (800e394 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800e1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	633b      	str	r3, [r7, #48]	@ 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800e1d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1d4:	011b      	lsls	r3, r3, #4
 800e1d6:	4a6f      	ldr	r2, [pc, #444]	@ (800e394 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800e1d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e1da:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1de:	fb01 f202 	mul.w	r2, r1, r2
 800e1e2:	1a9b      	subs	r3, r3, r2
 800e1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e1e6:	4b6b      	ldr	r3, [pc, #428]	@ (800e394 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800e1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1ec:	fb03 f202 	mul.w	r2, r3, r2
 800e1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	4413      	add	r3, r2
 800e1f6:	647b      	str	r3, [r7, #68]	@ 0x44

    currentMCU++;
 800e1f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3380      	adds	r3, #128	@ 0x80
 800e202:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    pLum = pInBuffer;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    for(i= 0; i <  8; i++)
 800e208:	2300      	movs	r3, #0
 800e20a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e20c:	e0ab      	b.n	800e366 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e20e:	4b61      	ldr	r3, [pc, #388]	@ (800e394 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e214:	429a      	cmp	r2, r3
 800e216:	f080 80a3 	bcs.w	800e360 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e21e:	4413      	add	r3, r2
 800e220:	643b      	str	r3, [r7, #64]	@ 0x40
        
        for(k= 0; k<2; k++)
 800e222:	2300      	movs	r3, #0
 800e224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e226:	e08f      	b.n	800e348 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 800e228:	2300      	movs	r3, #0
 800e22a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e22c:	e082      	b.n	800e334 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {           
            cbcomp = (int32_t)(*(pChrom));
 800e22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	62bb      	str	r3, [r7, #40]	@ 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800e234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4a57      	ldr	r2, [pc, #348]	@ (800e398 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 800e23a:	4413      	add	r3, r2
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	627b      	str	r3, [r7, #36]	@ 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 800e240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e242:	3340      	adds	r3, #64	@ 0x40
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	4a53      	ldr	r2, [pc, #332]	@ (800e39c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 800e24e:	4413      	add	r3, r2
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a51      	ldr	r2, [pc, #324]	@ (800e3a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 800e25a:	4413      	add	r3, r2
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4950      	ldr	r1, [pc, #320]	@ (800e3a4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 800e264:	440b      	add	r3, r1
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4413      	add	r3, r2
 800e26a:	141b      	asrs	r3, r3, #16
 800e26c:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
          
            ycomp = (int32_t)(*(pLum +j));
 800e26e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e272:	4413      	add	r3, r2
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	617b      	str	r3, [r7, #20]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	4413      	add	r3, r2
 800e27e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e282:	4a49      	ldr	r2, [pc, #292]	@ (800e3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800e284:	5cd3      	ldrb	r3, [r2, r3]
 800e286:	08db      	lsrs	r3, r3, #3
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	02db      	lsls	r3, r3, #11
 800e28c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e28e:	6979      	ldr	r1, [r7, #20]
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	440b      	add	r3, r1
 800e294:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e298:	4943      	ldr	r1, [pc, #268]	@ (800e3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800e29a:	5ccb      	ldrb	r3, [r1, r3]
 800e29c:	089b      	lsrs	r3, r3, #2
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e2a2:	b21b      	sxth	r3, r3
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800e2a8:	6979      	ldr	r1, [r7, #20]
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ac:	440b      	add	r3, r1
 800e2ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e2b2:	493d      	ldr	r1, [pc, #244]	@ (800e3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800e2b4:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e2b6:	08db      	lsrs	r3, r3, #3
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	b21b      	sxth	r3, r3
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	b21b      	sxth	r3, r3
 800e2c0:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 800e2c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2c4:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800e2c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2cc:	4413      	add	r3, r2
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	617b      	str	r3, [r7, #20]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e2d2:	697a      	ldr	r2, [r7, #20]
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e2dc:	4a32      	ldr	r2, [pc, #200]	@ (800e3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800e2de:	5cd3      	ldrb	r3, [r2, r3]
 800e2e0:	08db      	lsrs	r3, r3, #3
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	02db      	lsls	r3, r3, #11
 800e2e6:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e2e8:	6979      	ldr	r1, [r7, #20]
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	440b      	add	r3, r1
 800e2ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e2f2:	492d      	ldr	r1, [pc, #180]	@ (800e3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800e2f4:	5ccb      	ldrb	r3, [r1, r3]
 800e2f6:	089b      	lsrs	r3, r3, #2
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e2fc:	b21b      	sxth	r3, r3
 800e2fe:	4313      	orrs	r3, r2
 800e300:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800e302:	6979      	ldr	r1, [r7, #20]
 800e304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e306:	440b      	add	r3, r1
 800e308:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e30c:	4926      	ldr	r1, [pc, #152]	@ (800e3a8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800e30e:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e310:	08db      	lsrs	r3, r3, #3
 800e312:	b2db      	uxtb	r3, r3
 800e314:	b21b      	sxth	r3, r3
 800e316:	4313      	orrs	r3, r2
 800e318:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800e31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e31c:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e31e:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800e320:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800e322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e324:	3304      	adds	r3, #4
 800e326:	643b      	str	r3, [r7, #64]	@ 0x40
          
            pChrom++;
 800e328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e32a:	3301      	adds	r3, #1
 800e32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          for(j=0; j < 8; j+=2)
 800e32e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e330:	3302      	adds	r3, #2
 800e332:	653b      	str	r3, [r7, #80]	@ 0x50
 800e334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e336:	2b07      	cmp	r3, #7
 800e338:	f67f af79 	bls.w	800e22e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;                      
 800e33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33e:	3340      	adds	r3, #64	@ 0x40
 800e340:	63bb      	str	r3, [r7, #56]	@ 0x38
        for(k= 0; k<2; k++)
 800e342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e344:	3301      	adds	r3, #1
 800e346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	f67f af6c 	bls.w	800e228 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }
        
        pLum = pLum - 128 + 8;
 800e350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e352:	3b78      	subs	r3, #120	@ 0x78
 800e354:	63bb      	str	r3, [r7, #56]	@ 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e356:	4b0f      	ldr	r3, [pc, #60]	@ (800e394 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800e358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e35a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e35c:	4413      	add	r3, r2
 800e35e:	647b      	str	r3, [r7, #68]	@ 0x44
    for(i= 0; i <  8; i++)
 800e360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e362:	3301      	adds	r3, #1
 800e364:	657b      	str	r3, [r7, #84]	@ 0x54
 800e366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e368:	2b07      	cmp	r3, #7
 800e36a:	f67f af50 	bls.w	800e20e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e374:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800e376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e37e:	429a      	cmp	r2, r3
 800e380:	f4ff af1f 	bcc.w	800e1c2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800e384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e386:	4618      	mov	r0, r3
 800e388:	375c      	adds	r7, #92	@ 0x5c
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	24031754 	.word	0x24031754
 800e398:	24031b94 	.word	0x24031b94
 800e39c:	24031794 	.word	0x24031794
 800e3a0:	24031f94 	.word	0x24031f94
 800e3a4:	24032394 	.word	0x24032394
 800e3a8:	0800ed90 	.word	0x0800ed90

0800e3ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800e3ac:	b480      	push	{r7}
 800e3ae:	b095      	sub	sp, #84	@ 0x54
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	4a58      	ldr	r2, [pc, #352]	@ (800e520 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 800e3be:	fba2 2303 	umull	r2, r3, r2, r3
 800e3c2:	09db      	lsrs	r3, r3, #7
 800e3c4:	633b      	str	r3, [r7, #48]	@ 0x30
  currentMCU = BlockIndex;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	647b      	str	r3, [r7, #68]	@ 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 800e3ca:	e09a      	b.n	800e502 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3ce:	00da      	lsls	r2, r3, #3
 800e3d0:	4b54      	ldr	r3, [pc, #336]	@ (800e524 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800e3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800e3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	4a50      	ldr	r2, [pc, #320]	@ (800e524 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800e3e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e3e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3e8:	fb01 f202 	mul.w	r2, r1, r2
 800e3ec:	1a9b      	subs	r3, r3, r2
 800e3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e3f0:	4b4c      	ldr	r3, [pc, #304]	@ (800e524 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800e3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3f6:	fb03 f202 	mul.w	r2, r3, r2
 800e3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	4413      	add	r3, r2
 800e400:	643b      	str	r3, [r7, #64]	@ 0x40

    currentMCU++;   
 800e402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e404:	3301      	adds	r3, #1
 800e406:	647b      	str	r3, [r7, #68]	@ 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3340      	adds	r3, #64	@ 0x40
 800e40c:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    pLum = pInBuffer;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	637b      	str	r3, [r7, #52]	@ 0x34
    
    for(i= 0; i <  8; i++)
 800e412:	2300      	movs	r3, #0
 800e414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e416:	e06e      	b.n	800e4f6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e418:	4b42      	ldr	r3, [pc, #264]	@ (800e524 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800e41a:	691b      	ldr	r3, [r3, #16]
 800e41c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e41e:	429a      	cmp	r2, r3
 800e420:	d266      	bcs.n	800e4f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e426:	4413      	add	r3, r2
 800e428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        

          for(j=0; j < 8; j++)
 800e42a:	2300      	movs	r3, #0
 800e42c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e42e:	e054      	b.n	800e4da <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {           
            cbcomp = (int32_t)(*pChrom);
 800e430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	627b      	str	r3, [r7, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800e436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4a3b      	ldr	r2, [pc, #236]	@ (800e528 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800e43c:	4413      	add	r3, r2
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800e442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e444:	3340      	adds	r3, #64	@ 0x40
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	4a37      	ldr	r2, [pc, #220]	@ (800e52c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 800e450:	4413      	add	r3, r2
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4a35      	ldr	r2, [pc, #212]	@ (800e530 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 800e45c:	4413      	add	r3, r2
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4933      	ldr	r1, [pc, #204]	@ (800e534 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 800e466:	440b      	add	r3, r1
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4413      	add	r3, r2
 800e46c:	141b      	asrs	r3, r3, #16
 800e46e:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
 800e470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e474:	4413      	add	r3, r2
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	613b      	str	r3, [r7, #16]
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e484:	4a2c      	ldr	r2, [pc, #176]	@ (800e538 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 800e486:	5cd3      	ldrb	r3, [r2, r3]
 800e488:	08db      	lsrs	r3, r3, #3
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	02db      	lsls	r3, r3, #11
 800e48e:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e490:	6939      	ldr	r1, [r7, #16]
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	440b      	add	r3, r1
 800e496:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e49a:	4927      	ldr	r1, [pc, #156]	@ (800e538 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 800e49c:	5ccb      	ldrb	r3, [r1, r3]
 800e49e:	089b      	lsrs	r3, r3, #2
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e4a4:	b21b      	sxth	r3, r3
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800e4aa:	6939      	ldr	r1, [r7, #16]
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
 800e4ae:	440b      	add	r3, r1
 800e4b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e4b4:	4920      	ldr	r1, [pc, #128]	@ (800e538 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 800e4b6:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e4b8:	08db      	lsrs	r3, r3, #3
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	b21b      	sxth	r3, r3
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	b21b      	sxth	r3, r3
 800e4c2:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 800e4c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4c6:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 800e4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4ca:	3302      	adds	r3, #2
 800e4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          
            pChrom++;
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
          for(j=0; j < 8; j++)
 800e4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4dc:	2b07      	cmp	r3, #7
 800e4de:	d9a7      	bls.n	800e430 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4e2:	3308      	adds	r3, #8
 800e4e4:	637b      	str	r3, [r7, #52]	@ 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e524 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800e4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e4ec:	4413      	add	r3, r2
 800e4ee:	643b      	str	r3, [r7, #64]	@ 0x40
    for(i= 0; i <  8; i++)
 800e4f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4f8:	2b07      	cmp	r3, #7
 800e4fa:	d98d      	bls.n	800e418 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	33c0      	adds	r3, #192	@ 0xc0
 800e500:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800e502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4413      	add	r3, r2
 800e508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e50a:	429a      	cmp	r2, r3
 800e50c:	f4ff af5e 	bcc.w	800e3cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 800e510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800e512:	4618      	mov	r0, r3
 800e514:	3754      	adds	r7, #84	@ 0x54
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	aaaaaaab 	.word	0xaaaaaaab
 800e524:	24031754 	.word	0x24031754
 800e528:	24031b94 	.word	0x24031b94
 800e52c:	24031794 	.word	0x24031794
 800e530:	24031f94 	.word	0x24031f94
 800e534:	24032394 	.word	0x24032394
 800e538:	0800ed90 	.word	0x0800ed90

0800e53c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b08f      	sub	sp, #60	@ 0x3c
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	099b      	lsrs	r3, r3, #6
 800e54e:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	637b      	str	r3, [r7, #52]	@ 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 800e554:	e05e      	b.n	800e614 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e558:	00da      	lsls	r2, r3, #3
 800e55a:	4b35      	ldr	r3, [pc, #212]	@ (800e630 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800e55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e562:	00db      	lsls	r3, r3, #3
 800e564:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800e566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e568:	00db      	lsls	r3, r3, #3
 800e56a:	4a31      	ldr	r2, [pc, #196]	@ (800e630 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800e56c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e56e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e572:	fb01 f202 	mul.w	r2, r1, r2
 800e576:	1a9b      	subs	r3, r3, r2
 800e578:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e57a:	4b2d      	ldr	r3, [pc, #180]	@ (800e630 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800e57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	fb03 f202 	mul.w	r2, r3, r2
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	4413      	add	r3, r2
 800e58a:	633b      	str	r3, [r7, #48]	@ 0x30
    
    currentMCU++;
 800e58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e58e:	3301      	adds	r3, #1
 800e590:	637b      	str	r3, [r7, #52]	@ 0x34
  
    pLum = pInBuffer;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 800e596:	2300      	movs	r3, #0
 800e598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e59a:	e035      	b.n	800e608 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    { 
      pOutAddr = pOutBuffer + refline;
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a0:	4413      	add	r3, r2
 800e5a2:	627b      	str	r3, [r7, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e5a4:	4b22      	ldr	r3, [pc, #136]	@ (800e630 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d229      	bcs.n	800e602 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {  
        for(j=0; j < 8; j++)
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5b2:	e01e      	b.n	800e5f2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        { 
          ySample =   (uint32_t)(*pLum);
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;     
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	08db      	lsrs	r3, r3, #3
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	02db      	lsls	r3, r3, #11
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	089b      	lsrs	r3, r3, #2
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	015b      	lsls	r3, r3, #5
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	08db      	lsrs	r3, r3, #3
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5de:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e2:	3302      	adds	r3, #2
 800e5e4:	627b      	str	r3, [r7, #36]	@ 0x24
          pLum++;
 800e5e6:	6a3b      	ldr	r3, [r7, #32]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 800e5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f4:	2b07      	cmp	r3, #7
 800e5f6:	d9dd      	bls.n	800e5b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e630 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800e5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5fe:	4413      	add	r3, r2
 800e600:	633b      	str	r3, [r7, #48]	@ 0x30
    for(i= 0; i <  8; i++)
 800e602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e604:	3301      	adds	r3, #1
 800e606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60a:	2b07      	cmp	r3, #7
 800e60c:	d9c6      	bls.n	800e59c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3340      	adds	r3, #64	@ 0x40
 800e612:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800e614:	69fa      	ldr	r2, [r7, #28]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4413      	add	r3, r2
 800e61a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d39a      	bcc.n	800e556 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800e620:	69fb      	ldr	r3, [r7, #28]
}
 800e622:	4618      	mov	r0, r3
 800e624:	373c      	adds	r7, #60	@ 0x3c
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	24031754 	.word	0x24031754

0800e634 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800e634:	b480      	push	{r7}
 800e636:	b093      	sub	sp, #76	@ 0x4c
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	0a1b      	lsrs	r3, r3, #8
 800e646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  currentMCU = BlockIndex;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 800e64c:	e08b      	b.n	800e766 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e650:	00da      	lsls	r2, r3, #3
 800e652:	4b4c      	ldr	r3, [pc, #304]	@ (800e784 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800e654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e656:	fbb2 f3f3 	udiv	r3, r2, r3
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800e65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e660:	00db      	lsls	r3, r3, #3
 800e662:	4a48      	ldr	r2, [pc, #288]	@ (800e784 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800e664:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e666:	fbb3 f1f2 	udiv	r1, r3, r2
 800e66a:	fb01 f202 	mul.w	r2, r1, r2
 800e66e:	1a9b      	subs	r3, r3, r2
 800e670:	627b      	str	r3, [r7, #36]	@ 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e672:	4b44      	ldr	r3, [pc, #272]	@ (800e784 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800e674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e678:	fb03 f202 	mul.w	r2, r3, r2
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	4413      	add	r3, r2
 800e682:	63bb      	str	r3, [r7, #56]	@ 0x38

    currentMCU++;
 800e684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e686:	3301      	adds	r3, #1
 800e688:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    pChrom = pInBuffer;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	633b      	str	r3, [r7, #48]	@ 0x30
    
    for(i= 0; i <  8; i++)
 800e68e:	2300      	movs	r3, #0
 800e690:	647b      	str	r3, [r7, #68]	@ 0x44
 800e692:	e061      	b.n	800e758 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e694:	4b3b      	ldr	r3, [pc, #236]	@ (800e784 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d259      	bcs.n	800e752 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;        
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a2:	4413      	add	r3, r2
 800e6a4:	637b      	str	r3, [r7, #52]	@ 0x34

          for(j=0; j < 8; j++)
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6aa:	e04a      	b.n	800e742 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ae:	33c0      	adds	r3, #192	@ 0xc0
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	6a3b      	ldr	r3, [r7, #32]
 800e6bc:	fb02 f303 	mul.w	r3, r2, r3
 800e6c0:	4a31      	ldr	r2, [pc, #196]	@ (800e788 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 800e6c2:	fb82 1203 	smull	r1, r2, r2, r3
 800e6c6:	441a      	add	r2, r3
 800e6c8:	11d2      	asrs	r2, r2, #7
 800e6ca:	17db      	asrs	r3, r3, #31
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d2:	3340      	adds	r3, #64	@ 0x40
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	fb02 f303 	mul.w	r3, r2, r3
 800e6de:	4a2a      	ldr	r2, [pc, #168]	@ (800e788 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 800e6e0:	fb82 1203 	smull	r1, r2, r2, r3
 800e6e4:	441a      	add	r2, r3
 800e6e6:	11d2      	asrs	r2, r2, #7
 800e6e8:	17db      	asrs	r3, r3, #31
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f0:	3380      	adds	r3, #128	@ 0x80
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	6a3b      	ldr	r3, [r7, #32]
 800e6f8:	fb02 f303 	mul.w	r3, r2, r3
 800e6fc:	4a22      	ldr	r2, [pc, #136]	@ (800e788 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 800e6fe:	fb82 1203 	smull	r1, r2, r2, r3
 800e702:	441a      	add	r2, r3
 800e704:	11d2      	asrs	r2, r2, #7
 800e706:	17db      	asrs	r3, r3, #31
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = 
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	10db      	asrs	r3, r3, #3
 800e710:	02db      	lsls	r3, r3, #11
 800e712:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	109b      	asrs	r3, r3, #2
 800e718:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800e71a:	b21b      	sxth	r3, r3
 800e71c:	4313      	orrs	r3, r2
 800e71e:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800e724:	b21b      	sxth	r3, r3
 800e726:	4313      	orrs	r3, r2
 800e728:	b21b      	sxth	r3, r3
 800e72a:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr = 
 800e72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e72e:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 800e730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e732:	3302      	adds	r3, #2
 800e734:	637b      	str	r3, [r7, #52]	@ 0x34
          
            pChrom++;
 800e736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e738:	3301      	adds	r3, #1
 800e73a:	633b      	str	r3, [r7, #48]	@ 0x30
          for(j=0; j < 8; j++)
 800e73c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e73e:	3301      	adds	r3, #1
 800e740:	643b      	str	r3, [r7, #64]	@ 0x40
 800e742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e744:	2b07      	cmp	r3, #7
 800e746:	d9b1      	bls.n	800e6ac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e748:	4b0e      	ldr	r3, [pc, #56]	@ (800e784 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800e74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e74c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e74e:	4413      	add	r3, r2
 800e750:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(i= 0; i <  8; i++)
 800e752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e754:	3301      	adds	r3, #1
 800e756:	647b      	str	r3, [r7, #68]	@ 0x44
 800e758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75a:	2b07      	cmp	r3, #7
 800e75c:	d99a      	bls.n	800e694 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e764:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800e766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4413      	add	r3, r2
 800e76c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e76e:	429a      	cmp	r2, r3
 800e770:	f4ff af6d 	bcc.w	800e64e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800e774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e776:	4618      	mov	r0, r3
 800e778:	374c      	adds	r7, #76	@ 0x4c
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	24031754 	.word	0x24031754
 800e788:	80808081 	.word	0x80808081

0800e78c <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a7a      	ldr	r2, [pc, #488]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e79e:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4a78      	ldr	r2, [pc, #480]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7a6:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	4a76      	ldr	r2, [pc, #472]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7ae:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	68fa      	ldr	r2, [r7, #12]
 800e7b6:	6892      	ldr	r2, [r2, #8]
 800e7b8:	fb02 f303 	mul.w	r3, r2, r3
 800e7bc:	005b      	lsls	r3, r3, #1
 800e7be:	4a72      	ldr	r2, [pc, #456]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7c0:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	4a70      	ldr	r2, [pc, #448]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7c8:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800e7ca:	4b6f      	ldr	r3, [pc, #444]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b10      	cmp	r3, #16
 800e7d0:	d155      	bne.n	800e87e <JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800e7d2:	4b6d      	ldr	r3, [pc, #436]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d119      	bne.n	800e80e <JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	4a6b      	ldr	r2, [pc, #428]	@ (800e98c <JPEG_GetDecodeColorConvertFunc+0x200>)
 800e7de:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800e7e0:	4b69      	ldr	r3, [pc, #420]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f003 030f 	and.w	r3, r3, #15
 800e7e8:	4a67      	ldr	r2, [pc, #412]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7ea:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800e7ec:	4b66      	ldr	r3, [pc, #408]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800e7f4:	4b64      	ldr	r3, [pc, #400]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7f6:	695b      	ldr	r3, [r3, #20]
 800e7f8:	f1c3 0310 	rsb	r3, r3, #16
 800e7fc:	4a62      	ldr	r2, [pc, #392]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e7fe:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800e800:	4b61      	ldr	r3, [pc, #388]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e802:	2210      	movs	r2, #16
 800e804:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800e806:	4b60      	ldr	r3, [pc, #384]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e808:	2210      	movs	r2, #16
 800e80a:	621a      	str	r2, [r3, #32]
 800e80c:	e075      	b.n	800e8fa <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800e80e:	4b5e      	ldr	r3, [pc, #376]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	2b02      	cmp	r3, #2
 800e814:	d119      	bne.n	800e84a <JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	4a5d      	ldr	r2, [pc, #372]	@ (800e990 <JPEG_GetDecodeColorConvertFunc+0x204>)
 800e81a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800e81c:	4b5a      	ldr	r3, [pc, #360]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	f003 030f 	and.w	r3, r3, #15
 800e824:	4a58      	ldr	r2, [pc, #352]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e826:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800e828:	4b57      	ldr	r3, [pc, #348]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e82a:	695b      	ldr	r3, [r3, #20]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d005      	beq.n	800e83c <JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800e830:	4b55      	ldr	r3, [pc, #340]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	f1c3 0310 	rsb	r3, r3, #16
 800e838:	4a53      	ldr	r2, [pc, #332]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e83a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800e83c:	4b52      	ldr	r3, [pc, #328]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e83e:	2210      	movs	r2, #16
 800e840:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800e842:	4b51      	ldr	r3, [pc, #324]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e844:	2208      	movs	r2, #8
 800e846:	621a      	str	r2, [r3, #32]
 800e848:	e057      	b.n	800e8fa <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	4a51      	ldr	r2, [pc, #324]	@ (800e994 <JPEG_GetDecodeColorConvertFunc+0x208>)
 800e84e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800e850:	4b4d      	ldr	r3, [pc, #308]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	f003 0307 	and.w	r3, r3, #7
 800e858:	4a4b      	ldr	r2, [pc, #300]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e85a:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800e85c:	4b4a      	ldr	r3, [pc, #296]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d005      	beq.n	800e870 <JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800e864:	4b48      	ldr	r3, [pc, #288]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	f1c3 0308 	rsb	r3, r3, #8
 800e86c:	4a46      	ldr	r2, [pc, #280]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e86e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 800e870:	4b45      	ldr	r3, [pc, #276]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e872:	2208      	movs	r2, #8
 800e874:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800e876:	4b44      	ldr	r3, [pc, #272]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e878:	2208      	movs	r2, #8
 800e87a:	621a      	str	r2, [r3, #32]
 800e87c:	e03d      	b.n	800e8fa <JPEG_GetDecodeColorConvertFunc+0x16e>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800e87e:	4b42      	ldr	r3, [pc, #264]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d119      	bne.n	800e8ba <JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	4a43      	ldr	r2, [pc, #268]	@ (800e998 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 800e88a:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800e88c:	4b3e      	ldr	r3, [pc, #248]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f003 0307 	and.w	r3, r3, #7
 800e894:	4a3c      	ldr	r2, [pc, #240]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e896:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 800e898:	4b3b      	ldr	r3, [pc, #236]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e89a:	695b      	ldr	r3, [r3, #20]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d005      	beq.n	800e8ac <JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800e8a0:	4b39      	ldr	r3, [pc, #228]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8a2:	695b      	ldr	r3, [r3, #20]
 800e8a4:	f1c3 0308 	rsb	r3, r3, #8
 800e8a8:	4a37      	ldr	r2, [pc, #220]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8aa:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 800e8ac:	4b36      	ldr	r3, [pc, #216]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8ae:	2208      	movs	r2, #8
 800e8b0:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800e8b2:	4b35      	ldr	r3, [pc, #212]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8b4:	2208      	movs	r2, #8
 800e8b6:	621a      	str	r2, [r3, #32]
 800e8b8:	e01f      	b.n	800e8fa <JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800e8ba:	4b33      	ldr	r3, [pc, #204]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b30      	cmp	r3, #48	@ 0x30
 800e8c0:	d119      	bne.n	800e8f6 <JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	4a35      	ldr	r2, [pc, #212]	@ (800e99c <JPEG_GetDecodeColorConvertFunc+0x210>)
 800e8c6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800e8c8:	4b2f      	ldr	r3, [pc, #188]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8ca:	689b      	ldr	r3, [r3, #8]
 800e8cc:	f003 0307 	and.w	r3, r3, #7
 800e8d0:	4a2d      	ldr	r2, [pc, #180]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8d2:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 800e8d4:	4b2c      	ldr	r3, [pc, #176]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8d6:	695b      	ldr	r3, [r3, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d005      	beq.n	800e8e8 <JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800e8dc:	4b2a      	ldr	r3, [pc, #168]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	f1c3 0308 	rsb	r3, r3, #8
 800e8e4:	4a28      	ldr	r2, [pc, #160]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8e6:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 800e8e8:	4b27      	ldr	r3, [pc, #156]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800e8ee:	4b26      	ldr	r3, [pc, #152]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	621a      	str	r2, [r3, #32]
 800e8f4:	e001      	b.n	800e8fa <JPEG_GetDecodeColorConvertFunc+0x16e>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e040      	b.n	800e97c <JPEG_GetDecodeColorConvertFunc+0x1f0>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800e8fa:	4b23      	ldr	r3, [pc, #140]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e8fc:	689a      	ldr	r2, [r3, #8]
 800e8fe:	4b22      	ldr	r3, [pc, #136]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	4413      	add	r3, r2
 800e904:	4a20      	ldr	r2, [pc, #128]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e906:	6253      	str	r3, [r2, #36]	@ 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800e908:	4b1f      	ldr	r3, [pc, #124]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	005b      	lsls	r3, r3, #1
 800e90e:	4a1e      	ldr	r2, [pc, #120]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e910:	6293      	str	r3, [r2, #40]	@ 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800e912:	4b1d      	ldr	r3, [pc, #116]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e914:	689a      	ldr	r2, [r3, #8]
 800e916:	4b1c      	ldr	r3, [pc, #112]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e918:	69db      	ldr	r3, [r3, #28]
 800e91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e91e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800e920:	4b19      	ldr	r3, [pc, #100]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	4a18      	ldr	r2, [pc, #96]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e926:	69d2      	ldr	r2, [r2, #28]
 800e928:	fbb3 f1f2 	udiv	r1, r3, r2
 800e92c:	fb01 f202 	mul.w	r2, r1, r2
 800e930:	1a9b      	subs	r3, r3, r2
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	3301      	adds	r3, #1
 800e93a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800e93c:	4b12      	ldr	r3, [pc, #72]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e93e:	68da      	ldr	r2, [r3, #12]
 800e940:	4b11      	ldr	r3, [pc, #68]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e942:	6a1b      	ldr	r3, [r3, #32]
 800e944:	fbb2 f3f3 	udiv	r3, r2, r3
 800e948:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800e94a:	4b0f      	ldr	r3, [pc, #60]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	4a0e      	ldr	r2, [pc, #56]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e950:	6a12      	ldr	r2, [r2, #32]
 800e952:	fbb3 f1f2 	udiv	r1, r3, r2
 800e956:	fb01 f202 	mul.w	r2, r1, r2
 800e95a:	1a9b      	subs	r3, r3, r2
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	3301      	adds	r3, #1
 800e964:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	693a      	ldr	r2, [r7, #16]
 800e96a:	fb02 f303 	mul.w	r3, r2, r3
 800e96e:	4a06      	ldr	r2, [pc, #24]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e970:	62d3      	str	r3, [r2, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800e972:	4b05      	ldr	r3, [pc, #20]	@ (800e988 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800e974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	371c      	adds	r7, #28
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	24031754 	.word	0x24031754
 800e98c:	0800dec1 	.word	0x0800dec1
 800e990:	0800e1a9 	.word	0x0800e1a9
 800e994:	0800e3ad 	.word	0x0800e3ad
 800e998:	0800e53d 	.word	0x0800e53d
 800e99c:	0800e635 	.word	0x0800e635

0800e9a0 <memset>:
 800e9a0:	4402      	add	r2, r0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d100      	bne.n	800e9aa <memset+0xa>
 800e9a8:	4770      	bx	lr
 800e9aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e9ae:	e7f9      	b.n	800e9a4 <memset+0x4>

0800e9b0 <__libc_init_array>:
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	4d0d      	ldr	r5, [pc, #52]	@ (800e9e8 <__libc_init_array+0x38>)
 800e9b4:	4c0d      	ldr	r4, [pc, #52]	@ (800e9ec <__libc_init_array+0x3c>)
 800e9b6:	1b64      	subs	r4, r4, r5
 800e9b8:	10a4      	asrs	r4, r4, #2
 800e9ba:	2600      	movs	r6, #0
 800e9bc:	42a6      	cmp	r6, r4
 800e9be:	d109      	bne.n	800e9d4 <__libc_init_array+0x24>
 800e9c0:	4d0b      	ldr	r5, [pc, #44]	@ (800e9f0 <__libc_init_array+0x40>)
 800e9c2:	4c0c      	ldr	r4, [pc, #48]	@ (800e9f4 <__libc_init_array+0x44>)
 800e9c4:	f000 f818 	bl	800e9f8 <_init>
 800e9c8:	1b64      	subs	r4, r4, r5
 800e9ca:	10a4      	asrs	r4, r4, #2
 800e9cc:	2600      	movs	r6, #0
 800e9ce:	42a6      	cmp	r6, r4
 800e9d0:	d105      	bne.n	800e9de <__libc_init_array+0x2e>
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9d8:	4798      	blx	r3
 800e9da:	3601      	adds	r6, #1
 800e9dc:	e7ee      	b.n	800e9bc <__libc_init_array+0xc>
 800e9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9e2:	4798      	blx	r3
 800e9e4:	3601      	adds	r6, #1
 800e9e6:	e7f2      	b.n	800e9ce <__libc_init_array+0x1e>
 800e9e8:	0800f098 	.word	0x0800f098
 800e9ec:	0800f098 	.word	0x0800f098
 800e9f0:	0800f098 	.word	0x0800f098
 800e9f4:	0800f09c 	.word	0x0800f09c

0800e9f8 <_init>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	bf00      	nop
 800e9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fe:	bc08      	pop	{r3}
 800ea00:	469e      	mov	lr, r3
 800ea02:	4770      	bx	lr

0800ea04 <_fini>:
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea06:	bf00      	nop
 800ea08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0a:	bc08      	pop	{r3}
 800ea0c:	469e      	mov	lr, r3
 800ea0e:	4770      	bx	lr
